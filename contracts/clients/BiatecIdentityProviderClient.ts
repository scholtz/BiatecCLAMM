/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BiatecIdentityProvider","desc":"","methods":[{"name":"createApplication","desc":"Initial setup","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","desc":"Biatec deploys single identity provider smart contract","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec amm provider"},{"name":"governor","type":"address"},{"name":"verificationSetter","type":"address"},{"name":"engagementSetter","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateApplication","desc":"addressUdpater from global biatec configuration is allowed to update application","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"newVersion","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"selfRegistration","args":[{"name":"user","type":"address"},{"name":"info","type":"(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)","struct":"IdentityInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setInfo","args":[{"name":"user","type":"address"},{"name":"info","type":"(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)","struct":"IdentityInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendOnlineKeyRegistration","desc":"addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"votePK","type":"byte[]"},{"name":"selectionPK","type":"byte[]"},{"name":"stateProofPK","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getUser","desc":"Returns user information - fee multiplier, verification class, engagement class ..","readonly":true,"args":[{"name":"user","type":"address","desc":"Get info for specific user address"},{"name":"v","type":"uint8","desc":"Version of the data structure to return"}],"returns":{"type":"(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)","struct":"UserInfoV1"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawExcessAssets","desc":"If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec config app. Only addressExecutiveFee is allowed to execute this method."},{"name":"asset","type":"uint64","desc":"Asset to withdraw. If native token, then zero"},{"name":"amount","type":"uint64","desc":"Amount of the asset to be withdrawn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"IdentityInfo":[{"name":"verificationStatus","type":"uint64"},{"name":"verificationClass","type":"uint64"},{"name":"isCompany","type":"bool"},{"name":"personUuid","type":"string"},{"name":"legalEntityUuid","type":"string"},{"name":"biatecEngagementPoints","type":"uint64"},{"name":"biatecEngagementRank","type":"uint64"},{"name":"avmEngagementPoints","type":"uint64"},{"name":"avmEngagementRank","type":"uint64"},{"name":"tradingEngagementPoints","type":"uint64"},{"name":"tradingEngagementRank","type":"uint64"},{"name":"isLocked","type":"bool"},{"name":"kycExpiration","type":"uint64"},{"name":"investorForExpiration","type":"uint64"},{"name":"isProfessionalInvestor","type":"bool"}],"UserInfoV1":[{"name":"version","type":"uint8"},{"name":"verificationStatus","type":"uint64"},{"name":"verificationClass","type":"uint64"},{"name":"biatecEngagementPoints","type":"uint64"},{"name":"biatecEngagementRank","type":"uint64"},{"name":"avmEngagementPoints","type":"uint64"},{"name":"avmEngagementRank","type":"uint64"},{"name":"tradingEngagementPoints","type":"uint64"},{"name":"tradingEngagementRank","type":"uint64"},{"name":"feeMultiplier","type":"uint256"},{"name":"base","type":"uint256"},{"name":"isLocked","type":"bool"},{"name":"kycExpiration","type":"uint64"},{"name":"investorForExpiration","type":"uint64"},{"name":"isProfessionalInvestor","type":"bool"}]},"state":{"schema":{"global":{"bytes":4,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"governor":{"key":"Zw==","keyType":"AVMBytes","valueType":"address"},"verificationSetter":{"key":"dg==","keyType":"AVMBytes","valueType":"address"},"engagementSetter":{"key":"ZQ==","keyType":"AVMBytes","valueType":"address"},"appBiatecConfigProvider":{"key":"Qg==","keyType":"AVMBytes","valueType":"uint64"},"version":{"key":"c2N2ZXI=","keyType":"AVMBytes","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"identities":{"keyType":"address","valueType":"IdentityInfo","prefix":"i"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[0]},{"teal":2,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1,2,3,4,5,6,7,8,9,10,11,12]},{"teal":3,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169]},{"teal":15,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[170,171]},{"teal":16,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[172]},{"teal":17,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[173,174]},{"teal":18,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[175]},{"teal":19,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[176,177]},{"teal":20,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[178]},{"teal":21,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204]},{"teal":25,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[205]},{"teal":30,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[206,207,208]},{"teal":31,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[209]},{"teal":32,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[210]},{"teal":38,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[211,212,213]},{"teal":42,"source":"contracts\\BiatecIdentityProvider.algo.ts:159","pc":[214,215]},{"teal":43,"source":"contracts\\BiatecIdentityProvider.algo.ts:159","pc":[216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238]},{"teal":44,"source":"contracts\\BiatecIdentityProvider.algo.ts:159","pc":[239]},{"teal":45,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[240]},{"teal":50,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[241,242,243]},{"teal":51,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[244]},{"teal":52,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[245]},{"teal":53,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[246]},{"teal":54,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[247]},{"teal":57,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","errorMessage":"argument 0 (engagementSetter) for bootstrap must be a address","pc":[248]},{"teal":60,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[249,250,251]},{"teal":61,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[252]},{"teal":62,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[253]},{"teal":63,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[254]},{"teal":64,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[255]},{"teal":67,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","errorMessage":"argument 1 (verificationSetter) for bootstrap must be a address","pc":[256]},{"teal":70,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[257,258,259]},{"teal":71,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[260]},{"teal":72,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[261]},{"teal":73,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[262]},{"teal":74,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[263]},{"teal":77,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","errorMessage":"argument 2 (governor) for bootstrap must be a address","pc":[264]},{"teal":80,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","pc":[265,266,267]},{"teal":81,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","pc":[268]},{"teal":84,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[269,270,271]},{"teal":85,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[272]},{"teal":86,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[273]},{"teal":93,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[274,275,276]},{"teal":96,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[277]},{"teal":100,"source":"contracts\\BiatecIdentityProvider.algo.ts:172","pc":[278,279]},{"teal":101,"source":"contracts\\BiatecIdentityProvider.algo.ts:172","pc":[280,281,282]},{"teal":102,"source":"contracts\\BiatecIdentityProvider.algo.ts:172","pc":[283,284]},{"teal":103,"source":"contracts\\BiatecIdentityProvider.algo.ts:172","pc":[285]},{"teal":104,"source":"contracts\\BiatecIdentityProvider.algo.ts:172","pc":[286]},{"teal":107,"source":"contracts\\BiatecIdentityProvider.algo.ts:172","errorMessage":"Only creator of the app can set it up","pc":[287]},{"teal":111,"source":"contracts\\BiatecIdentityProvider.algo.ts:173","pc":[288]},{"teal":112,"source":"contracts\\BiatecIdentityProvider.algo.ts:173","pc":[289,290]},{"teal":113,"source":"contracts\\BiatecIdentityProvider.algo.ts:173","pc":[291]},{"teal":117,"source":"contracts\\BiatecIdentityProvider.algo.ts:174","pc":[292,293,294]},{"teal":118,"source":"contracts\\BiatecIdentityProvider.algo.ts:174","pc":[295,296]},{"teal":119,"source":"contracts\\BiatecIdentityProvider.algo.ts:174","pc":[297]},{"teal":123,"source":"contracts\\BiatecIdentityProvider.algo.ts:175","pc":[298,299,300]},{"teal":124,"source":"contracts\\BiatecIdentityProvider.algo.ts:175","pc":[301,302]},{"teal":125,"source":"contracts\\BiatecIdentityProvider.algo.ts:175","pc":[303]},{"teal":129,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[304,305]},{"teal":130,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[306,307]},{"teal":131,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[308]},{"teal":135,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[309,310]},{"teal":136,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[311,312]},{"teal":137,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[313]},{"teal":140,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[314]},{"teal":141,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[315,316]},{"teal":145,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","pc":[317,318]},{"teal":146,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","pc":[319]},{"teal":147,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","pc":[320]},{"teal":150,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","errorMessage":"ERR_PAUSED","pc":[321]},{"teal":151,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[322]},{"teal":156,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[323,324,325]},{"teal":157,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[326,327,328]},{"teal":160,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[329,330,331]},{"teal":161,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[332]},{"teal":164,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[333,334,335]},{"teal":165,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[336]},{"teal":166,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[337]},{"teal":172,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[338,339,340]},{"teal":175,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[341]},{"teal":176,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[342]},{"teal":180,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[343,344]},{"teal":181,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[345]},{"teal":182,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[346]},{"teal":183,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[347]},{"teal":186,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","errorMessage":"Configuration app does not match","pc":[348]},{"teal":190,"source":"contracts\\BiatecIdentityProvider.algo.ts:187","pc":[349,350]},{"teal":191,"source":"contracts\\BiatecIdentityProvider.algo.ts:187","pc":[351,352,353]},{"teal":192,"source":"contracts\\BiatecIdentityProvider.algo.ts:187","pc":[354]},{"teal":195,"source":"contracts\\BiatecIdentityProvider.algo.ts:187","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('u')","pc":[355]},{"teal":196,"source":"contracts\\BiatecIdentityProvider.algo.ts:187","pc":[356,357]},{"teal":200,"source":"contracts\\BiatecIdentityProvider.algo.ts:188","pc":[358,359]},{"teal":201,"source":"contracts\\BiatecIdentityProvider.algo.ts:188","pc":[360,361]},{"teal":202,"source":"contracts\\BiatecIdentityProvider.algo.ts:188","pc":[362]},{"teal":205,"source":"contracts\\BiatecIdentityProvider.algo.ts:188","errorMessage":"Only addressUdpater setup in the config can update application","pc":[363]},{"teal":209,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[364,365]},{"teal":210,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[366,367]},{"teal":211,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[368]},{"teal":214,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[369]},{"teal":215,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[370,371]},{"teal":219,"source":"contracts\\BiatecIdentityProvider.algo.ts:190","pc":[372,373]},{"teal":220,"source":"contracts\\BiatecIdentityProvider.algo.ts:190","pc":[374]},{"teal":221,"source":"contracts\\BiatecIdentityProvider.algo.ts:190","pc":[375]},{"teal":224,"source":"contracts\\BiatecIdentityProvider.algo.ts:190","errorMessage":"ERR_PAUSED","pc":[376]},{"teal":228,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[377,378]},{"teal":229,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[379,380]},{"teal":230,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[381]},{"teal":231,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[382]},{"teal":236,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[383,384,385]},{"teal":239,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[386,387,388]},{"teal":240,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[389]},{"teal":241,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[390]},{"teal":242,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[391]},{"teal":243,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[392]},{"teal":246,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","errorMessage":"argument 1 (user) for selfRegistration must be a address","pc":[393]},{"teal":249,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[394,395,396]},{"teal":250,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[397]},{"teal":251,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[398]},{"teal":255,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[399,400,401]},{"teal":259,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[402]},{"teal":260,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[403,404]},{"teal":261,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[405]},{"teal":262,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[406]},{"teal":263,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[407]},{"teal":264,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[408]},{"teal":265,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[409]},{"teal":268,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","errorMessage":"Self registration cannot be executed if address is already registered","pc":[410]},{"teal":272,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","pc":[411,412]},{"teal":273,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","pc":[413,414]},{"teal":274,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","pc":[415,416]},{"teal":275,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","pc":[417,418,419]},{"teal":276,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","pc":[420]},{"teal":277,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","pc":[421]},{"teal":278,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","pc":[422]},{"teal":281,"source":"contracts\\BiatecIdentityProvider.algo.ts:198","errorMessage":"Verification status must be empty","pc":[423]},{"teal":285,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[424,425]},{"teal":286,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[426,427]},{"teal":287,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[428,429]},{"teal":288,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[430,431,432]},{"teal":289,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[433]},{"teal":290,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[434]},{"teal":291,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[435]},{"teal":294,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","errorMessage":"verificationClass must equal to 0","pc":[436]},{"teal":301,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[437,438]},{"teal":302,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[439,440]},{"teal":303,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[441,442]},{"teal":304,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[443,444]},{"teal":305,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[445,446]},{"teal":306,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[447,448]},{"teal":307,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[449]},{"teal":308,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[450]},{"teal":309,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[451,452]},{"teal":310,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[453]},{"teal":311,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[454]},{"teal":312,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[455]},{"teal":313,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[456]},{"teal":314,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[457]},{"teal":315,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[458]},{"teal":316,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[459]},{"teal":317,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[460,461,462]},{"teal":318,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[463,464]},{"teal":319,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[465]},{"teal":322,"source":"contracts\\BiatecIdentityProvider.algo.ts:203","errorMessage":"personUUID must equal to 00000000-0000-0000-0000-000000000000","pc":[466]},{"teal":329,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[467,468]},{"teal":330,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[469,470]},{"teal":331,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[471,472]},{"teal":332,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[473,474]},{"teal":333,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[475,476]},{"teal":334,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[477,478]},{"teal":335,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[479]},{"teal":336,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[480]},{"teal":337,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[481,482]},{"teal":338,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[483]},{"teal":339,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[484]},{"teal":340,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[485]},{"teal":341,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[486]},{"teal":342,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[487]},{"teal":343,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[488]},{"teal":344,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[489]},{"teal":345,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[490,491,492]},{"teal":346,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[493,494]},{"teal":347,"source":"contracts\\BiatecIdentityProvider.algo.ts:209","pc":[495]},{"teal":350,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","errorMessage":"legalEntityUUID must equal to 00000000-0000-0000-0000-000000000000","pc":[496]},{"teal":354,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","pc":[497,498]},{"teal":355,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","pc":[499,500]},{"teal":356,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","pc":[501,502]},{"teal":357,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","pc":[503,504,505]},{"teal":358,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","pc":[506]},{"teal":359,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","pc":[507]},{"teal":360,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","pc":[508]},{"teal":363,"source":"contracts\\BiatecIdentityProvider.algo.ts:213","errorMessage":"biatecEngagementPoints must equal to 0","pc":[509]},{"teal":367,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","pc":[510,511]},{"teal":368,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","pc":[512,513]},{"teal":369,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","pc":[514,515]},{"teal":370,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","pc":[516,517,518]},{"teal":371,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","pc":[519]},{"teal":372,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","pc":[520]},{"teal":373,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","pc":[521]},{"teal":376,"source":"contracts\\BiatecIdentityProvider.algo.ts:215","errorMessage":"biatecEngagementRank must equal to 0","pc":[522]},{"teal":380,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","pc":[523,524]},{"teal":381,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","pc":[525,526]},{"teal":382,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","pc":[527,528]},{"teal":383,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","pc":[529,530,531]},{"teal":384,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","pc":[532]},{"teal":385,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","pc":[533]},{"teal":386,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","pc":[534]},{"teal":389,"source":"contracts\\BiatecIdentityProvider.algo.ts:217","errorMessage":"avmEngagementPoints must equal to 0","pc":[535]},{"teal":393,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","pc":[536,537]},{"teal":394,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","pc":[538,539]},{"teal":395,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","pc":[540,541]},{"teal":396,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","pc":[542,543,544]},{"teal":397,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","pc":[545]},{"teal":398,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","pc":[546]},{"teal":399,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","pc":[547]},{"teal":402,"source":"contracts\\BiatecIdentityProvider.algo.ts:219","errorMessage":"avmEngagementRank must equal to 0","pc":[548]},{"teal":406,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","pc":[549,550]},{"teal":407,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","pc":[551,552]},{"teal":408,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","pc":[553,554]},{"teal":409,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","pc":[555,556,557]},{"teal":410,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","pc":[558]},{"teal":411,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","pc":[559]},{"teal":412,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","pc":[560]},{"teal":415,"source":"contracts\\BiatecIdentityProvider.algo.ts:221","errorMessage":"tradingEngagementPoints must equal to 0","pc":[561]},{"teal":419,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","pc":[562,563]},{"teal":420,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","pc":[564,565]},{"teal":421,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","pc":[566,567]},{"teal":422,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","pc":[568,569,570]},{"teal":423,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","pc":[571]},{"teal":424,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","pc":[572]},{"teal":425,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","pc":[573]},{"teal":428,"source":"contracts\\BiatecIdentityProvider.algo.ts:223","errorMessage":"tradingEngagementRank must equal to 0","pc":[574]},{"teal":432,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","pc":[575,576]},{"teal":433,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","pc":[577,578]},{"teal":434,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","pc":[579,580]},{"teal":435,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","pc":[581,582]},{"teal":436,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","pc":[583]},{"teal":437,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","pc":[584]},{"teal":438,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","pc":[585]},{"teal":441,"source":"contracts\\BiatecIdentityProvider.algo.ts:225","errorMessage":"isLocked must equal to false","pc":[586]},{"teal":445,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[587,588]},{"teal":446,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[589,590]},{"teal":447,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[591,592]},{"teal":448,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[593,594,595]},{"teal":449,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[596]},{"teal":450,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[597]},{"teal":451,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[598]},{"teal":454,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","errorMessage":"kycExpiration must equal to 0","pc":[599]},{"teal":458,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[600,601]},{"teal":459,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[602,603]},{"teal":460,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[604,605]},{"teal":461,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[606,607,608]},{"teal":462,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[609]},{"teal":463,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[610]},{"teal":464,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[611]},{"teal":467,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","errorMessage":"investorForExpiration must equal to 0","pc":[612]},{"teal":471,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","pc":[613,614]},{"teal":472,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","pc":[615,616]},{"teal":473,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","pc":[617,618]},{"teal":474,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","pc":[619,620]},{"teal":475,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","pc":[621]},{"teal":476,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","pc":[622]},{"teal":477,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","pc":[623]},{"teal":480,"source":"contracts\\BiatecIdentityProvider.algo.ts:231","errorMessage":"isProfessionalInvestor must equal to false","pc":[624]},{"teal":484,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[625]},{"teal":485,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[626,627]},{"teal":486,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[628]},{"teal":487,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[629]},{"teal":488,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[630]},{"teal":489,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[631]},{"teal":490,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[632,633]},{"teal":491,"source":"contracts\\BiatecIdentityProvider.algo.ts:233","pc":[634]},{"teal":492,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","pc":[635]},{"teal":497,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[636,637,638]},{"teal":500,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[639,640,641]},{"teal":501,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[642]},{"teal":502,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[643]},{"teal":503,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[644]},{"teal":504,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[645]},{"teal":507,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","errorMessage":"argument 1 (user) for setInfo must be a address","pc":[646]},{"teal":510,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[647,648,649]},{"teal":511,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[650]},{"teal":512,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[651]},{"teal":516,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[652,653,654]},{"teal":520,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[655,656]},{"teal":521,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[657,658]},{"teal":522,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[659]},{"teal":523,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[660]},{"teal":524,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[661]},{"teal":528,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[662]},{"teal":529,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[663,664]},{"teal":530,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[665]},{"teal":531,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[666]},{"teal":532,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[667]},{"teal":533,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[668]},{"teal":534,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[669,670]},{"teal":535,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[671]},{"teal":536,"source":"contracts\\BiatecIdentityProvider.algo.ts:236","pc":[672]},{"teal":541,"source":"contracts\\BiatecIdentityProvider.algo.ts:253","pc":[673,674,675]},{"teal":542,"source":"contracts\\BiatecIdentityProvider.algo.ts:253","pc":[676]},{"teal":545,"source":"contracts\\BiatecIdentityProvider.algo.ts:252","pc":[677,678,679]},{"teal":546,"source":"contracts\\BiatecIdentityProvider.algo.ts:252","pc":[680]},{"teal":549,"source":"contracts\\BiatecIdentityProvider.algo.ts:251","pc":[681,682,683]},{"teal":550,"source":"contracts\\BiatecIdentityProvider.algo.ts:251","pc":[684]},{"teal":553,"source":"contracts\\BiatecIdentityProvider.algo.ts:250","pc":[685,686,687]},{"teal":554,"source":"contracts\\BiatecIdentityProvider.algo.ts:250","pc":[688,689,690]},{"teal":557,"source":"contracts\\BiatecIdentityProvider.algo.ts:249","pc":[691,692,693]},{"teal":558,"source":"contracts\\BiatecIdentityProvider.algo.ts:249","pc":[694,695,696]},{"teal":561,"source":"contracts\\BiatecIdentityProvider.algo.ts:248","pc":[697,698,699]},{"teal":562,"source":"contracts\\BiatecIdentityProvider.algo.ts:248","pc":[700,701,702]},{"teal":565,"source":"contracts\\BiatecIdentityProvider.algo.ts:247","pc":[703,704,705]},{"teal":566,"source":"contracts\\BiatecIdentityProvider.algo.ts:247","pc":[706]},{"teal":569,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[707,708,709]},{"teal":570,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[710]},{"teal":571,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[711]},{"teal":579,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[712,713,714]},{"teal":582,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[715]},{"teal":583,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[716]},{"teal":587,"source":"contracts\\BiatecIdentityProvider.algo.ts:255","pc":[717,718]},{"teal":588,"source":"contracts\\BiatecIdentityProvider.algo.ts:255","pc":[719]},{"teal":589,"source":"contracts\\BiatecIdentityProvider.algo.ts:255","pc":[720]},{"teal":590,"source":"contracts\\BiatecIdentityProvider.algo.ts:255","pc":[721]},{"teal":593,"source":"contracts\\BiatecIdentityProvider.algo.ts:255","errorMessage":"Configuration app does not match","pc":[722]},{"teal":597,"source":"contracts\\BiatecIdentityProvider.algo.ts:256","pc":[723,724]},{"teal":598,"source":"contracts\\BiatecIdentityProvider.algo.ts:256","pc":[725,726]},{"teal":599,"source":"contracts\\BiatecIdentityProvider.algo.ts:256","pc":[727]},{"teal":602,"source":"contracts\\BiatecIdentityProvider.algo.ts:256","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","pc":[728]},{"teal":603,"source":"contracts\\BiatecIdentityProvider.algo.ts:256","pc":[729,730]},{"teal":610,"source":"contracts\\BiatecIdentityProvider.algo.ts:258","pc":[731,732]},{"teal":611,"source":"contracts\\BiatecIdentityProvider.algo.ts:258","pc":[733,734]},{"teal":612,"source":"contracts\\BiatecIdentityProvider.algo.ts:258","pc":[735]},{"teal":615,"source":"contracts\\BiatecIdentityProvider.algo.ts:257","errorMessage":"Only fee executor setup in the config can take the collected fees","pc":[736]},{"teal":619,"source":"contracts\\BiatecIdentityProvider.algo.ts:261","pc":[737,738]},{"teal":620,"source":"contracts\\BiatecIdentityProvider.algo.ts:261","pc":[739,740]},{"teal":621,"source":"contracts\\BiatecIdentityProvider.algo.ts:261","pc":[741]},{"teal":624,"source":"contracts\\BiatecIdentityProvider.algo.ts:261","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[742]},{"teal":625,"source":"contracts\\BiatecIdentityProvider.algo.ts:261","pc":[743,744]},{"teal":629,"source":"contracts\\BiatecIdentityProvider.algo.ts:262","pc":[745,746]},{"teal":630,"source":"contracts\\BiatecIdentityProvider.algo.ts:262","pc":[747]},{"teal":631,"source":"contracts\\BiatecIdentityProvider.algo.ts:262","pc":[748]},{"teal":634,"source":"contracts\\BiatecIdentityProvider.algo.ts:262","errorMessage":"ERR_PAUSED","pc":[749]},{"teal":646,"source":"contracts\\BiatecIdentityProvider.algo.ts:263","pc":[750]},{"teal":647,"source":"contracts\\BiatecIdentityProvider.algo.ts:263","pc":[751]},{"teal":648,"source":"contracts\\BiatecIdentityProvider.algo.ts:263","pc":[752,753]},{"teal":652,"source":"contracts\\BiatecIdentityProvider.algo.ts:264","pc":[754,755]},{"teal":653,"source":"contracts\\BiatecIdentityProvider.algo.ts:264","pc":[756,757]},{"teal":657,"source":"contracts\\BiatecIdentityProvider.algo.ts:265","pc":[758,759]},{"teal":658,"source":"contracts\\BiatecIdentityProvider.algo.ts:265","pc":[760,761]},{"teal":662,"source":"contracts\\BiatecIdentityProvider.algo.ts:266","pc":[762,763]},{"teal":663,"source":"contracts\\BiatecIdentityProvider.algo.ts:266","pc":[764,765]},{"teal":667,"source":"contracts\\BiatecIdentityProvider.algo.ts:267","pc":[766,767]},{"teal":668,"source":"contracts\\BiatecIdentityProvider.algo.ts:267","pc":[768,769]},{"teal":672,"source":"contracts\\BiatecIdentityProvider.algo.ts:268","pc":[770,771]},{"teal":673,"source":"contracts\\BiatecIdentityProvider.algo.ts:268","pc":[772,773]},{"teal":677,"source":"contracts\\BiatecIdentityProvider.algo.ts:269","pc":[774,775]},{"teal":678,"source":"contracts\\BiatecIdentityProvider.algo.ts:269","pc":[776,777]},{"teal":682,"source":"contracts\\BiatecIdentityProvider.algo.ts:270","pc":[778]},{"teal":683,"source":"contracts\\BiatecIdentityProvider.algo.ts:270","pc":[779,780]},{"teal":686,"source":"contracts\\BiatecIdentityProvider.algo.ts:263","pc":[781]},{"teal":687,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[782]},{"teal":692,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[783,784]},{"teal":695,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[785,786,787]},{"teal":696,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[788]},{"teal":697,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[789]},{"teal":698,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[790]},{"teal":699,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[791]},{"teal":702,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","errorMessage":"argument 0 (v) for getUser must be a uint8","pc":[792]},{"teal":703,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[793]},{"teal":706,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[794,795,796]},{"teal":707,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[797]},{"teal":708,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[798]},{"teal":709,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[799]},{"teal":710,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[800]},{"teal":713,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","errorMessage":"argument 1 (user) for getUser must be a address","pc":[801]},{"teal":716,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[802,803,804]},{"teal":717,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[805]},{"teal":718,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[806]},{"teal":719,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[807]},{"teal":720,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[808]},{"teal":729,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[809,810,811]},{"teal":732,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[812]},{"teal":733,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[813,814]},{"teal":737,"source":"contracts\\BiatecIdentityProvider.algo.ts:282","pc":[815,816]},{"teal":738,"source":"contracts\\BiatecIdentityProvider.algo.ts:282","pc":[817]},{"teal":739,"source":"contracts\\BiatecIdentityProvider.algo.ts:282","pc":[818]},{"teal":742,"source":"contracts\\BiatecIdentityProvider.algo.ts:282","errorMessage":"Currently supported version of the data structure is '1'","pc":[819]},{"teal":747,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[820]},{"teal":748,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[821,822]},{"teal":749,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[823]},{"teal":750,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[824]},{"teal":751,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[825]},{"teal":752,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[826]},{"teal":753,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[827]},{"teal":754,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[828,829,830]},{"teal":775,"source":"contracts\\BiatecIdentityProvider.algo.ts:285","pc":[831,832]},{"teal":776,"source":"contracts\\BiatecIdentityProvider.algo.ts:285","pc":[833]},{"teal":777,"source":"contracts\\BiatecIdentityProvider.algo.ts:285","pc":[834,835,836]},{"teal":778,"source":"contracts\\BiatecIdentityProvider.algo.ts:290","pc":[837]},{"teal":779,"source":"contracts\\BiatecIdentityProvider.algo.ts:290","pc":[838]},{"teal":780,"source":"contracts\\BiatecIdentityProvider.algo.ts:289","pc":[839]},{"teal":781,"source":"contracts\\BiatecIdentityProvider.algo.ts:289","pc":[840]},{"teal":782,"source":"contracts\\BiatecIdentityProvider.algo.ts:291","pc":[841]},{"teal":783,"source":"contracts\\BiatecIdentityProvider.algo.ts:291","pc":[842]},{"teal":784,"source":"contracts\\BiatecIdentityProvider.algo.ts:292","pc":[843]},{"teal":785,"source":"contracts\\BiatecIdentityProvider.algo.ts:292","pc":[844]},{"teal":786,"source":"contracts\\BiatecIdentityProvider.algo.ts:293","pc":[845]},{"teal":787,"source":"contracts\\BiatecIdentityProvider.algo.ts:293","pc":[846]},{"teal":788,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[847]},{"teal":789,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[848]},{"teal":790,"source":"contracts\\BiatecIdentityProvider.algo.ts:295","pc":[849]},{"teal":791,"source":"contracts\\BiatecIdentityProvider.algo.ts:295","pc":[850]},{"teal":792,"source":"contracts\\BiatecIdentityProvider.algo.ts:296","pc":[851]},{"teal":793,"source":"contracts\\BiatecIdentityProvider.algo.ts:296","pc":[852]},{"teal":794,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[853,854]},{"teal":795,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[855]},{"teal":796,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[856]},{"teal":797,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[857,858]},{"teal":798,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[859]},{"teal":801,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","errorMessage":"(2 * SCALE) as uint256 overflowed 256 bits","pc":[860]},{"teal":802,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[861,862]},{"teal":803,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[863]},{"teal":804,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[864]},{"teal":805,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[865]},{"teal":806,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[866]},{"teal":807,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[867]},{"teal":808,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[868]},{"teal":809,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[869]},{"teal":810,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[870]},{"teal":811,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[871]},{"teal":812,"source":"contracts\\BiatecIdentityProvider.algo.ts:286","pc":[872,873]},{"teal":813,"source":"contracts\\BiatecIdentityProvider.algo.ts:286","pc":[874]},{"teal":814,"source":"contracts\\BiatecIdentityProvider.algo.ts:288","pc":[875,876]},{"teal":815,"source":"contracts\\BiatecIdentityProvider.algo.ts:288","pc":[877]},{"teal":816,"source":"contracts\\BiatecIdentityProvider.algo.ts:288","pc":[878]},{"teal":817,"source":"contracts\\BiatecIdentityProvider.algo.ts:288","pc":[879]},{"teal":818,"source":"contracts\\BiatecIdentityProvider.algo.ts:297","pc":[880]},{"teal":819,"source":"contracts\\BiatecIdentityProvider.algo.ts:297","pc":[881]},{"teal":820,"source":"contracts\\BiatecIdentityProvider.algo.ts:297","pc":[882]},{"teal":821,"source":"contracts\\BiatecIdentityProvider.algo.ts:298","pc":[883]},{"teal":822,"source":"contracts\\BiatecIdentityProvider.algo.ts:298","pc":[884]},{"teal":823,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[885,886]},{"teal":824,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[887]},{"teal":825,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[888]},{"teal":826,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[889]},{"teal":827,"source":"contracts\\BiatecIdentityProvider.algo.ts:284","pc":[890]},{"teal":828,"source":"contracts\\BiatecIdentityProvider.algo.ts:284","pc":[891,892]},{"teal":832,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[893,894]},{"teal":833,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[895,896,897]},{"teal":838,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[898]},{"teal":839,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[899,900]},{"teal":840,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[901]},{"teal":841,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[902,903]},{"teal":861,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[904,905]},{"teal":862,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[906]},{"teal":863,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[907,908,909]},{"teal":864,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[910,911]},{"teal":865,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[912]},{"teal":868,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[913]},{"teal":869,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[914,915]},{"teal":870,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[916,917]},{"teal":871,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[918,919,920]},{"teal":872,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[921]},{"teal":873,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[922]},{"teal":874,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[923]},{"teal":875,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[924,925]},{"teal":876,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[926]},{"teal":879,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[927]},{"teal":880,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[928,929]},{"teal":881,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[930,931]},{"teal":882,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[932,933,934]},{"teal":883,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[935]},{"teal":884,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[936]},{"teal":885,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[937]},{"teal":886,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[938,939]},{"teal":887,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[940]},{"teal":890,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[941]},{"teal":891,"source":"contracts\\BiatecIdentityProvider.algo.ts:312","pc":[942,943]},{"teal":892,"source":"contracts\\BiatecIdentityProvider.algo.ts:312","pc":[944,945]},{"teal":893,"source":"contracts\\BiatecIdentityProvider.algo.ts:312","pc":[946,947,948]},{"teal":894,"source":"contracts\\BiatecIdentityProvider.algo.ts:312","pc":[949]},{"teal":895,"source":"contracts\\BiatecIdentityProvider.algo.ts:312","pc":[950]},{"teal":896,"source":"contracts\\BiatecIdentityProvider.algo.ts:312","pc":[951]},{"teal":897,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[952,953]},{"teal":898,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[954]},{"teal":901,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[955]},{"teal":902,"source":"contracts\\BiatecIdentityProvider.algo.ts:313","pc":[956,957]},{"teal":903,"source":"contracts\\BiatecIdentityProvider.algo.ts:313","pc":[958,959]},{"teal":904,"source":"contracts\\BiatecIdentityProvider.algo.ts:313","pc":[960,961,962]},{"teal":905,"source":"contracts\\BiatecIdentityProvider.algo.ts:313","pc":[963]},{"teal":906,"source":"contracts\\BiatecIdentityProvider.algo.ts:313","pc":[964]},{"teal":907,"source":"contracts\\BiatecIdentityProvider.algo.ts:313","pc":[965]},{"teal":908,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[966,967]},{"teal":909,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[968]},{"teal":912,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[969]},{"teal":913,"source":"contracts\\BiatecIdentityProvider.algo.ts:314","pc":[970,971]},{"teal":914,"source":"contracts\\BiatecIdentityProvider.algo.ts:314","pc":[972,973]},{"teal":915,"source":"contracts\\BiatecIdentityProvider.algo.ts:314","pc":[974,975,976]},{"teal":916,"source":"contracts\\BiatecIdentityProvider.algo.ts:314","pc":[977]},{"teal":917,"source":"contracts\\BiatecIdentityProvider.algo.ts:314","pc":[978]},{"teal":918,"source":"contracts\\BiatecIdentityProvider.algo.ts:314","pc":[979]},{"teal":919,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[980,981]},{"teal":920,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[982]},{"teal":923,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[983]},{"teal":924,"source":"contracts\\BiatecIdentityProvider.algo.ts:315","pc":[984,985]},{"teal":925,"source":"contracts\\BiatecIdentityProvider.algo.ts:315","pc":[986,987]},{"teal":926,"source":"contracts\\BiatecIdentityProvider.algo.ts:315","pc":[988,989,990]},{"teal":927,"source":"contracts\\BiatecIdentityProvider.algo.ts:315","pc":[991]},{"teal":928,"source":"contracts\\BiatecIdentityProvider.algo.ts:315","pc":[992]},{"teal":929,"source":"contracts\\BiatecIdentityProvider.algo.ts:315","pc":[993]},{"teal":930,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[994,995]},{"teal":931,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[996]},{"teal":934,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[997]},{"teal":935,"source":"contracts\\BiatecIdentityProvider.algo.ts:316","pc":[998,999]},{"teal":936,"source":"contracts\\BiatecIdentityProvider.algo.ts:316","pc":[1000,1001]},{"teal":937,"source":"contracts\\BiatecIdentityProvider.algo.ts:316","pc":[1002,1003,1004]},{"teal":938,"source":"contracts\\BiatecIdentityProvider.algo.ts:316","pc":[1005]},{"teal":939,"source":"contracts\\BiatecIdentityProvider.algo.ts:316","pc":[1006]},{"teal":940,"source":"contracts\\BiatecIdentityProvider.algo.ts:316","pc":[1007]},{"teal":941,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1008,1009]},{"teal":942,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1010]},{"teal":945,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[1011]},{"teal":946,"source":"contracts\\BiatecIdentityProvider.algo.ts:317","pc":[1012,1013]},{"teal":947,"source":"contracts\\BiatecIdentityProvider.algo.ts:317","pc":[1014,1015]},{"teal":948,"source":"contracts\\BiatecIdentityProvider.algo.ts:317","pc":[1016,1017,1018]},{"teal":949,"source":"contracts\\BiatecIdentityProvider.algo.ts:317","pc":[1019]},{"teal":950,"source":"contracts\\BiatecIdentityProvider.algo.ts:317","pc":[1020]},{"teal":951,"source":"contracts\\BiatecIdentityProvider.algo.ts:317","pc":[1021]},{"teal":952,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1022,1023]},{"teal":953,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1024]},{"teal":954,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1025]},{"teal":955,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1026,1027]},{"teal":956,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1028]},{"teal":959,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","errorMessage":"(1 * SCALE) as uint256 overflowed 256 bits","pc":[1029]},{"teal":960,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1030,1031]},{"teal":961,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1032]},{"teal":962,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1033]},{"teal":963,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1034]},{"teal":964,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1035]},{"teal":965,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1036]},{"teal":966,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1037]},{"teal":967,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1038]},{"teal":968,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1039]},{"teal":969,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[1040]},{"teal":970,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[1041,1042]},{"teal":971,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[1043]},{"teal":972,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1044,1045]},{"teal":973,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1046]},{"teal":974,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1047,1048]},{"teal":975,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1049]},{"teal":978,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[1050]},{"teal":979,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1051,1052]},{"teal":980,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1053,1054]},{"teal":981,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1055,1056]},{"teal":982,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1057]},{"teal":983,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1058]},{"teal":984,"source":"contracts\\BiatecIdentityProvider.algo.ts:318","pc":[1059]},{"teal":985,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1060,1061]},{"teal":986,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1062]},{"teal":989,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[1063]},{"teal":990,"source":"contracts\\BiatecIdentityProvider.algo.ts:318","pc":[1064,1065]},{"teal":991,"source":"contracts\\BiatecIdentityProvider.algo.ts:318","pc":[1066,1067]},{"teal":992,"source":"contracts\\BiatecIdentityProvider.algo.ts:318","pc":[1068,1069,1070]},{"teal":993,"source":"contracts\\BiatecIdentityProvider.algo.ts:318","pc":[1071]},{"teal":994,"source":"contracts\\BiatecIdentityProvider.algo.ts:318","pc":[1072]},{"teal":995,"source":"contracts\\BiatecIdentityProvider.algo.ts:318","pc":[1073]},{"teal":996,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1074,1075]},{"teal":997,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1076]},{"teal":1000,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[1077]},{"teal":1001,"source":"contracts\\BiatecIdentityProvider.algo.ts:319","pc":[1078,1079]},{"teal":1002,"source":"contracts\\BiatecIdentityProvider.algo.ts:319","pc":[1080,1081]},{"teal":1003,"source":"contracts\\BiatecIdentityProvider.algo.ts:319","pc":[1082,1083,1084]},{"teal":1004,"source":"contracts\\BiatecIdentityProvider.algo.ts:319","pc":[1085]},{"teal":1005,"source":"contracts\\BiatecIdentityProvider.algo.ts:319","pc":[1086]},{"teal":1006,"source":"contracts\\BiatecIdentityProvider.algo.ts:319","pc":[1087]},{"teal":1007,"source":"contracts\\BiatecIdentityProvider.algo.ts:320","pc":[1088,1089]},{"teal":1008,"source":"contracts\\BiatecIdentityProvider.algo.ts:320","pc":[1090]},{"teal":1009,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1091,1092]},{"teal":1010,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[1093]},{"teal":1013,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","errorMessage":"box value does not exist: this.identities(user).value","pc":[1094]},{"teal":1014,"source":"contracts\\BiatecIdentityProvider.algo.ts:320","pc":[1095,1096]},{"teal":1015,"source":"contracts\\BiatecIdentityProvider.algo.ts:320","pc":[1097,1098]},{"teal":1016,"source":"contracts\\BiatecIdentityProvider.algo.ts:320","pc":[1099,1100]},{"teal":1017,"source":"contracts\\BiatecIdentityProvider.algo.ts:320","pc":[1101]},{"teal":1018,"source":"contracts\\BiatecIdentityProvider.algo.ts:320","pc":[1102]},{"teal":1019,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[1103]},{"teal":1020,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[1104,1105]},{"teal":1024,"source":"contracts\\BiatecIdentityProvider.algo.ts:322","pc":[1106,1107]},{"teal":1028,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[1108,1109]},{"teal":1031,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[1110,1111]},{"teal":1032,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[1112]},{"teal":1037,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1113,1114]},{"teal":1040,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1115,1116,1117]},{"teal":1041,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1118]},{"teal":1044,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1119,1120,1121]},{"teal":1045,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1122]},{"teal":1048,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1123,1124,1125]},{"teal":1049,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1126]},{"teal":1052,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1127,1128,1129]},{"teal":1053,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1130]},{"teal":1054,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1131]},{"teal":1055,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1132]},{"teal":1056,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1133]},{"teal":1057,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1134]},{"teal":1069,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1135,1136,1137]},{"teal":1072,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1138]},{"teal":1073,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1139]},{"teal":1077,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1140,1141]},{"teal":1078,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1142]},{"teal":1079,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1143]},{"teal":1080,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1144]},{"teal":1083,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","errorMessage":"Configuration app does not match","pc":[1145]},{"teal":1087,"source":"contracts\\BiatecIdentityProvider.algo.ts:336","pc":[1146,1147]},{"teal":1088,"source":"contracts\\BiatecIdentityProvider.algo.ts:336","pc":[1148,1149]},{"teal":1089,"source":"contracts\\BiatecIdentityProvider.algo.ts:336","pc":[1150]},{"teal":1092,"source":"contracts\\BiatecIdentityProvider.algo.ts:336","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","pc":[1151]},{"teal":1093,"source":"contracts\\BiatecIdentityProvider.algo.ts:336","pc":[1152,1153]},{"teal":1097,"source":"contracts\\BiatecIdentityProvider.algo.ts:337","pc":[1154,1155]},{"teal":1098,"source":"contracts\\BiatecIdentityProvider.algo.ts:337","pc":[1156,1157]},{"teal":1099,"source":"contracts\\BiatecIdentityProvider.algo.ts:337","pc":[1158]},{"teal":1102,"source":"contracts\\BiatecIdentityProvider.algo.ts:337","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[1159]},{"teal":1103,"source":"contracts\\BiatecIdentityProvider.algo.ts:337","pc":[1160,1161]},{"teal":1107,"source":"contracts\\BiatecIdentityProvider.algo.ts:338","pc":[1162,1163]},{"teal":1108,"source":"contracts\\BiatecIdentityProvider.algo.ts:338","pc":[1164]},{"teal":1109,"source":"contracts\\BiatecIdentityProvider.algo.ts:338","pc":[1165]},{"teal":1112,"source":"contracts\\BiatecIdentityProvider.algo.ts:338","errorMessage":"ERR_PAUSED","pc":[1166]},{"teal":1119,"source":"contracts\\BiatecIdentityProvider.algo.ts:340","pc":[1167,1168]},{"teal":1120,"source":"contracts\\BiatecIdentityProvider.algo.ts:340","pc":[1169,1170]},{"teal":1121,"source":"contracts\\BiatecIdentityProvider.algo.ts:340","pc":[1171]},{"teal":1124,"source":"contracts\\BiatecIdentityProvider.algo.ts:339","errorMessage":"Only fee executor setup in the config can take the collected fees","pc":[1172]},{"teal":1128,"source":"contracts\\BiatecIdentityProvider.algo.ts:344","pc":[1173,1174]},{"teal":1129,"source":"contracts\\BiatecIdentityProvider.algo.ts:344","pc":[1175,1176]},{"teal":1130,"source":"contracts\\BiatecIdentityProvider.algo.ts:344","pc":[1177,1178]},{"teal":1131,"source":"contracts\\BiatecIdentityProvider.algo.ts:344","pc":[1179,1180,1181]},{"teal":1135,"source":"contracts\\BiatecIdentityProvider.algo.ts:346","pc":[1182,1183]},{"teal":1138,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1184,1185]},{"teal":1141,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1186,1187]},{"teal":1142,"source":"contracts\\BiatecIdentityProvider.algo.ts:334","pc":[1188]},{"teal":1151,"source":"contracts\\BiatecIdentityProvider.algo.ts:355","pc":[1189,1190,1191]},{"teal":1156,"source":"contracts\\BiatecIdentityProvider.algo.ts:356","pc":[1192,1193]},{"teal":1157,"source":"contracts\\BiatecIdentityProvider.algo.ts:356","pc":[1194]},{"teal":1158,"source":"contracts\\BiatecIdentityProvider.algo.ts:356","pc":[1195]},{"teal":1159,"source":"contracts\\BiatecIdentityProvider.algo.ts:356","pc":[1196,1197,1198]},{"teal":1168,"source":"contracts\\BiatecIdentityProvider.algo.ts:357","pc":[1199]},{"teal":1169,"source":"contracts\\BiatecIdentityProvider.algo.ts:357","pc":[1200]},{"teal":1170,"source":"contracts\\BiatecIdentityProvider.algo.ts:357","pc":[1201,1202]},{"teal":1174,"source":"contracts\\BiatecIdentityProvider.algo.ts:358","pc":[1203,1204]},{"teal":1175,"source":"contracts\\BiatecIdentityProvider.algo.ts:358","pc":[1205,1206]},{"teal":1179,"source":"contracts\\BiatecIdentityProvider.algo.ts:359","pc":[1207,1208]},{"teal":1180,"source":"contracts\\BiatecIdentityProvider.algo.ts:359","pc":[1209,1210]},{"teal":1184,"source":"contracts\\BiatecIdentityProvider.algo.ts:360","pc":[1211]},{"teal":1185,"source":"contracts\\BiatecIdentityProvider.algo.ts:360","pc":[1212,1213]},{"teal":1188,"source":"contracts\\BiatecIdentityProvider.algo.ts:357","pc":[1214]},{"teal":1189,"source":"contracts\\BiatecIdentityProvider.algo.ts:356","pc":[1215,1216,1217]},{"teal":1199,"source":"contracts\\BiatecIdentityProvider.algo.ts:363","pc":[1218]},{"teal":1200,"source":"contracts\\BiatecIdentityProvider.algo.ts:363","pc":[1219,1220]},{"teal":1201,"source":"contracts\\BiatecIdentityProvider.algo.ts:363","pc":[1221,1222]},{"teal":1205,"source":"contracts\\BiatecIdentityProvider.algo.ts:364","pc":[1223,1224]},{"teal":1206,"source":"contracts\\BiatecIdentityProvider.algo.ts:364","pc":[1225,1226]},{"teal":1210,"source":"contracts\\BiatecIdentityProvider.algo.ts:365","pc":[1227,1228]},{"teal":1211,"source":"contracts\\BiatecIdentityProvider.algo.ts:365","pc":[1229,1230]},{"teal":1215,"source":"contracts\\BiatecIdentityProvider.algo.ts:366","pc":[1231,1232]},{"teal":1216,"source":"contracts\\BiatecIdentityProvider.algo.ts:366","pc":[1233,1234]},{"teal":1220,"source":"contracts\\BiatecIdentityProvider.algo.ts:367","pc":[1235]},{"teal":1221,"source":"contracts\\BiatecIdentityProvider.algo.ts:367","pc":[1236,1237]},{"teal":1224,"source":"contracts\\BiatecIdentityProvider.algo.ts:363","pc":[1238]},{"teal":1227,"source":"contracts\\BiatecIdentityProvider.algo.ts:355","pc":[1239]},{"teal":1230,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1240,1241,1242,1243,1244,1245]},{"teal":1231,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1246,1247,1248]},{"teal":1232,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1249,1250,1251,1252]},{"teal":1235,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1253]},{"teal":1238,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1254,1255,1256,1257,1258,1259]},{"teal":1239,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1260,1261,1262,1263,1264,1265]},{"teal":1240,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1266,1267,1268,1269,1270,1271]},{"teal":1241,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1272,1273,1274,1275,1276,1277]},{"teal":1242,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1278,1279,1280,1281,1282,1283]},{"teal":1243,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1284,1285,1286,1287,1288,1289]},{"teal":1244,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1290,1291,1292]},{"teal":1245,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306]},{"teal":1248,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1307]},{"teal":1251,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1308,1309,1310,1311,1312,1313]},{"teal":1252,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1314,1315,1316]},{"teal":1253,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1317,1318,1319,1320]},{"teal":1256,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1321]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAAEgAoACqASwBSYPCAAAAAAAAAAAAAFpAUIBcwEAJDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCD//////////////////////////////////////////yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO5rKAAgAAAAAdzWUAAgAAAAAO5rKAAVzY3ZlcgQVH3x1AmVmAWUxGBSBBgsxGQiNDAQZAAAAAAAABE8AAAQLAAAAAAAAAAAAAACIAAIjQ4oAACcLgBVCSUFURUMtSURFTlQtMDEtMDItMDFniTYaBEkVJBJENhoDSRUkEkQ2GgJJFSQSRDYaAReIAAIjQ4oEACkxADYyAHIHSBJEK4v/Z4ABZ4v+Z4ABdov9ZycOi/xni/8nBGVEjACLACISRIk2GgJXAgA2GgEXiAACI0OKAgApSYv/K2QSRIv/gAF1ZUSMADEAiwASRIv/JwRlRIwBiwEiEkQnC4v+Z4k2GgI2GgFJFSQSRIgAAiNDigIAKov/UL1MSBREi/41/zT/VwAIFyMSRIv+Nf80/1cICBciEkSL/jX/gRE0/zT/TwJZSTT/TFkjCyUIWFcCACcGEkSL/jX/gRM0/zT/TwJZSTT/TFkjCyUIWFcCACcGEkSL/jX/NP9XFQgXIhJEi/41/zT/Vx0IFyISRIv+Nf80/1clCBciEkSL/jX/NP9XLQgXIhJEi/41/zT/VzUIFyISRIv+Nf80/1c9CBciEkSL/jX/NP8hBVMiEkSL/jX/NP9XRggXIhJEi/41/zT/V04IFyISRIv+Nf80/yEGUyISRCqL/1BJvEiL/r+JNhoCNhoBSRUkEkSIAAIjQ4oCADEAJw5kEkQqi/9QSbxIi/6/iTYaBxc2GgYXNhoFFzYaBFcCADYaA1cCADYaAlcCADYaAReIAAIjQ4oHAClJi/8rZBJEi/8nDWVEjAAxAIsAEkSL/ycEZUSMAYsBIhJEsSWyEIv9sguL/LI/i/uyDIv5sg6L+rINi/6yCiKyAbOJJww2GgJJFSMSRBc2GgFJFSQSRIgABFCwI0OKAgEpRwKL/iMSRCqL/1C9TEgUQQBDi/4WVwcBKFAoUChQKFAoUChQKFAoUCcJSZMhBA5EJwesSRVJJAlMUlAnCFAnBSJJVFAoUChQJwUiSVRQjACLAEIA0iqL/1CMAYv+FlcHAYsBvkQ1/zT/VwAIFxZQiwG+RDX/NP9XCAgXFlCLAb5ENf80/1cVCBcWUIsBvkQ1/zT/Vx0IFxZQiwG+RDX/NP9XJQgXFlCLAb5ENf80/1ctCBcWUIsBvkQ1/zT/VzUIFxZQiwG+RDX/NP9XPQgXFlAnCkmTIQQORCcHrEkVSSQJTFJQJwhQJwUiiwG+RDX/NP8hBVNUUIsBvkQ1/zT/V0YIFxZQiwG+RDX/NP9XTggXFlAnBSKLAb5ENf80/yEGU1RQjAKLAowARgKJJww2GgMXNhoCFzYaAReIAAUWULAjQ4oDASlJi/8rZBJEi/8nDWVEjACL/ycEZUSMAYsBIhJEMQCLABJEi/2L/jEAiAAHi/2MAEYBiYoDAIv+IhJBABOxI7IQi/+yB4v9sggisgGzQgAVsYEEshCL/7IUi/6yEYv9shIisgGziYAEuER7NjYaAI4B++kAgATjv1wfgAToyO7ZgATVg6dZgASDklwXgASZNqFtgATLouldNhoAjgb71vxk/WH9hv30/z4AgARfyIWgNhoAjgH8GgA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type IdentityInfo = {
  verificationStatus: bigint,
  verificationClass: bigint,
  isCompany: boolean,
  personUuid: string,
  legalEntityUuid: string,
  biatecEngagementPoints: bigint,
  biatecEngagementRank: bigint,
  avmEngagementPoints: bigint,
  avmEngagementRank: bigint,
  tradingEngagementPoints: bigint,
  tradingEngagementRank: bigint,
  isLocked: boolean,
  kycExpiration: bigint,
  investorForExpiration: bigint,
  isProfessionalInvestor: boolean
}


/**
 * Converts the ABI tuple representation of a IdentityInfo to the struct representation
 */
export function IdentityInfoFromTuple(abiTuple: [bigint, bigint, boolean, string, string, bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdentityInfo, APP_SPEC.structs) as IdentityInfo
}

export type UserInfoV1 = {
  version: number,
  verificationStatus: bigint,
  verificationClass: bigint,
  biatecEngagementPoints: bigint,
  biatecEngagementRank: bigint,
  avmEngagementPoints: bigint,
  avmEngagementRank: bigint,
  tradingEngagementPoints: bigint,
  tradingEngagementRank: bigint,
  feeMultiplier: bigint,
  base: bigint,
  isLocked: boolean,
  kycExpiration: bigint,
  investorForExpiration: bigint,
  isProfessionalInvestor: boolean
}


/**
 * Converts the ABI tuple representation of a UserInfoV1 to the struct representation
 */
export function UserInfoV1FromTuple(abiTuple: [number, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserInfoV1, APP_SPEC.structs) as UserInfoV1
}

/**
 * The argument types for the BiatecIdentityProvider contract
 */
export type BiatecIdentityProviderArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(uint64,address,address,address)void': {
      /**
       * Biatec amm provider
       */
      appBiatecConfigProvider: bigint | number
      governor: string
      verificationSetter: string
      engagementSetter: string
    }
    'updateApplication(uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number
      newVersion: Uint8Array
    }
    'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': {
      user: string
      info: IdentityInfo
    }
    'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': {
      user: string
      info: IdentityInfo
    }
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': {
      appBiatecConfigProvider: bigint | number
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
    }
    'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)': {
      /**
       * Get info for specific user address
       */
      user: string
      /**
       * Version of the data structure to return
       */
      v: bigint | number
    }
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Asset to withdraw. If native token, then zero
       */
      asset: bigint | number
      /**
       * Amount of the asset to be withdrawn
       */
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(uint64,address,address,address)void': [appBiatecConfigProvider: bigint | number, governor: string, verificationSetter: string, engagementSetter: string]
    'updateApplication(uint64,byte[])void': [appBiatecConfigProvider: bigint | number, newVersion: Uint8Array]
    'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': [user: string, info: IdentityInfo]
    'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': [user: string, info: IdentityInfo]
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': [appBiatecConfigProvider: bigint | number, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
    'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)': [user: string, v: bigint | number]
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': [appBiatecConfigProvider: bigint | number, asset: bigint | number, amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BiatecIdentityProviderReturns = {
  'createApplication()void': void
  'bootstrap(uint64,address,address,address)void': void
  'updateApplication(uint64,byte[])void': void
  'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': void
  'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': void
  'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': void
  'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)': UserInfoV1
  'withdrawExcessAssets(uint64,uint64,uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the BiatecIdentityProvider smart contract.
 */
export type BiatecIdentityProviderTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BiatecIdentityProviderArgs['obj']['createApplication()void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['createApplication()void']
      returns: BiatecIdentityProviderReturns['createApplication()void']
    }>
    & Record<'bootstrap(uint64,address,address,address)void' | 'bootstrap', {
      argsObj: BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']
      returns: BiatecIdentityProviderReturns['bootstrap(uint64,address,address,address)void']
    }>
    & Record<'updateApplication(uint64,byte[])void' | 'updateApplication', {
      argsObj: BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']
      returns: BiatecIdentityProviderReturns['updateApplication(uint64,byte[])void']
    }>
    & Record<'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' | 'selfRegistration', {
      argsObj: BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      returns: BiatecIdentityProviderReturns['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
    }>
    & Record<'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' | 'setInfo', {
      argsObj: BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      returns: BiatecIdentityProviderReturns['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
    }>
    & Record<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      returns: BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
    }>
    & Record<'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)' | 'getUser', {
      argsObj: BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
      argsTuple: BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
      returns: BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
    }>
    & Record<'withdrawExcessAssets(uint64,uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      argsTuple: BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      returns: BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        governor: string
        verificationSetter: string
        engagementSetter: string
        appBiatecConfigProvider: bigint
        version: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        identities: Map<string, IdentityInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BiatecIdentityProviderSignatures = keyof BiatecIdentityProviderTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecIdentityProviderNonVoidMethodSignatures = keyof BiatecIdentityProviderTypes['methods'] extends infer T ? T extends keyof BiatecIdentityProviderTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BiatecIdentityProvider smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecIdentityProviderSignatures> = BiatecIdentityProviderTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecIdentityProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecIdentityProviderSignatures> = BiatecIdentityProviderTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecIdentityProviderTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BiatecIdentityProviderTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BiatecIdentityProviderCreateCallParams =
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecIdentityProviderUpdateCallParams =
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication'}>
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication(uint64,byte[])void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecIdentityProviderDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BiatecIdentityProviderCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: BiatecIdentityProviderUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecIdentityProvider smart contract
 */
export abstract class BiatecIdentityProviderParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecIdentityProviderCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecIdentityProviderParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BiatecIdentityProvider smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecIdentityProviderUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(uint64,byte[])void':
            return BiatecIdentityProviderParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the BiatecIdentityProvider smart contract using the updateApplication(uint64,byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(uint64,byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64,address,address,address)void ABI method
   *
   * Biatec deploys single identity provider smart contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.governor, params.args.verificationSetter, params.args.engagementSetter],
    }
  }
  /**
   * Constructs a no op call for the selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static selfRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.info],
    }
  }
  /**
   * Constructs a no op call for the setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setInfo(params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.info],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution],
    }
  }
  /**
   * Constructs a no op call for the getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool) ABI method
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.v],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.asset, params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecIdentityProvider smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecIdentityProviderFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BiatecIdentityProviderFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecIdentityProviderClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BiatecIdentityProviderClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BiatecIdentityProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecIdentityProviderDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BiatecIdentityProviderParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BiatecIdentityProviderCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? BiatecIdentityProviderParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (BiatecIdentityProviderUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BiatecIdentityProviderClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the updateApplication(uint64,byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BiatecIdentityProviderReturns['createApplication()void']) }, appClient: new BiatecIdentityProviderClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BiatecIdentityProvider smart contract
 */
export class BiatecIdentityProviderClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BiatecIdentityProviderClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecIdentityProvider app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BiatecIdentityProviderClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecIdentityProviderNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BiatecIdentityProviderClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BiatecIdentityProviderClient> {
    return new BiatecIdentityProviderClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BiatecIdentityProviderClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BiatecIdentityProviderClient> {
    return new BiatecIdentityProviderClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64,address,address,address)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    selfRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setInfo: (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.setInfo(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUser: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64,address,address,address)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    selfRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setInfo: (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.setInfo(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUser: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['updateApplication(uint64,byte[])void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64,address,address,address)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['bootstrap(uint64,address,address,address)void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    selfRegistration: async (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setInfo: async (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.setInfo(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUser: async (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUser(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecIdentityProviderClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']>) {
    const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUser(params))
    return result.return as unknown as BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
  }

  /**
   * Methods to access state for the current BiatecIdentityProvider app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecIdentityProvider app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          governor: result.governor,
          verificationSetter: result.verificationSetter,
          engagementSetter: result.engagementSetter,
          appBiatecConfigProvider: result.appBiatecConfigProvider,
          version: new BinaryStateValue(result.version),
        }
      },
      /**
       * Get the current value of the governor key in global state
       */
      governor: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("governor")) as string | undefined },
      /**
       * Get the current value of the verificationSetter key in global state
       */
      verificationSetter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("verificationSetter")) as string | undefined },
      /**
       * Get the current value of the engagementSetter key in global state
       */
      engagementSetter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("engagementSetter")) as string | undefined },
      /**
       * Get the current value of the appBiatecConfigProvider key in global state
       */
      appBiatecConfigProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecConfigProvider")) as bigint | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current BiatecIdentityProvider app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the identities map in box state
       */
      identities: {
        /**
         * Get all current values of the identities map in box state
         */
        getMap: async (): Promise<Map<string, IdentityInfo>> => { return (await this.appClient.state.box.getMap("identities")) as Map<string, IdentityInfo> },
        /**
         * Get a current value of the identities map by key from box state
         */
        value: async (key: string): Promise<IdentityInfo | undefined> => { return await this.appClient.state.box.getMapValue("identities", key) as IdentityInfo | undefined },
      },
    },
  }

  public newGroup(): BiatecIdentityProviderComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64,address,address,address)void method call against the BiatecIdentityProvider contract
       */
      bootstrap(params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void method call against the BiatecIdentityProvider contract
       */
      selfRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.selfRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void method call against the BiatecIdentityProvider contract
       */
      setInfo(params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void method call against the BiatecIdentityProvider contract
       */
      sendOnlineKeyRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool) method call against the BiatecIdentityProvider contract
       */
      getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUser(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)', v))
        return this
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64,uint64)uint64 method call against the BiatecIdentityProvider contract
       */
      withdrawExcessAssets(params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawExcessAssets(uint64,uint64,uint64)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the BiatecIdentityProvider contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BiatecIdentityProviderComposer
  }
}
export type BiatecIdentityProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64,address,address,address)void ABI method.
   *
   * Biatec deploys single identity provider smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['bootstrap(uint64,address,address,address)void'] | undefined]>

  /**
   * Calls the selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  selfRegistration(params?: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | undefined]>

  /**
   * Calls the setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setInfo(params?: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool) ABI method.
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUser(params?: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | undefined]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(params?: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecIdentityProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecIdentityProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecIdentityProviderComposerResults<TReturns>>
}
export type BiatecIdentityProviderComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

