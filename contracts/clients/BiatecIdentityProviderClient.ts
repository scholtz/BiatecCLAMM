/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BiatecIdentityProvider","desc":"","methods":[{"name":"createApplication","desc":"Initial setup","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","desc":"Biatec deploys single identity provider smart contract","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec amm provider"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateApplication","desc":"addressUdpater from global biatec configuration is allowed to update application","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"newVersion","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"selfRegistration","args":[{"name":"user","type":"address"},{"name":"info","type":"(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)","struct":"IdentityInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setInfo","args":[{"name":"user","type":"address"},{"name":"info","type":"(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)","struct":"IdentityInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendOnlineKeyRegistration","desc":"addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"votePK","type":"byte[]"},{"name":"selectionPK","type":"byte[]"},{"name":"stateProofPK","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getUser","desc":"Returns user information - fee multiplier, verification class, engagement class ..","readonly":true,"args":[{"name":"user","type":"address","desc":"Get info for specific user address"},{"name":"v","type":"uint8","desc":"Version of the data structure to return"}],"returns":{"type":"(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)","struct":"UserInfoV1"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawExcessAssets","desc":"If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec config app. Only addressExecutiveFee is allowed to execute this method."},{"name":"asset","type":"uint64","desc":"Asset to withdraw. If native token, then zero"},{"name":"amount","type":"uint64","desc":"Amount of the asset to be withdrawn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"IdentityInfo":[{"name":"verificationStatus","type":"uint64"},{"name":"verificationClass","type":"uint64"},{"name":"isCompany","type":"bool"},{"name":"personUuid","type":"string"},{"name":"legalEntityUuid","type":"string"},{"name":"biatecEngagementPoints","type":"uint64"},{"name":"biatecEngagementRank","type":"uint64"},{"name":"avmEngagementPoints","type":"uint64"},{"name":"avmEngagementRank","type":"uint64"},{"name":"tradingEngagementPoints","type":"uint64"},{"name":"tradingEngagementRank","type":"uint64"},{"name":"isLocked","type":"bool"},{"name":"kycExpiration","type":"uint64"},{"name":"investorForExpiration","type":"uint64"},{"name":"isProfessionalInvestor","type":"bool"}],"UserInfoV1":[{"name":"version","type":"uint8"},{"name":"verificationStatus","type":"uint64"},{"name":"verificationClass","type":"uint64"},{"name":"biatecEngagementPoints","type":"uint64"},{"name":"biatecEngagementRank","type":"uint64"},{"name":"avmEngagementPoints","type":"uint64"},{"name":"avmEngagementRank","type":"uint64"},{"name":"tradingEngagementPoints","type":"uint64"},{"name":"tradingEngagementRank","type":"uint64"},{"name":"feeMultiplier","type":"uint256"},{"name":"base","type":"uint256"},{"name":"isLocked","type":"bool"},{"name":"kycExpiration","type":"uint64"},{"name":"investorForExpiration","type":"uint64"},{"name":"isProfessionalInvestor","type":"bool"}]},"state":{"schema":{"global":{"bytes":4,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"governor":{"key":"Zw==","keyType":"AVMBytes","valueType":"address"},"verificationSetter":{"key":"dg==","keyType":"AVMBytes","valueType":"address"},"engagementSetter":{"key":"ZQ==","keyType":"AVMBytes","valueType":"address"},"appBiatecConfigProvider":{"key":"Qg==","keyType":"AVMBytes","valueType":"uint64"},"version":{"key":"c2N2ZXI=","keyType":"AVMBytes","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"identities":{"keyType":"address","valueType":"IdentityInfo","prefix":"i"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[0]},{"teal":2,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1,2,3,4,5,6,7,8,9,10,11,12]},{"teal":3,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167]},{"teal":15,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[168,169]},{"teal":16,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[170]},{"teal":17,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[171,172]},{"teal":18,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[173]},{"teal":19,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[174,175]},{"teal":20,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[176]},{"teal":21,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202]},{"teal":25,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[203]},{"teal":30,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[204,205,206]},{"teal":31,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[207]},{"teal":32,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[208]},{"teal":38,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[209,210,211]},{"teal":42,"source":"contracts\\BiatecIdentityProvider.algo.ts:159","pc":[212,213]},{"teal":43,"source":"contracts\\BiatecIdentityProvider.algo.ts:159","pc":[214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236]},{"teal":44,"source":"contracts\\BiatecIdentityProvider.algo.ts:159","pc":[237]},{"teal":45,"source":"contracts\\BiatecIdentityProvider.algo.ts:158","pc":[238]},{"teal":50,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[239,240,241]},{"teal":51,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[242]},{"teal":54,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[243,244,245]},{"teal":55,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[246]},{"teal":56,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[247]},{"teal":63,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[248,249,250]},{"teal":66,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[251]},{"teal":70,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","pc":[252,253]},{"teal":71,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","pc":[254,255,256]},{"teal":72,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","pc":[257,258]},{"teal":73,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","pc":[259]},{"teal":74,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","pc":[260]},{"teal":77,"source":"contracts\\BiatecIdentityProvider.algo.ts:167","errorMessage":"Only creator of the app can set it up","pc":[261]},{"teal":81,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[262]},{"teal":82,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[263,264]},{"teal":83,"source":"contracts\\BiatecIdentityProvider.algo.ts:168","pc":[265]},{"teal":87,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[266,267]},{"teal":88,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[268,269]},{"teal":89,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[270]},{"teal":92,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[271]},{"teal":93,"source":"contracts\\BiatecIdentityProvider.algo.ts:169","pc":[272,273]},{"teal":97,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[274,275]},{"teal":98,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[276]},{"teal":99,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","pc":[277]},{"teal":102,"source":"contracts\\BiatecIdentityProvider.algo.ts:170","errorMessage":"ERR_PAUSED","pc":[278]},{"teal":103,"source":"contracts\\BiatecIdentityProvider.algo.ts:166","pc":[279]},{"teal":108,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[280,281,282]},{"teal":109,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[283,284,285]},{"teal":112,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[286,287,288]},{"teal":113,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[289]},{"teal":116,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[290,291,292]},{"teal":117,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[293]},{"teal":118,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[294]},{"teal":124,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[295,296,297]},{"teal":127,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[298]},{"teal":128,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[299]},{"teal":132,"source":"contracts\\BiatecIdentityProvider.algo.ts:177","pc":[300,301]},{"teal":133,"source":"contracts\\BiatecIdentityProvider.algo.ts:177","pc":[302]},{"teal":134,"source":"contracts\\BiatecIdentityProvider.algo.ts:177","pc":[303]},{"teal":135,"source":"contracts\\BiatecIdentityProvider.algo.ts:177","pc":[304]},{"teal":138,"source":"contracts\\BiatecIdentityProvider.algo.ts:177","errorMessage":"Configuration app does not match","pc":[305]},{"teal":142,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[306,307]},{"teal":143,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[308,309,310]},{"teal":144,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[311]},{"teal":147,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('u')","pc":[312]},{"teal":148,"source":"contracts\\BiatecIdentityProvider.algo.ts:178","pc":[313,314]},{"teal":152,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","pc":[315,316]},{"teal":153,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","pc":[317,318]},{"teal":154,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","pc":[319]},{"teal":157,"source":"contracts\\BiatecIdentityProvider.algo.ts:179","errorMessage":"Only addressUdpater setup in the config can update application","pc":[320]},{"teal":161,"source":"contracts\\BiatecIdentityProvider.algo.ts:180","pc":[321,322]},{"teal":162,"source":"contracts\\BiatecIdentityProvider.algo.ts:180","pc":[323,324]},{"teal":163,"source":"contracts\\BiatecIdentityProvider.algo.ts:180","pc":[325]},{"teal":166,"source":"contracts\\BiatecIdentityProvider.algo.ts:180","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[326]},{"teal":167,"source":"contracts\\BiatecIdentityProvider.algo.ts:180","pc":[327,328]},{"teal":171,"source":"contracts\\BiatecIdentityProvider.algo.ts:181","pc":[329,330]},{"teal":172,"source":"contracts\\BiatecIdentityProvider.algo.ts:181","pc":[331]},{"teal":173,"source":"contracts\\BiatecIdentityProvider.algo.ts:181","pc":[332]},{"teal":176,"source":"contracts\\BiatecIdentityProvider.algo.ts:181","errorMessage":"ERR_PAUSED","pc":[333]},{"teal":180,"source":"contracts\\BiatecIdentityProvider.algo.ts:182","pc":[334,335]},{"teal":181,"source":"contracts\\BiatecIdentityProvider.algo.ts:182","pc":[336,337]},{"teal":182,"source":"contracts\\BiatecIdentityProvider.algo.ts:182","pc":[338]},{"teal":183,"source":"contracts\\BiatecIdentityProvider.algo.ts:176","pc":[339]},{"teal":188,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[340,341,342]},{"teal":191,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[343,344,345]},{"teal":192,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[346]},{"teal":193,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[347]},{"teal":194,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[348]},{"teal":195,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[349]},{"teal":198,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","errorMessage":"argument 1 (user) for selfRegistration must be a address","pc":[350]},{"teal":201,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[351,352,353]},{"teal":202,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[354]},{"teal":203,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[355]},{"teal":207,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[356,357,358]},{"teal":211,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[359]},{"teal":212,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[360,361]},{"teal":213,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[362]},{"teal":214,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[363]},{"teal":215,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[364]},{"teal":216,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[365]},{"teal":217,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","pc":[366]},{"teal":220,"source":"contracts\\BiatecIdentityProvider.algo.ts:186","errorMessage":"Self registration cannot be executed if address is already registered","pc":[367]},{"teal":224,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[368,369]},{"teal":225,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[370,371]},{"teal":226,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[372,373]},{"teal":227,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[374,375,376]},{"teal":228,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[377]},{"teal":229,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[378]},{"teal":230,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","pc":[379]},{"teal":233,"source":"contracts\\BiatecIdentityProvider.algo.ts:189","errorMessage":"Verification status must be empty","pc":[380]},{"teal":237,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[381,382]},{"teal":238,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[383,384]},{"teal":239,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[385,386]},{"teal":240,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[387,388,389]},{"teal":241,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[390]},{"teal":242,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[391]},{"teal":243,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","pc":[392]},{"teal":246,"source":"contracts\\BiatecIdentityProvider.algo.ts:191","errorMessage":"verificationClass must equal to 0","pc":[393]},{"teal":253,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[394,395]},{"teal":254,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[396,397]},{"teal":255,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[398,399]},{"teal":256,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[400,401]},{"teal":257,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[402,403]},{"teal":258,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[404,405]},{"teal":259,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[406]},{"teal":260,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[407]},{"teal":261,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[408,409]},{"teal":262,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[410]},{"teal":263,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[411]},{"teal":264,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[412]},{"teal":265,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[413]},{"teal":266,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[414]},{"teal":267,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[415]},{"teal":268,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[416]},{"teal":269,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[417,418,419]},{"teal":270,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[420,421]},{"teal":271,"source":"contracts\\BiatecIdentityProvider.algo.ts:195","pc":[422]},{"teal":274,"source":"contracts\\BiatecIdentityProvider.algo.ts:194","errorMessage":"personUUID must equal to 00000000-0000-0000-0000-000000000000","pc":[423]},{"teal":281,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[424,425]},{"teal":282,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[426,427]},{"teal":283,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[428,429]},{"teal":284,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[430,431]},{"teal":285,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[432,433]},{"teal":286,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[434,435]},{"teal":287,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[436]},{"teal":288,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[437]},{"teal":289,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[438,439]},{"teal":290,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[440]},{"teal":291,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[441]},{"teal":292,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[442]},{"teal":293,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[443]},{"teal":294,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[444]},{"teal":295,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[445]},{"teal":296,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[446]},{"teal":297,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[447,448,449]},{"teal":298,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[450,451]},{"teal":299,"source":"contracts\\BiatecIdentityProvider.algo.ts:200","pc":[452]},{"teal":302,"source":"contracts\\BiatecIdentityProvider.algo.ts:199","errorMessage":"legalEntityUUID must equal to 00000000-0000-0000-0000-000000000000","pc":[453]},{"teal":306,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[454,455]},{"teal":307,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[456,457]},{"teal":308,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[458,459]},{"teal":309,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[460,461,462]},{"teal":310,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[463]},{"teal":311,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[464]},{"teal":312,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","pc":[465]},{"teal":315,"source":"contracts\\BiatecIdentityProvider.algo.ts:204","errorMessage":"biatecEngagementPoints must equal to 0","pc":[466]},{"teal":319,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","pc":[467,468]},{"teal":320,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","pc":[469,470]},{"teal":321,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","pc":[471,472]},{"teal":322,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","pc":[473,474,475]},{"teal":323,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","pc":[476]},{"teal":324,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","pc":[477]},{"teal":325,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","pc":[478]},{"teal":328,"source":"contracts\\BiatecIdentityProvider.algo.ts:206","errorMessage":"biatecEngagementRank must equal to 0","pc":[479]},{"teal":332,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","pc":[480,481]},{"teal":333,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","pc":[482,483]},{"teal":334,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","pc":[484,485]},{"teal":335,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","pc":[486,487,488]},{"teal":336,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","pc":[489]},{"teal":337,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","pc":[490]},{"teal":338,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","pc":[491]},{"teal":341,"source":"contracts\\BiatecIdentityProvider.algo.ts:208","errorMessage":"avmEngagementPoints must equal to 0","pc":[492]},{"teal":345,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","pc":[493,494]},{"teal":346,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","pc":[495,496]},{"teal":347,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","pc":[497,498]},{"teal":348,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","pc":[499,500,501]},{"teal":349,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","pc":[502]},{"teal":350,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","pc":[503]},{"teal":351,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","pc":[504]},{"teal":354,"source":"contracts\\BiatecIdentityProvider.algo.ts:210","errorMessage":"avmEngagementRank must equal to 0","pc":[505]},{"teal":358,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","pc":[506,507]},{"teal":359,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","pc":[508,509]},{"teal":360,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","pc":[510,511]},{"teal":361,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","pc":[512,513,514]},{"teal":362,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","pc":[515]},{"teal":363,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","pc":[516]},{"teal":364,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","pc":[517]},{"teal":367,"source":"contracts\\BiatecIdentityProvider.algo.ts:212","errorMessage":"tradingEngagementPoints must equal to 0","pc":[518]},{"teal":371,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","pc":[519,520]},{"teal":372,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","pc":[521,522]},{"teal":373,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","pc":[523,524]},{"teal":374,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","pc":[525,526,527]},{"teal":375,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","pc":[528]},{"teal":376,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","pc":[529]},{"teal":377,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","pc":[530]},{"teal":380,"source":"contracts\\BiatecIdentityProvider.algo.ts:214","errorMessage":"tradingEngagementRank must equal to 0","pc":[531]},{"teal":384,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","pc":[532,533]},{"teal":385,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","pc":[534,535]},{"teal":386,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","pc":[536,537]},{"teal":387,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","pc":[538,539]},{"teal":388,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","pc":[540]},{"teal":389,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","pc":[541]},{"teal":390,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","pc":[542]},{"teal":393,"source":"contracts\\BiatecIdentityProvider.algo.ts:216","errorMessage":"isLocked must equal to false","pc":[543]},{"teal":397,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","pc":[544,545]},{"teal":398,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","pc":[546,547]},{"teal":399,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","pc":[548,549]},{"teal":400,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","pc":[550,551,552]},{"teal":401,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","pc":[553]},{"teal":402,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","pc":[554]},{"teal":403,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","pc":[555]},{"teal":406,"source":"contracts\\BiatecIdentityProvider.algo.ts:218","errorMessage":"kycExpiration must equal to 0","pc":[556]},{"teal":410,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","pc":[557,558]},{"teal":411,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","pc":[559,560]},{"teal":412,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","pc":[561,562]},{"teal":413,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","pc":[563,564,565]},{"teal":414,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","pc":[566]},{"teal":415,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","pc":[567]},{"teal":416,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","pc":[568]},{"teal":419,"source":"contracts\\BiatecIdentityProvider.algo.ts:220","errorMessage":"investorForExpiration must equal to 0","pc":[569]},{"teal":423,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","pc":[570,571]},{"teal":424,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","pc":[572,573]},{"teal":425,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","pc":[574,575]},{"teal":426,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","pc":[576,577]},{"teal":427,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","pc":[578]},{"teal":428,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","pc":[579]},{"teal":429,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","pc":[580]},{"teal":432,"source":"contracts\\BiatecIdentityProvider.algo.ts:222","errorMessage":"isProfessionalInvestor must equal to false","pc":[581]},{"teal":436,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[582]},{"teal":437,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[583,584]},{"teal":438,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[585]},{"teal":439,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[586]},{"teal":440,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[587]},{"teal":441,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[588]},{"teal":442,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[589,590]},{"teal":443,"source":"contracts\\BiatecIdentityProvider.algo.ts:224","pc":[591]},{"teal":444,"source":"contracts\\BiatecIdentityProvider.algo.ts:185","pc":[592]},{"teal":449,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[593,594,595]},{"teal":452,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[596,597,598]},{"teal":453,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[599]},{"teal":454,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[600]},{"teal":455,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[601]},{"teal":456,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[602]},{"teal":459,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","errorMessage":"argument 1 (user) for setInfo must be a address","pc":[603]},{"teal":462,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[604,605,606]},{"teal":463,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[607]},{"teal":464,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[608]},{"teal":468,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[609,610,611]},{"teal":472,"source":"contracts\\BiatecIdentityProvider.algo.ts:228","pc":[612,613]},{"teal":473,"source":"contracts\\BiatecIdentityProvider.algo.ts:228","pc":[614,615,616]},{"teal":474,"source":"contracts\\BiatecIdentityProvider.algo.ts:228","pc":[617]},{"teal":475,"source":"contracts\\BiatecIdentityProvider.algo.ts:228","pc":[618]},{"teal":476,"source":"contracts\\BiatecIdentityProvider.algo.ts:228","pc":[619]},{"teal":480,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[620]},{"teal":481,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[621,622]},{"teal":482,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[623]},{"teal":483,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[624]},{"teal":484,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[625]},{"teal":485,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[626]},{"teal":486,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[627,628]},{"teal":487,"source":"contracts\\BiatecIdentityProvider.algo.ts:229","pc":[629]},{"teal":488,"source":"contracts\\BiatecIdentityProvider.algo.ts:227","pc":[630]},{"teal":493,"source":"contracts\\BiatecIdentityProvider.algo.ts:244","pc":[631,632,633]},{"teal":494,"source":"contracts\\BiatecIdentityProvider.algo.ts:244","pc":[634]},{"teal":497,"source":"contracts\\BiatecIdentityProvider.algo.ts:243","pc":[635,636,637]},{"teal":498,"source":"contracts\\BiatecIdentityProvider.algo.ts:243","pc":[638]},{"teal":501,"source":"contracts\\BiatecIdentityProvider.algo.ts:242","pc":[639,640,641]},{"teal":502,"source":"contracts\\BiatecIdentityProvider.algo.ts:242","pc":[642]},{"teal":505,"source":"contracts\\BiatecIdentityProvider.algo.ts:241","pc":[643,644,645]},{"teal":506,"source":"contracts\\BiatecIdentityProvider.algo.ts:241","pc":[646,647,648]},{"teal":509,"source":"contracts\\BiatecIdentityProvider.algo.ts:240","pc":[649,650,651]},{"teal":510,"source":"contracts\\BiatecIdentityProvider.algo.ts:240","pc":[652,653,654]},{"teal":513,"source":"contracts\\BiatecIdentityProvider.algo.ts:239","pc":[655,656,657]},{"teal":514,"source":"contracts\\BiatecIdentityProvider.algo.ts:239","pc":[658,659,660]},{"teal":517,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[661,662,663]},{"teal":518,"source":"contracts\\BiatecIdentityProvider.algo.ts:238","pc":[664]},{"teal":521,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[665,666,667]},{"teal":522,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[668]},{"teal":523,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[669]},{"teal":531,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[670,671,672]},{"teal":534,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[673]},{"teal":535,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[674]},{"teal":539,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[675,676]},{"teal":540,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[677]},{"teal":541,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[678]},{"teal":542,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","pc":[679]},{"teal":545,"source":"contracts\\BiatecIdentityProvider.algo.ts:246","errorMessage":"Configuration app does not match","pc":[680]},{"teal":549,"source":"contracts\\BiatecIdentityProvider.algo.ts:247","pc":[681,682]},{"teal":550,"source":"contracts\\BiatecIdentityProvider.algo.ts:247","pc":[683,684]},{"teal":551,"source":"contracts\\BiatecIdentityProvider.algo.ts:247","pc":[685]},{"teal":554,"source":"contracts\\BiatecIdentityProvider.algo.ts:247","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","pc":[686]},{"teal":555,"source":"contracts\\BiatecIdentityProvider.algo.ts:247","pc":[687,688]},{"teal":562,"source":"contracts\\BiatecIdentityProvider.algo.ts:249","pc":[689,690]},{"teal":563,"source":"contracts\\BiatecIdentityProvider.algo.ts:249","pc":[691,692]},{"teal":564,"source":"contracts\\BiatecIdentityProvider.algo.ts:249","pc":[693]},{"teal":567,"source":"contracts\\BiatecIdentityProvider.algo.ts:248","errorMessage":"Only fee executor setup in the config can take the collected fees","pc":[694]},{"teal":571,"source":"contracts\\BiatecIdentityProvider.algo.ts:252","pc":[695,696]},{"teal":572,"source":"contracts\\BiatecIdentityProvider.algo.ts:252","pc":[697,698]},{"teal":573,"source":"contracts\\BiatecIdentityProvider.algo.ts:252","pc":[699]},{"teal":576,"source":"contracts\\BiatecIdentityProvider.algo.ts:252","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[700]},{"teal":577,"source":"contracts\\BiatecIdentityProvider.algo.ts:252","pc":[701,702]},{"teal":581,"source":"contracts\\BiatecIdentityProvider.algo.ts:253","pc":[703,704]},{"teal":582,"source":"contracts\\BiatecIdentityProvider.algo.ts:253","pc":[705]},{"teal":583,"source":"contracts\\BiatecIdentityProvider.algo.ts:253","pc":[706]},{"teal":586,"source":"contracts\\BiatecIdentityProvider.algo.ts:253","errorMessage":"ERR_PAUSED","pc":[707]},{"teal":598,"source":"contracts\\BiatecIdentityProvider.algo.ts:254","pc":[708]},{"teal":599,"source":"contracts\\BiatecIdentityProvider.algo.ts:254","pc":[709]},{"teal":600,"source":"contracts\\BiatecIdentityProvider.algo.ts:254","pc":[710,711]},{"teal":604,"source":"contracts\\BiatecIdentityProvider.algo.ts:255","pc":[712,713]},{"teal":605,"source":"contracts\\BiatecIdentityProvider.algo.ts:255","pc":[714,715]},{"teal":609,"source":"contracts\\BiatecIdentityProvider.algo.ts:256","pc":[716,717]},{"teal":610,"source":"contracts\\BiatecIdentityProvider.algo.ts:256","pc":[718,719]},{"teal":614,"source":"contracts\\BiatecIdentityProvider.algo.ts:257","pc":[720,721]},{"teal":615,"source":"contracts\\BiatecIdentityProvider.algo.ts:257","pc":[722,723]},{"teal":619,"source":"contracts\\BiatecIdentityProvider.algo.ts:258","pc":[724,725]},{"teal":620,"source":"contracts\\BiatecIdentityProvider.algo.ts:258","pc":[726,727]},{"teal":624,"source":"contracts\\BiatecIdentityProvider.algo.ts:259","pc":[728,729]},{"teal":625,"source":"contracts\\BiatecIdentityProvider.algo.ts:259","pc":[730,731]},{"teal":629,"source":"contracts\\BiatecIdentityProvider.algo.ts:260","pc":[732,733]},{"teal":630,"source":"contracts\\BiatecIdentityProvider.algo.ts:260","pc":[734,735]},{"teal":634,"source":"contracts\\BiatecIdentityProvider.algo.ts:261","pc":[736]},{"teal":635,"source":"contracts\\BiatecIdentityProvider.algo.ts:261","pc":[737,738]},{"teal":638,"source":"contracts\\BiatecIdentityProvider.algo.ts:254","pc":[739]},{"teal":639,"source":"contracts\\BiatecIdentityProvider.algo.ts:237","pc":[740]},{"teal":644,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[741,742]},{"teal":647,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[743,744,745]},{"teal":648,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[746]},{"teal":649,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[747]},{"teal":650,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[748]},{"teal":651,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[749]},{"teal":654,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","errorMessage":"argument 0 (v) for getUser must be a uint8","pc":[750]},{"teal":655,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[751]},{"teal":658,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[752,753,754]},{"teal":659,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[755]},{"teal":660,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[756]},{"teal":661,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[757]},{"teal":662,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","pc":[758]},{"teal":665,"source":"contracts\\BiatecIdentityProvider.algo.ts:272","errorMessage":"argument 1 (user) for getUser must be a address","pc":[759]},{"teal":668,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[760,761,762]},{"teal":669,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[763]},{"teal":670,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[764]},{"teal":671,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[765]},{"teal":672,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[766]},{"teal":681,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[767,768,769]},{"teal":684,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[770]},{"teal":685,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[771,772]},{"teal":689,"source":"contracts\\BiatecIdentityProvider.algo.ts:273","pc":[773,774]},{"teal":690,"source":"contracts\\BiatecIdentityProvider.algo.ts:273","pc":[775]},{"teal":691,"source":"contracts\\BiatecIdentityProvider.algo.ts:273","pc":[776]},{"teal":694,"source":"contracts\\BiatecIdentityProvider.algo.ts:273","errorMessage":"Currently supported version of the data structure is '1'","pc":[777]},{"teal":699,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[778]},{"teal":700,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[779,780]},{"teal":701,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[781]},{"teal":702,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[782]},{"teal":703,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[783]},{"teal":704,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[784]},{"teal":705,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[785]},{"teal":706,"source":"contracts\\BiatecIdentityProvider.algo.ts:274","pc":[786,787,788]},{"teal":727,"source":"contracts\\BiatecIdentityProvider.algo.ts:276","pc":[789,790]},{"teal":728,"source":"contracts\\BiatecIdentityProvider.algo.ts:276","pc":[791]},{"teal":729,"source":"contracts\\BiatecIdentityProvider.algo.ts:276","pc":[792,793,794]},{"teal":730,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[795]},{"teal":731,"source":"contracts\\BiatecIdentityProvider.algo.ts:281","pc":[796]},{"teal":732,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[797]},{"teal":733,"source":"contracts\\BiatecIdentityProvider.algo.ts:280","pc":[798]},{"teal":734,"source":"contracts\\BiatecIdentityProvider.algo.ts:282","pc":[799]},{"teal":735,"source":"contracts\\BiatecIdentityProvider.algo.ts:282","pc":[800]},{"teal":736,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[801]},{"teal":737,"source":"contracts\\BiatecIdentityProvider.algo.ts:283","pc":[802]},{"teal":738,"source":"contracts\\BiatecIdentityProvider.algo.ts:284","pc":[803]},{"teal":739,"source":"contracts\\BiatecIdentityProvider.algo.ts:284","pc":[804]},{"teal":740,"source":"contracts\\BiatecIdentityProvider.algo.ts:285","pc":[805]},{"teal":741,"source":"contracts\\BiatecIdentityProvider.algo.ts:285","pc":[806]},{"teal":742,"source":"contracts\\BiatecIdentityProvider.algo.ts:286","pc":[807]},{"teal":743,"source":"contracts\\BiatecIdentityProvider.algo.ts:286","pc":[808]},{"teal":744,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[809]},{"teal":745,"source":"contracts\\BiatecIdentityProvider.algo.ts:287","pc":[810]},{"teal":746,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[811,812]},{"teal":747,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[813]},{"teal":748,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[814]},{"teal":749,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[815,816]},{"teal":750,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[817]},{"teal":753,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","errorMessage":"(2 * SCALE) as uint256 overflowed 256 bits","pc":[818]},{"teal":754,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[819,820]},{"teal":755,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[821]},{"teal":756,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[822]},{"teal":757,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[823]},{"teal":758,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[824]},{"teal":759,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[825]},{"teal":760,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[826]},{"teal":761,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[827]},{"teal":762,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[828]},{"teal":763,"source":"contracts\\BiatecIdentityProvider.algo.ts:278","pc":[829]},{"teal":764,"source":"contracts\\BiatecIdentityProvider.algo.ts:277","pc":[830,831]},{"teal":765,"source":"contracts\\BiatecIdentityProvider.algo.ts:277","pc":[832]},{"teal":766,"source":"contracts\\BiatecIdentityProvider.algo.ts:279","pc":[833,834]},{"teal":767,"source":"contracts\\BiatecIdentityProvider.algo.ts:279","pc":[835]},{"teal":768,"source":"contracts\\BiatecIdentityProvider.algo.ts:279","pc":[836]},{"teal":769,"source":"contracts\\BiatecIdentityProvider.algo.ts:279","pc":[837]},{"teal":770,"source":"contracts\\BiatecIdentityProvider.algo.ts:288","pc":[838]},{"teal":771,"source":"contracts\\BiatecIdentityProvider.algo.ts:288","pc":[839]},{"teal":772,"source":"contracts\\BiatecIdentityProvider.algo.ts:288","pc":[840]},{"teal":773,"source":"contracts\\BiatecIdentityProvider.algo.ts:289","pc":[841]},{"teal":774,"source":"contracts\\BiatecIdentityProvider.algo.ts:289","pc":[842]},{"teal":775,"source":"contracts\\BiatecIdentityProvider.algo.ts:290","pc":[843,844]},{"teal":776,"source":"contracts\\BiatecIdentityProvider.algo.ts:290","pc":[845]},{"teal":777,"source":"contracts\\BiatecIdentityProvider.algo.ts:290","pc":[846]},{"teal":778,"source":"contracts\\BiatecIdentityProvider.algo.ts:290","pc":[847]},{"teal":779,"source":"contracts\\BiatecIdentityProvider.algo.ts:275","pc":[848]},{"teal":780,"source":"contracts\\BiatecIdentityProvider.algo.ts:275","pc":[849,850]},{"teal":784,"source":"contracts\\BiatecIdentityProvider.algo.ts:292","pc":[851,852]},{"teal":785,"source":"contracts\\BiatecIdentityProvider.algo.ts:292","pc":[853,854,855]},{"teal":790,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[856]},{"teal":791,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[857,858]},{"teal":792,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[859]},{"teal":793,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[860,861]},{"teal":813,"source":"contracts\\BiatecIdentityProvider.algo.ts:297","pc":[862,863]},{"teal":814,"source":"contracts\\BiatecIdentityProvider.algo.ts:297","pc":[864]},{"teal":815,"source":"contracts\\BiatecIdentityProvider.algo.ts:297","pc":[865,866,867]},{"teal":816,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[868,869]},{"teal":817,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[870]},{"teal":820,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[871]},{"teal":821,"source":"contracts\\BiatecIdentityProvider.algo.ts:302","pc":[872,873]},{"teal":822,"source":"contracts\\BiatecIdentityProvider.algo.ts:302","pc":[874,875]},{"teal":823,"source":"contracts\\BiatecIdentityProvider.algo.ts:302","pc":[876,877,878]},{"teal":824,"source":"contracts\\BiatecIdentityProvider.algo.ts:302","pc":[879]},{"teal":825,"source":"contracts\\BiatecIdentityProvider.algo.ts:302","pc":[880]},{"teal":826,"source":"contracts\\BiatecIdentityProvider.algo.ts:302","pc":[881]},{"teal":827,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[882,883]},{"teal":828,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[884]},{"teal":831,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[885]},{"teal":832,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[886,887]},{"teal":833,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[888,889]},{"teal":834,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[890,891,892]},{"teal":835,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[893]},{"teal":836,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[894]},{"teal":837,"source":"contracts\\BiatecIdentityProvider.algo.ts:301","pc":[895]},{"teal":838,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[896,897]},{"teal":839,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[898]},{"teal":842,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[899]},{"teal":843,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[900,901]},{"teal":844,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[902,903]},{"teal":845,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[904,905,906]},{"teal":846,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[907]},{"teal":847,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[908]},{"teal":848,"source":"contracts\\BiatecIdentityProvider.algo.ts:303","pc":[909]},{"teal":849,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[910,911]},{"teal":850,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[912]},{"teal":853,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[913]},{"teal":854,"source":"contracts\\BiatecIdentityProvider.algo.ts:304","pc":[914,915]},{"teal":855,"source":"contracts\\BiatecIdentityProvider.algo.ts:304","pc":[916,917]},{"teal":856,"source":"contracts\\BiatecIdentityProvider.algo.ts:304","pc":[918,919,920]},{"teal":857,"source":"contracts\\BiatecIdentityProvider.algo.ts:304","pc":[921]},{"teal":858,"source":"contracts\\BiatecIdentityProvider.algo.ts:304","pc":[922]},{"teal":859,"source":"contracts\\BiatecIdentityProvider.algo.ts:304","pc":[923]},{"teal":860,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[924,925]},{"teal":861,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[926]},{"teal":864,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[927]},{"teal":865,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[928,929]},{"teal":866,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[930,931]},{"teal":867,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[932,933,934]},{"teal":868,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[935]},{"teal":869,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[936]},{"teal":870,"source":"contracts\\BiatecIdentityProvider.algo.ts:305","pc":[937]},{"teal":871,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[938,939]},{"teal":872,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[940]},{"teal":875,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[941]},{"teal":876,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[942,943]},{"teal":877,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[944,945]},{"teal":878,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[946,947,948]},{"teal":879,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[949]},{"teal":880,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[950]},{"teal":881,"source":"contracts\\BiatecIdentityProvider.algo.ts:306","pc":[951]},{"teal":882,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[952,953]},{"teal":883,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[954]},{"teal":886,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[955]},{"teal":887,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[956,957]},{"teal":888,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[958,959]},{"teal":889,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[960,961,962]},{"teal":890,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[963]},{"teal":891,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[964]},{"teal":892,"source":"contracts\\BiatecIdentityProvider.algo.ts:307","pc":[965]},{"teal":893,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[966,967]},{"teal":894,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[968]},{"teal":897,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[969]},{"teal":898,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[970,971]},{"teal":899,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[972,973]},{"teal":900,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[974,975,976]},{"teal":901,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[977]},{"teal":902,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[978]},{"teal":903,"source":"contracts\\BiatecIdentityProvider.algo.ts:308","pc":[979]},{"teal":904,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[980,981]},{"teal":905,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[982]},{"teal":906,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[983]},{"teal":907,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[984,985]},{"teal":908,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[986]},{"teal":911,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","errorMessage":"(1 * SCALE) as uint256 overflowed 256 bits","pc":[987]},{"teal":912,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[988,989]},{"teal":913,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[990]},{"teal":914,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[991]},{"teal":915,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[992]},{"teal":916,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[993]},{"teal":917,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[994]},{"teal":918,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[995]},{"teal":919,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[996]},{"teal":920,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[997]},{"teal":921,"source":"contracts\\BiatecIdentityProvider.algo.ts:299","pc":[998]},{"teal":922,"source":"contracts\\BiatecIdentityProvider.algo.ts:298","pc":[999,1000]},{"teal":923,"source":"contracts\\BiatecIdentityProvider.algo.ts:298","pc":[1001]},{"teal":924,"source":"contracts\\BiatecIdentityProvider.algo.ts:300","pc":[1002,1003]},{"teal":925,"source":"contracts\\BiatecIdentityProvider.algo.ts:300","pc":[1004]},{"teal":926,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1005,1006]},{"teal":927,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1007]},{"teal":930,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[1008]},{"teal":931,"source":"contracts\\BiatecIdentityProvider.algo.ts:300","pc":[1009,1010]},{"teal":932,"source":"contracts\\BiatecIdentityProvider.algo.ts:300","pc":[1011,1012]},{"teal":933,"source":"contracts\\BiatecIdentityProvider.algo.ts:300","pc":[1013,1014]},{"teal":934,"source":"contracts\\BiatecIdentityProvider.algo.ts:300","pc":[1015]},{"teal":935,"source":"contracts\\BiatecIdentityProvider.algo.ts:300","pc":[1016]},{"teal":936,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1017]},{"teal":937,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1018,1019]},{"teal":938,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1020]},{"teal":941,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[1021]},{"teal":942,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1022,1023]},{"teal":943,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1024,1025]},{"teal":944,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1026,1027,1028]},{"teal":945,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1029]},{"teal":946,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1030]},{"teal":947,"source":"contracts\\BiatecIdentityProvider.algo.ts:309","pc":[1031]},{"teal":948,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1032,1033]},{"teal":949,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1034]},{"teal":952,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[1035]},{"teal":953,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[1036,1037]},{"teal":954,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[1038,1039]},{"teal":955,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[1040,1041,1042]},{"teal":956,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[1043]},{"teal":957,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[1044]},{"teal":958,"source":"contracts\\BiatecIdentityProvider.algo.ts:310","pc":[1045]},{"teal":959,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[1046,1047]},{"teal":960,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[1048]},{"teal":961,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1049,1050]},{"teal":962,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","pc":[1051]},{"teal":965,"source":"contracts\\BiatecIdentityProvider.algo.ts:294","errorMessage":"box value does not exist: this.identities(user).value","pc":[1052]},{"teal":966,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[1053,1054]},{"teal":967,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[1055,1056]},{"teal":968,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[1057,1058]},{"teal":969,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[1059]},{"teal":970,"source":"contracts\\BiatecIdentityProvider.algo.ts:311","pc":[1060]},{"teal":971,"source":"contracts\\BiatecIdentityProvider.algo.ts:296","pc":[1061]},{"teal":972,"source":"contracts\\BiatecIdentityProvider.algo.ts:296","pc":[1062,1063]},{"teal":976,"source":"contracts\\BiatecIdentityProvider.algo.ts:313","pc":[1064,1065]},{"teal":980,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[1066,1067]},{"teal":983,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[1068,1069]},{"teal":984,"source":"contracts\\BiatecIdentityProvider.algo.ts:271","pc":[1070]},{"teal":989,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1071,1072]},{"teal":992,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1073,1074,1075]},{"teal":993,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1076]},{"teal":996,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1077,1078,1079]},{"teal":997,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1080]},{"teal":1000,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1081,1082,1083]},{"teal":1001,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1084]},{"teal":1004,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1085,1086,1087]},{"teal":1005,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1088]},{"teal":1006,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1089]},{"teal":1007,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1090]},{"teal":1008,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1091]},{"teal":1009,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1092]},{"teal":1021,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1093,1094,1095]},{"teal":1024,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1096]},{"teal":1025,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1097]},{"teal":1029,"source":"contracts\\BiatecIdentityProvider.algo.ts:326","pc":[1098,1099]},{"teal":1030,"source":"contracts\\BiatecIdentityProvider.algo.ts:326","pc":[1100]},{"teal":1031,"source":"contracts\\BiatecIdentityProvider.algo.ts:326","pc":[1101]},{"teal":1032,"source":"contracts\\BiatecIdentityProvider.algo.ts:326","pc":[1102]},{"teal":1035,"source":"contracts\\BiatecIdentityProvider.algo.ts:326","errorMessage":"Configuration app does not match","pc":[1103]},{"teal":1039,"source":"contracts\\BiatecIdentityProvider.algo.ts:327","pc":[1104,1105]},{"teal":1040,"source":"contracts\\BiatecIdentityProvider.algo.ts:327","pc":[1106,1107]},{"teal":1041,"source":"contracts\\BiatecIdentityProvider.algo.ts:327","pc":[1108]},{"teal":1044,"source":"contracts\\BiatecIdentityProvider.algo.ts:327","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","pc":[1109]},{"teal":1045,"source":"contracts\\BiatecIdentityProvider.algo.ts:327","pc":[1110,1111]},{"teal":1049,"source":"contracts\\BiatecIdentityProvider.algo.ts:328","pc":[1112,1113]},{"teal":1050,"source":"contracts\\BiatecIdentityProvider.algo.ts:328","pc":[1114,1115]},{"teal":1051,"source":"contracts\\BiatecIdentityProvider.algo.ts:328","pc":[1116]},{"teal":1054,"source":"contracts\\BiatecIdentityProvider.algo.ts:328","errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","pc":[1117]},{"teal":1055,"source":"contracts\\BiatecIdentityProvider.algo.ts:328","pc":[1118,1119]},{"teal":1059,"source":"contracts\\BiatecIdentityProvider.algo.ts:329","pc":[1120,1121]},{"teal":1060,"source":"contracts\\BiatecIdentityProvider.algo.ts:329","pc":[1122]},{"teal":1061,"source":"contracts\\BiatecIdentityProvider.algo.ts:329","pc":[1123]},{"teal":1064,"source":"contracts\\BiatecIdentityProvider.algo.ts:329","errorMessage":"ERR_PAUSED","pc":[1124]},{"teal":1071,"source":"contracts\\BiatecIdentityProvider.algo.ts:331","pc":[1125,1126]},{"teal":1072,"source":"contracts\\BiatecIdentityProvider.algo.ts:331","pc":[1127,1128]},{"teal":1073,"source":"contracts\\BiatecIdentityProvider.algo.ts:331","pc":[1129]},{"teal":1076,"source":"contracts\\BiatecIdentityProvider.algo.ts:330","errorMessage":"Only fee executor setup in the config can take the collected fees","pc":[1130]},{"teal":1080,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1131,1132]},{"teal":1081,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1133,1134]},{"teal":1082,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1135,1136]},{"teal":1083,"source":"contracts\\BiatecIdentityProvider.algo.ts:335","pc":[1137,1138,1139]},{"teal":1087,"source":"contracts\\BiatecIdentityProvider.algo.ts:337","pc":[1140,1141]},{"teal":1090,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1142,1143]},{"teal":1093,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1144,1145]},{"teal":1094,"source":"contracts\\BiatecIdentityProvider.algo.ts:325","pc":[1146]},{"teal":1103,"source":"contracts\\BiatecIdentityProvider.algo.ts:346","pc":[1147,1148,1149]},{"teal":1108,"source":"contracts\\BiatecIdentityProvider.algo.ts:347","pc":[1150,1151]},{"teal":1109,"source":"contracts\\BiatecIdentityProvider.algo.ts:347","pc":[1152]},{"teal":1110,"source":"contracts\\BiatecIdentityProvider.algo.ts:347","pc":[1153]},{"teal":1111,"source":"contracts\\BiatecIdentityProvider.algo.ts:347","pc":[1154,1155,1156]},{"teal":1120,"source":"contracts\\BiatecIdentityProvider.algo.ts:348","pc":[1157]},{"teal":1121,"source":"contracts\\BiatecIdentityProvider.algo.ts:348","pc":[1158]},{"teal":1122,"source":"contracts\\BiatecIdentityProvider.algo.ts:348","pc":[1159,1160]},{"teal":1126,"source":"contracts\\BiatecIdentityProvider.algo.ts:349","pc":[1161,1162]},{"teal":1127,"source":"contracts\\BiatecIdentityProvider.algo.ts:349","pc":[1163,1164]},{"teal":1131,"source":"contracts\\BiatecIdentityProvider.algo.ts:350","pc":[1165,1166]},{"teal":1132,"source":"contracts\\BiatecIdentityProvider.algo.ts:350","pc":[1167,1168]},{"teal":1136,"source":"contracts\\BiatecIdentityProvider.algo.ts:351","pc":[1169]},{"teal":1137,"source":"contracts\\BiatecIdentityProvider.algo.ts:351","pc":[1170,1171]},{"teal":1140,"source":"contracts\\BiatecIdentityProvider.algo.ts:348","pc":[1172]},{"teal":1141,"source":"contracts\\BiatecIdentityProvider.algo.ts:347","pc":[1173,1174,1175]},{"teal":1151,"source":"contracts\\BiatecIdentityProvider.algo.ts:354","pc":[1176]},{"teal":1152,"source":"contracts\\BiatecIdentityProvider.algo.ts:354","pc":[1177,1178]},{"teal":1153,"source":"contracts\\BiatecIdentityProvider.algo.ts:354","pc":[1179,1180]},{"teal":1157,"source":"contracts\\BiatecIdentityProvider.algo.ts:355","pc":[1181,1182]},{"teal":1158,"source":"contracts\\BiatecIdentityProvider.algo.ts:355","pc":[1183,1184]},{"teal":1162,"source":"contracts\\BiatecIdentityProvider.algo.ts:356","pc":[1185,1186]},{"teal":1163,"source":"contracts\\BiatecIdentityProvider.algo.ts:356","pc":[1187,1188]},{"teal":1167,"source":"contracts\\BiatecIdentityProvider.algo.ts:357","pc":[1189,1190]},{"teal":1168,"source":"contracts\\BiatecIdentityProvider.algo.ts:357","pc":[1191,1192]},{"teal":1172,"source":"contracts\\BiatecIdentityProvider.algo.ts:358","pc":[1193]},{"teal":1173,"source":"contracts\\BiatecIdentityProvider.algo.ts:358","pc":[1194,1195]},{"teal":1176,"source":"contracts\\BiatecIdentityProvider.algo.ts:354","pc":[1196]},{"teal":1179,"source":"contracts\\BiatecIdentityProvider.algo.ts:346","pc":[1197]},{"teal":1182,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1198,1199,1200,1201,1202,1203]},{"teal":1183,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1204,1205,1206]},{"teal":1184,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1207,1208,1209,1210]},{"teal":1187,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1211]},{"teal":1190,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1212,1213,1214,1215,1216,1217]},{"teal":1191,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1218,1219,1220,1221,1222,1223]},{"teal":1192,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1224,1225,1226,1227,1228,1229]},{"teal":1193,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1230,1231,1232,1233,1234,1235]},{"teal":1194,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1236,1237,1238,1239,1240,1241]},{"teal":1195,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1242,1243,1244,1245,1246,1247]},{"teal":1196,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1248,1249,1250]},{"teal":1197,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264]},{"teal":1200,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1265]},{"teal":1203,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1266,1267,1268,1269,1270,1271]},{"teal":1204,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1272,1273,1274]},{"teal":1205,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","pc":[1275,1276,1277,1278]},{"teal":1208,"source":"contracts\\BiatecIdentityProvider.algo.ts:133","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1279]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEgMzIgMiAyNTYgNTUyIDY4OApieXRlY2Jsb2NrIDB4MDAwMDAwMDAwMDAwMDAwMCAweCAweDY5IDB4NDIgMHg3MyAweDAwIDB4MzAzMDMwMzAzMDMwMzAzMDJkMzAzMDMwMzAyZDMwMzAzMDMwMmQzMDMwMzAzMDJkMzAzMDMwMzAzMDMwMzAzMDMwMzAzMDMwIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRiAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM2I5YWNhMDAgMHgwMDAwMDAwMDc3MzU5NDAwIDB4MDAwMDAwMDAzYjlhY2EwMCAweDczNjM3NjY1NzIgMHgxNTFmN2M3NSAweDY1NjYKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjIKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbiAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKLy8KLy8gSW5pdGlhbCBzZXR1cApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTU5CgkvLyB0aGlzLnZlcnNpb24udmFsdWUgPSB2ZXJzaW9uCglieXRlYyAxMSAvLyAgInNjdmVyIgoJcHVzaGJ5dGVzICJCSUFURUMtSURFTlQtMDEtMDItMDEiCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBib290c3RyYXAodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9ib290c3RyYXA6CgkvLyBhcHBCaWF0ZWNDb25maWdQcm92aWRlcjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBib290c3RyYXAodWludDY0KXZvaWQKCWNhbGxzdWIgYm9vdHN0cmFwCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBib290c3RyYXAoYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXI6IEFwcElEKTogdm9pZAovLwovLyBCaWF0ZWMgZGVwbG95cyBzaW5nbGUgaWRlbnRpdHkgcHJvdmlkZXIgc21hcnQgY29udHJhY3QKLy8gQHBhcmFtIGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyIEJpYXRlYyBhbW0gcHJvdmlkZXIKYm9vdHN0cmFwOgoJcHJvdG8gMSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDEgLy8gMHgKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE2NwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hcHAuY3JlYXRvciwgJ09ubHkgY3JlYXRvciBvZiB0aGUgYXBwIGNhbiBzZXQgaXQgdXAnKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoKCS8vIE9ubHkgY3JlYXRvciBvZiB0aGUgYXBwIGNhbiBzZXQgaXQgdXAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTY4CgkvLyB0aGlzLmFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLnZhbHVlID0gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIKCWJ5dGVjIDMgLy8gICJCIgoJZnJhbWVfZGlnIC0xIC8vIGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyOiBBcHBJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE2OQoJLy8gcGF1c2VkID0gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIuZ2xvYmFsU3RhdGUoJ3MnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBhcHBCaWF0ZWNDb25maWdQcm92aWRlcjogQXBwSUQKCWJ5dGVjIDQgLy8gICJzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdzJykKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIHBhdXNlZDogdWludDY0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxNzAKCS8vIGFzc2VydChwYXVzZWQgPT09IDAsICdFUlJfUEFVU0VEJykKCWZyYW1lX2RpZyAwIC8vIHBhdXNlZDogdWludDY0CglpbnRjIDAgLy8gMAoJPT0KCgkvLyBFUlJfUEFVU0VECglhc3NlcnQKCXJldHN1YgoKLy8gdXBkYXRlQXBwbGljYXRpb24odWludDY0LGJ5dGVbXSl2b2lkCiphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb246CgkvLyBuZXdWZXJzaW9uOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgdXBkYXRlQXBwbGljYXRpb24odWludDY0LGJ5dGVbXSl2b2lkCgljYWxsc3ViIHVwZGF0ZUFwcGxpY2F0aW9uCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyB1cGRhdGVBcHBsaWNhdGlvbihhcHBCaWF0ZWNDb25maWdQcm92aWRlcjogQXBwSUQsIG5ld1ZlcnNpb246IGJ5dGVzKTogdm9pZAovLwovLyBhZGRyZXNzVWRwYXRlciBmcm9tIGdsb2JhbCBiaWF0ZWMgY29uZmlndXJhdGlvbiBpcyBhbGxvd2VkIHRvIHVwZGF0ZSBhcHBsaWNhdGlvbgp1cGRhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAxIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE3NwoJLy8gYXNzZXJ0KGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyID09PSB0aGlzLmFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLnZhbHVlLCAnQ29uZmlndXJhdGlvbiBhcHAgZG9lcyBub3QgbWF0Y2gnKQoJZnJhbWVfZGlnIC0xIC8vIGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyOiBBcHBJRAoJYnl0ZWMgMyAvLyAgIkIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBDb25maWd1cmF0aW9uIGFwcCBkb2VzIG5vdCBtYXRjaAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxNzgKCS8vIGFkZHJlc3NVZHBhdGVyID0gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIuZ2xvYmFsU3RhdGUoJ3UnKSBhcyBBZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXI6IEFwcElECglwdXNoYnl0ZXMgMHg3NSAvLyAidSIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBCaWF0ZWNDb25maWdQcm92aWRlci5nbG9iYWxTdGF0ZSgndScpCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBhZGRyZXNzVWRwYXRlcjogYWRkcmVzcwoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MTc5CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSBhZGRyZXNzVWRwYXRlciwgJ09ubHkgYWRkcmVzc1VkcGF0ZXIgc2V0dXAgaW4gdGhlIGNvbmZpZyBjYW4gdXBkYXRlIGFwcGxpY2F0aW9uJykKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAwIC8vIGFkZHJlc3NVZHBhdGVyOiBhZGRyZXNzCgk9PQoKCS8vIE9ubHkgYWRkcmVzc1VkcGF0ZXIgc2V0dXAgaW4gdGhlIGNvbmZpZyBjYW4gdXBkYXRlIGFwcGxpY2F0aW9uCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MAoJLy8gcGF1c2VkID0gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIuZ2xvYmFsU3RhdGUoJ3MnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBhcHBCaWF0ZWNDb25maWdQcm92aWRlcjogQXBwSUQKCWJ5dGVjIDQgLy8gICJzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdzJykKCWFzc2VydAoJZnJhbWVfYnVyeSAxIC8vIHBhdXNlZDogdWludDY0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODEKCS8vIGFzc2VydChwYXVzZWQgPT09IDAsICdFUlJfUEFVU0VEJykKCWZyYW1lX2RpZyAxIC8vIHBhdXNlZDogdWludDY0CglpbnRjIDAgLy8gMAoJPT0KCgkvLyBFUlJfUEFVU0VECglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE4MgoJLy8gdGhpcy52ZXJzaW9uLnZhbHVlID0gbmV3VmVyc2lvbgoJYnl0ZWMgMTEgLy8gICJzY3ZlciIKCWZyYW1lX2RpZyAtMiAvLyBuZXdWZXJzaW9uOiBieXRlcwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2VsZlJlZ2lzdHJhdGlvbihhZGRyZXNzLCh1aW50NjQsdWludDY0LGJvb2wsc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxib29sLHVpbnQ2NCx1aW50NjQsYm9vbCkpdm9pZAoqYWJpX3JvdXRlX3NlbGZSZWdpc3RyYXRpb246CgkvLyBpbmZvOiAodWludDY0LHVpbnQ2NCxib29sLHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50NjQsdWludDY0LGJvb2wpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCgoJLy8gdXNlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMiAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAxICh1c2VyKSBmb3Igc2VsZlJlZ2lzdHJhdGlvbiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZWxmUmVnaXN0cmF0aW9uKGFkZHJlc3MsKHVpbnQ2NCx1aW50NjQsYm9vbCxzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LGJvb2wsdWludDY0LHVpbnQ2NCxib29sKSl2b2lkCgljYWxsc3ViIHNlbGZSZWdpc3RyYXRpb24KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIHNlbGZSZWdpc3RyYXRpb24odXNlcjogQWRkcmVzcywgaW5mbzogSWRlbnRpdHlJbmZvKTogdm9pZApzZWxmUmVnaXN0cmF0aW9uOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODYKCS8vIGFzc2VydCghdGhpcy5pZGVudGl0aWVzKHVzZXIpLmV4aXN0cywgJ1NlbGYgcmVnaXN0cmF0aW9uIGNhbm5vdCBiZSBleGVjdXRlZCBpZiBhZGRyZXNzIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCcpCglieXRlYyAyIC8vICAiaSIKCWZyYW1lX2RpZyAtMSAvLyB1c2VyOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoKCS8vIFNlbGYgcmVnaXN0cmF0aW9uIGNhbm5vdCBiZSBleGVjdXRlZCBpZiBhZGRyZXNzIGlzIGFscmVhZHkgcmVnaXN0ZXJlZAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxODkKCS8vIGFzc2VydChpbmZvLnZlcmlmaWNhdGlvblN0YXR1cyA9PT0gMSwgJ1ZlcmlmaWNhdGlvbiBzdGF0dXMgbXVzdCBiZSBlbXB0eScpCglmcmFtZV9kaWcgLTIgLy8gaW5mbzogSWRlbnRpdHlJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludGMgMSAvLyAxCgk9PQoKCS8vIFZlcmlmaWNhdGlvbiBzdGF0dXMgbXVzdCBiZSBlbXB0eQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxOTEKCS8vIGFzc2VydChpbmZvLnZlcmlmaWNhdGlvbkNsYXNzID09PSAwLCAndmVyaWZpY2F0aW9uQ2xhc3MgbXVzdCBlcXVhbCB0byAwJykKCWZyYW1lX2RpZyAtMiAvLyBpbmZvOiBJZGVudGl0eUluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDggOAoJYnRvaQoJaW50YyAwIC8vIDAKCT09CgoJLy8gdmVyaWZpY2F0aW9uQ2xhc3MgbXVzdCBlcXVhbCB0byAwCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjE5NAoJLy8gYXNzZXJ0KAoJLy8gICAgICAgaW5mby5wZXJzb25VVUlEID09PSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJywKCS8vICAgICAgICdwZXJzb25VVUlEIG11c3QgZXF1YWwgdG8gMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJwoJLy8gICAgICkKCWZyYW1lX2RpZyAtMiAvLyBpbmZvOiBJZGVudGl0eUluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglwdXNoaW50IDE3Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludGMgMSAvLyAgZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglpbnRjIDMgLy8gMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWV4dHJhY3QzCglleHRyYWN0IDIgMAoJYnl0ZWMgNiAvLyAgIjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIKCT09CgoJLy8gcGVyc29uVVVJRCBtdXN0IGVxdWFsIHRvIDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoxOTkKCS8vIGFzc2VydCgKCS8vICAgICAgIGluZm8ubGVnYWxFbnRpdHlVVUlEID09PSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJywKCS8vICAgICAgICdsZWdhbEVudGl0eVVVSUQgbXVzdCBlcXVhbCB0byAwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnCgkvLyAgICAgKQoJZnJhbWVfZGlnIC0yIC8vIGluZm86IElkZW50aXR5SW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCXB1c2hpbnQgMTkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXVuY292ZXIgMgoJZXh0cmFjdF91aW50MTYKCWR1cCAvLyBkdXBsaWNhdGUgc3RhcnQgb2YgZWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJZXh0cmFjdF91aW50MTYgLy8gZ2V0IG51bWJlciBvZiBlbGVtZW50cwoJaW50YyAxIC8vICBnZXQgdHlwZSBsZW5ndGgKCSogLy8gbXVsdGlwbHkgYnkgdHlwZSBsZW5ndGgKCWludGMgMyAvLyAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJZXh0cmFjdDMKCWV4dHJhY3QgMiAwCglieXRlYyA2IC8vICAiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIgoJPT0KCgkvLyBsZWdhbEVudGl0eVVVSUQgbXVzdCBlcXVhbCB0byAwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjA0CgkvLyBhc3NlcnQoaW5mby5iaWF0ZWNFbmdhZ2VtZW50UG9pbnRzID09PSAwLCAnYmlhdGVjRW5nYWdlbWVudFBvaW50cyBtdXN0IGVxdWFsIHRvIDAnKQoJZnJhbWVfZGlnIC0yIC8vIGluZm86IElkZW50aXR5SW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMjEgOAoJYnRvaQoJaW50YyAwIC8vIDAKCT09CgoJLy8gYmlhdGVjRW5nYWdlbWVudFBvaW50cyBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjA2CgkvLyBhc3NlcnQoaW5mby5iaWF0ZWNFbmdhZ2VtZW50UmFuayA9PT0gMCwgJ2JpYXRlY0VuZ2FnZW1lbnRSYW5rIG11c3QgZXF1YWwgdG8gMCcpCglmcmFtZV9kaWcgLTIgLy8gaW5mbzogSWRlbnRpdHlJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAyOSA4CglidG9pCglpbnRjIDAgLy8gMAoJPT0KCgkvLyBiaWF0ZWNFbmdhZ2VtZW50UmFuayBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjA4CgkvLyBhc3NlcnQoaW5mby5hdm1FbmdhZ2VtZW50UG9pbnRzID09PSAwLCAnYXZtRW5nYWdlbWVudFBvaW50cyBtdXN0IGVxdWFsIHRvIDAnKQoJZnJhbWVfZGlnIC0yIC8vIGluZm86IElkZW50aXR5SW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMzcgOAoJYnRvaQoJaW50YyAwIC8vIDAKCT09CgoJLy8gYXZtRW5nYWdlbWVudFBvaW50cyBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjEwCgkvLyBhc3NlcnQoaW5mby5hdm1FbmdhZ2VtZW50UmFuayA9PT0gMCwgJ2F2bUVuZ2FnZW1lbnRSYW5rIG11c3QgZXF1YWwgdG8gMCcpCglmcmFtZV9kaWcgLTIgLy8gaW5mbzogSWRlbnRpdHlJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA0NSA4CglidG9pCglpbnRjIDAgLy8gMAoJPT0KCgkvLyBhdm1FbmdhZ2VtZW50UmFuayBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjEyCgkvLyBhc3NlcnQoaW5mby50cmFkaW5nRW5nYWdlbWVudFBvaW50cyA9PT0gMCwgJ3RyYWRpbmdFbmdhZ2VtZW50UG9pbnRzIG11c3QgZXF1YWwgdG8gMCcpCglmcmFtZV9kaWcgLTIgLy8gaW5mbzogSWRlbnRpdHlJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA1MyA4CglidG9pCglpbnRjIDAgLy8gMAoJPT0KCgkvLyB0cmFkaW5nRW5nYWdlbWVudFBvaW50cyBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE0CgkvLyBhc3NlcnQoaW5mby50cmFkaW5nRW5nYWdlbWVudFJhbmsgPT09IDAsICd0cmFkaW5nRW5nYWdlbWVudFJhbmsgbXVzdCBlcXVhbCB0byAwJykKCWZyYW1lX2RpZyAtMiAvLyBpbmZvOiBJZGVudGl0eUluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDYxIDgKCWJ0b2kKCWludGMgMCAvLyAwCgk9PQoKCS8vIHRyYWRpbmdFbmdhZ2VtZW50UmFuayBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE2CgkvLyBhc3NlcnQoaW5mby5pc0xvY2tlZCA9PT0gZmFsc2UsICdpc0xvY2tlZCBtdXN0IGVxdWFsIHRvIGZhbHNlJykKCWZyYW1lX2RpZyAtMiAvLyBpbmZvOiBJZGVudGl0eUluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDUgLy8gNTUyCglnZXRiaXQKCWludGMgMCAvLyAwCgk9PQoKCS8vIGlzTG9ja2VkIG11c3QgZXF1YWwgdG8gZmFsc2UKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjE4CgkvLyBhc3NlcnQoaW5mby5reWNFeHBpcmF0aW9uID09PSAwLCAna3ljRXhwaXJhdGlvbiBtdXN0IGVxdWFsIHRvIDAnKQoJZnJhbWVfZGlnIC0yIC8vIGluZm86IElkZW50aXR5SW5mbwoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNzAgOAoJYnRvaQoJaW50YyAwIC8vIDAKCT09CgoJLy8ga3ljRXhwaXJhdGlvbiBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjIwCgkvLyBhc3NlcnQoaW5mby5pbnZlc3RvckZvckV4cGlyYXRpb24gPT09IDAsICdpbnZlc3RvckZvckV4cGlyYXRpb24gbXVzdCBlcXVhbCB0byAwJykKCWZyYW1lX2RpZyAtMiAvLyBpbmZvOiBJZGVudGl0eUluZm8KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDc4IDgKCWJ0b2kKCWludGMgMCAvLyAwCgk9PQoKCS8vIGludmVzdG9yRm9yRXhwaXJhdGlvbiBtdXN0IGVxdWFsIHRvIDAKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjIyCgkvLyBhc3NlcnQoaW5mby5pc1Byb2Zlc3Npb25hbEludmVzdG9yID09PSBmYWxzZSwgJ2lzUHJvZmVzc2lvbmFsSW52ZXN0b3IgbXVzdCBlcXVhbCB0byBmYWxzZScpCglmcmFtZV9kaWcgLTIgLy8gaW5mbzogSWRlbnRpdHlJbmZvCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyA2IC8vIDY4OAoJZ2V0Yml0CglpbnRjIDAgLy8gMAoJPT0KCgkvLyBpc1Byb2Zlc3Npb25hbEludmVzdG9yIG11c3QgZXF1YWwgdG8gZmFsc2UKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjI0CgkvLyB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUgPSBpbmZvCglieXRlYyAyIC8vICAiaSIKCWZyYW1lX2RpZyAtMSAvLyB1c2VyOiBBZGRyZXNzCgljb25jYXQKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgLTIgLy8gaW5mbzogSWRlbnRpdHlJbmZvCglib3hfcHV0CglyZXRzdWIKCi8vIHNldEluZm8oYWRkcmVzcywodWludDY0LHVpbnQ2NCxib29sLHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50NjQsdWludDY0LGJvb2wpKXZvaWQKKmFiaV9yb3V0ZV9zZXRJbmZvOgoJLy8gaW5mbzogKHVpbnQ2NCx1aW50NjQsYm9vbCxzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LGJvb2wsdWludDY0LHVpbnQ2NCxib29sKQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoKCS8vIHVzZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDIgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAodXNlcikgZm9yIHNldEluZm8gbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgc2V0SW5mbyhhZGRyZXNzLCh1aW50NjQsdWludDY0LGJvb2wsc3RyaW5nLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxib29sLHVpbnQ2NCx1aW50NjQsYm9vbCkpdm9pZAoJY2FsbHN1YiBzZXRJbmZvCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBzZXRJbmZvKHVzZXI6IEFkZHJlc3MsIGluZm86IElkZW50aXR5SW5mbyk6IHZvaWQKc2V0SW5mbzoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjI4CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmVuZ2FnZW1lbnRTZXR0ZXIudmFsdWUpCgl0eG4gU2VuZGVyCglwdXNoYnl0ZXMgMHg2NSAvLyAiZSIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyMjkKCS8vIHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZSA9IGluZm8KCWJ5dGVjIDIgLy8gICJpIgoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWNvbmNhdAoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMiAvLyBpbmZvOiBJZGVudGl0eUluZm8KCWJveF9wdXQKCXJldHN1YgoKLy8gc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbih1aW50NjQsYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb246CgkvLyB2b3RlS2V5RGlsdXRpb246IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwoJYnRvaQoKCS8vIHZvdGVMYXN0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDYKCWJ0b2kKCgkvLyB2b3RlRmlyc3Q6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJYnRvaQoKCS8vIHN0YXRlUHJvb2ZQSzogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglleHRyYWN0IDIgMAoKCS8vIHNlbGVjdGlvblBLOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gdm90ZVBLOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbih1aW50NjQsYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBzZW5kT25saW5lS2V5UmVnaXN0cmF0aW9uCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBzZW5kT25saW5lS2V5UmVnaXN0cmF0aW9uKGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyOiBBcHBJRCwgdm90ZVBLOiBieXRlcywgc2VsZWN0aW9uUEs6IGJ5dGVzLCBzdGF0ZVByb29mUEs6IGJ5dGVzLCB2b3RlRmlyc3Q6IHVpbnQ2NCwgdm90ZUxhc3Q6IHVpbnQ2NCwgdm90ZUtleURpbHV0aW9uOiB1aW50NjQpOiB2b2lkCi8vCi8vIGFkZHJlc3NFeGVjdXRpdmVGZWUgY2FuIHBlcmZvbSBrZXkgcmVnaXN0cmF0aW9uIGZvciB0aGlzIExQIHBvb2wKLy8KLy8gT25seSBhZGRyZXNzRXhlY3V0aXZlRmVlIGlzIGFsbG93ZWQgdG8gZXhlY3V0ZSB0aGlzIG1ldGhvZC4Kc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbjoKCXByb3RvIDcgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAxIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI0NgoJLy8gYXNzZXJ0KGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyID09PSB0aGlzLmFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLnZhbHVlLCAnQ29uZmlndXJhdGlvbiBhcHAgZG9lcyBub3QgbWF0Y2gnKQoJZnJhbWVfZGlnIC0xIC8vIGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyOiBBcHBJRAoJYnl0ZWMgMyAvLyAgIkIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBDb25maWd1cmF0aW9uIGFwcCBkb2VzIG5vdCBtYXRjaAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDcKCS8vIGFkZHJlc3NFeGVjdXRpdmVGZWUgPSBhcHBCaWF0ZWNDb25maWdQcm92aWRlci5nbG9iYWxTdGF0ZSgnZWYnKSBhcyBBZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXI6IEFwcElECglieXRlYyAxMyAvLyAgImVmIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdlZicpCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBhZGRyZXNzRXhlY3V0aXZlRmVlOiBhZGRyZXNzCgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNDgKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gYWRkcmVzc0V4ZWN1dGl2ZUZlZSwKCS8vICAgICAgICdPbmx5IGZlZSBleGVjdXRvciBzZXR1cCBpbiB0aGUgY29uZmlnIGNhbiB0YWtlIHRoZSBjb2xsZWN0ZWQgZmVlcycKCS8vICAgICApCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgMCAvLyBhZGRyZXNzRXhlY3V0aXZlRmVlOiBhZGRyZXNzCgk9PQoKCS8vIE9ubHkgZmVlIGV4ZWN1dG9yIHNldHVwIGluIHRoZSBjb25maWcgY2FuIHRha2UgdGhlIGNvbGxlY3RlZCBmZWVzCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1MgoJLy8gcGF1c2VkID0gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIuZ2xvYmFsU3RhdGUoJ3MnKSBhcyB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBhcHBCaWF0ZWNDb25maWdQcm92aWRlcjogQXBwSUQKCWJ5dGVjIDQgLy8gICJzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdzJykKCWFzc2VydAoJZnJhbWVfYnVyeSAxIC8vIHBhdXNlZDogdWludDY0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTMKCS8vIGFzc2VydChwYXVzZWQgPT09IDAsICdFUlJfUEFVU0VEJykKCWZyYW1lX2RpZyAxIC8vIHBhdXNlZDogdWludDY0CglpbnRjIDAgLy8gMAoJPT0KCgkvLyBFUlJfUEFVU0VECglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NAoJLy8gc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbih7CgkvLyAgICAgICBzZWxlY3Rpb25QSzogc2VsZWN0aW9uUEssCgkvLyAgICAgICBzdGF0ZVByb29mUEs6IHN0YXRlUHJvb2ZQSywKCS8vICAgICAgIHZvdGVGaXJzdDogdm90ZUZpcnN0LAoJLy8gICAgICAgdm90ZUtleURpbHV0aW9uOiB2b3RlS2V5RGlsdXRpb24sCgkvLyAgICAgICB2b3RlTGFzdDogdm90ZUxhc3QsCgkvLyAgICAgICB2b3RlUEs6IHZvdGVQSywKCS8vICAgICAgIGZlZTogMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBrZXlyZWcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NQoJLy8gc2VsZWN0aW9uUEs6IHNlbGVjdGlvblBLCglmcmFtZV9kaWcgLTMgLy8gc2VsZWN0aW9uUEs6IGJ5dGVzCglpdHhuX2ZpZWxkIFNlbGVjdGlvblBLCgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNTYKCS8vIHN0YXRlUHJvb2ZQSzogc3RhdGVQcm9vZlBLCglmcmFtZV9kaWcgLTQgLy8gc3RhdGVQcm9vZlBLOiBieXRlcwoJaXR4bl9maWVsZCBTdGF0ZVByb29mUEsKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1NwoJLy8gdm90ZUZpcnN0OiB2b3RlRmlyc3QKCWZyYW1lX2RpZyAtNSAvLyB2b3RlRmlyc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlRmlyc3QKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1OAoJLy8gdm90ZUtleURpbHV0aW9uOiB2b3RlS2V5RGlsdXRpb24KCWZyYW1lX2RpZyAtNyAvLyB2b3RlS2V5RGlsdXRpb246IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlS2V5RGlsdXRpb24KCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI1OQoJLy8gdm90ZUxhc3Q6IHZvdGVMYXN0CglmcmFtZV9kaWcgLTYgLy8gdm90ZUxhc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlTGFzdAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjYwCgkvLyB2b3RlUEs6IHZvdGVQSwoJZnJhbWVfZGlnIC0yIC8vIHZvdGVQSzogYnl0ZXMKCWl0eG5fZmllbGQgVm90ZVBLCgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNjEKCS8vIGZlZTogMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBnZXRVc2VyKGFkZHJlc3MsdWludDgpKHVpbnQ4LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDI1Nix1aW50MjU2LGJvb2wsdWludDY0LHVpbnQ2NCxib29sKQoqYWJpX3JvdXRlX2dldFVzZXI6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDEyIC8vIDB4MTUxZjdjNzUKCgkvLyB2OiB1aW50OAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMSAvLyAxCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHYpIGZvciBnZXRVc2VyIG11c3QgYmUgYSB1aW50OAoJYXNzZXJ0CglidG9pCgoJLy8gdXNlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMiAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAxICh1c2VyKSBmb3IgZ2V0VXNlciBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBnZXRVc2VyKGFkZHJlc3MsdWludDgpKHVpbnQ4LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDI1Nix1aW50MjU2LGJvb2wsdWludDY0LHVpbnQ2NCxib29sKQoJY2FsbHN1YiBnZXRVc2VyCgljb25jYXQKCWxvZwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZ2V0VXNlcih1c2VyOiBBZGRyZXNzLCB2OiB1aW50OCk6IFVzZXJJbmZvVjEKLy8KLy8gUmV0dXJucyB1c2VyIGluZm9ybWF0aW9uIC0gZmVlIG11bHRpcGxpZXIsIHZlcmlmaWNhdGlvbiBjbGFzcywgZW5nYWdlbWVudCBjbGFzcyAuLgovLwovLyBAcGFyYW0gdXNlciBHZXQgaW5mbyBmb3Igc3BlY2lmaWMgdXNlciBhZGRyZXNzCi8vIEBwYXJhbSB2IFZlcnNpb24gb2YgdGhlIGRhdGEgc3RydWN0dXJlIHRvIHJldHVybgpnZXRVc2VyOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDEgLy8gMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjczCgkvLyBhc3NlcnQodiA9PT0gMSwgIkN1cnJlbnRseSBzdXBwb3J0ZWQgdmVyc2lvbiBvZiB0aGUgZGF0YSBzdHJ1Y3R1cmUgaXMgJzEnIikKCWZyYW1lX2RpZyAtMiAvLyB2OiB1aW50OAoJaW50YyAxIC8vIDEKCT09CgoJLy8gQ3VycmVudGx5IHN1cHBvcnRlZCB2ZXJzaW9uIG9mIHRoZSBkYXRhIHN0cnVjdHVyZSBpcyAnMScKCWFzc2VydAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjI3NAoJLy8gIXRoaXMuaWRlbnRpdGllcyh1c2VyKS5leGlzdHMKCWJ5dGVjIDIgLy8gICJpIgoJZnJhbWVfZGlnIC0xIC8vIHVzZXI6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyNzUKCS8vIHJldE5vSWRlbnRpdHk6IFVzZXJJbmZvVjEgPSB7CgkvLyAgICAgICAgIHZlcnNpb246IHYsCgkvLyAgICAgICAgIGJhc2U6IFNDQUxFIGFzIHVpbnQyNTYsCgkvLyAgICAgICAgIGZlZU11bHRpcGxpZXI6ICgyICogU0NBTEUpIGFzIHVpbnQyNTYsCgkvLyAgICAgICAgIGlzTG9ja2VkOiBmYWxzZSwKCS8vICAgICAgICAgdmVyaWZpY2F0aW9uQ2xhc3M6IDAsCgkvLyAgICAgICAgIHZlcmlmaWNhdGlvblN0YXR1czogMCwKCS8vICAgICAgICAgYmlhdGVjRW5nYWdlbWVudFBvaW50czogMCwKCS8vICAgICAgICAgYmlhdGVjRW5nYWdlbWVudFJhbms6IDAsCgkvLyAgICAgICAgIGF2bUVuZ2FnZW1lbnRQb2ludHM6IDAsCgkvLyAgICAgICAgIGF2bUVuZ2FnZW1lbnRSYW5rOiAwLAoJLy8gICAgICAgICB0cmFkaW5nRW5nYWdlbWVudFBvaW50czogMCwKCS8vICAgICAgICAgdHJhZGluZ0VuZ2FnZW1lbnRSYW5rOiAwLAoJLy8gICAgICAgICBreWNFeHBpcmF0aW9uOiAwLAoJLy8gICAgICAgICBpbnZlc3RvckZvckV4cGlyYXRpb246IDAsCgkvLyAgICAgICAgIGlzUHJvZmVzc2lvbmFsSW52ZXN0b3I6IGZhbHNlLAoJLy8gICAgICAgfQoJZnJhbWVfZGlnIC0yIC8vIHY6IHVpbnQ4CglpdG9iCglleHRyYWN0IDcgMQoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZWMgOSAvLyAweDAwMDAwMDAwNzczNTk0MDAKCWR1cAoJYml0bGVuCglpbnRjIDQgLy8gMjU2Cgk8PQoKCS8vICgyICogU0NBTEUpIGFzIHVpbnQyNTYgb3ZlcmZsb3dlZCAyNTYgYml0cwoJYXNzZXJ0CglieXRlYyA3IC8vIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludGMgMiAvLyAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0CglieXRlYyA4IC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzYjlhY2EwMAoJY29uY2F0CglieXRlYyA1IC8vIDB4MDAKCWludGMgMCAvLyAwCglkdXAKCXNldGJpdAoJY29uY2F0IC8vIDEyCglieXRlYyAwIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglieXRlYyAwIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglieXRlYyA1IC8vIDB4MDAKCWludGMgMCAvLyAwCglkdXAKCXNldGJpdAoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gcmV0Tm9JZGVudGl0eTogVXNlckluZm9WMQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MjkyCgkvLyByZXR1cm4gcmV0Tm9JZGVudGl0eTsKCWZyYW1lX2RpZyAwIC8vIHJldE5vSWRlbnRpdHk6IFVzZXJJbmZvVjEKCWIgKmdldFVzZXIqcmV0dXJuCgoqaWYwX2VuZDoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6Mjk0CgkvLyBpZGVudGl0eSA9IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZQoJYnl0ZWMgMiAvLyAgImkiCglmcmFtZV9kaWcgLTEgLy8gdXNlcjogQWRkcmVzcwoJY29uY2F0CglmcmFtZV9idXJ5IDEgLy8gc3RvcmFnZSBrZXkvL2lkZW50aXR5CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czoyOTYKCS8vIHJldDogVXNlckluZm9WMSA9IHsKCS8vICAgICAgIHZlcnNpb246IHYsCgkvLyAgICAgICBiYXNlOiBTQ0FMRSBhcyB1aW50MjU2LAoJLy8gICAgICAgZmVlTXVsdGlwbGllcjogKDEgKiBTQ0FMRSkgYXMgdWludDI1NiwKCS8vICAgICAgIGlzTG9ja2VkOiBpZGVudGl0eS5pc0xvY2tlZCwKCS8vICAgICAgIHZlcmlmaWNhdGlvbkNsYXNzOiBpZGVudGl0eS52ZXJpZmljYXRpb25DbGFzcywKCS8vICAgICAgIHZlcmlmaWNhdGlvblN0YXR1czogaWRlbnRpdHkudmVyaWZpY2F0aW9uU3RhdHVzLAoJLy8gICAgICAgYmlhdGVjRW5nYWdlbWVudFBvaW50czogaWRlbnRpdHkuYmlhdGVjRW5nYWdlbWVudFBvaW50cywKCS8vICAgICAgIGJpYXRlY0VuZ2FnZW1lbnRSYW5rOiBpZGVudGl0eS5iaWF0ZWNFbmdhZ2VtZW50UmFuaywKCS8vICAgICAgIGF2bUVuZ2FnZW1lbnRQb2ludHM6IGlkZW50aXR5LmF2bUVuZ2FnZW1lbnRQb2ludHMsCgkvLyAgICAgICBhdm1FbmdhZ2VtZW50UmFuazogaWRlbnRpdHkuYXZtRW5nYWdlbWVudFJhbmssCgkvLyAgICAgICB0cmFkaW5nRW5nYWdlbWVudFBvaW50czogaWRlbnRpdHkudHJhZGluZ0VuZ2FnZW1lbnRQb2ludHMsCgkvLyAgICAgICB0cmFkaW5nRW5nYWdlbWVudFJhbms6IGlkZW50aXR5LnRyYWRpbmdFbmdhZ2VtZW50UmFuaywKCS8vICAgICAgIGt5Y0V4cGlyYXRpb246IGlkZW50aXR5Lmt5Y0V4cGlyYXRpb24sCgkvLyAgICAgICBpbnZlc3RvckZvckV4cGlyYXRpb246IGlkZW50aXR5LmludmVzdG9yRm9yRXhwaXJhdGlvbiwKCS8vICAgICAgIGlzUHJvZmVzc2lvbmFsSW52ZXN0b3I6IGlkZW50aXR5LmlzUHJvZmVzc2lvbmFsSW52ZXN0b3IsCgkvLyAgICAgfQoJZnJhbWVfZGlnIC0yIC8vIHY6IHVpbnQ4CglpdG9iCglleHRyYWN0IDcgMQoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBrZXkvL2lkZW50aXR5Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMCA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2Uga2V5Ly9pZGVudGl0eQoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDggOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGtleS8vaWRlbnRpdHkKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAyMSA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2Uga2V5Ly9pZGVudGl0eQoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDI5IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBrZXkvL2lkZW50aXR5Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMzcgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGtleS8vaWRlbnRpdHkKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA0NSA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2Uga2V5Ly9pZGVudGl0eQoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDUzIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBrZXkvL2lkZW50aXR5Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNjEgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglieXRlYyAxMCAvLyAweDAwMDAwMDAwM2I5YWNhMDAKCWR1cAoJYml0bGVuCglpbnRjIDQgLy8gMjU2Cgk8PQoKCS8vICgxICogU0NBTEUpIGFzIHVpbnQyNTYgb3ZlcmZsb3dlZCAyNTYgYml0cwoJYXNzZXJ0CglieXRlYyA3IC8vIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludGMgMiAvLyAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0CglieXRlYyA4IC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAzYjlhY2EwMAoJY29uY2F0CglieXRlYyA1IC8vIDB4MDAKCWludGMgMCAvLyAwCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGtleS8vaWRlbnRpdHkKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyA1IC8vIDU1MgoJZ2V0Yml0CglzZXRiaXQKCWNvbmNhdCAvLyAxMgoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBrZXkvL2lkZW50aXR5Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmlkZW50aXRpZXModXNlcikudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNzAgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGtleS8vaWRlbnRpdHkKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuaWRlbnRpdGllcyh1c2VyKS52YWx1ZQoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA3OCA4CglidG9pCglpdG9iCgljb25jYXQKCWJ5dGVjIDUgLy8gMHgwMAoJaW50YyAwIC8vIDAKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2Uga2V5Ly9pZGVudGl0eQoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5pZGVudGl0aWVzKHVzZXIpLnZhbHVlCglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDYgLy8gNjg4CglnZXRiaXQKCXNldGJpdAoJY29uY2F0CglmcmFtZV9idXJ5IDIgLy8gcmV0OiBVc2VySW5mb1YxCgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMTMKCS8vIHJldHVybiByZXQ7CglmcmFtZV9kaWcgMiAvLyByZXQ6IFVzZXJJbmZvVjEKCipnZXRVc2VyKnJldHVybjoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDIKCXJldHN1YgoKLy8gd2l0aGRyYXdFeGNlc3NBc3NldHModWludDY0LHVpbnQ2NCx1aW50NjQpdWludDY0CiphYmlfcm91dGVfd2l0aGRyYXdFeGNlc3NBc3NldHM6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDEyIC8vIDB4MTUxZjdjNzUKCgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhcHBCaWF0ZWNDb25maWdQcm92aWRlcjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSB3aXRoZHJhd0V4Y2Vzc0Fzc2V0cyh1aW50NjQsdWludDY0LHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgd2l0aGRyYXdFeGNlc3NBc3NldHMKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyB3aXRoZHJhd0V4Y2Vzc0Fzc2V0cyhhcHBCaWF0ZWNDb25maWdQcm92aWRlcjogQXBwSUQsIGFzc2V0OiBBc3NldElELCBhbW91bnQ6IHVpbnQ2NCk6IHVpbnQ2NAovLwovLyBJZiBzb21lb25lIGRlcG9zaXRzIGV4Y2VzcyBhc3NldHMgdG8gdGhpcyBzbWFydCBjb250cmFjdCBiaWF0ZWMgY2FuIHVzZSB0aGVtLgovLwovLyBPbmx5IGFkZHJlc3NFeGVjdXRpdmVGZWUgaXMgYWxsb3dlZCB0byBleGVjdXRlIHRoaXMgbWV0aG9kLgovLwovLyBAcGFyYW0gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXIgQmlhdGVjIGNvbmZpZyBhcHAuIE9ubHkgYWRkcmVzc0V4ZWN1dGl2ZUZlZSBpcyBhbGxvd2VkIHRvIGV4ZWN1dGUgdGhpcyBtZXRob2QuCi8vIEBwYXJhbSBhc3NldCBBc3NldCB0byB3aXRoZHJhdy4gSWYgbmF0aXZlIHRva2VuLCB0aGVuIHplcm8KLy8gQHBhcmFtIGFtb3VudCBBbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIHdpdGhkcmF3bgp3aXRoZHJhd0V4Y2Vzc0Fzc2V0czoKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAxIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMyNgoJLy8gYXNzZXJ0KGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyID09PSB0aGlzLmFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLnZhbHVlLCAnQ29uZmlndXJhdGlvbiBhcHAgZG9lcyBub3QgbWF0Y2gnKQoJZnJhbWVfZGlnIC0xIC8vIGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyOiBBcHBJRAoJYnl0ZWMgMyAvLyAgIkIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBDb25maWd1cmF0aW9uIGFwcCBkb2VzIG5vdCBtYXRjaAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMjcKCS8vIGFkZHJlc3NFeGVjdXRpdmVGZWUgPSBhcHBCaWF0ZWNDb25maWdQcm92aWRlci5nbG9iYWxTdGF0ZSgnZWYnKSBhcyBBZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXI6IEFwcElECglieXRlYyAxMyAvLyAgImVmIgoJYXBwX2dsb2JhbF9nZXRfZXgKCgkvLyBnbG9iYWwgc3RhdGUgdmFsdWUgZG9lcyBub3QgZXhpc3Q6IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdlZicpCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBhZGRyZXNzRXhlY3V0aXZlRmVlOiBhZGRyZXNzCgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMjgKCS8vIHBhdXNlZCA9IGFwcEJpYXRlY0NvbmZpZ1Byb3ZpZGVyLmdsb2JhbFN0YXRlKCdzJykgYXMgdWludDY0CglmcmFtZV9kaWcgLTEgLy8gYXBwQmlhdGVjQ29uZmlnUHJvdmlkZXI6IEFwcElECglieXRlYyA0IC8vICAicyIKCWFwcF9nbG9iYWxfZ2V0X2V4CgoJLy8gZ2xvYmFsIHN0YXRlIHZhbHVlIGRvZXMgbm90IGV4aXN0OiBhcHBCaWF0ZWNDb25maWdQcm92aWRlci5nbG9iYWxTdGF0ZSgncycpCglhc3NlcnQKCWZyYW1lX2J1cnkgMSAvLyBwYXVzZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzI5CgkvLyBhc3NlcnQocGF1c2VkID09PSAwLCAnRVJSX1BBVVNFRCcpCglmcmFtZV9kaWcgMSAvLyBwYXVzZWQ6IHVpbnQ2NAoJaW50YyAwIC8vIDAKCT09CgoJLy8gRVJSX1BBVVNFRAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozMzAKCS8vIGFzc2VydCgKCS8vICAgICAgIHRoaXMudHhuLnNlbmRlciA9PT0gYWRkcmVzc0V4ZWN1dGl2ZUZlZSwKCS8vICAgICAgICdPbmx5IGZlZSBleGVjdXRvciBzZXR1cCBpbiB0aGUgY29uZmlnIGNhbiB0YWtlIHRoZSBjb2xsZWN0ZWQgZmVlcycKCS8vICAgICApCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgMCAvLyBhZGRyZXNzRXhlY3V0aXZlRmVlOiBhZGRyZXNzCgk9PQoKCS8vIE9ubHkgZmVlIGV4ZWN1dG9yIHNldHVwIGluIHRoZSBjb25maWcgY2FuIHRha2UgdGhlIGNvbGxlY3RlZCBmZWVzCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNQoJLy8gdGhpcy5kb0F4ZmVyKHRoaXMudHhuLnNlbmRlciwgYXNzZXQsIGFtb3VudCkKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECgl0eG4gU2VuZGVyCgljYWxsc3ViIGRvQXhmZXIKCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjMzNwoJLy8gcmV0dXJuIGFtb3VudDsKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gZG9BeGZlcihyZWNlaXZlcjogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0KTogdm9pZAovLwovLyBFeGVjdXRlcyB4ZmVyIG9mIHBheSBwYXltZW50IG1ldGhvZHMgdG8gc3BlY2lmaWVkIHJlY2VpdmVyIGZyb20gc21hcnQgY29udHJhY3QgYWdncmVnYXRlZCBhY2NvdW50IHdpdGggc3BlY2lmaWVkIGFzc2V0IGFuZCBhbW91bnQgaW4gdG9rZW5zIGRlY2ltYWxzCi8vIEBwYXJhbSByZWNlaXZlciBSZWNlaXZlcgovLyBAcGFyYW0gYXNzZXQgQXNzZXQuIFplcm8gZm9yIGFsZ28KLy8gQHBhcmFtIGFtb3VudCBBbW91bnQgdG8gdHJhbnNmZXIKZG9BeGZlcjoKCXByb3RvIDMgMAoKCS8vICppZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQmlhdGVjSWRlbnRpdHlQcm92aWRlci5hbGdvLnRzOjM0NwoJLy8gYXNzZXQuaWQgPT09IDAKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaW50YyAwIC8vIDAKCT09CglieiAqaWYxX2Vsc2UKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzQ4CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgIHJlY2VpdmVyOiByZWNlaXZlciwKCS8vICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIGZlZTogMCwKCS8vICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzQ5CgkvLyByZWNlaXZlcjogcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyByZWNlaXZlcjogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzUwCgkvLyBhbW91bnQ6IGFtb3VudAoJZnJhbWVfZGlnIC0zIC8vIGFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzUxCgkvLyBmZWU6IDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWIgKmlmMV9lbmQKCippZjFfZWxzZToKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLAoJLy8gICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICBhc3NldEFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICBmZWU6IDAsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJcHVzaGludCA0IC8vIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTUKCS8vIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gcmVjZWl2ZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU2CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXEJpYXRlY0lkZW50aXR5UHJvdmlkZXIuYWxnby50czozNTcKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNJZGVudGl0eVByb3ZpZGVyLmFsZ28udHM6MzU4CgkvLyBmZWU6IDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjFfZW5kOgoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4YTBjYWRmOGEgLy8gbWV0aG9kICJib290c3RyYXAodWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHhlOGM4ZWVkOSAvLyBtZXRob2QgInNlbGZSZWdpc3RyYXRpb24oYWRkcmVzcywodWludDY0LHVpbnQ2NCxib29sLHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50NjQsdWludDY0LGJvb2wpKXZvaWQiCglwdXNoYnl0ZXMgMHhkNTgzYTc1OSAvLyBtZXRob2QgInNldEluZm8oYWRkcmVzcywodWludDY0LHVpbnQ2NCxib29sLHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYm9vbCx1aW50NjQsdWludDY0LGJvb2wpKXZvaWQiCglwdXNoYnl0ZXMgMHg4MzkyNWMxNyAvLyBtZXRob2QgInNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24odWludDY0LGJ5dGVbXSxieXRlW10sYnl0ZVtdLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg5OTM2YTE2ZCAvLyBtZXRob2QgImdldFVzZXIoYWRkcmVzcyx1aW50OCkodWludDgsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50MjU2LHVpbnQyNTYsYm9vbCx1aW50NjQsdWludDY0LGJvb2wpIgoJcHVzaGJ5dGVzIDB4Y2JhMmU5NWQgLy8gbWV0aG9kICJ3aXRoZHJhd0V4Y2Vzc0Fzc2V0cyh1aW50NjQsdWludDY0LHVpbnQ2NCl1aW50NjQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2Jvb3RzdHJhcCAqYWJpX3JvdXRlX3NlbGZSZWdpc3RyYXRpb24gKmFiaV9yb3V0ZV9zZXRJbmZvICphYmlfcm91dGVfc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbiAqYWJpX3JvdXRlX2dldFVzZXIgKmFiaV9yb3V0ZV93aXRoZHJhd0V4Y2Vzc0Fzc2V0cwoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKmNhbGxfVXBkYXRlQXBwbGljYXRpb246CglwdXNoYnl0ZXMgMHg1ZmM4ODVhMCAvLyBtZXRob2QgInVwZGF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCxieXRlW10pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBVcGRhdGVBcHBsaWNhdGlvbgoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAAEgAoACqASwBSYOCAAAAAAAAAAAAAFpAUIBcwEAJDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCD//////////////////////////////////////////yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO5rKAAgAAAAAdzWUAAgAAAAAO5rKAAVzY3ZlcgQVH3x1AmVmMRgUgQYLMRkIjQwD8QAAAAAAAAQnAAAD4wAAAAAAAAAAAAAAiAACI0OKAAAnC4AVQklBVEVDLUlERU5ULTAxLTAyLTAxZ4k2GgEXiAACI0OKAQApMQA2MgByB0gSRCuL/2eL/ycEZUSMAIsAIhJEiTYaAlcCADYaAReIAAIjQ4oCAClJi/8rZBJEi/+AAXVlRIwAMQCLABJEi/8nBGVEjAGLASISRCcLi/5niTYaAjYaAUkVJBJEiAACI0OKAgAqi/9QvUxIFESL/jX/NP9XAAgXIxJEi/41/zT/VwgIFyISRIv+Nf+BETT/NP9PAllJNP9MWSMLJQhYVwIAJwYSRIv+Nf+BEzT/NP9PAllJNP9MWSMLJQhYVwIAJwYSRIv+Nf80/1cVCBciEkSL/jX/NP9XHQgXIhJEi/41/zT/VyUIFyISRIv+Nf80/1ctCBciEkSL/jX/NP9XNQgXIhJEi/41/zT/Vz0IFyISRIv+Nf80/yEFUyISRIv+Nf80/1dGCBciEkSL/jX/NP9XTggXIhJEi/41/zT/IQZTIhJEKov/UEm8SIv+v4k2GgI2GgFJFSQSRIgAAiNDigIAMQCAAWVkEkQqi/9QSbxIi/6/iTYaBxc2GgYXNhoFFzYaBFcCADYaA1cCADYaAlcCADYaAReIAAIjQ4oHAClJi/8rZBJEi/8nDWVEjAAxAIsAEkSL/ycEZUSMAYsBIhJEsSWyEIv9sguL/LI/i/uyDIv5sg6L+rINi/6yCiKyAbOJJww2GgJJFSMSRBc2GgFJFSQSRIgABFCwI0OKAgEpRwKL/iMSRCqL/1C9TEgUQQBDi/4WVwcBKFAoUChQKFAoUChQKFAoUCcJSZMhBA5EJwesSRVJJAlMUlAnCFAnBSJJVFAoUChQJwUiSVRQjACLAEIA0iqL/1CMAYv+FlcHAYsBvkQ1/zT/VwAIFxZQiwG+RDX/NP9XCAgXFlCLAb5ENf80/1cVCBcWUIsBvkQ1/zT/Vx0IFxZQiwG+RDX/NP9XJQgXFlCLAb5ENf80/1ctCBcWUIsBvkQ1/zT/VzUIFxZQiwG+RDX/NP9XPQgXFlAnCkmTIQQORCcHrEkVSSQJTFJQJwhQJwUiiwG+RDX/NP8hBVNUUIsBvkQ1/zT/V0YIFxZQiwG+RDX/NP9XTggXFlAnBSKLAb5ENf80/yEGU1RQjAKLAowARgKJJww2GgMXNhoCFzYaAReIAAUWULAjQ4oDASlJi/8rZBJEi/8nDWVEjACL/ycEZUSMAYsBIhJEMQCLABJEi/2L/jEAiAAHi/2MAEYBiYoDAIv+IhJBABOxI7IQi/+yB4v9sggisgGzQgAVsYEEshCL/7IUi/6yEYv9shIisgGziYAEuER7NjYaAI4B/BEAgASgyt+KgAToyO7ZgATVg6dZgASDklwXgASZNqFtgATLouldNhoAjgb7/vxj/WD9hv30/z4AgARfyIWgNhoAjgH8GQA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type IdentityInfo = {
  verificationStatus: bigint,
  verificationClass: bigint,
  isCompany: boolean,
  personUuid: string,
  legalEntityUuid: string,
  biatecEngagementPoints: bigint,
  biatecEngagementRank: bigint,
  avmEngagementPoints: bigint,
  avmEngagementRank: bigint,
  tradingEngagementPoints: bigint,
  tradingEngagementRank: bigint,
  isLocked: boolean,
  kycExpiration: bigint,
  investorForExpiration: bigint,
  isProfessionalInvestor: boolean
}


/**
 * Converts the ABI tuple representation of a IdentityInfo to the struct representation
 */
export function IdentityInfoFromTuple(abiTuple: [bigint, bigint, boolean, string, string, bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdentityInfo, APP_SPEC.structs) as IdentityInfo
}

export type UserInfoV1 = {
  version: number,
  verificationStatus: bigint,
  verificationClass: bigint,
  biatecEngagementPoints: bigint,
  biatecEngagementRank: bigint,
  avmEngagementPoints: bigint,
  avmEngagementRank: bigint,
  tradingEngagementPoints: bigint,
  tradingEngagementRank: bigint,
  feeMultiplier: bigint,
  base: bigint,
  isLocked: boolean,
  kycExpiration: bigint,
  investorForExpiration: bigint,
  isProfessionalInvestor: boolean
}


/**
 * Converts the ABI tuple representation of a UserInfoV1 to the struct representation
 */
export function UserInfoV1FromTuple(abiTuple: [number, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserInfoV1, APP_SPEC.structs) as UserInfoV1
}

/**
 * The argument types for the BiatecIdentityProvider contract
 */
export type BiatecIdentityProviderArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(uint64)void': {
      /**
       * Biatec amm provider
       */
      appBiatecConfigProvider: bigint | number
    }
    'updateApplication(uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number
      newVersion: Uint8Array
    }
    'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': {
      user: string
      info: IdentityInfo
    }
    'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': {
      user: string
      info: IdentityInfo
    }
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': {
      appBiatecConfigProvider: bigint | number
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
    }
    'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)': {
      /**
       * Get info for specific user address
       */
      user: string
      /**
       * Version of the data structure to return
       */
      v: bigint | number
    }
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Asset to withdraw. If native token, then zero
       */
      asset: bigint | number
      /**
       * Amount of the asset to be withdrawn
       */
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(uint64)void': [appBiatecConfigProvider: bigint | number]
    'updateApplication(uint64,byte[])void': [appBiatecConfigProvider: bigint | number, newVersion: Uint8Array]
    'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': [user: string, info: IdentityInfo]
    'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': [user: string, info: IdentityInfo]
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': [appBiatecConfigProvider: bigint | number, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
    'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)': [user: string, v: bigint | number]
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': [appBiatecConfigProvider: bigint | number, asset: bigint | number, amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BiatecIdentityProviderReturns = {
  'createApplication()void': void
  'bootstrap(uint64)void': void
  'updateApplication(uint64,byte[])void': void
  'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': void
  'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void': void
  'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': void
  'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)': UserInfoV1
  'withdrawExcessAssets(uint64,uint64,uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the BiatecIdentityProvider smart contract.
 */
export type BiatecIdentityProviderTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BiatecIdentityProviderArgs['obj']['createApplication()void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['createApplication()void']
      returns: BiatecIdentityProviderReturns['createApplication()void']
    }>
    & Record<'bootstrap(uint64)void' | 'bootstrap', {
      argsObj: BiatecIdentityProviderArgs['obj']['bootstrap(uint64)void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['bootstrap(uint64)void']
      returns: BiatecIdentityProviderReturns['bootstrap(uint64)void']
    }>
    & Record<'updateApplication(uint64,byte[])void' | 'updateApplication', {
      argsObj: BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']
      returns: BiatecIdentityProviderReturns['updateApplication(uint64,byte[])void']
    }>
    & Record<'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' | 'selfRegistration', {
      argsObj: BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      returns: BiatecIdentityProviderReturns['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
    }>
    & Record<'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' | 'setInfo', {
      argsObj: BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
      returns: BiatecIdentityProviderReturns['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']
    }>
    & Record<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      returns: BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
    }>
    & Record<'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)' | 'getUser', {
      argsObj: BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
      argsTuple: BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
      returns: BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
    }>
    & Record<'withdrawExcessAssets(uint64,uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      argsTuple: BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      returns: BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        governor: string
        verificationSetter: string
        engagementSetter: string
        appBiatecConfigProvider: bigint
        version: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        identities: Map<string, IdentityInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BiatecIdentityProviderSignatures = keyof BiatecIdentityProviderTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecIdentityProviderNonVoidMethodSignatures = keyof BiatecIdentityProviderTypes['methods'] extends infer T ? T extends keyof BiatecIdentityProviderTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BiatecIdentityProvider smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecIdentityProviderSignatures> = BiatecIdentityProviderTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecIdentityProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecIdentityProviderSignatures> = BiatecIdentityProviderTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecIdentityProviderTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BiatecIdentityProviderTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BiatecIdentityProviderCreateCallParams =
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecIdentityProviderUpdateCallParams =
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication'}>
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication(uint64,byte[])void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecIdentityProviderDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BiatecIdentityProviderCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: BiatecIdentityProviderUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecIdentityProvider smart contract
 */
export abstract class BiatecIdentityProviderParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecIdentityProviderCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecIdentityProviderParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BiatecIdentityProvider smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecIdentityProviderUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(uint64,byte[])void':
            return BiatecIdentityProviderParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the BiatecIdentityProvider smart contract using the updateApplication(uint64,byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(uint64,byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64)void ABI method
   *
   * Biatec deploys single identity provider smart contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider],
    }
  }
  /**
   * Constructs a no op call for the selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static selfRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.info],
    }
  }
  /**
   * Constructs a no op call for the setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setInfo(params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.info],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution],
    }
  }
  /**
   * Constructs a no op call for the getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool) ABI method
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.v],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.asset, params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecIdentityProvider smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecIdentityProviderFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BiatecIdentityProviderFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecIdentityProviderClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BiatecIdentityProviderClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BiatecIdentityProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecIdentityProviderDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BiatecIdentityProviderParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BiatecIdentityProviderCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? BiatecIdentityProviderParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (BiatecIdentityProviderUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BiatecIdentityProviderClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the updateApplication(uint64,byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BiatecIdentityProviderReturns['createApplication()void']) }, appClient: new BiatecIdentityProviderClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BiatecIdentityProvider smart contract
 */
export class BiatecIdentityProviderClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BiatecIdentityProviderClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecIdentityProvider app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BiatecIdentityProviderClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecIdentityProviderNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BiatecIdentityProviderClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BiatecIdentityProviderClient> {
    return new BiatecIdentityProviderClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BiatecIdentityProviderClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BiatecIdentityProviderClient> {
    return new BiatecIdentityProviderClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    selfRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setInfo: (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.setInfo(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUser: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    selfRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setInfo: (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.setInfo(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUser: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['updateApplication(uint64,byte[])void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['bootstrap(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    selfRegistration: async (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setInfo: async (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.setInfo(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUser: async (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUser(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecIdentityProviderClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']>) {
    const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUser(params))
    return result.return as unknown as BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']
  }

  /**
   * Methods to access state for the current BiatecIdentityProvider app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecIdentityProvider app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          governor: result.governor,
          verificationSetter: result.verificationSetter,
          engagementSetter: result.engagementSetter,
          appBiatecConfigProvider: result.appBiatecConfigProvider,
          version: new BinaryStateValue(result.version),
        }
      },
      /**
       * Get the current value of the governor key in global state
       */
      governor: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("governor")) as string | undefined },
      /**
       * Get the current value of the verificationSetter key in global state
       */
      verificationSetter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("verificationSetter")) as string | undefined },
      /**
       * Get the current value of the engagementSetter key in global state
       */
      engagementSetter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("engagementSetter")) as string | undefined },
      /**
       * Get the current value of the appBiatecConfigProvider key in global state
       */
      appBiatecConfigProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecConfigProvider")) as bigint | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current BiatecIdentityProvider app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the identities map in box state
       */
      identities: {
        /**
         * Get all current values of the identities map in box state
         */
        getMap: async (): Promise<Map<string, IdentityInfo>> => { return (await this.appClient.state.box.getMap("identities")) as Map<string, IdentityInfo> },
        /**
         * Get a current value of the identities map by key from box state
         */
        value: async (key: string): Promise<IdentityInfo | undefined> => { return await this.appClient.state.box.getMapValue("identities", key) as IdentityInfo | undefined },
      },
    },
  }

  public newGroup(): BiatecIdentityProviderComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64)void method call against the BiatecIdentityProvider contract
       */
      bootstrap(params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void method call against the BiatecIdentityProvider contract
       */
      selfRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.selfRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void method call against the BiatecIdentityProvider contract
       */
      setInfo(params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void method call against the BiatecIdentityProvider contract
       */
      sendOnlineKeyRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool) method call against the BiatecIdentityProvider contract
       */
      getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUser(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)', v))
        return this
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64,uint64)uint64 method call against the BiatecIdentityProvider contract
       */
      withdrawExcessAssets(params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawExcessAssets(uint64,uint64,uint64)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the BiatecIdentityProvider contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BiatecIdentityProviderComposer
  }
}
export type BiatecIdentityProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64)void ABI method.
   *
   * Biatec deploys single identity provider smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64)void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['bootstrap(uint64)void'] | undefined]>

  /**
   * Calls the selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  selfRegistration(params?: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | undefined]>

  /**
   * Calls the setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setInfo(params?: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool) ABI method.
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUser(params?: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)'] | undefined]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(params?: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecIdentityProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecIdentityProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecIdentityProviderComposerResults<TReturns>>
}
export type BiatecIdentityProviderComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

