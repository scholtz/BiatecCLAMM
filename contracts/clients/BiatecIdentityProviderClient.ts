/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"BiatecIdentityProvider","desc":"","methods":[{"name":"createApplication","desc":"Initial setup","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","desc":"Biatec deploys single identity provider smart contract","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec amm provider"},{"name":"governor","type":"address"},{"name":"verificationSetter","type":"address"},{"name":"engagementSetter","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateApplication","desc":"addressUdpater from global biatec configuration is allowed to update application","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"newVersion","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"selfRegistration","args":[{"name":"user","type":"address"},{"name":"info","type":"(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool)","struct":"IdentityInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setInfo","args":[{"name":"user","type":"address"},{"name":"info","type":"(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool)","struct":"IdentityInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendOnlineKeyRegistration","desc":"addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"votePK","type":"byte[]"},{"name":"selectionPK","type":"byte[]"},{"name":"stateProofPK","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"},{"name":"fee","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getUser","desc":"Returns user information - fee multiplier, verification class, engagement class ..","readonly":true,"args":[{"name":"user","type":"address","desc":"Get info for specific user address"},{"name":"v","type":"uint8","desc":"Version of the data structure to return"}],"returns":{"type":"(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)","struct":"UserInfoV1"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getUserShort","desc":"Returns short user information - fee multiplier, verification class, engagement class ..","readonly":true,"args":[{"name":"user","type":"address","desc":"Get info for specific user address"},{"name":"v","type":"uint8","desc":"Version of the data structure to return"}],"returns":{"type":"(uint8,uint64,uint64,uint64,bool)","struct":"UserInfoShortV1"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawExcessAssets","desc":"If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec config app. Only addressExecutiveFee is allowed to execute this method."},{"name":"asset","type":"uint64","desc":"Asset to withdraw. If native token, then zero"},{"name":"amount","type":"uint64","desc":"Amount of the asset to be withdrawn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"IdentityInfo":[{"name":"verificationClass","type":"uint64"},{"name":"isLocked","type":"bool"},{"name":"feeMultiplier","type":"uint64"},{"name":"feeMultiplierBase","type":"uint64"},{"name":"kycExpiration","type":"uint64"},{"name":"investorForExpiration","type":"uint64"},{"name":"verificationStatus","type":"uint64"},{"name":"isCompany","type":"bool"},{"name":"personUuid","type":"string"},{"name":"legalEntityUuid","type":"string"},{"name":"biatecEngagementPoints","type":"uint64"},{"name":"biatecEngagementRank","type":"uint64"},{"name":"avmEngagementPoints","type":"uint64"},{"name":"avmEngagementRank","type":"uint64"},{"name":"tradingEngagementPoints","type":"uint64"},{"name":"tradingEngagementRank","type":"uint64"},{"name":"isProfessionalInvestor","type":"bool"}],"UserInfoV1":[{"name":"version","type":"uint8"},{"name":"verificationStatus","type":"uint64"},{"name":"verificationClass","type":"uint64"},{"name":"isCompany","type":"bool"},{"name":"personUuid","type":"string"},{"name":"legalEntityUuid","type":"string"},{"name":"biatecEngagementPoints","type":"uint64"},{"name":"biatecEngagementRank","type":"uint64"},{"name":"avmEngagementPoints","type":"uint64"},{"name":"avmEngagementRank","type":"uint64"},{"name":"tradingEngagementPoints","type":"uint64"},{"name":"tradingEngagementRank","type":"uint64"},{"name":"feeMultiplier","type":"uint64"},{"name":"base","type":"uint64"},{"name":"isLocked","type":"bool"},{"name":"kycExpiration","type":"uint64"},{"name":"investorForExpiration","type":"uint64"},{"name":"isProfessionalInvestor","type":"bool"}],"UserInfoShortV1":[{"name":"version","type":"uint8"},{"name":"verificationClass","type":"uint64"},{"name":"feeMultiplier","type":"uint64"},{"name":"base","type":"uint64"},{"name":"isLocked","type":"bool"}]},"state":{"schema":{"global":{"bytes":4,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"governor":{"key":"Zw==","keyType":"AVMBytes","valueType":"address"},"verificationSetter":{"key":"dg==","keyType":"AVMBytes","valueType":"address"},"engagementSetter":{"key":"ZQ==","keyType":"AVMBytes","valueType":"address"},"appBiatecConfigProvider":{"key":"Qg==","keyType":"AVMBytes","valueType":"uint64"},"version":{"key":"c2N2ZXI=","keyType":"AVMBytes","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"identities":{"keyType":"address","valueType":"IdentityInfo","prefix":"aQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[171],"errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","teal":25},{"pc":[193],"errorMessage":"argument 0 (engagementSetter) for bootstrap must be a address","teal":57},{"pc":[201],"errorMessage":"argument 1 (verificationSetter) for bootstrap must be a address","teal":67},{"pc":[209],"errorMessage":"argument 2 (governor) for bootstrap must be a address","teal":77},{"pc":[232],"errorMessage":"Only creator of the app can set it up","teal":107},{"pc":[260],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":140},{"pc":[267],"errorMessage":"ERR_PAUSED","teal":150},{"pc":[295],"errorMessage":"Configuration app does not match","teal":186},{"pc":[302],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('u')","teal":195},{"pc":[310],"errorMessage":"Only addressUdpater setup in the config can update application","teal":205},{"pc":[316],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":214},{"pc":[323],"errorMessage":"ERR_PAUSED","teal":224},{"pc":[346],"errorMessage":"argument 1 (user) for selfRegistration must be a address","teal":256},{"pc":[363],"errorMessage":"Self registration cannot be executed if address is already registered","teal":278},{"pc":[376],"errorMessage":"Verification status must be empty","teal":291},{"pc":[389],"errorMessage":"verificationClass must equal to 0","teal":304},{"pc":[419],"errorMessage":"personUUID must equal to 00000000-0000-0000-0000-000000000000","teal":332},{"pc":[449],"errorMessage":"legalEntityUUID must equal to 00000000-0000-0000-0000-000000000000","teal":360},{"pc":[462],"errorMessage":"biatecEngagementPoints must equal to 0","teal":373},{"pc":[475],"errorMessage":"biatecEngagementRank must equal to 0","teal":386},{"pc":[488],"errorMessage":"avmEngagementPoints must equal to 0","teal":399},{"pc":[501],"errorMessage":"avmEngagementRank must equal to 0","teal":412},{"pc":[514],"errorMessage":"tradingEngagementPoints must equal to 0","teal":425},{"pc":[527],"errorMessage":"tradingEngagementRank must equal to 0","teal":438},{"pc":[539],"errorMessage":"isLocked must equal to false","teal":451},{"pc":[552],"errorMessage":"kycExpiration must equal to 0","teal":464},{"pc":[565],"errorMessage":"investorForExpiration must equal to 0","teal":477},{"pc":[577],"errorMessage":"isProfessionalInvestor must equal to false","teal":490},{"pc":[591],"errorMessage":"FeeMultiplierBase must be set properly","teal":503},{"pc":[609],"errorMessage":"Initial fee multiplier must be set to 2 * SCALE","teal":516},{"pc":[631],"errorMessage":"argument 1 (user) for setInfo must be a address","teal":543},{"pc":[660],"errorMessage":"FeeMultiplierBase must be set properly","teal":573},{"pc":[726],"errorMessage":"Configuration app does not match","teal":646},{"pc":[732],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":655},{"pc":[740],"errorMessage":"Only fee executor setup in the config can take the collected fees","teal":668},{"pc":[746],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":677},{"pc":[753],"errorMessage":"ERR_PAUSED","teal":687},{"pc":[797],"errorMessage":"argument 0 (v) for getUser must be a uint8","teal":755},{"pc":[806],"errorMessage":"argument 1 (user) for getUser must be a address","teal":766},{"pc":[824],"errorMessage":"Currently supported version of the data structure is '1'","teal":795},{"pc":[961],"errorMessage":"box value does not exist: this.identities(user).value","teal":930},{"pc":[977],"errorMessage":"box value does not exist: this.identities(user).value","teal":941},{"pc":[995],"errorMessage":"box value does not exist: this.identities(user).value","teal":954},{"pc":[1011],"errorMessage":"box value does not exist: this.identities(user).value","teal":965},{"pc":[1050],"errorMessage":"box value does not exist: this.identities(user).value","teal":993},{"pc":[1089],"errorMessage":"box value does not exist: this.identities(user).value","teal":1021},{"pc":[1105],"errorMessage":"box value does not exist: this.identities(user).value","teal":1032},{"pc":[1121],"errorMessage":"box value does not exist: this.identities(user).value","teal":1043},{"pc":[1137],"errorMessage":"box value does not exist: this.identities(user).value","teal":1054},{"pc":[1153],"errorMessage":"box value does not exist: this.identities(user).value","teal":1065},{"pc":[1169],"errorMessage":"box value does not exist: this.identities(user).value","teal":1076},{"pc":[1185],"errorMessage":"box value does not exist: this.identities(user).value","teal":1087},{"pc":[1201],"errorMessage":"box value does not exist: this.identities(user).value","teal":1098},{"pc":[1219],"errorMessage":"box value does not exist: this.identities(user).value","teal":1111},{"pc":[1234],"errorMessage":"box value does not exist: this.identities(user).value","teal":1122},{"pc":[1250],"errorMessage":"box value does not exist: this.identities(user).value","teal":1133},{"pc":[1268],"errorMessage":"box value does not exist: this.identities(user).value","teal":1146},{"pc":[1300],"errorMessage":"argument 0 (v) for getUserShort must be a uint8","teal":1182},{"pc":[1309],"errorMessage":"argument 1 (user) for getUserShort must be a address","teal":1193},{"pc":[1327],"errorMessage":"Currently supported version of the data structure is '1'","teal":1222},{"pc":[1380],"errorMessage":"box value does not exist: this.identities(user).value","teal":1289},{"pc":[1394],"errorMessage":"box value does not exist: this.identities(user).value","teal":1300},{"pc":[1408],"errorMessage":"box value does not exist: this.identities(user).value","teal":1311},{"pc":[1424],"errorMessage":"box value does not exist: this.identities(user).value","teal":1324},{"pc":[1476],"errorMessage":"Configuration app does not match","teal":1394},{"pc":[1482],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":1403},{"pc":[1490],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":1413},{"pc":[1497],"errorMessage":"ERR_PAUSED","teal":1423},{"pc":[1503],"errorMessage":"Only fee executor setup in the config can take the collected fees","teal":1435},{"pc":[1584],"errorMessage":"this contract does not implement the given ABI method for create NoOp","teal":1546},{"pc":[1646],"errorMessage":"this contract does not implement the given ABI method for call NoOp","teal":1560},{"pc":[1660],"errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","teal":1568}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAJAAEgAkCAlOvcA7AGMjQmEAAIAAAAAAAAAAABAAFpAUIBcxVCSUFURUMtSURFTlQtMDEtMDMtMDEEFR98dSQwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAIAAAAAHc1lAAIAAAAADuaygAFc2N2ZXICZWYCAGgCAAABZTEYFIEGCzEZCI0MBYYAAAAAAAAFxAAABXgAAAAAAAAAAAAAAIgAAiNDigAAJwsnBmeJNhoESRUkEkQ2GgNJFSQSRDYaAkkVJBJENhoBF4gAAiNDigQAKDEANjIAcgdIEkQnBIv/Z4ABZ4v+Z4ABdov9ZycPi/xni/8nBWVEjACLACISRIk2GgJXAgA2GgEXiAACI0OKAgAoSYv/JwRkEkSL/4ABdWVEjAAxAIsAEkSL/ycFZUSMAYsBIhJEJwawi/6wJwsnBmeJNhoCNhoBSRUkEkSIAAIjQ4oCACuL/1C9TEgURIv+Nf80/1cpCBcjEkSL/jX/NP9XAAgXIhJEi/41/yEHNP80/08CWUk0/0xZIwslCFhXAgAnCBJEi/41/yEINP80/08CWUk0/0xZIwslCFhXAgAnCBJEi/41/zT/VzYIFyISRIv+Nf80/1c+CBciEkSL/jX/NP9XRggXIhJEi/41/zT/V04IFyISRIv+Nf80/1dWCBciEkSL/jX/NP9XXggXIhJEi/41/zT/IQRTIhJEi/41/zT/VxkIFyISRIv+Nf80/1chCBciEkSL/jX/NP8hBlMiEkSL/jX/NP9XEQgXIQUSRIv+Nf80/1cJCBeBgKjWuQcSRCuL/1BJvEiL/r+JNhoCNhoBSRUkEkSIAAIjQ4oCADEAJw9kEkSL/jX/NP9XEQgXIQUSRCuL/1BJvEiL/r+JNhoIFzYaBxc2GgYXNhoFFzYaBFcCADYaA1cCADYaAlcCADYaAReIAAIjQ4oIAChJi/8nBGQSRIv/JwxlRIwAMQCLABJEi/8nBWVEjAGLASISRLElshCL/bILi/yyP4v7sgyL+bIOi/qyDYv+sgqL+LIBs4knBzYaAkkVIxJEFzYaAUkVJBJEiAAEULAjQ4oCAShHAov+IxJEK4v/UL1MSBRBAGcoKCcNi/4WVwcBiAMsKYgDKCmIAyQqIklUiAMdJw6IAyUnDogDICmIAw8piAMLKYgDBymIAwMpiAL/KYgC+ycJiAL2JwqIAvEqIklUiALqKYgC5imIAuIqIklUiALbSFCMAIsAQgFbK4v/UIwBKCgnDYv+FlcHAYgCv4sBvkQ1/zT/VykIFxaIAq+LAb5ENf80/1cACBcWiAKfKiKLAb5ENf80/4GIA1NUiAKNiwG+RDX/IQc0/zT/TwJZSTT/TFkjCyUIWFcCAEkVFlcGAkxQiAJziwG+RDX/IQg0/zT/TwJZSTT/TFkjCyUIWFcCAEkVFlcGAkxQiAJMiwG+RDX/NP9XNggXFogCL4sBvkQ1/zT/Vz4IFxaIAh+LAb5ENf80/1dGCBcWiAIPiwG+RDX/NP9XTggXFogB/4sBvkQ1/zT/V1YIFxaIAe+LAb5ENf80/1deCBcWiAHfiwG+RDX/NP9XCQgXFogBz4sBvkQ1/zT/VxEIFxaIAb8qIosBvkQ1/zT/IQRTVIgBrosBvkQ1/zT/VxkIFxaIAZ6LAb5ENf80/1chCBcWiAGOKiKLAb5ENf80/yEGU1SIAX1IUIwCiwKMAEYCiScHNhoCSRUjEkQXNhoBSRUkEkSIAARQsCNDigIBKEcCi/4jEkQri/9QvUxIFEEAGov+FlcHASlQJwlQJwpQKiJJVFCMAIsAQgBJK4v/UIwBi/4WVwcBiwG+RDX/NP9XAAgXFlCLAb5ENf80/1cJCBcWUIsBvkQ1/zT/VxEIFxZQKiKLAb5ENf80/yEEU1RQjAKLAowARgKJJwc2GgMXNhoCFzYaAReIAAUWULAjQ4oDAShJi/8nBGQSRIv/JwxlRIwAi/8nBWVEjAGLASISRDEAiwASRIv9i/4xAIgAB4v9jABGAYmKAwCL/iISQQATsSOyEIv/sgeL/bIIIrIBs0IAFbGBBLIQi/+yFIv+shGL/bISIrIBs4mABLhEezY2GgCOAfp8AIAE479cH4AErmTBZ4AEpIz7vIAEZ5FCZIAE6K0YkoAEEn/7e4AEy6LpXTYaAI4H+kz64vv//DL8pv6d/zUAgARfyIWgNhoAjgH6kQCKBAOL/Iv/UIv9i/6JigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==","clear":"Cg=="}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type IdentityInfo = {
  verificationClass: bigint,
  isLocked: boolean,
  feeMultiplier: bigint,
  feeMultiplierBase: bigint,
  kycExpiration: bigint,
  investorForExpiration: bigint,
  verificationStatus: bigint,
  isCompany: boolean,
  personUuid: string,
  legalEntityUuid: string,
  biatecEngagementPoints: bigint,
  biatecEngagementRank: bigint,
  avmEngagementPoints: bigint,
  avmEngagementRank: bigint,
  tradingEngagementPoints: bigint,
  tradingEngagementRank: bigint,
  isProfessionalInvestor: boolean
}


/**
 * Converts the ABI tuple representation of a IdentityInfo to the struct representation
 */
export function IdentityInfoFromTuple(abiTuple: [bigint, boolean, bigint, bigint, bigint, bigint, bigint, boolean, string, string, bigint, bigint, bigint, bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdentityInfo, APP_SPEC.structs) as IdentityInfo
}

export type UserInfoV1 = {
  version: number,
  verificationStatus: bigint,
  verificationClass: bigint,
  isCompany: boolean,
  personUuid: string,
  legalEntityUuid: string,
  biatecEngagementPoints: bigint,
  biatecEngagementRank: bigint,
  avmEngagementPoints: bigint,
  avmEngagementRank: bigint,
  tradingEngagementPoints: bigint,
  tradingEngagementRank: bigint,
  feeMultiplier: bigint,
  base: bigint,
  isLocked: boolean,
  kycExpiration: bigint,
  investorForExpiration: bigint,
  isProfessionalInvestor: boolean
}


/**
 * Converts the ABI tuple representation of a UserInfoV1 to the struct representation
 */
export function UserInfoV1FromTuple(abiTuple: [number, bigint, bigint, boolean, string, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserInfoV1, APP_SPEC.structs) as UserInfoV1
}

export type UserInfoShortV1 = {
  version: number,
  verificationClass: bigint,
  feeMultiplier: bigint,
  base: bigint,
  isLocked: boolean
}


/**
 * Converts the ABI tuple representation of a UserInfoShortV1 to the struct representation
 */
export function UserInfoShortV1FromTuple(abiTuple: [number, bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserInfoShortV1, APP_SPEC.structs) as UserInfoShortV1
}

/**
 * The argument types for the BiatecIdentityProvider contract
 */
export type BiatecIdentityProviderArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(uint64,address,address,address)void': {
      /**
       * Biatec amm provider
       */
      appBiatecConfigProvider: bigint | number
      governor: string
      verificationSetter: string
      engagementSetter: string
    }
    'updateApplication(uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number
      newVersion: Uint8Array
    }
    'selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void': {
      user: string
      info: IdentityInfo
    }
    'setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void': {
      user: string
      info: IdentityInfo
    }
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': {
      appBiatecConfigProvider: bigint | number
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
      fee: bigint | number
    }
    'getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)': {
      /**
       * Get info for specific user address
       */
      user: string
      /**
       * Version of the data structure to return
       */
      v: bigint | number
    }
    'getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)': {
      /**
       * Get info for specific user address
       */
      user: string
      /**
       * Version of the data structure to return
       */
      v: bigint | number
    }
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Asset to withdraw. If native token, then zero
       */
      asset: bigint | number
      /**
       * Amount of the asset to be withdrawn
       */
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(uint64,address,address,address)void': [appBiatecConfigProvider: bigint | number, governor: string, verificationSetter: string, engagementSetter: string]
    'updateApplication(uint64,byte[])void': [appBiatecConfigProvider: bigint | number, newVersion: Uint8Array]
    'selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void': [user: string, info: IdentityInfo]
    'setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void': [user: string, info: IdentityInfo]
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': [appBiatecConfigProvider: bigint | number, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number, fee: bigint | number]
    'getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)': [user: string, v: bigint | number]
    'getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)': [user: string, v: bigint | number]
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': [appBiatecConfigProvider: bigint | number, asset: bigint | number, amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BiatecIdentityProviderReturns = {
  'createApplication()void': void
  'bootstrap(uint64,address,address,address)void': void
  'updateApplication(uint64,byte[])void': void
  'selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void': void
  'setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void': void
  'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': void
  'getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)': UserInfoV1
  'getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)': UserInfoShortV1
  'withdrawExcessAssets(uint64,uint64,uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the BiatecIdentityProvider smart contract.
 */
export type BiatecIdentityProviderTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BiatecIdentityProviderArgs['obj']['createApplication()void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['createApplication()void']
      returns: BiatecIdentityProviderReturns['createApplication()void']
    }>
    & Record<'bootstrap(uint64,address,address,address)void' | 'bootstrap', {
      argsObj: BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']
      returns: BiatecIdentityProviderReturns['bootstrap(uint64,address,address,address)void']
    }>
    & Record<'updateApplication(uint64,byte[])void' | 'updateApplication', {
      argsObj: BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']
      returns: BiatecIdentityProviderReturns['updateApplication(uint64,byte[])void']
    }>
    & Record<'selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void' | 'selfRegistration', {
      argsObj: BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']
      returns: BiatecIdentityProviderReturns['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']
    }>
    & Record<'setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void' | 'setInfo', {
      argsObj: BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']
      returns: BiatecIdentityProviderReturns['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']
    }>
    & Record<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      argsTuple: BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      returns: BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
    }>
    & Record<'getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)' | 'getUser', {
      argsObj: BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']
      argsTuple: BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']
      returns: BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']
    }>
    & Record<'getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)' | 'getUserShort', {
      argsObj: BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']
      argsTuple: BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']
      returns: BiatecIdentityProviderReturns['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']
    }>
    & Record<'withdrawExcessAssets(uint64,uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      argsTuple: BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      returns: BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        governor: string
        verificationSetter: string
        engagementSetter: string
        appBiatecConfigProvider: bigint
        version: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        identities: Map<string, IdentityInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BiatecIdentityProviderSignatures = keyof BiatecIdentityProviderTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecIdentityProviderNonVoidMethodSignatures = keyof BiatecIdentityProviderTypes['methods'] extends infer T ? T extends keyof BiatecIdentityProviderTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BiatecIdentityProvider smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecIdentityProviderSignatures> = BiatecIdentityProviderTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecIdentityProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecIdentityProviderSignatures> = BiatecIdentityProviderTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecIdentityProviderTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BiatecIdentityProviderTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BiatecIdentityProviderCreateCallParams =
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecIdentityProviderUpdateCallParams =
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication'}>
  | Expand<CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication(uint64,byte[])void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecIdentityProviderDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BiatecIdentityProviderCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: BiatecIdentityProviderUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecIdentityProvider smart contract
 */
export abstract class BiatecIdentityProviderParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecIdentityProviderCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecIdentityProviderParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BiatecIdentityProvider smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecIdentityProviderUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(uint64,byte[])void':
            return BiatecIdentityProviderParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the BiatecIdentityProvider smart contract using the updateApplication(uint64,byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(uint64,byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64,address,address,address)void ABI method
   *
   * Biatec deploys single identity provider smart contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,address,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.governor, params.args.verificationSetter, params.args.engagementSetter],
    }
  }
  /**
   * Constructs a no op call for the selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static selfRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.info],
    }
  }
  /**
   * Constructs a no op call for the setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setInfo(params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.info],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool) ABI method
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.v],
    }
  }
  /**
   * Constructs a no op call for the getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool) ABI method
   *
   * Returns short user information - fee multiplier, verification class, engagement class ..
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserShort(params: CallParams<BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.v],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.asset, params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecIdentityProvider smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecIdentityProviderFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BiatecIdentityProviderFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecIdentityProviderClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BiatecIdentityProviderClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BiatecIdentityProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecIdentityProviderDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BiatecIdentityProviderParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BiatecIdentityProviderCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? BiatecIdentityProviderParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (BiatecIdentityProviderUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BiatecIdentityProviderClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the updateApplication(uint64,byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecIdentityProvider smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BiatecIdentityProviderArgs['obj']['createApplication()void'] | BiatecIdentityProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BiatecIdentityProviderParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BiatecIdentityProviderReturns['createApplication()void']) }, appClient: new BiatecIdentityProviderClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BiatecIdentityProvider smart contract
 */
export class BiatecIdentityProviderClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BiatecIdentityProviderClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecIdentityProvider app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BiatecIdentityProviderClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecIdentityProviderNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BiatecIdentityProviderClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BiatecIdentityProviderClient> {
    return new BiatecIdentityProviderClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BiatecIdentityProviderClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BiatecIdentityProviderClient> {
    return new BiatecIdentityProviderClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64,address,address,address)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    selfRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setInfo: (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.setInfo(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUser: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns short user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserShort: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.getUserShort(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64,address,address,address)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    selfRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setInfo: (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.setInfo(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUser: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.getUser(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns short user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserShort: (params: CallParams<BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.getUserShort(params))
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecIdentityProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(BiatecIdentityProviderParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['updateApplication(uint64,byte[])void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `bootstrap(uint64,address,address,address)void` ABI method.
     *
     * Biatec deploys single identity provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['bootstrap(uint64,address,address,address)void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    selfRegistration: async (params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.selfRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setInfo: async (params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.setInfo(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUser: async (params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUser(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns short user information - fee multiplier, verification class, engagement class ..
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserShort: async (params: CallParams<BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUserShort(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'])}
    },

    /**
     * Makes a call to the BiatecIdentityProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.withdrawExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecIdentityProviderClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the BiatecIdentityProvider smart contract using the `getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']>) {
    const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUser(params))
    return result.return as unknown as BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecIdentityProvider smart contract using the `getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns short user information - fee multiplier, verification class, engagement class ..
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserShort(params: CallParams<BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']>) {
    const result = await this.appClient.send.call(BiatecIdentityProviderParamsFactory.getUserShort(params))
    return result.return as unknown as BiatecIdentityProviderReturns['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']
  }

  /**
   * Methods to access state for the current BiatecIdentityProvider app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecIdentityProvider app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          governor: result.governor,
          verificationSetter: result.verificationSetter,
          engagementSetter: result.engagementSetter,
          appBiatecConfigProvider: result.appBiatecConfigProvider,
          version: new BinaryStateValue(result.version),
        }
      },
      /**
       * Get the current value of the governor key in global state
       */
      governor: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("governor")) as string | undefined },
      /**
       * Get the current value of the verificationSetter key in global state
       */
      verificationSetter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("verificationSetter")) as string | undefined },
      /**
       * Get the current value of the engagementSetter key in global state
       */
      engagementSetter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("engagementSetter")) as string | undefined },
      /**
       * Get the current value of the appBiatecConfigProvider key in global state
       */
      appBiatecConfigProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecConfigProvider")) as bigint | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current BiatecIdentityProvider app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the identities map in box state
       */
      identities: {
        /**
         * Get all current values of the identities map in box state
         */
        getMap: async (): Promise<Map<string, IdentityInfo>> => { return (await this.appClient.state.box.getMap("identities")) as Map<string, IdentityInfo> },
        /**
         * Get a current value of the identities map by key from box state
         */
        value: async (key: string): Promise<IdentityInfo | undefined> => { return await this.appClient.state.box.getMapValue("identities", key) as IdentityInfo | undefined },
      },
    },
  }

  public newGroup(): BiatecIdentityProviderComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64,address,address,address)void method call against the BiatecIdentityProvider contract
       */
      bootstrap(params: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void method call against the BiatecIdentityProvider contract
       */
      selfRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.selfRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void method call against the BiatecIdentityProvider contract
       */
      setInfo(params: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void method call against the BiatecIdentityProvider contract
       */
      sendOnlineKeyRegistration(params: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool) method call against the BiatecIdentityProvider contract
       */
      getUser(params: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUser(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)', v))
        return this
      },
      /**
       * Add a getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool) method call against the BiatecIdentityProvider contract
       */
      getUserShort(params: CallParams<BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserShort(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)', v))
        return this
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64,uint64)uint64 method call against the BiatecIdentityProvider contract
       */
      withdrawExcessAssets(params: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawExcessAssets(uint64,uint64,uint64)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the BiatecIdentityProvider contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BiatecIdentityProviderComposer
  }
}
export type BiatecIdentityProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64,address,address,address)void ABI method.
   *
   * Biatec deploys single identity provider smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BiatecIdentityProviderArgs['obj']['bootstrap(uint64,address,address,address)void'] | BiatecIdentityProviderArgs['tuple']['bootstrap(uint64,address,address,address)void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['bootstrap(uint64,address,address,address)void'] | undefined]>

  /**
   * Calls the selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  selfRegistration(params?: CallParams<BiatecIdentityProviderArgs['obj']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['selfRegistration(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | undefined]>

  /**
   * Calls the setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setInfo(params?: CallParams<BiatecIdentityProviderArgs['obj']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | BiatecIdentityProviderArgs['tuple']['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['setInfo(address,(uint64,bool,uint64,uint64,uint64,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool))void'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<BiatecIdentityProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecIdentityProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool) ABI method.
   *
   * Returns user information - fee multiplier, verification class, engagement class ..
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUser(params?: CallParams<BiatecIdentityProviderArgs['obj']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)'] | undefined]>

  /**
   * Calls the getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool) ABI method.
   *
   * Returns short user information - fee multiplier, verification class, engagement class ..
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserShort(params?: CallParams<BiatecIdentityProviderArgs['obj']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | BiatecIdentityProviderArgs['tuple']['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['getUserShort(address,uint8)(uint8,uint64,uint64,uint64,bool)'] | undefined]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(params?: CallParams<BiatecIdentityProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecIdentityProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecIdentityProvider smart contract using the updateApplication(uint64,byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<BiatecIdentityProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecIdentityProviderArgs['tuple']['updateApplication(uint64,byte[])void']>): BiatecIdentityProviderComposer<[...TReturns, BiatecIdentityProviderReturns['updateApplication(uint64,byte[])void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecIdentityProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecIdentityProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecIdentityProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BiatecIdentityProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecIdentityProviderComposerResults<TReturns>>
}
export type BiatecIdentityProviderComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

