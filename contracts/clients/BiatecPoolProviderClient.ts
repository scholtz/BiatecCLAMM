/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"BiatecPoolProvider","desc":"","methods":[{"name":"bootstrap","desc":"Biatec deploys single pool provider smart contract","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec amm provider"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getCurrentStatus","desc":"Returns current status","readonly":true,"args":[{"name":"appPoolId","type":"uint64","desc":"Pool id to retrieve the stats"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","desc":"Pool info statistics","struct":"AppPoolInfo"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","desc":"Initial setup","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","desc":"addressUdpater from global biatec configuration is allowed to update application","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"newVersion","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"setNativeTokenName","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"nativeTokenName","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"loadCLAMMContractData","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"approvalProgramSize","type":"uint64"},{"name":"offset","type":"uint64"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"noop","desc":"No op tx to increase the app call and box size limits","args":[{"name":"_i","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deployPool","desc":"Anybody can call this method to bootstrap new clamm pool","args":[{"name":"assetA","type":"uint64","desc":"Asset A ID must be lower then Asset B ID"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec amm provider"},{"name":"appBiatecPoolProvider","type":"uint64","desc":"Pool provider"},{"name":"txSeed","type":"pay","desc":"Seed transaction so that smart contract can opt in to the assets"},{"name":"fee","type":"uint64","desc":"Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%"},{"name":"priceMin","type":"uint64","desc":"Min price range. At this point all assets are in asset A."},{"name":"priceMax","type":"uint64","desc":"Max price range. At this point all assets are in asset B."},{"name":"currentPrice","type":"uint64","desc":"Deployer can specify the current price for easier deployemnt."},{"name":"verificationClass","type":"uint64","desc":"Minimum verification level from the biatec identity. Level 0 means no kyc."}],"returns":{"type":"uint64","desc":"LP token ID"},"actions":{"create":[],"call":["NoOp"]}},{"name":"registerPool","desc":"This method is called by constructor of the luquidity pool","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"registerTrade","desc":"This metod registers the trade and calculates and store the trade statistics","args":[{"name":"appPoolId","type":"uint64","desc":"Liquidity pool smart contract"},{"name":"assetA","type":"uint64","desc":"Asset A"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"priceFrom","type":"uint64","desc":"The original price"},{"name":"priceTo","type":"uint64","desc":"The new price"},{"name":"amountA","type":"uint64","desc":"Asset A amount spent or received"},{"name":"amountB","type":"uint64","desc":"Asset B amount spent or received"},{"name":"feeAmountA","type":"uint64","desc":"Fees paid in asset A if any"},{"name":"feeAmountB","type":"uint64","desc":"Fees paid in asset B if any"},{"name":"s","type":"uint64","desc":"Scale multiplier"}],"returns":{"type":"void"},"events":[{"name":"tradeEvent","args":[{"name":"appPoolId","type":"uint64"},{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"},{"name":"priceFrom","type":"uint64"},{"name":"priceTo","type":"uint64"},{"name":"amountA","type":"uint64"},{"name":"amountB","type":"uint64"},{"name":"feeAmountA","type":"uint64"},{"name":"feeAmountB","type":"uint64"},{"name":"s","type":"uint64"}],"desc":""}],"actions":{"create":[],"call":["NoOp"]}},{"name":"sendOnlineKeyRegistration","desc":"addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"votePK","type":"byte[]"},{"name":"selectionPK","type":"byte[]"},{"name":"stateProofPK","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"},{"name":"fee","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawExcessAssets","desc":"If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec config app. Only addressExecutiveFee is allowed to execute this method."},{"name":"asset","type":"uint64","desc":"Asset to withdraw. If native token, then zero"},{"name":"amount","type":"uint64","desc":"Amount of the asset to be withdrawn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPrice","desc":"Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.","readonly":true,"args":[{"name":"assetA","type":"uint64","desc":"Asset A must be less than Asset B"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"appPoolId","type":"uint64","desc":"Liquidity pool app id. If zero, then aggregated price info is returned."}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","desc":"AppPoolInfo with the price info for the asset pair","struct":"AppPoolInfo"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateAssetBWithdrawOnLpDeposit","desc":"Calculates how much asset B will be taken from the smart contract on LP asset deposit","readonly":true,"args":[{"name":"inAmount","type":"uint256","desc":"LP Asset amount in Base decimal representation.."},{"name":"assetBBalance","type":"uint256","desc":"Asset B balance. Variable ab, in base scale"},{"name":"liquidity","type":"uint256","desc":"Current liquidity. Variable L, in base scale"}],"returns":{"type":"uint256","desc":"Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"},"actions":{"create":[],"call":["NoOp"]}}],"events":[{"name":"tradeEvent","args":[{"name":"appPoolId","type":"uint64"},{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"},{"name":"priceFrom","type":"uint64"},{"name":"priceTo","type":"uint64"},{"name":"amountA","type":"uint64"},{"name":"amountB","type":"uint64"},{"name":"feeAmountA","type":"uint64"},{"name":"feeAmountB","type":"uint64"},{"name":"s","type":"uint64"}],"desc":""}],"arcs":[4,56],"structs":{"AppPoolInfo":[{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"},{"name":"verificationClass","type":"uint64"},{"name":"latestPrice","type":"uint64"},{"name":"period1Duration","type":"uint64"},{"name":"period1NowVolumeA","type":"uint64"},{"name":"period1NowVolumeB","type":"uint64"},{"name":"period1NowFeeA","type":"uint64"},{"name":"period1NowFeeB","type":"uint64"},{"name":"period1NowVwap","type":"uint64"},{"name":"period1NowTime","type":"uint64"},{"name":"period1PrevVolumeA","type":"uint64"},{"name":"period1PrevVolumeB","type":"uint64"},{"name":"period1PrevFeeA","type":"uint64"},{"name":"period1PrevFeeB","type":"uint64"},{"name":"period1PrevVwap","type":"uint64"},{"name":"period1PrevTime","type":"uint64"},{"name":"period2Duration","type":"uint64"},{"name":"period2NowVolumeA","type":"uint64"},{"name":"period2NowVolumeB","type":"uint64"},{"name":"period2NowFeeA","type":"uint64"},{"name":"period2NowFeeB","type":"uint64"},{"name":"period2NowVwap","type":"uint64"},{"name":"period2NowTime","type":"uint64"},{"name":"period2PrevVolumeA","type":"uint64"},{"name":"period2PrevVolumeB","type":"uint64"},{"name":"period2PrevFeeA","type":"uint64"},{"name":"period2PrevFeeB","type":"uint64"},{"name":"period2PrevVwap","type":"uint64"},{"name":"period2PrevTime","type":"uint64"},{"name":"period3Duration","type":"uint64"},{"name":"period3NowVolumeA","type":"uint64"},{"name":"period3NowVolumeB","type":"uint64"},{"name":"period3NowFeeA","type":"uint64"},{"name":"period3NowFeeB","type":"uint64"},{"name":"period3NowVwap","type":"uint64"},{"name":"period3NowTime","type":"uint64"},{"name":"period3PrevVolumeA","type":"uint64"},{"name":"period3PrevVolumeB","type":"uint64"},{"name":"period3PrevFeeA","type":"uint64"},{"name":"period3PrevFeeB","type":"uint64"},{"name":"period3PrevVwap","type":"uint64"},{"name":"period3PrevTime","type":"uint64"},{"name":"period4Duration","type":"uint64"},{"name":"period4NowVolumeA","type":"uint64"},{"name":"period4NowVolumeB","type":"uint64"},{"name":"period4NowFeeA","type":"uint64"},{"name":"period4NowFeeB","type":"uint64"},{"name":"period4NowVwap","type":"uint64"},{"name":"period4NowTime","type":"uint64"},{"name":"period4PrevVolumeA","type":"uint64"},{"name":"period4PrevVolumeB","type":"uint64"},{"name":"period4PrevFeeA","type":"uint64"},{"name":"period4PrevFeeB","type":"uint64"},{"name":"period4PrevVwap","type":"uint64"},{"name":"period4PrevTime","type":"uint64"}],"PoolConfig":[{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"},{"name":"min","type":"uint64"},{"name":"max","type":"uint64"},{"name":"fee","type":"uint64"},{"name":"verificationClass","type":"uint64"}],"FullConfig":[{"name":"appId","type":"uint64"},{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"},{"name":"min","type":"uint64"},{"name":"max","type":"uint64"},{"name":"fee","type":"uint64"},{"name":"lpTokenId","type":"uint64"},{"name":"verificationClass","type":"uint8"}],"AssetsCombined":[{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"}]},"state":{"schema":{"global":{"bytes":2,"ints":16},"local":{"bytes":0,"ints":0}},"keys":{"global":{"period1":{"key":"cDE=","keyType":"AVMBytes","valueType":"uint64"},"period2":{"key":"cDI=","keyType":"AVMBytes","valueType":"uint64"},"period3":{"key":"cDM=","keyType":"AVMBytes","valueType":"uint64"},"period4":{"key":"cDQ=","keyType":"AVMBytes","valueType":"uint64"},"nativeTokenName":{"key":"bnQ=","keyType":"AVMBytes","valueType":"AVMBytes"},"recentPools1":{"key":"cnAx","keyType":"AVMBytes","valueType":"uint64"},"recentPools2":{"key":"cnAy","keyType":"AVMBytes","valueType":"uint64"},"recentPools3":{"key":"cnAz","keyType":"AVMBytes","valueType":"uint64"},"recentPools4":{"key":"cnA0","keyType":"AVMBytes","valueType":"uint64"},"recentPools5":{"key":"cnA1","keyType":"AVMBytes","valueType":"uint64"},"recentPools6":{"key":"cnA2","keyType":"AVMBytes","valueType":"uint64"},"recentPools7":{"key":"cnA3","keyType":"AVMBytes","valueType":"uint64"},"recentPools8":{"key":"cnA4","keyType":"AVMBytes","valueType":"uint64"},"recentPools9":{"key":"cnA5","keyType":"AVMBytes","valueType":"uint64"},"recentPools10":{"key":"cnAxMA==","keyType":"AVMBytes","valueType":"uint64"},"recentPoolsIndex":{"key":"cnBp","keyType":"AVMBytes","valueType":"uint64"},"appBiatecConfigProvider":{"key":"Qg==","keyType":"AVMBytes","valueType":"uint64"},"version":{"key":"c2N2ZXI=","keyType":"AVMBytes","valueType":"AVMBytes"}},"local":{},"box":{"clammApprovalProgram1":{"key":"Y2FwYjE=","keyType":"AVMBytes","valueType":"AVMBytes"},"clammApprovalProgram2":{"key":"Y2FwYjI=","keyType":"AVMBytes","valueType":"AVMBytes"},"clammApprovalProgram3":{"key":"Y2FwYjM=","keyType":"AVMBytes","valueType":"AVMBytes"}}},"maps":{"global":{},"local":{},"box":{"pools":{"keyType":"uint64","valueType":"AppPoolInfo","prefix":"cA=="},"poolsByConfig":{"keyType":"PoolConfig","valueType":"uint64","prefix":"cGM="},"fullConfigs":{"keyType":"FullConfig","valueType":"uint64","prefix":"ZmM="},"poolsAggregated":{"keyType":"AssetsCombined","valueType":"AppPoolInfo","prefix":"cw=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[292],"errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","teal":25},{"pc":[315],"errorMessage":"Only creator of the app can set it up","teal":57},{"pc":[325],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":72},{"pc":[332],"errorMessage":"ERR_PAUSED","teal":82},{"pc":[356],"errorMessage":"box value does not exist: this.pools(appPoolId.id).value","teal":119},{"pc":[481],"errorMessage":"Configuration app does not match","teal":276},{"pc":[487],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('u')","teal":285},{"pc":[495],"errorMessage":"Only addressUdpater setup in the config can update application","teal":295},{"pc":[500],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":304},{"pc":[507],"errorMessage":"ERR_PAUSED","teal":314},{"pc":[547],"errorMessage":"Configuration app does not match","teal":364},{"pc":[553],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('u')","teal":373},{"pc":[561],"errorMessage":"Only addressUdpater setup in the config can update application","teal":383},{"pc":[566],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":392},{"pc":[573],"errorMessage":"ERR_PAUSED","teal":402},{"pc":[616],"errorMessage":"Native token name must not be empty","teal":446},{"pc":[656],"errorMessage":"Configuration app does not match","teal":493},{"pc":[662],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('u')","teal":502},{"pc":[670],"errorMessage":"Only addressUdpater setup in the config can update the AMM application","teal":512},{"pc":[900],"errorMessage":"argument 5 (txSeed) for deployPool must be a pay transaction","teal":754},{"pc":[937],"errorMessage":"transaction verification failed: {\"txn\":\"txSeed\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":811},{"pc":[948],"errorMessage":"transaction verification failed: {\"txn\":\"txSeed\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=5_000_000\"}","teal":820},{"pc":[961],"errorMessage":"E_CONFIG","teal":837},{"pc":[973],"errorMessage":"box value does not exist: this.clammApprovalProgram1.value","teal":878},{"pc":[979],"errorMessage":"box value does not exist: this.clammApprovalProgram2.value","teal":884},{"pc":[1321],"errorMessage":"global state value does not exist: appClammPool.globalState('a')","teal":1284},{"pc":[1330],"errorMessage":"global state value does not exist: appClammPool.globalState('b')","teal":1294},{"pc":[1339],"errorMessage":"global state value does not exist: appClammPool.globalState('c')","teal":1304},{"pc":[1351],"errorMessage":"global state value does not exist: appClammPool.globalState('pMin')","teal":1314},{"pc":[1363],"errorMessage":"global state value does not exist: appClammPool.globalState('pMax')","teal":1324},{"pc":[1372],"errorMessage":"global state value does not exist: appClammPool.globalState('f')","teal":1334},{"pc":[1382],"errorMessage":"global state value does not exist: appClammPool.globalState('lp')","teal":1344},{"pc":[1395],"errorMessage":"global state value does not exist: appClammPool.globalState('price')","teal":1354},{"pc":[1442],"errorMessage":"Pool with the same configuration is already registered","teal":1408},{"pc":[1486],"errorMessage":"verificationClass as uint8 overflowed 8 bits","teal":1458},{"pc":[1617],"errorMessage":"App not in recently created apps","teal":1582},{"pc":[2237],"errorMessage":"((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) / (period1NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":2332},{"pc":[2618],"errorMessage":"((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) / (period2NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":2723},{"pc":[2999],"errorMessage":"((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) / (period3NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":3114},{"pc":[3380],"errorMessage":"((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) / (period4NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":3505},{"pc":[3445],"errorMessage":"box value does not exist: this.pools(appPoolId.id).value","teal":3571},{"pc":[3862],"errorMessage":"((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) / (period1NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":3971},{"pc":[4229],"errorMessage":"((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) / (period2NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":4303},{"pc":[4596],"errorMessage":"((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) / (period3NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":4635},{"pc":[4963],"errorMessage":"((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) / (period4NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits","teal":4967},{"pc":[5026],"errorMessage":"box value does not exist: this.poolsAggregated(aggregatedIndex).value","teal":5025},{"pc":[5278],"errorMessage":"Configuration app does not match","teal":5273},{"pc":[5284],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":5282},{"pc":[5291],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":5292},{"pc":[5298],"errorMessage":"ERR_PAUSED","teal":5302},{"pc":[5304],"errorMessage":"Only fee executor setup in the config can take the collected fees","teal":5311},{"pc":[5373],"errorMessage":"Configuration app does not match","teal":5415},{"pc":[5379],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":5424},{"pc":[5386],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":5434},{"pc":[5393],"errorMessage":"ERR_PAUSED","teal":5444},{"pc":[5399],"errorMessage":"Only fee executor setup in the config can take the collected fees","teal":5453},{"pc":[5540],"errorMessage":"box value does not exist: this.pools(appPoolId.id).value","teal":5655},{"pc":[5560],"errorMessage":"The asset pair is not registered","teal":5681},{"pc":[5566],"errorMessage":"box value does not exist: this.poolsAggregated(aggregatedIndex).value","teal":5691},{"pc":[5582],"errorMessage":"argument 0 (liquidity) for calculateAssetBWithdrawOnLpDeposit must be a uint256","teal":5714},{"pc":[5591],"errorMessage":"argument 1 (assetBBalance) for calculateAssetBWithdrawOnLpDeposit must be a uint256","teal":5724},{"pc":[5600],"errorMessage":"argument 2 (inAmount) for calculateAssetBWithdrawOnLpDeposit must be a uint256","teal":5734},{"pc":[5609],"errorMessage":"calculateAssetBWithdrawOnLpDeposit return value overflowed 256 bits","teal":5744},{"pc":[5685],"errorMessage":"this contract does not implement the given ABI method for create NoOp","teal":5796},{"pc":[5787],"errorMessage":"this contract does not implement the given ABI method for call NoOp","teal":5815},{"pc":[5801],"errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","teal":5823}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"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","clear":"Cg=="}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AppPoolInfo = {
  assetA: bigint,
  assetB: bigint,
  verificationClass: bigint,
  latestPrice: bigint,
  period1Duration: bigint,
  period1NowVolumeA: bigint,
  period1NowVolumeB: bigint,
  period1NowFeeA: bigint,
  period1NowFeeB: bigint,
  period1NowVwap: bigint,
  period1NowTime: bigint,
  period1PrevVolumeA: bigint,
  period1PrevVolumeB: bigint,
  period1PrevFeeA: bigint,
  period1PrevFeeB: bigint,
  period1PrevVwap: bigint,
  period1PrevTime: bigint,
  period2Duration: bigint,
  period2NowVolumeA: bigint,
  period2NowVolumeB: bigint,
  period2NowFeeA: bigint,
  period2NowFeeB: bigint,
  period2NowVwap: bigint,
  period2NowTime: bigint,
  period2PrevVolumeA: bigint,
  period2PrevVolumeB: bigint,
  period2PrevFeeA: bigint,
  period2PrevFeeB: bigint,
  period2PrevVwap: bigint,
  period2PrevTime: bigint,
  period3Duration: bigint,
  period3NowVolumeA: bigint,
  period3NowVolumeB: bigint,
  period3NowFeeA: bigint,
  period3NowFeeB: bigint,
  period3NowVwap: bigint,
  period3NowTime: bigint,
  period3PrevVolumeA: bigint,
  period3PrevVolumeB: bigint,
  period3PrevFeeA: bigint,
  period3PrevFeeB: bigint,
  period3PrevVwap: bigint,
  period3PrevTime: bigint,
  period4Duration: bigint,
  period4NowVolumeA: bigint,
  period4NowVolumeB: bigint,
  period4NowFeeA: bigint,
  period4NowFeeB: bigint,
  period4NowVwap: bigint,
  period4NowTime: bigint,
  period4PrevVolumeA: bigint,
  period4PrevVolumeB: bigint,
  period4PrevFeeA: bigint,
  period4PrevFeeB: bigint,
  period4PrevVwap: bigint,
  period4PrevTime: bigint
}


/**
 * Converts the ABI tuple representation of a AppPoolInfo to the struct representation
 */
export function AppPoolInfoFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AppPoolInfo, APP_SPEC.structs) as AppPoolInfo
}

export type PoolConfig = {
  assetA: bigint,
  assetB: bigint,
  min: bigint,
  max: bigint,
  fee: bigint,
  verificationClass: bigint
}


/**
 * Converts the ABI tuple representation of a PoolConfig to the struct representation
 */
export function PoolConfigFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PoolConfig, APP_SPEC.structs) as PoolConfig
}

export type FullConfig = {
  appId: bigint,
  assetA: bigint,
  assetB: bigint,
  min: bigint,
  max: bigint,
  fee: bigint,
  lpTokenId: bigint,
  verificationClass: number
}


/**
 * Converts the ABI tuple representation of a FullConfig to the struct representation
 */
export function FullConfigFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, number]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.FullConfig, APP_SPEC.structs) as FullConfig
}

export type AssetsCombined = {
  assetA: bigint,
  assetB: bigint
}


/**
 * Converts the ABI tuple representation of a AssetsCombined to the struct representation
 */
export function AssetsCombinedFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetsCombined, APP_SPEC.structs) as AssetsCombined
}

/**
 * The argument types for the BiatecPoolProvider contract
 */
export type BiatecPoolProviderArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap(uint64)void': {
      /**
       * Biatec amm provider
       */
      appBiatecConfigProvider: bigint | number
    }
    'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * Pool id to retrieve the stats
       */
      appPoolId: bigint | number
    }
    'createApplication()void': Record<string, never>
    'updateApplication(uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number
      newVersion: Uint8Array
    }
    'setNativeTokenName(uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number
      nativeTokenName: Uint8Array
    }
    'loadCLAMMContractData(uint64,uint64,uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number
      approvalProgramSize: bigint | number
      offset: bigint | number
      data: Uint8Array
    }
    'noop(uint64)void': {
      _i: bigint | number
    }
    'deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': {
      /**
       * Asset A ID must be lower then Asset B ID
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * Biatec amm provider
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Pool provider
       */
      appBiatecPoolProvider: bigint | number
      /**
       * Seed transaction so that smart contract can opt in to the assets
       */
      txSeed: AppMethodCallTransactionArgument
      /**
       * Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%
       */
      fee: bigint | number
      /**
       * Min price range. At this point all assets are in asset A.
       */
      priceMin: bigint | number
      /**
       * Max price range. At this point all assets are in asset B.
       */
      priceMax: bigint | number
      /**
       * Deployer can specify the current price for easier deployemnt.
       */
      currentPrice: bigint | number
      /**
       * Minimum verification level from the biatec identity. Level 0 means no kyc.
       */
      verificationClass: bigint | number
    }
    'registerPool()void': Record<string, never>
    'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': {
      /**
       * Liquidity pool smart contract
       */
      appPoolId: bigint | number
      /**
       * Asset A
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * The original price
       */
      priceFrom: bigint | number
      /**
       * The new price
       */
      priceTo: bigint | number
      /**
       * Asset A amount spent or received
       */
      amountA: bigint | number
      /**
       * Asset B amount spent or received
       */
      amountB: bigint | number
      /**
       * Fees paid in asset A if any
       */
      feeAmountA: bigint | number
      /**
       * Fees paid in asset B if any
       */
      feeAmountB: bigint | number
      /**
       * Scale multiplier
       */
      s: bigint | number
    }
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': {
      appBiatecConfigProvider: bigint | number
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
      fee: bigint | number
    }
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Asset to withdraw. If native token, then zero
       */
      asset: bigint | number
      /**
       * Amount of the asset to be withdrawn
       */
      amount: bigint | number
    }
    'getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * Asset A must be less than Asset B
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * Liquidity pool app id. If zero, then aggregated price info is returned.
       */
      appPoolId: bigint | number
    }
    'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': {
      /**
       * LP Asset amount in Base decimal representation..
       */
      inAmount: bigint | number
      /**
       * Asset B balance. Variable ab, in base scale
       */
      assetBBalance: bigint | number
      /**
       * Current liquidity. Variable L, in base scale
       */
      liquidity: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap(uint64)void': [appBiatecConfigProvider: bigint | number]
    'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [appPoolId: bigint | number]
    'createApplication()void': []
    'updateApplication(uint64,byte[])void': [appBiatecConfigProvider: bigint | number, newVersion: Uint8Array]
    'setNativeTokenName(uint64,byte[])void': [appBiatecConfigProvider: bigint | number, nativeTokenName: Uint8Array]
    'loadCLAMMContractData(uint64,uint64,uint64,byte[])void': [appBiatecConfigProvider: bigint | number, approvalProgramSize: bigint | number, offset: bigint | number, data: Uint8Array]
    'noop(uint64)void': [_i: bigint | number]
    'deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': [assetA: bigint | number, assetB: bigint | number, appBiatecConfigProvider: bigint | number, appBiatecPoolProvider: bigint | number, txSeed: AppMethodCallTransactionArgument, fee: bigint | number, priceMin: bigint | number, priceMax: bigint | number, currentPrice: bigint | number, verificationClass: bigint | number]
    'registerPool()void': []
    'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': [appPoolId: bigint | number, assetA: bigint | number, assetB: bigint | number, priceFrom: bigint | number, priceTo: bigint | number, amountA: bigint | number, amountB: bigint | number, feeAmountA: bigint | number, feeAmountB: bigint | number, s: bigint | number]
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': [appBiatecConfigProvider: bigint | number, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number, fee: bigint | number]
    'withdrawExcessAssets(uint64,uint64,uint64)uint64': [appBiatecConfigProvider: bigint | number, asset: bigint | number, amount: bigint | number]
    'getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [assetA: bigint | number, assetB: bigint | number, appPoolId: bigint | number]
    'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': [inAmount: bigint | number, assetBBalance: bigint | number, liquidity: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BiatecPoolProviderReturns = {
  'bootstrap(uint64)void': void
  'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': AppPoolInfo
  'createApplication()void': void
  'updateApplication(uint64,byte[])void': void
  'setNativeTokenName(uint64,byte[])void': void
  'loadCLAMMContractData(uint64,uint64,uint64,byte[])void': void
  'noop(uint64)void': void
  'deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'registerPool()void': void
  'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': void
  'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': void
  'withdrawExcessAssets(uint64,uint64,uint64)uint64': bigint
  'getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': AppPoolInfo
  'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': bigint
}

/**
 * Defines the types of available calls and state of the BiatecPoolProvider smart contract.
 */
export type BiatecPoolProviderTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(uint64)void' | 'bootstrap', {
      argsObj: BiatecPoolProviderArgs['obj']['bootstrap(uint64)void']
      argsTuple: BiatecPoolProviderArgs['tuple']['bootstrap(uint64)void']
      returns: BiatecPoolProviderReturns['bootstrap(uint64)void']
    }>
    & Record<'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getCurrentStatus', {
      argsObj: BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * Pool info statistics
       */
      returns: BiatecPoolProviderReturns['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BiatecPoolProviderArgs['obj']['createApplication()void']
      argsTuple: BiatecPoolProviderArgs['tuple']['createApplication()void']
      returns: BiatecPoolProviderReturns['createApplication()void']
    }>
    & Record<'updateApplication(uint64,byte[])void' | 'updateApplication', {
      argsObj: BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void']
      argsTuple: BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']
      returns: BiatecPoolProviderReturns['updateApplication(uint64,byte[])void']
    }>
    & Record<'setNativeTokenName(uint64,byte[])void' | 'setNativeTokenName', {
      argsObj: BiatecPoolProviderArgs['obj']['setNativeTokenName(uint64,byte[])void']
      argsTuple: BiatecPoolProviderArgs['tuple']['setNativeTokenName(uint64,byte[])void']
      returns: BiatecPoolProviderReturns['setNativeTokenName(uint64,byte[])void']
    }>
    & Record<'loadCLAMMContractData(uint64,uint64,uint64,byte[])void' | 'loadCLAMMContractData', {
      argsObj: BiatecPoolProviderArgs['obj']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']
      argsTuple: BiatecPoolProviderArgs['tuple']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']
      returns: BiatecPoolProviderReturns['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']
    }>
    & Record<'noop(uint64)void' | 'noop', {
      argsObj: BiatecPoolProviderArgs['obj']['noop(uint64)void']
      argsTuple: BiatecPoolProviderArgs['tuple']['noop(uint64)void']
      returns: BiatecPoolProviderReturns['noop(uint64)void']
    }>
    & Record<'deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64' | 'deployPool', {
      argsObj: BiatecPoolProviderArgs['obj']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: BiatecPoolProviderArgs['tuple']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      /**
       * LP token ID
       */
      returns: BiatecPoolProviderReturns['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'registerPool()void' | 'registerPool', {
      argsObj: BiatecPoolProviderArgs['obj']['registerPool()void']
      argsTuple: BiatecPoolProviderArgs['tuple']['registerPool()void']
      returns: BiatecPoolProviderReturns['registerPool()void']
    }>
    & Record<'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'registerTrade', {
      argsObj: BiatecPoolProviderArgs['obj']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: BiatecPoolProviderArgs['tuple']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      returns: BiatecPoolProviderReturns['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: BiatecPoolProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      argsTuple: BiatecPoolProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      returns: BiatecPoolProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
    }>
    & Record<'withdrawExcessAssets(uint64,uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: BiatecPoolProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      argsTuple: BiatecPoolProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']
      returns: BiatecPoolProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64']
    }>
    & Record<'getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getPrice', {
      argsObj: BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * AppPoolInfo with the price info for the asset pair
       */
      returns: BiatecPoolProviderReturns['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' | 'calculateAssetBWithdrawOnLpDeposit', {
      argsObj: BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      argsTuple: BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      /**
       * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: BiatecPoolProviderReturns['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        period1: bigint
        period2: bigint
        period3: bigint
        period4: bigint
        nativeTokenName: BinaryState
        recentPools1: bigint
        recentPools2: bigint
        recentPools3: bigint
        recentPools4: bigint
        recentPools5: bigint
        recentPools6: bigint
        recentPools7: bigint
        recentPools8: bigint
        recentPools9: bigint
        recentPools10: bigint
        recentPoolsIndex: bigint
        appBiatecConfigProvider: bigint
        version: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {
        clammApprovalProgram1: BinaryState
        clammApprovalProgram2: BinaryState
        clammApprovalProgram3: BinaryState
      }
      maps: {
        pools: Map<bigint | number, AppPoolInfo>
        poolsByConfig: Map<PoolConfig, bigint>
        fullConfigs: Map<FullConfig, bigint>
        poolsAggregated: Map<AssetsCombined, AppPoolInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BiatecPoolProviderSignatures = keyof BiatecPoolProviderTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecPoolProviderNonVoidMethodSignatures = keyof BiatecPoolProviderTypes['methods'] extends infer T ? T extends keyof BiatecPoolProviderTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BiatecPoolProvider smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecPoolProviderSignatures> = BiatecPoolProviderTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecPoolProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecPoolProviderSignatures> = BiatecPoolProviderTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecPoolProviderTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BiatecPoolProviderTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BiatecPoolProviderCreateCallParams =
  | Expand<CallParams<BiatecPoolProviderArgs['obj']['createApplication()void'] | BiatecPoolProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BiatecPoolProviderArgs['obj']['createApplication()void'] | BiatecPoolProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecPoolProviderUpdateCallParams =
  | Expand<CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication'}>
  | Expand<CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication(uint64,byte[])void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecPoolProviderDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BiatecPoolProviderCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: BiatecPoolProviderUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecPoolProvider smart contract
 */
export abstract class BiatecPoolProviderParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecPoolProviderCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecPoolProviderParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BiatecPoolProvider smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BiatecPoolProviderArgs['obj']['createApplication()void'] | BiatecPoolProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecPoolProviderUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(uint64,byte[])void':
            return BiatecPoolProviderParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the BiatecPoolProvider smart contract using the updateApplication(uint64,byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(uint64,byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64)void ABI method
   *
   * Biatec deploys single pool provider smart contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BiatecPoolProviderArgs['obj']['bootstrap(uint64)void'] | BiatecPoolProviderArgs['tuple']['bootstrap(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider],
    }
  }
  /**
   * Constructs a no op call for the getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Returns current status
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentStatus(params: CallParams<BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appPoolId],
    }
  }
  /**
   * Constructs a no op call for the setNativeTokenName(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setNativeTokenName(params: CallParams<BiatecPoolProviderArgs['obj']['setNativeTokenName(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['setNativeTokenName(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setNativeTokenName(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.nativeTokenName],
    }
  }
  /**
   * Constructs a no op call for the loadCLAMMContractData(uint64,uint64,uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static loadClammContractData(params: CallParams<BiatecPoolProviderArgs['obj']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'loadCLAMMContractData(uint64,uint64,uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.approvalProgramSize, params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the noop(uint64)void ABI method
   *
   * No op tx to increase the app call and box size limits
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noop(params: CallParams<BiatecPoolProviderArgs['obj']['noop(uint64)void'] | BiatecPoolProviderArgs['tuple']['noop(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'noop(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args._i],
    }
  }
  /**
   * Constructs a no op call for the deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * Anybody can call this method to bootstrap new clamm pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deployPool(params: CallParams<BiatecPoolProviderArgs['obj']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetA, params.args.assetB, params.args.appBiatecConfigProvider, params.args.appBiatecPoolProvider, params.args.txSeed, params.args.fee, params.args.priceMin, params.args.priceMax, params.args.currentPrice, params.args.verificationClass],
    }
  }
  /**
   * Constructs a no op call for the registerPool()void ABI method
   *
   * This method is called by constructor of the luquidity pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerPool(params: CallParams<BiatecPoolProviderArgs['obj']['registerPool()void'] | BiatecPoolProviderArgs['tuple']['registerPool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerPool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * This metod registers the trade and calculates and store the trade statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerTrade(params: CallParams<BiatecPoolProviderArgs['obj']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appPoolId, params.args.assetA, params.args.assetB, params.args.priceFrom, params.args.priceTo, params.args.amountA, params.args.amountB, params.args.feeAmountA, params.args.feeAmountB, params.args.s],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<BiatecPoolProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(params: CallParams<BiatecPoolProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.asset, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPrice(params: CallParams<BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetA, params.args.assetB, params.args.appPoolId],
    }
  }
  /**
   * Constructs a no op call for the calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset B will be taken from the smart contract on LP asset deposit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetBWithdrawOnLpDeposit(params: CallParams<BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inAmount, params.args.assetBBalance, params.args.liquidity],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecPoolProvider smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecPoolProviderFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BiatecPoolProviderFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecPoolProviderClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BiatecPoolProviderClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BiatecPoolProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecPoolProviderDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BiatecPoolProviderParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BiatecPoolProviderCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? BiatecPoolProviderParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (BiatecPoolProviderUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BiatecPoolProviderClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecPoolProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BiatecPoolProviderArgs['obj']['createApplication()void'] | BiatecPoolProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BiatecPoolProviderParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecPoolProvider smart contract using the updateApplication(uint64,byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(BiatecPoolProviderParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecPoolProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BiatecPoolProviderArgs['obj']['createApplication()void'] | BiatecPoolProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BiatecPoolProviderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecPoolProvider smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BiatecPoolProviderArgs['obj']['createApplication()void'] | BiatecPoolProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BiatecPoolProviderParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BiatecPoolProviderReturns['createApplication()void']) }, appClient: new BiatecPoolProviderClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BiatecPoolProvider smart contract
 */
export class BiatecPoolProviderClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BiatecPoolProviderClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecPoolProvider app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BiatecPoolProviderClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecPoolProviderNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BiatecPoolProviderClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BiatecPoolProviderClient> {
    return new BiatecPoolProviderClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BiatecPoolProviderClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BiatecPoolProviderClient> {
    return new BiatecPoolProviderClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecPoolProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(BiatecPoolProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecPoolProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `bootstrap(uint64)void` ABI method.
     *
     * Biatec deploys single pool provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BiatecPoolProviderArgs['obj']['bootstrap(uint64)void'] | BiatecPoolProviderArgs['tuple']['bootstrap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns current status
     *
     * @param params The params for the smart contract call
     * @returns The call params: Pool info statistics
     */
    getCurrentStatus: (params: CallParams<BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.getCurrentStatus(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `setNativeTokenName(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setNativeTokenName: (params: CallParams<BiatecPoolProviderArgs['obj']['setNativeTokenName(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['setNativeTokenName(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.setNativeTokenName(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `loadCLAMMContractData(uint64,uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    loadClammContractData: (params: CallParams<BiatecPoolProviderArgs['obj']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.loadClammContractData(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `noop(uint64)void` ABI method.
     *
     * No op tx to increase the app call and box size limits
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noop: (params: CallParams<BiatecPoolProviderArgs['obj']['noop(uint64)void'] | BiatecPoolProviderArgs['tuple']['noop(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.noop(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Anybody can call this method to bootstrap new clamm pool
     *
     * @param params The params for the smart contract call
     * @returns The call params: LP token ID
     */
    deployPool: (params: CallParams<BiatecPoolProviderArgs['obj']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.deployPool(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `registerPool()void` ABI method.
     *
     * This method is called by constructor of the luquidity pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerPool: (params: CallParams<BiatecPoolProviderArgs['obj']['registerPool()void'] | BiatecPoolProviderArgs['tuple']['registerPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.registerPool(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * This metod registers the trade and calculates and store the trade statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerTrade: (params: CallParams<BiatecPoolProviderArgs['obj']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.registerTrade(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecPoolProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (params: CallParams<BiatecPoolProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.withdrawExcessAssets(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.
     *
     * @param params The params for the smart contract call
     * @returns The call params: AppPoolInfo with the price info for the asset pair
     */
    getPrice: (params: CallParams<BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.getPrice(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnLpDeposit: (params: CallParams<BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecPoolProviderParamsFactory.calculateAssetBWithdrawOnLpDeposit(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecPoolProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(BiatecPoolProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecPoolProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `bootstrap(uint64)void` ABI method.
     *
     * Biatec deploys single pool provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BiatecPoolProviderArgs['obj']['bootstrap(uint64)void'] | BiatecPoolProviderArgs['tuple']['bootstrap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns current status
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Pool info statistics
     */
    getCurrentStatus: (params: CallParams<BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.getCurrentStatus(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `setNativeTokenName(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setNativeTokenName: (params: CallParams<BiatecPoolProviderArgs['obj']['setNativeTokenName(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['setNativeTokenName(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.setNativeTokenName(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `loadCLAMMContractData(uint64,uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    loadClammContractData: (params: CallParams<BiatecPoolProviderArgs['obj']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.loadClammContractData(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `noop(uint64)void` ABI method.
     *
     * No op tx to increase the app call and box size limits
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noop: (params: CallParams<BiatecPoolProviderArgs['obj']['noop(uint64)void'] | BiatecPoolProviderArgs['tuple']['noop(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.noop(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Anybody can call this method to bootstrap new clamm pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP token ID
     */
    deployPool: (params: CallParams<BiatecPoolProviderArgs['obj']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.deployPool(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `registerPool()void` ABI method.
     *
     * This method is called by constructor of the luquidity pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerPool: (params: CallParams<BiatecPoolProviderArgs['obj']['registerPool()void'] | BiatecPoolProviderArgs['tuple']['registerPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.registerPool(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * This metod registers the trade and calculates and store the trade statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerTrade: (params: CallParams<BiatecPoolProviderArgs['obj']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.registerTrade(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecPoolProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (params: CallParams<BiatecPoolProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.withdrawExcessAssets(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: AppPoolInfo with the price info for the asset pair
     */
    getPrice: (params: CallParams<BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.getPrice(params))
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnLpDeposit: (params: CallParams<BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecPoolProviderParamsFactory.calculateAssetBWithdrawOnLpDeposit(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecPoolProvider smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(BiatecPoolProviderParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['updateApplication(uint64,byte[])void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecPoolProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `bootstrap(uint64)void` ABI method.
     *
     * Biatec deploys single pool provider smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BiatecPoolProviderArgs['obj']['bootstrap(uint64)void'] | BiatecPoolProviderArgs['tuple']['bootstrap(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['bootstrap(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns current status
     *
     * @param params The params for the smart contract call
     * @returns The call result: Pool info statistics
     */
    getCurrentStatus: async (params: CallParams<BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.getCurrentStatus(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `setNativeTokenName(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setNativeTokenName: async (params: CallParams<BiatecPoolProviderArgs['obj']['setNativeTokenName(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['setNativeTokenName(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.setNativeTokenName(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['setNativeTokenName(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `loadCLAMMContractData(uint64,uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    loadClammContractData: async (params: CallParams<BiatecPoolProviderArgs['obj']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.loadClammContractData(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `noop(uint64)void` ABI method.
     *
     * No op tx to increase the app call and box size limits
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noop: async (params: CallParams<BiatecPoolProviderArgs['obj']['noop(uint64)void'] | BiatecPoolProviderArgs['tuple']['noop(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.noop(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['noop(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Anybody can call this method to bootstrap new clamm pool
     *
     * @param params The params for the smart contract call
     * @returns The call result: LP token ID
     */
    deployPool: async (params: CallParams<BiatecPoolProviderArgs['obj']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.deployPool(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `registerPool()void` ABI method.
     *
     * This method is called by constructor of the luquidity pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerPool: async (params: CallParams<BiatecPoolProviderArgs['obj']['registerPool()void'] | BiatecPoolProviderArgs['tuple']['registerPool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.registerPool(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['registerPool()void'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * This metod registers the trade and calculates and store the trade statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerTrade: async (params: CallParams<BiatecPoolProviderArgs['obj']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.registerTrade(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<BiatecPoolProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `withdrawExcessAssets(uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (params: CallParams<BiatecPoolProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.withdrawExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.
     *
     * @param params The params for the smart contract call
     * @returns The call result: AppPoolInfo with the price info for the asset pair
     */
    getPrice: async (params: CallParams<BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.getPrice(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the BiatecPoolProvider smart contract using the `calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnLpDeposit: async (params: CallParams<BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.calculateAssetBWithdrawOnLpDeposit(params))
      return {...result, return: result.return as unknown as (undefined | BiatecPoolProviderReturns['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecPoolProviderClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the BiatecPoolProvider smart contract using the `getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns current status
   *
   * @param params The params for the smart contract call
   * @returns The call result: Pool info statistics
   */
  async getCurrentStatus(params: CallParams<BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.getCurrentStatus(params))
    return result.return as unknown as BiatecPoolProviderReturns['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecPoolProvider smart contract using the `getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.
   *
   * @param params The params for the smart contract call
   * @returns The call result: AppPoolInfo with the price info for the asset pair
   */
  async getPrice(params: CallParams<BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.getPrice(params))
    return result.return as unknown as BiatecPoolProviderReturns['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecPoolProvider smart contract using the `calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates how much asset B will be taken from the smart contract on LP asset deposit
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetBWithdrawOnLpDeposit(params: CallParams<BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecPoolProviderParamsFactory.calculateAssetBWithdrawOnLpDeposit(params))
    return result.return as unknown as BiatecPoolProviderReturns['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
  }

  /**
   * Methods to access state for the current BiatecPoolProvider app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecPoolProvider app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          period1: result.period1,
          period2: result.period2,
          period3: result.period3,
          period4: result.period4,
          nativeTokenName: new BinaryStateValue(result.nativeTokenName),
          recentPools1: result.recentPools1,
          recentPools2: result.recentPools2,
          recentPools3: result.recentPools3,
          recentPools4: result.recentPools4,
          recentPools5: result.recentPools5,
          recentPools6: result.recentPools6,
          recentPools7: result.recentPools7,
          recentPools8: result.recentPools8,
          recentPools9: result.recentPools9,
          recentPools10: result.recentPools10,
          recentPoolsIndex: result.recentPoolsIndex,
          appBiatecConfigProvider: result.appBiatecConfigProvider,
          version: new BinaryStateValue(result.version),
        }
      },
      /**
       * Get the current value of the period1 key in global state
       */
      period1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("period1")) as bigint | undefined },
      /**
       * Get the current value of the period2 key in global state
       */
      period2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("period2")) as bigint | undefined },
      /**
       * Get the current value of the period3 key in global state
       */
      period3: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("period3")) as bigint | undefined },
      /**
       * Get the current value of the period4 key in global state
       */
      period4: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("period4")) as bigint | undefined },
      /**
       * Get the current value of the nativeTokenName key in global state
       */
      nativeTokenName: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("nativeTokenName")) as Uint8Array | undefined) },
      /**
       * Get the current value of the recentPools1 key in global state
       */
      recentPools1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools1")) as bigint | undefined },
      /**
       * Get the current value of the recentPools2 key in global state
       */
      recentPools2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools2")) as bigint | undefined },
      /**
       * Get the current value of the recentPools3 key in global state
       */
      recentPools3: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools3")) as bigint | undefined },
      /**
       * Get the current value of the recentPools4 key in global state
       */
      recentPools4: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools4")) as bigint | undefined },
      /**
       * Get the current value of the recentPools5 key in global state
       */
      recentPools5: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools5")) as bigint | undefined },
      /**
       * Get the current value of the recentPools6 key in global state
       */
      recentPools6: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools6")) as bigint | undefined },
      /**
       * Get the current value of the recentPools7 key in global state
       */
      recentPools7: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools7")) as bigint | undefined },
      /**
       * Get the current value of the recentPools8 key in global state
       */
      recentPools8: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools8")) as bigint | undefined },
      /**
       * Get the current value of the recentPools9 key in global state
       */
      recentPools9: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools9")) as bigint | undefined },
      /**
       * Get the current value of the recentPools10 key in global state
       */
      recentPools10: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPools10")) as bigint | undefined },
      /**
       * Get the current value of the recentPoolsIndex key in global state
       */
      recentPoolsIndex: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recentPoolsIndex")) as bigint | undefined },
      /**
       * Get the current value of the appBiatecConfigProvider key in global state
       */
      appBiatecConfigProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecConfigProvider")) as bigint | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current BiatecPoolProvider app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          clammApprovalProgram1: new BinaryStateValue(result.clammApprovalProgram1),
          clammApprovalProgram2: new BinaryStateValue(result.clammApprovalProgram2),
          clammApprovalProgram3: new BinaryStateValue(result.clammApprovalProgram3),
        }
      },
      /**
       * Get the current value of the clammApprovalProgram1 key in box state
       */
      clammApprovalProgram1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("clammApprovalProgram1")) as Uint8Array | undefined) },
      /**
       * Get the current value of the clammApprovalProgram2 key in box state
       */
      clammApprovalProgram2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("clammApprovalProgram2")) as Uint8Array | undefined) },
      /**
       * Get the current value of the clammApprovalProgram3 key in box state
       */
      clammApprovalProgram3: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("clammApprovalProgram3")) as Uint8Array | undefined) },
      /**
       * Get values from the pools map in box state
       */
      pools: {
        /**
         * Get all current values of the pools map in box state
         */
        getMap: async (): Promise<Map<bigint, AppPoolInfo>> => { return (await this.appClient.state.box.getMap("pools")) as Map<bigint, AppPoolInfo> },
        /**
         * Get a current value of the pools map by key from box state
         */
        value: async (key: bigint | number): Promise<AppPoolInfo | undefined> => { return await this.appClient.state.box.getMapValue("pools", key) as AppPoolInfo | undefined },
      },
      /**
       * Get values from the poolsByConfig map in box state
       */
      poolsByConfig: {
        /**
         * Get all current values of the poolsByConfig map in box state
         */
        getMap: async (): Promise<Map<PoolConfig, bigint>> => { return (await this.appClient.state.box.getMap("poolsByConfig")) as Map<PoolConfig, bigint> },
        /**
         * Get a current value of the poolsByConfig map by key from box state
         */
        value: async (key: PoolConfig): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("poolsByConfig", key) as bigint | undefined },
      },
      /**
       * Get values from the fullConfigs map in box state
       */
      fullConfigs: {
        /**
         * Get all current values of the fullConfigs map in box state
         */
        getMap: async (): Promise<Map<FullConfig, bigint>> => { return (await this.appClient.state.box.getMap("fullConfigs")) as Map<FullConfig, bigint> },
        /**
         * Get a current value of the fullConfigs map by key from box state
         */
        value: async (key: FullConfig): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("fullConfigs", key) as bigint | undefined },
      },
      /**
       * Get values from the poolsAggregated map in box state
       */
      poolsAggregated: {
        /**
         * Get all current values of the poolsAggregated map in box state
         */
        getMap: async (): Promise<Map<AssetsCombined, AppPoolInfo>> => { return (await this.appClient.state.box.getMap("poolsAggregated")) as Map<AssetsCombined, AppPoolInfo> },
        /**
         * Get a current value of the poolsAggregated map by key from box state
         */
        value: async (key: AssetsCombined): Promise<AppPoolInfo | undefined> => { return await this.appClient.state.box.getMapValue("poolsAggregated", key) as AppPoolInfo | undefined },
      },
    },
  }

  public newGroup(): BiatecPoolProviderComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64)void method call against the BiatecPoolProvider contract
       */
      bootstrap(params: CallParams<BiatecPoolProviderArgs['obj']['bootstrap(uint64)void'] | BiatecPoolProviderArgs['tuple']['bootstrap(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the BiatecPoolProvider contract
       */
      getCurrentStatus(params: CallParams<BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a setNativeTokenName(uint64,byte[])void method call against the BiatecPoolProvider contract
       */
      setNativeTokenName(params: CallParams<BiatecPoolProviderArgs['obj']['setNativeTokenName(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['setNativeTokenName(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setNativeTokenName(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a loadCLAMMContractData(uint64,uint64,uint64,byte[])void method call against the BiatecPoolProvider contract
       */
      loadClammContractData(params: CallParams<BiatecPoolProviderArgs['obj']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.loadClammContractData(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a noop(uint64)void method call against the BiatecPoolProvider contract
       */
      noop(params: CallParams<BiatecPoolProviderArgs['obj']['noop(uint64)void'] | BiatecPoolProviderArgs['tuple']['noop(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noop(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 method call against the BiatecPoolProvider contract
       */
      deployPool(params: CallParams<BiatecPoolProviderArgs['obj']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deployPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a registerPool()void method call against the BiatecPoolProvider contract
       */
      registerPool(params: CallParams<BiatecPoolProviderArgs['obj']['registerPool()void'] | BiatecPoolProviderArgs['tuple']['registerPool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void method call against the BiatecPoolProvider contract
       */
      registerTrade(params: CallParams<BiatecPoolProviderArgs['obj']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerTrade(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void method call against the BiatecPoolProvider contract
       */
      sendOnlineKeyRegistration(params: CallParams<BiatecPoolProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64,uint64)uint64 method call against the BiatecPoolProvider contract
       */
      withdrawExcessAssets(params: CallParams<BiatecPoolProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawExcessAssets(uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the BiatecPoolProvider contract
       */
      getPrice(params: CallParams<BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 method call against the BiatecPoolProvider contract
       */
      calculateAssetBWithdrawOnLpDeposit(params: CallParams<BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateAssetBWithdrawOnLpDeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the BiatecPoolProvider contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BiatecPoolProviderComposer
  }
}
export type BiatecPoolProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64)void ABI method.
   *
   * Biatec deploys single pool provider smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BiatecPoolProviderArgs['obj']['bootstrap(uint64)void'] | BiatecPoolProviderArgs['tuple']['bootstrap(uint64)void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['bootstrap(uint64)void'] | undefined]>

  /**
   * Calls the getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns current status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentStatus(params?: CallParams<BiatecPoolProviderArgs['obj']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the setNativeTokenName(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setNativeTokenName(params?: CallParams<BiatecPoolProviderArgs['obj']['setNativeTokenName(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['setNativeTokenName(uint64,byte[])void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['setNativeTokenName(uint64,byte[])void'] | undefined]>

  /**
   * Calls the loadCLAMMContractData(uint64,uint64,uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  loadClammContractData(params?: CallParams<BiatecPoolProviderArgs['obj']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['loadCLAMMContractData(uint64,uint64,uint64,byte[])void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['loadCLAMMContractData(uint64,uint64,uint64,byte[])void'] | undefined]>

  /**
   * Calls the noop(uint64)void ABI method.
   *
   * No op tx to increase the app call and box size limits
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noop(params?: CallParams<BiatecPoolProviderArgs['obj']['noop(uint64)void'] | BiatecPoolProviderArgs['tuple']['noop(uint64)void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['noop(uint64)void'] | undefined]>

  /**
   * Calls the deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * Anybody can call this method to bootstrap new clamm pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deployPool(params?: CallParams<BiatecPoolProviderArgs['obj']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the registerPool()void ABI method.
   *
   * This method is called by constructor of the luquidity pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerPool(params?: CallParams<BiatecPoolProviderArgs['obj']['registerPool()void'] | BiatecPoolProviderArgs['tuple']['registerPool()void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['registerPool()void'] | undefined]>

  /**
   * Calls the registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * This metod registers the trade and calculates and store the trade statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerTrade(params?: CallParams<BiatecPoolProviderArgs['obj']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<BiatecPoolProviderArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecPoolProviderArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(params?: CallParams<BiatecPoolProviderArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | BiatecPoolProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64)uint64']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['withdrawExcessAssets(uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPrice(params?: CallParams<BiatecPoolProviderArgs['obj']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecPoolProviderArgs['tuple']['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B will be taken from the smart contract on LP asset deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBWithdrawOnLpDeposit(params?: CallParams<BiatecPoolProviderArgs['obj']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecPoolProviderArgs['tuple']['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecPoolProvider smart contract using the updateApplication(uint64,byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<BiatecPoolProviderArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecPoolProviderArgs['tuple']['updateApplication(uint64,byte[])void']>): BiatecPoolProviderComposer<[...TReturns, BiatecPoolProviderReturns['updateApplication(uint64,byte[])void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecPoolProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecPoolProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecPoolProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecPoolProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BiatecPoolProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BiatecPoolProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecPoolProviderComposerResults<TReturns>>
}
export type BiatecPoolProviderComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

