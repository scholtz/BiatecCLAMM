/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "registerPool(uint64,uint64,uint64,uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "verificationClassSetter": {
          "type": "bytes",
          "key": "v"
        },
        "engagementClassSetter": {
          "type": "bytes",
          "key": "e"
        },
        "period1": {
          "type": "uint64",
          "key": "p1"
        },
        "period2": {
          "type": "uint64",
          "key": "p2"
        },
        "period3": {
          "type": "uint64",
          "key": "p3"
        },
        "period4": {
          "type": "uint64",
          "key": "p4"
        },
        "period5": {
          "type": "uint64",
          "key": "p5"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg4LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyBnZXRDdXJyZW50U3RhdHVzKHVpbnQ2NCkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKKmFiaV9yb3V0ZV9nZXRDdXJyZW50U3RhdHVzOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBhcHBQb29sSWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgZ2V0Q3VycmVudFN0YXR1cyh1aW50NjQpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpCgljYWxsc3ViIGdldEN1cnJlbnRTdGF0dXMKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXRDdXJyZW50U3RhdHVzKGFwcFBvb2xJZDogQXBwSUQpOiBBcHBQb29sSW5mbwovLwovLyBSZXR1cm5zIGN1cnJlbnQgc3RhdHVzCi8vCi8vIEBwYXJhbSBhcHBQb29sSWQgUG9vbCBpZCB0byByZXRyaWV2ZSB0aGUgc3RhdHMKLy8gQHJldHVybnMgUG9vbCBpbmZvIHN0YXRpc3RpY3MKZ2V0Q3VycmVudFN0YXR1czoKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoxMTkKCS8vIHJldHVybiB0aGlzLnBvb2xzKGFwcFBvb2xJZC5pZCkudmFsdWU7CglieXRlIDB4NzAgLy8gInAiCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCXJldHN1YgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKLy8KLy8gSW5pdGlhbCBzZXR1cApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoxMjYKCS8vIGxvZyh2ZXJzaW9uKQoJYnl0ZSAiQklBVEVDLVBQLTAxLTAxLTAxIgoJbG9nCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjEyNwoJLy8gdGhpcy5wZXJpb2QxLnZhbHVlID0gMzYwMAoJYnl0ZSAweDcwMzEgLy8gInAxIgoJaW50IDM2MDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjEyOAoJLy8gdGhpcy5wZXJpb2QyLnZhbHVlID0gMzYwMCAqIDI0CglieXRlIDB4NzAzMiAvLyAicDIiCglpbnQgODY0MDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjEyOQoJLy8gdGhpcy5wZXJpb2QzLnZhbHVlID0gMzYwMCAqIDI0ICogNwoJYnl0ZSAweDcwMzMgLy8gInAzIgoJaW50IDYwNDgwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MTMwCgkvLyB0aGlzLnBlcmlvZDQudmFsdWUgPSAzNjAwICogMjQgKiAzMAoJYnl0ZSAweDcwMzQgLy8gInA0IgoJaW50IDI1OTIwMDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjEzMQoJLy8gdGhpcy5wZXJpb2Q1LnZhbHVlID0gMzYwMCAqIDI0ICogMzY1CglieXRlIDB4NzAzNSAvLyAicDUiCglpbnQgMzE1MzYwMDAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHJlZ2lzdGVyUG9vbCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50OCl2b2lkCiphYmlfcm91dGVfcmVnaXN0ZXJQb29sOgoJLy8gdmVyaWZpY2F0aW9uQ2xhc3M6IHVpbnQ4Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWJ0b2kKCgkvLyBhc3NldEI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFzc2V0QTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYXBwUG9vbElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlZ2lzdGVyUG9vbCh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50OCl2b2lkCgljYWxsc3ViIHJlZ2lzdGVyUG9vbAoJaW50IDEKCXJldHVybgoKLy8gcmVnaXN0ZXJQb29sKGFwcFBvb2xJZDogQXBwSUQsIGFzc2V0QTogQXNzZXRJRCwgYXNzZXRCOiBBc3NldElELCB2ZXJpZmljYXRpb25DbGFzczogdWludDgpOiB2b2lkCi8vCi8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSBjb25zdHJ1Y3RvciBvZiB0aGUgbHVxdWlkaXR5IHBvb2wKLy8KLy8gQHBhcmFtIGFwcFBvb2xJZCBMdXF1aWRpdHkgcG9vbCBpZAovLyBAcGFyYW0gYXNzZXRBIEFzc2V0IEEKLy8gQHBhcmFtIGFzc2V0QiBBc3NldCBCCi8vIEBwYXJhbSB2ZXJpZmljYXRpb25DbGFzcyBWZXJpZmljYXRpb24gY2xhc3MKcmVnaXN0ZXJQb29sOgoJcHJvdG8gNCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoxNDMKCS8vIGFzc2VydCghdGhpcy5wb29scyhhcHBQb29sSWQuaWQpLmV4aXN0cykKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjE0NAoJLy8gYXNzZXJ0KGdsb2JhbHMuY2FsbGVyQXBwbGljYXRpb25JRCA9PT0gYXBwUG9vbElkKQoJZ2xvYmFsIENhbGxlckFwcGxpY2F0aW9uSUQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECgk9PQoJYXNzZXJ0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoxNDUKCS8vIHRoaXMuYXNzZXRzKGFzc2V0QS5pZCkuZXhpc3RzCglieXRlIDB4NjEgLy8gImEiCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRBOiBBc3NldElECglpdG9iCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKmlmMF9lbHNlCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MTQ2CgkvLyB0aGlzLmFzc2V0cyhhc3NldEEuaWQpLnZhbHVlLnB1c2goYXBwUG9vbElkKQoJYnl0ZSAweDYxIC8vICJhIgoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0QTogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglpbnQgMgoJaW50IDAKCWJveF9leHRyYWN0CglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0CglieXRlIDB4NjEgLy8gImEiCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRBOiBBc3NldElECglpdG9iCgljb25jYXQKCWR1cAoJYm94X2RlbAoJcG9wCglzd2FwCglkdXAKCWxlbgoJaW50IDgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWJveF9wdXQKCWIgKmlmMF9lbmQKCippZjBfZWxzZToKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoxNDgKCS8vIG5ld1doaXRlbGlzdDogQXBwSURbXSA9IFthcHBQb29sSWRdCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJZnJhbWVfYnVyeSAwIC8vIG5ld1doaXRlbGlzdDogQXBwSURbXQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoxNDkKCS8vIHRoaXMuYXNzZXRzKGFzc2V0QS5pZCkudmFsdWUgPSBuZXdXaGl0ZWxpc3QKCWJ5dGUgMHg2MSAvLyAiYSIKCWZyYW1lX2RpZyAtMiAvLyBhc3NldEE6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAwIC8vIG5ld1doaXRlbGlzdDogQXBwSURbXQoJZHVwCglsZW4KCWludCA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CgoqaWYwX2VuZDoKCS8vICppZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MTUyCgkvLyB0aGlzLmFzc2V0cyhhc3NldEIuaWQpLmV4aXN0cwoJYnl0ZSAweDYxIC8vICJhIgoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0QjogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWJ6ICppZjFfZWxzZQoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjE1MwoJLy8gdGhpcy5hc3NldHMoYXNzZXRCLmlkKS52YWx1ZS5wdXNoKGFwcFBvb2xJZCkKCWJ5dGUgMHg2MSAvLyAiYSIKCWZyYW1lX2RpZyAtMyAvLyBhc3NldEI6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJaW50IDIKCWludCAwCglib3hfZXh0cmFjdAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDYxIC8vICJhIgoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0QjogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglkdXAKCWJveF9kZWwKCXBvcAoJc3dhcAoJZHVwCglsZW4KCWludCA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CgliICppZjFfZW5kCgoqaWYxX2Vsc2U6CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MTU1CgkvLyBuZXdXaGl0ZWxpc3Q6IEFwcElEW10gPSBbYXBwUG9vbElkXQoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWZyYW1lX2J1cnkgMSAvLyBuZXdXaGl0ZWxpc3Q6IEFwcElEW10KCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MTU2CgkvLyB0aGlzLmFzc2V0cyhhc3NldEIuaWQpLnZhbHVlID0gbmV3V2hpdGVsaXN0CglieXRlIDB4NjEgLy8gImEiCglmcmFtZV9kaWcgLTMgLy8gYXNzZXRCOiBBc3NldElECglpdG9iCgljb25jYXQKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgMSAvLyBuZXdXaGl0ZWxpc3Q6IEFwcElEW10KCWR1cAoJbGVuCglpbnQgOAoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYm94X3B1dAoKKmlmMV9lbmQ6CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MTU4CgkvLyBkYXRhOiBBcHBQb29sSW5mbyA9IHsKCS8vICAgICAgIGFzc2V0QTogYXNzZXRBLmlkLAoJLy8gICAgICAgYXNzZXRCOiBhc3NldEIuaWQsCgkvLyAgICAgICBpc1ZlcmlmaWVkOiAwLAoJLy8gICAgICAgdmVyaWZpY2F0aW9uQ2xhc3M6IHZlcmlmaWNhdGlvbkNsYXNzIGFzIHVpbnQ2NCwKCS8vCgkvLyAgICAgICBsYXRlc3RQcmljZTogMCwKCS8vCgkvLyAgICAgICBwZXJpb2QxTm93RmVlQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kMU5vd0ZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDFOb3dUaW1lOiAwLAoJLy8gICAgICAgcGVyaW9kMU5vd1ZvbHVtZUE6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDFOb3dWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QxTm93VldBUDogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kMVByZXZGZWVBOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QxUHJldkZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDFQcmV2VGltZTogMCwKCS8vICAgICAgIHBlcmlvZDFQcmV2Vm9sdW1lQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kMVByZXZWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QxUHJldlZXQVA6IDx1aW50NjQ+MCwKCS8vCgkvLyAgICAgICBwZXJpb2QyTm93RmVlQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kMk5vd0ZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDJOb3dUaW1lOiAwLAoJLy8gICAgICAgcGVyaW9kMk5vd1ZvbHVtZUE6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDJOb3dWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QyTm93VldBUDogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kMlByZXZGZWVBOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QyUHJldkZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDJQcmV2VGltZTogMCwKCS8vICAgICAgIHBlcmlvZDJQcmV2Vm9sdW1lQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kMlByZXZWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QyUHJldlZXQVA6IDx1aW50NjQ+MCwKCS8vCgkvLyAgICAgICBwZXJpb2QzTm93RmVlQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kM05vd0ZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDNOb3dUaW1lOiAwLAoJLy8gICAgICAgcGVyaW9kM05vd1ZvbHVtZUE6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDNOb3dWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QzTm93VldBUDogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kM1ByZXZGZWVBOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QzUHJldkZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDNQcmV2VGltZTogMCwKCS8vICAgICAgIHBlcmlvZDNQcmV2Vm9sdW1lQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kM1ByZXZWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2QzUHJldlZXQVA6IDx1aW50NjQ+MCwKCS8vCgkvLyAgICAgICBwZXJpb2Q0Tm93RmVlQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kNE5vd0ZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDROb3dUaW1lOiAwLAoJLy8gICAgICAgcGVyaW9kNE5vd1ZvbHVtZUE6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDROb3dWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2Q0Tm93VldBUDogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kNFByZXZGZWVBOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2Q0UHJldkZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDRQcmV2VGltZTogMCwKCS8vICAgICAgIHBlcmlvZDRQcmV2Vm9sdW1lQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kNFByZXZWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2Q0UHJldlZXQVA6IDx1aW50NjQ+MCwKCS8vCgkvLyAgICAgICBwZXJpb2Q1Tm93RmVlQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kNU5vd0ZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDVOb3dUaW1lOiAwLAoJLy8gICAgICAgcGVyaW9kNU5vd1ZvbHVtZUE6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDVOb3dWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2Q1Tm93VldBUDogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kNVByZXZGZWVBOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2Q1UHJldkZlZUI6IDx1aW50NjQ+MCwKCS8vICAgICAgIHBlcmlvZDVQcmV2VGltZTogMCwKCS8vICAgICAgIHBlcmlvZDVQcmV2Vm9sdW1lQTogPHVpbnQ2ND4wLAoJLy8gICAgICAgcGVyaW9kNVByZXZWb2x1bWVCOiA8dWludDY0PjAsCgkvLyAgICAgICBwZXJpb2Q1UHJldlZXQVA6IDx1aW50NjQ+MCwKCS8vICAgICB9CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0QTogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gYXNzZXRCOiBBc3NldElECglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtNCAvLyB2ZXJpZmljYXRpb25DbGFzczogdWludDgKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAyIC8vIGRhdGE6IEFwcFBvb2xJbmZvCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjIzMQoJLy8gdGhpcy5wb29scyhhcHBQb29sSWQuaWQpLnZhbHVlID0gZGF0YQoJYnl0ZSAweDcwIC8vICJwIgoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDIgLy8gZGF0YTogQXBwUG9vbEluZm8KCWJveF9wdXQKCXJldHN1YgoKLy8gcmVnaXN0ZXJUcmFkZSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3JlZ2lzdGVyVHJhZGU6CgkvLyBzOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEwCglidG9pCgoJLy8gZmVlQW1vdW50QjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA5CglidG9pCgoJLy8gZmVlQW1vdW50QTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA4CglidG9pCgoJLy8gYW1vdW50QjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA3CglidG9pCgoJLy8gYW1vdW50QTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglidG9pCgoJLy8gcHJpY2VUbzogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglidG9pCgoJLy8gcHJpY2VGcm9tOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBhc3NldEI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFzc2V0QTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYXBwUG9vbElkOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHJlZ2lzdGVyVHJhZGUodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgcmVnaXN0ZXJUcmFkZQoJaW50IDEKCXJldHVybgoKLy8gcmVnaXN0ZXJUcmFkZShhcHBQb29sSWQ6IEFwcElELCBhc3NldEE6IEFzc2V0SUQsIGFzc2V0QjogQXNzZXRJRCwgcHJpY2VGcm9tOiB1aW50NjQsIHByaWNlVG86IHVpbnQ2NCwgYW1vdW50QTogdWludDY0LCBhbW91bnRCOiB1aW50NjQsIGZlZUFtb3VudEE6IHVpbnQ2NCwgZmVlQW1vdW50QjogdWludDY0LCBzOiB1aW50NjQpOiB2b2lkCi8vCi8vIFRoaXMgbWV0b2QgcmVnaXN0ZXJzIHRoZSB0cmFkZSBhbmQgY2FsY3VsYXRlcyBhbmQgc3RvcmUgdGhlIHRyYWRlIHN0YXRpc3RpY3MKLy8KLy8gQHBhcmFtIGFwcFBvb2xJZCBMaXF1ZGl0eSBwb29sIHNtYXJ0IGNvbnRyYWN0Ci8vIEBwYXJhbSBhc3NldEEgQXNzZXQgQQovLyBAcGFyYW0gYXNzZXRCIEFzc2V0IEIKLy8gQHBhcmFtIHByaWNlRnJvbSBUaGUgb3JpZ2luYWwgcHJpY2UKLy8gQHBhcmFtIHByaWNlVG8gVGhlIG5ldyBwcmljZQovLyBAcGFyYW0gYW1vdW50QSBBc3NldCBBIGFtb3VudCBzcGVudCBvciByZWNlaXZlZAovLyBAcGFyYW0gYW1vdW50QiBBc3NldCBCIGFtb3VudCBzcGVudCBvciByZWNlaXZlZAovLyBAcGFyYW0gZmVlQW1vdW50QSBGZWVzIHBhaWQgaW4gYXNzZXQgQSBpZiBhbnkKLy8gQHBhcmFtIGZlZUFtb3VudEIgRmVlcyBwYWlkIGluIGFzc2V0IEIgaWYgYW55Ci8vIEBwYXJhbSBzIFNjYWxlIG11bHRpcGxpZXIKcmVnaXN0ZXJUcmFkZToKCXByb3RvIDEwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAyMwoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjAKCS8vIGluY3JlYXNlT3Bjb2RlQnVkZ2V0KCkKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCWJ5dGUgYjY0IENvRUIgLy8gI3ByYWdtYSB2ZXJzaW9uIDEwOyBpbnQgMQoJZHVwCglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoJaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQoJaW50IERlbGV0ZUFwcGxpY2F0aW9uCglpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjYxCgkvLyBpbmNyZWFzZU9wY29kZUJ1ZGdldCgpCglpdHhuX2JlZ2luCglpbnQgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJaW50IDAKCWl0eG5fZmllbGQgRmVlCglieXRlIGI2NCBDb0VCIC8vICNwcmFnbWEgdmVyc2lvbiAxMDsgaW50IDEKCWR1cAoJaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KCWl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KCWludCBEZWxldGVBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2MgoJLy8gYXNzZXJ0KGFwcFBvb2xJZCA9PT0gZ2xvYmFscy5jYWxsZXJBcHBsaWNhdGlvbklEKQoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWdsb2JhbCBDYWxsZXJBcHBsaWNhdGlvbklECgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2MwoJLy8gYXNzZXJ0KHMgPT09IFNDQUxFKQoJZnJhbWVfZGlnIC0xMCAvLyBzOiB1aW50NjQKCWludCAxMDAwMDAwMDAwCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gaW5mbyA9IHRoaXMucG9vbHMoYXBwUG9vbElkLmlkKS52YWx1ZQoJYnl0ZSAweDcwIC8vICJwIgoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NQoJLy8gYXNzZXJ0KGFzc2V0QS5pZCA9PT0gaW5mby5hc3NldEEpCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRBOiBBc3NldElECglpbnQgOCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY2CgkvLyBhc3NlcnQoYXNzZXRCLmlkID09PSBpbmZvLmFzc2V0QikKCWZyYW1lX2RpZyAtMyAvLyBhc3NldEI6IEFzc2V0SUQKCWludCAxNiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY3CgkvLyBhc3NlcnQoYW1vdW50QSA+IDAgJiYgYW1vdW50QiA+IDApCglmcmFtZV9kaWcgLTYgLy8gYW1vdW50QTogdWludDY0CglpbnQgMAoJPgoJZHVwCglieiAqc2tpcF9hbmQwCglmcmFtZV9kaWcgLTcgLy8gYW1vdW50QjogdWludDY0CglpbnQgMAoJPgoJJiYKCipza2lwX2FuZDA6Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY4CgkvLyBwcmljZSA9IChwcmljZUZyb20gKyBwcmljZVRvKSAvIDx1aW50NjQ+MgoJZnJhbWVfZGlnIC00IC8vIHByaWNlRnJvbTogdWludDY0CglmcmFtZV9kaWcgLTUgLy8gcHJpY2VUbzogdWludDY0CgkrCglpbnQgMgoJLwoJZnJhbWVfYnVyeSAxIC8vIHByaWNlOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY5CgkvLyBwcmljZVVpbnQyNTYgPSBwcmljZSBhcyB1aW50MjU2CglmcmFtZV9kaWcgMSAvLyBwcmljZTogdWludDY0CglpdG9iCglmcmFtZV9idXJ5IDIgLy8gcHJpY2VVaW50MjU2OiB1bnNhZmUgdWludDI1NgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNzAKCS8vIGFtb3VudEJVaW50MjU2ID0gYW1vdW50QiBhcyB1aW50MjU2CglmcmFtZV9kaWcgLTcgLy8gYW1vdW50QjogdWludDY0CglpdG9iCglmcmFtZV9idXJ5IDMgLy8gYW1vdW50QlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI3MQoJLy8gaW5mby5sYXRlc3RQcmljZSA9IHByaWNlCglpbnQgMzIgLy8gaGVhZE9mZnNldAoJZnJhbWVfZGlnIDEgLy8gcHJpY2U6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI3MgoJLy8gcGVyaW9kMUl0ZXJGcm9tTm93T2JqID0gaW5mby5wZXJpb2QxTm93VGltZSAvIHRoaXMucGVyaW9kMS52YWx1ZQoJaW50IDgwIC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNzIKCS8vIHRoaXMucGVyaW9kMS52YWx1ZQoJYnl0ZSAweDcwMzEgLy8gInAxIgoJYXBwX2dsb2JhbF9nZXQKCS8KCWZyYW1lX2J1cnkgNCAvLyBwZXJpb2QxSXRlckZyb21Ob3dPYmo6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNzMKCS8vIHBlcmlvZDFJdGVyRnJvbUN1cnJUaW1lID0gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgLyB0aGlzLnBlcmlvZDEudmFsdWUKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWJ5dGUgMHg3MDMxIC8vICJwMSIKCWFwcF9nbG9iYWxfZ2V0CgkvCglmcmFtZV9idXJ5IDUgLy8gcGVyaW9kMUl0ZXJGcm9tQ3VyclRpbWU6IHVpbnQ2NAoKCS8vICppZjJfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjc2CgkvLyBwZXJpb2QxSXRlckZyb21Ob3dPYmogIT09IHBlcmlvZDFJdGVyRnJvbUN1cnJUaW1lCglmcmFtZV9kaWcgNCAvLyBwZXJpb2QxSXRlckZyb21Ob3dPYmo6IHVpbnQ2NAoJZnJhbWVfZGlnIDUgLy8gcGVyaW9kMUl0ZXJGcm9tQ3VyclRpbWU6IHVpbnQ2NAoJIT0KCWJ6ICppZjJfZW5kCgoJLy8gKmlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjc4CgkvLyBpbmZvLnBlcmlvZDFQcmV2RmVlQSA9IGluZm8ucGVyaW9kMU5vd0ZlZUEKCWludCAxMDQgLy8gaGVhZE9mZnNldAoJaW50IDU2IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI3OQoJLy8gaW5mby5wZXJpb2QxTm93RmVlQSA9IDAKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCglpbnQgNTYgLy8gaGVhZE9mZnNldAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI4MAoJLy8gaW5mby5wZXJpb2QxUHJldkZlZUIgPSBpbmZvLnBlcmlvZDFOb3dGZWVCCglpbnQgMTEyIC8vIGhlYWRPZmZzZXQKCWludCA2NCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyODEKCS8vIGluZm8ucGVyaW9kMU5vd0ZlZUIgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDY0IC8vIGhlYWRPZmZzZXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyODIKCS8vIGluZm8ucGVyaW9kMVByZXZWV0FQID0gaW5mby5wZXJpb2QxTm93VldBUAoJaW50IDEyMCAvLyBoZWFkT2Zmc2V0CglpbnQgNzIgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjgzCgkvLyBpbmZvLnBlcmlvZDFQcmV2Vm9sdW1lQSA9IGluZm8ucGVyaW9kMU5vd1ZvbHVtZUEKCWludCA4OCAvLyBoZWFkT2Zmc2V0CglpbnQgNDAgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjg0CgkvLyBpbmZvLnBlcmlvZDFOb3dWb2x1bWVBID0gMAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWludCA0MCAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjg1CgkvLyBpbmZvLnBlcmlvZDFQcmV2Vm9sdW1lQiA9IGluZm8ucGVyaW9kMU5vd1ZvbHVtZUIKCWludCA5NiAvLyBoZWFkT2Zmc2V0CglpbnQgNDggLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjg2CgkvLyBpbmZvLnBlcmlvZDFOb3dWb2x1bWVCID0gMAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWludCA0OCAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjg3CgkvLyBpbmZvLnBlcmlvZDFQcmV2VGltZSA9IGluZm8ucGVyaW9kMU5vd1RpbWUKCWludCAxMjggLy8gaGVhZE9mZnNldAoJaW50IDgwIC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gKmlmM19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyODgKCS8vIGluZm8ucGVyaW9kMU5vd1RpbWUgPT09IDAKCWludCA4MCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWludCAwCgk9PQoJYnogKmlmM19lbHNlCgoJLy8gKmlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjg5CgkvLyBpbmZvLnBlcmlvZDFOb3dUaW1lID0gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAKCWludCA4MCAvLyBoZWFkT2Zmc2V0CglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCWIgKmlmM19lbmQKCippZjNfZWxzZToKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyOTEKCS8vIGluZm8ucGVyaW9kMU5vd1RpbWUgPSBwZXJpb2QxSXRlckZyb21DdXJyVGltZSAqIHRoaXMucGVyaW9kMS52YWx1ZQoJaW50IDgwIC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyA1IC8vIHBlcmlvZDFJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCWJ5dGUgMHg3MDMxIC8vICJwMSIKCWFwcF9nbG9iYWxfZ2V0CgkqCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCippZjNfZW5kOgoKKmlmMl9lbmQ6CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjk1CgkvLyBpbmZvLnBlcmlvZDFOb3dGZWVBID0gaW5mby5wZXJpb2QxTm93RmVlQSArIGZlZUFtb3VudEEKCWludCA1NiAvLyBoZWFkT2Zmc2V0CglkdXAKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfZGlnIC04IC8vIGZlZUFtb3VudEE6IHVpbnQ2NAoJKwoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI5NgoJLy8gaW5mby5wZXJpb2QxTm93RmVlQiA9IGluZm8ucGVyaW9kMU5vd0ZlZUIgKyBmZWVBbW91bnRCCglpbnQgNjQgLy8gaGVhZE9mZnNldAoJZHVwCglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2RpZyAtOSAvLyBmZWVBbW91bnRCOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyOTcKCS8vIHBlcmlvZDFOb3dWb2x1bWVCVWludDI1NiA9IGluZm8ucGVyaW9kMU5vd1ZvbHVtZUIgYXMgdWludDI1NgoJaW50IDQ4IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfYnVyeSA2IC8vIHBlcmlvZDFOb3dWb2x1bWVCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mjk4CgkvLyBwZXJpb2QxTm93VldBUFVpbnQyNTYgPSBpbmZvLnBlcmlvZDFOb3dWV0FQIGFzIHVpbnQyNTYKCWludCA3MiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2J1cnkgNyAvLyBwZXJpb2QxTm93VldBUFVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI5OQoJLy8gaW5mby5wZXJpb2QxTm93VldBUCA9ICgocGVyaW9kMU5vd1ZvbHVtZUJVaW50MjU2ICogcGVyaW9kMU5vd1ZXQVBVaW50MjU2ICsgYW1vdW50QlVpbnQyNTYgKiBwcmljZVVpbnQyNTYpIC8KCS8vICAgICAgIChwZXJpb2QxTm93Vm9sdW1lQlVpbnQyNTYgKyBhbW91bnRCVWludDI1NikpIGFzIHVpbnQ2NAoJaW50IDcyIC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyA2IC8vIHBlcmlvZDFOb3dWb2x1bWVCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyA3IC8vIHBlcmlvZDFOb3dWV0FQVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWIqCglmcmFtZV9kaWcgMyAvLyBhbW91bnRCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAyIC8vIHByaWNlVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWIqCgliKwoJZnJhbWVfZGlnIDYgLy8gcGVyaW9kMU5vd1ZvbHVtZUJVaW50MjU2OiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDMgLy8gYW1vdW50QlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKwoJYi8KCWR1cAoJYml0bGVuCglpbnQgNjQKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDgKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMDEKCS8vIGluZm8ucGVyaW9kMU5vd1ZvbHVtZUEgPSBpbmZvLnBlcmlvZDFOb3dWb2x1bWVBICsgYW1vdW50QQoJaW50IDQwIC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTYgLy8gYW1vdW50QTogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzAyCgkvLyBpbmZvLnBlcmlvZDFOb3dWb2x1bWVCID0gaW5mby5wZXJpb2QxTm93Vm9sdW1lQiArIGFtb3VudEIKCWludCA0OCAvLyBoZWFkT2Zmc2V0CglkdXAKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfZGlnIC03IC8vIGFtb3VudEI6IHVpbnQ2NAoJKwoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMwNQoJLy8gcGVyaW9kMkl0ZXJGcm9tTm93T2JqID0gaW5mby5wZXJpb2QyTm93VGltZSAvIHRoaXMucGVyaW9kMi52YWx1ZQoJaW50IDE3NiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzA1CgkvLyB0aGlzLnBlcmlvZDIudmFsdWUKCWJ5dGUgMHg3MDMyIC8vICJwMiIKCWFwcF9nbG9iYWxfZ2V0CgkvCglmcmFtZV9idXJ5IDggLy8gcGVyaW9kMkl0ZXJGcm9tTm93T2JqOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzA2CgkvLyBwZXJpb2QySXRlckZyb21DdXJyVGltZSA9IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wIC8gdGhpcy5wZXJpb2QyLnZhbHVlCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglieXRlIDB4NzAzMiAvLyAicDIiCglhcHBfZ2xvYmFsX2dldAoJLwoJZnJhbWVfYnVyeSA5IC8vIHBlcmlvZDJJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCgkvLyAqaWY0X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMwOQoJLy8gcGVyaW9kMkl0ZXJGcm9tTm93T2JqICE9PSBwZXJpb2QySXRlckZyb21DdXJyVGltZQoJZnJhbWVfZGlnIDggLy8gcGVyaW9kMkl0ZXJGcm9tTm93T2JqOiB1aW50NjQKCWZyYW1lX2RpZyA5IC8vIHBlcmlvZDJJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCSE9CglieiAqaWY0X2VuZAoKCS8vICppZjRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMxMQoJLy8gaW5mby5wZXJpb2QyUHJldkZlZUEgPSBpbmZvLnBlcmlvZDJOb3dGZWVBCglpbnQgMjAwIC8vIGhlYWRPZmZzZXQKCWludCAxNTIgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzEyCgkvLyBpbmZvLnBlcmlvZDJOb3dGZWVBID0gMAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWludCAxNTIgLy8gaGVhZE9mZnNldAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMxMwoJLy8gaW5mby5wZXJpb2QyUHJldkZlZUIgPSBpbmZvLnBlcmlvZDJOb3dGZWVCCglpbnQgMjA4IC8vIGhlYWRPZmZzZXQKCWludCAxNjAgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzE0CgkvLyBpbmZvLnBlcmlvZDJOb3dGZWVCID0gMAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWludCAxNjAgLy8gaGVhZE9mZnNldAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMxNQoJLy8gaW5mby5wZXJpb2QyUHJldlZXQVAgPSBpbmZvLnBlcmlvZDJOb3dWV0FQCglpbnQgMjE2IC8vIGhlYWRPZmZzZXQKCWludCAxNjggLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzE2CgkvLyBpbmZvLnBlcmlvZDJQcmV2Vm9sdW1lQSA9IGluZm8ucGVyaW9kMk5vd1ZvbHVtZUEKCWludCAxODQgLy8gaGVhZE9mZnNldAoJaW50IDEzNiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMTcKCS8vIGluZm8ucGVyaW9kMk5vd1ZvbHVtZUEgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDEzNiAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzE4CgkvLyBpbmZvLnBlcmlvZDJQcmV2Vm9sdW1lQiA9IGluZm8ucGVyaW9kMk5vd1ZvbHVtZUIKCWludCAxOTIgLy8gaGVhZE9mZnNldAoJaW50IDE0NCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMTkKCS8vIGluZm8ucGVyaW9kMk5vd1ZvbHVtZUIgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDE0NCAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzIwCgkvLyBpbmZvLnBlcmlvZDJQcmV2VGltZSA9IGluZm8ucGVyaW9kMk5vd1RpbWUKCWludCAyMjQgLy8gaGVhZE9mZnNldAoJaW50IDE3NiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vICppZjVfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzIxCgkvLyBpbmZvLnBlcmlvZDJOb3dUaW1lID09PSAwCglpbnQgMTc2IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaW50IDAKCT09CglieiAqaWY1X2Vsc2UKCgkvLyAqaWY1X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMjIKCS8vIGluZm8ucGVyaW9kMk5vd1RpbWUgPSBnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcAoJaW50IDE3NiAvLyBoZWFkT2Zmc2V0CglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCWIgKmlmNV9lbmQKCippZjVfZWxzZToKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMjQKCS8vIGluZm8ucGVyaW9kMk5vd1RpbWUgPSBwZXJpb2QySXRlckZyb21DdXJyVGltZSAqIHRoaXMucGVyaW9kMi52YWx1ZQoJaW50IDE3NiAvLyBoZWFkT2Zmc2V0CglmcmFtZV9kaWcgOSAvLyBwZXJpb2QySXRlckZyb21DdXJyVGltZTogdWludDY0CglieXRlIDB4NzAzMiAvLyAicDIiCglhcHBfZ2xvYmFsX2dldAoJKgoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoqaWY1X2VuZDoKCippZjRfZW5kOgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMyOAoJLy8gaW5mby5wZXJpb2QyTm93RmVlQSA9IGluZm8ucGVyaW9kMk5vd0ZlZUEgKyBmZWVBbW91bnRBCglpbnQgMTUyIC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTggLy8gZmVlQW1vdW50QTogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzI5CgkvLyBpbmZvLnBlcmlvZDJOb3dGZWVCID0gaW5mby5wZXJpb2QyTm93RmVlQiArIGZlZUFtb3VudEIKCWludCAxNjAgLy8gaGVhZE9mZnNldAoJZHVwCglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2RpZyAtOSAvLyBmZWVBbW91bnRCOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMzAKCS8vIHBlcmlvZDJOb3dWb2x1bWVCVWludDI1NiA9IGluZm8ucGVyaW9kMk5vd1ZvbHVtZUIgYXMgdWludDI1NgoJaW50IDE0NCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2J1cnkgMTAgLy8gcGVyaW9kMk5vd1ZvbHVtZUJVaW50MjU2OiB1bnNhZmUgdWludDI1NgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMzEKCS8vIHBlcmlvZDJOb3dWV0FQVWludDI1NiA9IGluZm8ucGVyaW9kMk5vd1ZXQVAgYXMgdWludDI1NgoJaW50IDE2OCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2J1cnkgMTEgLy8gcGVyaW9kMk5vd1ZXQVBVaW50MjU2OiB1bnNhZmUgdWludDI1NgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMzIKCS8vIGluZm8ucGVyaW9kMk5vd1ZXQVAgPSAoKHBlcmlvZDJOb3dWb2x1bWVCVWludDI1NiAqIHBlcmlvZDJOb3dWV0FQVWludDI1NiArIGFtb3VudEJVaW50MjU2ICogcHJpY2VVaW50MjU2KSAvCgkvLyAgICAgICAocGVyaW9kMk5vd1ZvbHVtZUJVaW50MjU2ICsgYW1vdW50QlVpbnQyNTYpKSBhcyB1aW50NjQKCWludCAxNjggLy8gaGVhZE9mZnNldAoJZnJhbWVfZGlnIDEwIC8vIHBlcmlvZDJOb3dWb2x1bWVCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAxMSAvLyBwZXJpb2QyTm93VldBUFVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKgoJZnJhbWVfZGlnIDMgLy8gYW1vdW50QlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMiAvLyBwcmljZVVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKgoJYisKCWZyYW1lX2RpZyAxMCAvLyBwZXJpb2QyTm93Vm9sdW1lQlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMyAvLyBhbW91bnRCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWIrCgliLwoJZHVwCgliaXRsZW4KCWludCA2NAoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgOAoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMzNAoJLy8gaW5mby5wZXJpb2QyTm93Vm9sdW1lQSA9IGluZm8ucGVyaW9kMk5vd1ZvbHVtZUEgKyBhbW91bnRBCglpbnQgMTM2IC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTYgLy8gYW1vdW50QTogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzM1CgkvLyBpbmZvLnBlcmlvZDJOb3dWb2x1bWVCID0gaW5mby5wZXJpb2QyTm93Vm9sdW1lQiArIGFtb3VudEIKCWludCAxNDQgLy8gaGVhZE9mZnNldAoJZHVwCglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2RpZyAtNyAvLyBhbW91bnRCOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMzgKCS8vIHBlcmlvZDNJdGVyRnJvbU5vd09iaiA9IGluZm8ucGVyaW9kM05vd1RpbWUgLyB0aGlzLnBlcmlvZDMudmFsdWUKCWludCAyNzIgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjMzOAoJLy8gdGhpcy5wZXJpb2QzLnZhbHVlCglieXRlIDB4NzAzMyAvLyAicDMiCglhcHBfZ2xvYmFsX2dldAoJLwoJZnJhbWVfYnVyeSAxMiAvLyBwZXJpb2QzSXRlckZyb21Ob3dPYmo6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozMzkKCS8vIHBlcmlvZDNJdGVyRnJvbUN1cnJUaW1lID0gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgLyB0aGlzLnBlcmlvZDMudmFsdWUKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWJ5dGUgMHg3MDMzIC8vICJwMyIKCWFwcF9nbG9iYWxfZ2V0CgkvCglmcmFtZV9idXJ5IDEzIC8vIHBlcmlvZDNJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCgkvLyAqaWY2X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM0MgoJLy8gcGVyaW9kM0l0ZXJGcm9tTm93T2JqICE9PSBwZXJpb2QzSXRlckZyb21DdXJyVGltZQoJZnJhbWVfZGlnIDEyIC8vIHBlcmlvZDNJdGVyRnJvbU5vd09iajogdWludDY0CglmcmFtZV9kaWcgMTMgLy8gcGVyaW9kM0l0ZXJGcm9tQ3VyclRpbWU6IHVpbnQ2NAoJIT0KCWJ6ICppZjZfZW5kCgoJLy8gKmlmNl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzQ0CgkvLyBpbmZvLnBlcmlvZDNQcmV2RmVlQSA9IGluZm8ucGVyaW9kM05vd0ZlZUEKCWludCAyOTYgLy8gaGVhZE9mZnNldAoJaW50IDI0OCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNDUKCS8vIGluZm8ucGVyaW9kM05vd0ZlZUEgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDI0OCAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzQ2CgkvLyBpbmZvLnBlcmlvZDNQcmV2RmVlQiA9IGluZm8ucGVyaW9kM05vd0ZlZUIKCWludCAzMDQgLy8gaGVhZE9mZnNldAoJaW50IDI1NiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNDcKCS8vIGluZm8ucGVyaW9kM05vd0ZlZUIgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDI1NiAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzQ4CgkvLyBpbmZvLnBlcmlvZDNQcmV2VldBUCA9IGluZm8ucGVyaW9kM05vd1ZXQVAKCWludCAzMTIgLy8gaGVhZE9mZnNldAoJaW50IDI2NCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNDkKCS8vIGluZm8ucGVyaW9kM1ByZXZWb2x1bWVBID0gaW5mby5wZXJpb2QzTm93Vm9sdW1lQQoJaW50IDI4MCAvLyBoZWFkT2Zmc2V0CglpbnQgMjMyIC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM1MAoJLy8gaW5mby5wZXJpb2QzTm93Vm9sdW1lQSA9IDAKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCglpbnQgMjMyIC8vIGhlYWRPZmZzZXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNTEKCS8vIGluZm8ucGVyaW9kM1ByZXZWb2x1bWVCID0gaW5mby5wZXJpb2QzTm93Vm9sdW1lQgoJaW50IDI4OCAvLyBoZWFkT2Zmc2V0CglpbnQgMjQwIC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM1MgoJLy8gaW5mby5wZXJpb2QzTm93Vm9sdW1lQiA9IDAKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCglpbnQgMjQwIC8vIGhlYWRPZmZzZXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNTMKCS8vIGluZm8ucGVyaW9kM1ByZXZUaW1lID0gaW5mby5wZXJpb2QzTm93VGltZQoJaW50IDMyMCAvLyBoZWFkT2Zmc2V0CglpbnQgMjcyIC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gKmlmN19jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNTQKCS8vIGluZm8ucGVyaW9kM05vd1RpbWUgPT09IDAKCWludCAyNzIgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpbnQgMAoJPT0KCWJ6ICppZjdfZWxzZQoKCS8vICppZjdfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM1NQoJLy8gaW5mby5wZXJpb2QzTm93VGltZSA9IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wCglpbnQgMjcyIC8vIGhlYWRPZmZzZXQKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoJYiAqaWY3X2VuZAoKKmlmN19lbHNlOgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM1NwoJLy8gaW5mby5wZXJpb2QzTm93VGltZSA9IHBlcmlvZDNJdGVyRnJvbUN1cnJUaW1lICogdGhpcy5wZXJpb2QzLnZhbHVlCglpbnQgMjcyIC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAxMyAvLyBwZXJpb2QzSXRlckZyb21DdXJyVGltZTogdWludDY0CglieXRlIDB4NzAzMyAvLyAicDMiCglhcHBfZ2xvYmFsX2dldAoJKgoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoqaWY3X2VuZDoKCippZjZfZW5kOgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM2MQoJLy8gaW5mby5wZXJpb2QzTm93RmVlQSA9IGluZm8ucGVyaW9kM05vd0ZlZUEgKyBmZWVBbW91bnRBCglpbnQgMjQ4IC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTggLy8gZmVlQW1vdW50QTogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzYyCgkvLyBpbmZvLnBlcmlvZDNOb3dGZWVCID0gaW5mby5wZXJpb2QzTm93RmVlQiArIGZlZUFtb3VudEIKCWludCAyNTYgLy8gaGVhZE9mZnNldAoJZHVwCglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2RpZyAtOSAvLyBmZWVBbW91bnRCOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNjMKCS8vIHBlcmlvZDNOb3dWb2x1bWVCVWludDI1NiA9IGluZm8ucGVyaW9kM05vd1ZvbHVtZUIgYXMgdWludDI1NgoJaW50IDI0MCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2J1cnkgMTQgLy8gcGVyaW9kM05vd1ZvbHVtZUJVaW50MjU2OiB1bnNhZmUgdWludDI1NgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNjQKCS8vIHBlcmlvZDNOb3dWV0FQVWludDI1NiA9IGluZm8ucGVyaW9kM05vd1ZXQVAgYXMgdWludDI1NgoJaW50IDI2NCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2J1cnkgMTUgLy8gcGVyaW9kM05vd1ZXQVBVaW50MjU2OiB1bnNhZmUgdWludDI1NgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNjUKCS8vIGluZm8ucGVyaW9kM05vd1ZXQVAgPSAoKHBlcmlvZDNOb3dWb2x1bWVCVWludDI1NiAqIHBlcmlvZDNOb3dWV0FQVWludDI1NiArIGFtb3VudEJVaW50MjU2ICogcHJpY2VVaW50MjU2KSAvCgkvLyAgICAgICAocGVyaW9kM05vd1ZvbHVtZUJVaW50MjU2ICsgYW1vdW50QlVpbnQyNTYpKSBhcyB1aW50NjQKCWludCAyNjQgLy8gaGVhZE9mZnNldAoJZnJhbWVfZGlnIDE0IC8vIHBlcmlvZDNOb3dWb2x1bWVCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAxNSAvLyBwZXJpb2QzTm93VldBUFVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKgoJZnJhbWVfZGlnIDMgLy8gYW1vdW50QlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMiAvLyBwcmljZVVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKgoJYisKCWZyYW1lX2RpZyAxNCAvLyBwZXJpb2QzTm93Vm9sdW1lQlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMyAvLyBhbW91bnRCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWIrCgliLwoJZHVwCgliaXRsZW4KCWludCA2NAoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgOAoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM2NwoJLy8gaW5mby5wZXJpb2QzTm93Vm9sdW1lQSA9IGluZm8ucGVyaW9kM05vd1ZvbHVtZUEgKyBhbW91bnRBCglpbnQgMjMyIC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTYgLy8gYW1vdW50QTogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzY4CgkvLyBpbmZvLnBlcmlvZDNOb3dWb2x1bWVCID0gaW5mby5wZXJpb2QzTm93Vm9sdW1lQiArIGFtb3VudEIKCWludCAyNDAgLy8gaGVhZE9mZnNldAoJZHVwCglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2RpZyAtNyAvLyBhbW91bnRCOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNzAKCS8vIHBlcmlvZDRJdGVyRnJvbU5vd09iaiA9IGluZm8ucGVyaW9kNE5vd1RpbWUgLyB0aGlzLnBlcmlvZDQudmFsdWUKCWludCAzNjggLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM3MAoJLy8gdGhpcy5wZXJpb2Q0LnZhbHVlCglieXRlIDB4NzAzNCAvLyAicDQiCglhcHBfZ2xvYmFsX2dldAoJLwoJZnJhbWVfYnVyeSAxNiAvLyBwZXJpb2Q0SXRlckZyb21Ob3dPYmo6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNzEKCS8vIHBlcmlvZDRJdGVyRnJvbUN1cnJUaW1lID0gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgLyB0aGlzLnBlcmlvZDQudmFsdWUKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWJ5dGUgMHg3MDM0IC8vICJwNCIKCWFwcF9nbG9iYWxfZ2V0CgkvCglmcmFtZV9idXJ5IDE3IC8vIHBlcmlvZDRJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCgkvLyAqaWY4X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM3NAoJLy8gcGVyaW9kNEl0ZXJGcm9tTm93T2JqICE9PSBwZXJpb2Q0SXRlckZyb21DdXJyVGltZQoJZnJhbWVfZGlnIDE2IC8vIHBlcmlvZDRJdGVyRnJvbU5vd09iajogdWludDY0CglmcmFtZV9kaWcgMTcgLy8gcGVyaW9kNEl0ZXJGcm9tQ3VyclRpbWU6IHVpbnQ2NAoJIT0KCWJ6ICppZjhfZW5kCgoJLy8gKmlmOF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mzc2CgkvLyBpbmZvLnBlcmlvZDRQcmV2RmVlQSA9IGluZm8ucGVyaW9kNE5vd0ZlZUEKCWludCAzOTIgLy8gaGVhZE9mZnNldAoJaW50IDM0NCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNzcKCS8vIGluZm8ucGVyaW9kNE5vd0ZlZUEgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDM0NCAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mzc4CgkvLyBpbmZvLnBlcmlvZDRQcmV2RmVlQiA9IGluZm8ucGVyaW9kNE5vd0ZlZUIKCWludCA0MDAgLy8gaGVhZE9mZnNldAoJaW50IDM1MiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozNzkKCS8vIGluZm8ucGVyaW9kNE5vd0ZlZUIgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDM1MiAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MzgwCgkvLyBpbmZvLnBlcmlvZDRQcmV2VldBUCA9IGluZm8ucGVyaW9kNE5vd1ZXQVAKCWludCA0MDggLy8gaGVhZE9mZnNldAoJaW50IDM2MCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozODEKCS8vIGluZm8ucGVyaW9kNFByZXZWb2x1bWVBID0gaW5mby5wZXJpb2Q0Tm93Vm9sdW1lQQoJaW50IDM3NiAvLyBoZWFkT2Zmc2V0CglpbnQgMzI4IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM4MgoJLy8gaW5mby5wZXJpb2Q0Tm93Vm9sdW1lQSA9IDAKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCglpbnQgMzI4IC8vIGhlYWRPZmZzZXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozODMKCS8vIGluZm8ucGVyaW9kNFByZXZWb2x1bWVCID0gaW5mby5wZXJpb2Q0Tm93Vm9sdW1lQgoJaW50IDM4NCAvLyBoZWFkT2Zmc2V0CglpbnQgMzM2IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM4NAoJLy8gaW5mby5wZXJpb2Q0Tm93Vm9sdW1lQiA9IDAKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCglpbnQgMzM2IC8vIGhlYWRPZmZzZXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozODUKCS8vIGluZm8ucGVyaW9kNFByZXZUaW1lID0gaW5mby5wZXJpb2Q0Tm93VGltZQoJaW50IDQxNiAvLyBoZWFkT2Zmc2V0CglpbnQgMzY4IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gKmlmOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozODYKCS8vIGluZm8ucGVyaW9kNE5vd1RpbWUgPT09IDAKCWludCAzNjggLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpbnQgMAoJPT0KCWJ6ICppZjlfZWxzZQoKCS8vICppZjlfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM4NwoJLy8gaW5mby5wZXJpb2Q0Tm93VGltZSA9IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wCglpbnQgMzY4IC8vIGhlYWRPZmZzZXQKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoJYiAqaWY5X2VuZAoKKmlmOV9lbHNlOgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM4OQoJLy8gaW5mby5wZXJpb2Q0Tm93VGltZSA9IHBlcmlvZDRJdGVyRnJvbUN1cnJUaW1lICogdGhpcy5wZXJpb2Q0LnZhbHVlCglpbnQgMzY4IC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAxNyAvLyBwZXJpb2Q0SXRlckZyb21DdXJyVGltZTogdWludDY0CglieXRlIDB4NzAzNCAvLyAicDQiCglhcHBfZ2xvYmFsX2dldAoJKgoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoqaWY5X2VuZDoKCippZjhfZW5kOgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM5MwoJLy8gaW5mby5wZXJpb2Q0Tm93RmVlQSA9IGluZm8ucGVyaW9kNE5vd0ZlZUEgKyBmZWVBbW91bnRBCglpbnQgMzQ0IC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTggLy8gZmVlQW1vdW50QTogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6Mzk0CgkvLyBpbmZvLnBlcmlvZDROb3dGZWVCID0gaW5mby5wZXJpb2Q0Tm93RmVlQiArIGZlZUFtb3VudEIKCWludCAzNTIgLy8gaGVhZE9mZnNldAoJZHVwCglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2RpZyAtOSAvLyBmZWVBbW91bnRCOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozOTUKCS8vIHBlcmlvZDROb3dWb2x1bWVCVWludDI1NiA9IGluZm8ucGVyaW9kNE5vd1ZvbHVtZUIgYXMgdWludDI1NgoJaW50IDMzNiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2J1cnkgMTggLy8gcGVyaW9kNE5vd1ZvbHVtZUJVaW50MjU2OiB1bnNhZmUgdWludDI1NgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozOTYKCS8vIHBlcmlvZDROb3dWV0FQVWludDI1NiA9IGluZm8ucGVyaW9kNE5vd1ZXQVAgYXMgdWludDI1NgoJaW50IDM2MCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2J1cnkgMTkgLy8gcGVyaW9kNE5vd1ZXQVBVaW50MjU2OiB1bnNhZmUgdWludDI1NgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czozOTcKCS8vIGluZm8ucGVyaW9kNE5vd1ZXQVAgPSAoKHBlcmlvZDROb3dWb2x1bWVCVWludDI1NiAqIHBlcmlvZDROb3dWV0FQVWludDI1NiArIGFtb3VudEJVaW50MjU2ICogcHJpY2VVaW50MjU2KSAvCgkvLyAgICAgICAocGVyaW9kNE5vd1ZvbHVtZUJVaW50MjU2ICsgYW1vdW50QlVpbnQyNTYpKSBhcyB1aW50NjQKCWludCAzNjAgLy8gaGVhZE9mZnNldAoJZnJhbWVfZGlnIDE4IC8vIHBlcmlvZDROb3dWb2x1bWVCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAxOSAvLyBwZXJpb2Q0Tm93VldBUFVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKgoJZnJhbWVfZGlnIDMgLy8gYW1vdW50QlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMiAvLyBwcmljZVVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKgoJYisKCWZyYW1lX2RpZyAxOCAvLyBwZXJpb2Q0Tm93Vm9sdW1lQlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMyAvLyBhbW91bnRCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCWIrCgliLwoJZHVwCgliaXRsZW4KCWludCA2NAoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgOAoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjM5OQoJLy8gaW5mby5wZXJpb2Q0Tm93Vm9sdW1lQSA9IGluZm8ucGVyaW9kNE5vd1ZvbHVtZUEgKyBhbW91bnRBCglpbnQgMzI4IC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTYgLy8gYW1vdW50QTogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDAwCgkvLyBpbmZvLnBlcmlvZDROb3dWb2x1bWVCID0gaW5mby5wZXJpb2Q0Tm93Vm9sdW1lQiArIGFtb3VudEIKCWludCAzMzYgLy8gaGVhZE9mZnNldAoJZHVwCglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2RpZyAtNyAvLyBhbW91bnRCOiB1aW50NjQKCSsKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MDIKCS8vIHBlcmlvZDVJdGVyRnJvbU5vd09iaiA9IGluZm8ucGVyaW9kNU5vd1RpbWUgLyB0aGlzLnBlcmlvZDUudmFsdWUKCWludCA0NjQgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjQwMgoJLy8gdGhpcy5wZXJpb2Q1LnZhbHVlCglieXRlIDB4NzAzNSAvLyAicDUiCglhcHBfZ2xvYmFsX2dldAoJLwoJZnJhbWVfYnVyeSAyMCAvLyBwZXJpb2Q1SXRlckZyb21Ob3dPYmo6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MDMKCS8vIHBlcmlvZDVJdGVyRnJvbUN1cnJUaW1lID0gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgLyB0aGlzLnBlcmlvZDUudmFsdWUKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWJ5dGUgMHg3MDM1IC8vICJwNSIKCWFwcF9nbG9iYWxfZ2V0CgkvCglmcmFtZV9idXJ5IDIxIC8vIHBlcmlvZDVJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCgkvLyAqaWYxMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MDYKCS8vIHBlcmlvZDVJdGVyRnJvbU5vd09iaiAhPT0gcGVyaW9kNUl0ZXJGcm9tQ3VyclRpbWUKCWZyYW1lX2RpZyAyMCAvLyBwZXJpb2Q1SXRlckZyb21Ob3dPYmo6IHVpbnQ2NAoJZnJhbWVfZGlnIDIxIC8vIHBlcmlvZDVJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCSE9CglieiAqaWYxMF9lbmQKCgkvLyAqaWYxMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDA4CgkvLyBpbmZvLnBlcmlvZDVQcmV2RmVlQSA9IGluZm8ucGVyaW9kNU5vd0ZlZUEKCWludCA0ODggLy8gaGVhZE9mZnNldAoJaW50IDQ0MCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MDkKCS8vIGluZm8ucGVyaW9kNU5vd0ZlZUEgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDQ0MCAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDEwCgkvLyBpbmZvLnBlcmlvZDVQcmV2RmVlQiA9IGluZm8ucGVyaW9kNU5vd0ZlZUIKCWludCA0OTYgLy8gaGVhZE9mZnNldAoJaW50IDQ0OCAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MTEKCS8vIGluZm8ucGVyaW9kNU5vd0ZlZUIgPSAwCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJaW50IDQ0OCAvLyBoZWFkT2Zmc2V0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDEyCgkvLyBpbmZvLnBlcmlvZDVQcmV2VldBUCA9IGluZm8ucGVyaW9kNU5vd1ZXQVAKCWludCA1MDQgLy8gaGVhZE9mZnNldAoJaW50IDQ1NiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDcwIC8vICJwIgoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czoyNjQKCS8vIGFwcFBvb2xJZC5pZAoJZnJhbWVfZGlnIC0xIC8vIGFwcFBvb2xJZDogQXBwSUQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MTMKCS8vIGluZm8ucGVyaW9kNVByZXZWb2x1bWVBID0gaW5mby5wZXJpb2Q1Tm93Vm9sdW1lQQoJaW50IDQ3MiAvLyBoZWFkT2Zmc2V0CglpbnQgNDI0IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjQxNAoJLy8gaW5mby5wZXJpb2Q1Tm93Vm9sdW1lQSA9IDAKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCglpbnQgNDI0IC8vIGhlYWRPZmZzZXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MTUKCS8vIGluZm8ucGVyaW9kNVByZXZWb2x1bWVCID0gaW5mby5wZXJpb2Q1Tm93Vm9sdW1lQgoJaW50IDQ4MCAvLyBoZWFkT2Zmc2V0CglpbnQgNDMyIC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjQxNgoJLy8gaW5mby5wZXJpb2Q1Tm93Vm9sdW1lQiA9IDAKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCglpbnQgNDMyIC8vIGhlYWRPZmZzZXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MTcKCS8vIGluZm8ucGVyaW9kNVByZXZUaW1lID0gaW5mby5wZXJpb2Q1Tm93VGltZQoJaW50IDUxMiAvLyBoZWFkT2Zmc2V0CglpbnQgNDY0IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gKmlmMTFfY29uZGl0aW9uCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDE4CgkvLyBpbmZvLnBlcmlvZDVOb3dUaW1lID09PSAwCglpbnQgNDY0IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaW50IDAKCT09CglieiAqaWYxMV9lbHNlCgoJLy8gKmlmMTFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjQxOQoJLy8gaW5mby5wZXJpb2Q1Tm93VGltZSA9IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wCglpbnQgNDY0IC8vIGhlYWRPZmZzZXQKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoJYiAqaWYxMV9lbmQKCippZjExX2Vsc2U6CgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDIxCgkvLyBpbmZvLnBlcmlvZDVOb3dUaW1lID0gcGVyaW9kNUl0ZXJGcm9tQ3VyclRpbWUgKiB0aGlzLnBlcmlvZDUudmFsdWUKCWludCA0NjQgLy8gaGVhZE9mZnNldAoJZnJhbWVfZGlnIDIxIC8vIHBlcmlvZDVJdGVyRnJvbUN1cnJUaW1lOiB1aW50NjQKCWJ5dGUgMHg3MDM1IC8vICJwNSIKCWFwcF9nbG9iYWxfZ2V0CgkqCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCippZjExX2VuZDoKCippZjEwX2VuZDoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MjUKCS8vIGluZm8ucGVyaW9kNU5vd0ZlZUEgPSBpbmZvLnBlcmlvZDVOb3dGZWVBICsgZmVlQW1vdW50QQoJaW50IDQ0MCAvLyBoZWFkT2Zmc2V0CglkdXAKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfZGlnIC04IC8vIGZlZUFtb3VudEE6IHVpbnQ2NAoJKwoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjQyNgoJLy8gaW5mby5wZXJpb2Q1Tm93RmVlQiA9IGluZm8ucGVyaW9kNU5vd0ZlZUIgKyBmZWVBbW91bnRCCglpbnQgNDQ4IC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTkgLy8gZmVlQW1vdW50QjogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDI3CgkvLyBwZXJpb2Q1Tm93Vm9sdW1lQlVpbnQyNTYgPSBpbmZvLnBlcmlvZDROb3dWb2x1bWVCIGFzIHVpbnQyNTYKCWludCAzMzYgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9idXJ5IDIyIC8vIHBlcmlvZDVOb3dWb2x1bWVCVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDI4CgkvLyBwZXJpb2Q1Tm93VldBUFVpbnQyNTYgPSBpbmZvLnBlcmlvZDROb3dWV0FQIGFzIHVpbnQyNTYKCWludCAzNjAgLy8gaGVhZE9mZnNldAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglmcmFtZV9idXJ5IDIzIC8vIHBlcmlvZDVOb3dWV0FQVWludDI1NjogdW5zYWZlIHVpbnQyNTYKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6NDI5CgkvLyBpbmZvLnBlcmlvZDVOb3dWV0FQID0gKChwZXJpb2Q1Tm93Vm9sdW1lQlVpbnQyNTYgKiBwZXJpb2Q1Tm93VldBUFVpbnQyNTYgKyBhbW91bnRCVWludDI1NiAqIHByaWNlVWludDI1NikgLwoJLy8gICAgICAgKHBlcmlvZDVOb3dWb2x1bWVCVWludDI1NiArIGFtb3VudEJVaW50MjU2KSkgYXMgdWludDY0CglpbnQgNDU2IC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAyMiAvLyBwZXJpb2Q1Tm93Vm9sdW1lQlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMjMgLy8gcGVyaW9kNU5vd1ZXQVBVaW50MjU2OiB1bnNhZmUgdWludDI1NgoJYioKCWZyYW1lX2RpZyAzIC8vIGFtb3VudEJVaW50MjU2OiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDIgLy8gcHJpY2VVaW50MjU2OiB1bnNhZmUgdWludDI1NgoJYioKCWIrCglmcmFtZV9kaWcgMjIgLy8gcGVyaW9kNU5vd1ZvbHVtZUJVaW50MjU2OiB1bnNhZmUgdWludDI1NgoJZnJhbWVfZGlnIDMgLy8gYW1vdW50QlVpbnQyNTY6IHVuc2FmZSB1aW50MjU2CgliKwoJYi8KCWR1cAoJYml0bGVuCglpbnQgNjQKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDgKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly9pbmZvCgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIGNvbnRyYWN0c1xCaWF0ZWNQb29sUHJvdmlkZXIuYWxnby50czo0MzEKCS8vIGluZm8ucGVyaW9kNU5vd1ZvbHVtZUEgPSBpbmZvLnBlcmlvZDVOb3dWb2x1bWVBICsgYW1vdW50QQoJaW50IDQyNCAvLyBoZWFkT2Zmc2V0CglkdXAKCWludCA4CglieXRlIDB4NzAgLy8gInAiCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjI2NAoJLy8gYXBwUG9vbElkLmlkCglmcmFtZV9kaWcgLTEgLy8gYXBwUG9vbElkOiBBcHBJRAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfZGlnIC02IC8vIGFtb3VudEE6IHVpbnQ2NAoJKwoJaXRvYgoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL2luZm8KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gY29udHJhY3RzXEJpYXRlY1Bvb2xQcm92aWRlci5hbGdvLnRzOjQzMgoJLy8gaW5mby5wZXJpb2Q1Tm93Vm9sdW1lQiA9IGluZm8ucGVyaW9kNU5vd1ZvbHVtZUIgKyBhbW91bnRCCglpbnQgNDMyIC8vIGhlYWRPZmZzZXQKCWR1cAoJaW50IDgKCWJ5dGUgMHg3MCAvLyAicCIKCgkvLyBjb250cmFjdHNcQmlhdGVjUG9vbFByb3ZpZGVyLmFsZ28udHM6MjY0CgkvLyBhcHBQb29sSWQuaWQKCWZyYW1lX2RpZyAtMSAvLyBhcHBQb29sSWQ6IEFwcElECglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9kaWcgLTcgLy8gYW1vdW50QjogdWludDY0CgkrCglpdG9iCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vaW5mbwoJY292ZXIgMgoJYm94X3JlcGxhY2UKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKKmNhbGxfTm9PcDoKCW1ldGhvZCAiZ2V0Q3VycmVudFN0YXR1cyh1aW50NjQpKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpIgoJbWV0aG9kICJyZWdpc3RlclBvb2wodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDgpdm9pZCIKCW1ldGhvZCAicmVnaXN0ZXJUcmFkZSh1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZ2V0Q3VycmVudFN0YXR1cyAqYWJpX3JvdXRlX3JlZ2lzdGVyUG9vbCAqYWJpX3JvdXRlX3JlZ2lzdGVyVHJhZGUKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecPoolProvider",
    "desc": "",
    "methods": [
      {
        "name": "getCurrentStatus",
        "desc": "Returns current status",
        "readonly": true,
        "args": [
          {
            "name": "appPoolId",
            "type": "uint64",
            "desc": "Pool id to retrieve the stats"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
          "desc": "Pool info statistics"
        }
      },
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerPool",
        "desc": "This method is called by constructor of the luquidity pool",
        "args": [
          {
            "name": "appPoolId",
            "type": "uint64",
            "desc": "Luquidity pool id"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "verificationClass",
            "type": "uint8",
            "desc": "Verification class"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerTrade",
        "desc": "This metod registers the trade and calculates and store the trade statistics",
        "args": [
          {
            "name": "appPoolId",
            "type": "uint64",
            "desc": "Liqudity pool smart contract"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "priceFrom",
            "type": "uint64",
            "desc": "The original price"
          },
          {
            "name": "priceTo",
            "type": "uint64",
            "desc": "The new price"
          },
          {
            "name": "amountA",
            "type": "uint64",
            "desc": "Asset A amount spent or received"
          },
          {
            "name": "amountB",
            "type": "uint64",
            "desc": "Asset B amount spent or received"
          },
          {
            "name": "feeAmountA",
            "type": "uint64",
            "desc": "Fees paid in asset A if any"
          },
          {
            "name": "feeAmountB",
            "type": "uint64",
            "desc": "Fees paid in asset B if any"
          },
          {
            "name": "s",
            "type": "uint64",
            "desc": "Scale multiplier"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the BiatecPoolProvider smart contract.
 */
export type BiatecPoolProvider = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getCurrentStatus', {
      argsObj: {
        /**
         * Pool id to retrieve the stats
         */
        appPoolId: bigint | number
      }
      argsTuple: [appPoolId: bigint | number]
      /**
       * Pool info statistics
       */
      returns: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'registerPool(uint64,uint64,uint64,uint8)void' | 'registerPool', {
      argsObj: {
        /**
         * Luquidity pool id
         */
        appPoolId: bigint | number
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * Verification class
         */
        verificationClass: number
      }
      argsTuple: [appPoolId: bigint | number, assetA: bigint | number, assetB: bigint | number, verificationClass: number]
      returns: void
    }>
    & Record<'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'registerTrade', {
      argsObj: {
        /**
         * Liqudity pool smart contract
         */
        appPoolId: bigint | number
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * The original price
         */
        priceFrom: bigint | number
        /**
         * The new price
         */
        priceTo: bigint | number
        /**
         * Asset A amount spent or received
         */
        amountA: bigint | number
        /**
         * Asset B amount spent or received
         */
        amountB: bigint | number
        /**
         * Fees paid in asset A if any
         */
        feeAmountA: bigint | number
        /**
         * Fees paid in asset B if any
         */
        feeAmountB: bigint | number
        /**
         * Scale multiplier
         */
        s: bigint | number
      }
      argsTuple: [appPoolId: bigint | number, assetA: bigint | number, assetB: bigint | number, priceFrom: bigint | number, priceTo: bigint | number, amountA: bigint | number, amountB: bigint | number, feeAmountA: bigint | number, feeAmountB: bigint | number, s: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'g'?: BinaryState
      'v'?: BinaryState
      'e'?: BinaryState
      'p1'?: IntegerState
      'p2'?: IntegerState
      'p3'?: IntegerState
      'p4'?: IntegerState
      'p5'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BiatecPoolProviderSig = keyof BiatecPoolProvider['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BiatecPoolProviderSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BiatecPoolProvider smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BiatecPoolProviderSig> = BiatecPoolProvider['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecPoolProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecPoolProviderSig> = BiatecPoolProvider['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BiatecPoolProviderCreateCalls = (typeof BiatecPoolProviderCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BiatecPoolProviderCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecPoolProviderDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BiatecPoolProviderCreateCalls) => BiatecPoolProviderCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BiatecPoolProviderCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BiatecPoolProvider smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Returns current status
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCurrentStatus(args: MethodArgs<'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.appPoolId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerPool(uint64,uint64,uint64,uint8)void ABI method
   *
   * This method is called by constructor of the luquidity pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerPool(args: MethodArgs<'registerPool(uint64,uint64,uint64,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerPool(uint64,uint64,uint64,uint8)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appPoolId, args.assetA, args.assetB, args.verificationClass],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * This metod registers the trade and calculates and store the trade statistics
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerTrade(args: MethodArgs<'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appPoolId, args.assetA, args.assetB, args.priceFrom, args.priceTo, args.amountA, args.amountB, args.feeAmountA, args.feeAmountB, args.s],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BiatecPoolProvider smart contract
 */
export class BiatecPoolProviderClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BiatecPoolProviderClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BiatecPoolProvider['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BiatecPoolProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BiatecPoolProviderDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BiatecPoolProviderCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BiatecPoolProvider smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BiatecPoolProviderCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecPoolProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns current status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Pool info statistics
   */
  public getCurrentStatus(args: MethodArgs<'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecPoolProviderCallFactory.getCurrentStatus(args, params))
  }

  /**
   * Calls the registerPool(uint64,uint64,uint64,uint8)void ABI method.
   *
   * This method is called by constructor of the luquidity pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerPool(args: MethodArgs<'registerPool(uint64,uint64,uint64,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecPoolProviderCallFactory.registerPool(args, params))
  }

  /**
   * Calls the registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * This metod registers the trade and calculates and store the trade statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerTrade(args: MethodArgs<'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecPoolProviderCallFactory.registerTrade(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BiatecPoolProvider['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get g() {
        return BiatecPoolProviderClient.getBinaryState(state, 'g')
      },
      get v() {
        return BiatecPoolProviderClient.getBinaryState(state, 'v')
      },
      get e() {
        return BiatecPoolProviderClient.getBinaryState(state, 'e')
      },
      get p1() {
        return BiatecPoolProviderClient.getIntegerState(state, 'p1')
      },
      get p2() {
        return BiatecPoolProviderClient.getIntegerState(state, 'p2')
      },
      get p3() {
        return BiatecPoolProviderClient.getIntegerState(state, 'p3')
      },
      get p4() {
        return BiatecPoolProviderClient.getIntegerState(state, 'p4')
      },
      get p5() {
        return BiatecPoolProviderClient.getIntegerState(state, 'p5')
      },
    }
  }

  public compose(): BiatecPoolProviderComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getCurrentStatus(args: MethodArgs<'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCurrentStatus(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerPool(args: MethodArgs<'registerPool(uint64,uint64,uint64,uint8)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerTrade(args: MethodArgs<'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerTrade(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BiatecPoolProviderComposer
  }
}
export type BiatecPoolProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Returns current status
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentStatus(args: MethodArgs<'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecPoolProviderComposer<[...TReturns, MethodReturn<'getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>]>

  /**
   * Calls the registerPool(uint64,uint64,uint64,uint8)void ABI method.
   *
   * This method is called by constructor of the luquidity pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerPool(args: MethodArgs<'registerPool(uint64,uint64,uint64,uint8)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecPoolProviderComposer<[...TReturns, MethodReturn<'registerPool(uint64,uint64,uint64,uint8)void'>]>

  /**
   * Calls the registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * This metod registers the trade and calculates and store the trade statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerTrade(args: MethodArgs<'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecPoolProviderComposer<[...TReturns, MethodReturn<'registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the BiatecPoolProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): BiatecPoolProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BiatecPoolProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BiatecPoolProviderComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<BiatecPoolProviderComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BiatecPoolProviderComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BiatecPoolProviderComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
