/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"BiatecConfigProvider","desc":"","methods":[{"name":"createApplication","desc":"Initial setup","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","desc":"addressUdpater from global biatec configuration is allowed to update application","args":[{"name":"newVersion","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"bootstrap","desc":"Setup the contract","args":[{"name":"biatecFee","type":"uint256","desc":"Biatec fees"},{"name":"appBiatecIdentityProvider","type":"uint64"},{"name":"appBiatecPoolProvider","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressUdpater","desc":"Top secret account with which it is possible update contracts or identity provider","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setPaused","desc":"Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.","args":[{"name":"a","type":"uint64","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressGov","desc":"Execution address with which it is possible to opt in for governance","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressExecutive","desc":"Execution address with which it is possible to change global biatec fees","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressExecutiveFee","desc":"Execution fee address is address which can take fees from pools.","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setBiatecIdentity","desc":"App identity setter","args":[{"name":"a","type":"uint64","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setBiatecPool","desc":"App identity setter","args":[{"name":"a","type":"uint64","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setBiatecFee","desc":"Fees in 9 decimals. 1_000_000_000 = 100%\nFees in 9 decimals. 10_000_000 = 1%\nFees in 9 decimals. 100_000 = 0,01%\n\n\nFees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee","args":[{"name":"biatecFee","type":"uint256","desc":"Fee"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendOnlineKeyRegistration","desc":"addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"votePK","type":"byte[]"},{"name":"selectionPK","type":"byte[]"},{"name":"stateProofPK","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawExcessAssets","desc":"If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"asset","type":"uint64","desc":"Asset to withdraw. If native token, then zero"},{"name":"amount","type":"uint64","desc":"Amount of the asset to be withdrawn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":6,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"addressUdpater":{"key":"dQ==","keyType":"AVMBytes","valueType":"address"},"addressGov":{"key":"Zw==","keyType":"AVMBytes","valueType":"address"},"addressExecutive":{"key":"ZQ==","keyType":"AVMBytes","valueType":"address"},"addressExecutiveFee":{"key":"ZWY=","keyType":"AVMBytes","valueType":"address"},"appBiatecIdentityProvider":{"key":"aQ==","keyType":"AVMBytes","valueType":"uint64"},"appBiatecPoolProvider":{"key":"cA==","keyType":"AVMBytes","valueType":"uint64"},"suspended":{"key":"cw==","keyType":"AVMBytes","valueType":"uint64"},"biatecFee":{"key":"Zg==","keyType":"AVMBytes","valueType":"uint256"},"version":{"key":"c2N2ZXI=","keyType":"AVMBytes","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[0]},{"teal":2,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96]},{"teal":15,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[97,98]},{"teal":16,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[99]},{"teal":17,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[100,101]},{"teal":18,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[102]},{"teal":19,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[103,104]},{"teal":20,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[105]},{"teal":21,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131]},{"teal":25,"source":"contracts\\BiatecConfigProvider.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[132]},{"teal":30,"source":"contracts\\BiatecConfigProvider.algo.ts:60","pc":[133,134,135]},{"teal":31,"source":"contracts\\BiatecConfigProvider.algo.ts:60","pc":[136]},{"teal":32,"source":"contracts\\BiatecConfigProvider.algo.ts:60","pc":[137]},{"teal":38,"source":"contracts\\BiatecConfigProvider.algo.ts:60","pc":[138,139,140]},{"teal":42,"source":"contracts\\BiatecConfigProvider.algo.ts:61","pc":[141,142]},{"teal":43,"source":"contracts\\BiatecConfigProvider.algo.ts:61","pc":[143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166]},{"teal":44,"source":"contracts\\BiatecConfigProvider.algo.ts:61","pc":[167]},{"teal":48,"source":"contracts\\BiatecConfigProvider.algo.ts:62","pc":[168]},{"teal":49,"source":"contracts\\BiatecConfigProvider.algo.ts:62","pc":[169,170]},{"teal":50,"source":"contracts\\BiatecConfigProvider.algo.ts:62","pc":[171]},{"teal":54,"source":"contracts\\BiatecConfigProvider.algo.ts:63","pc":[172,173]},{"teal":55,"source":"contracts\\BiatecConfigProvider.algo.ts:63","pc":[174,175]},{"teal":56,"source":"contracts\\BiatecConfigProvider.algo.ts:63","pc":[176]},{"teal":60,"source":"contracts\\BiatecConfigProvider.algo.ts:64","pc":[177]},{"teal":61,"source":"contracts\\BiatecConfigProvider.algo.ts:64","pc":[178,179]},{"teal":62,"source":"contracts\\BiatecConfigProvider.algo.ts:64","pc":[180]},{"teal":66,"source":"contracts\\BiatecConfigProvider.algo.ts:65","pc":[181]},{"teal":67,"source":"contracts\\BiatecConfigProvider.algo.ts:65","pc":[182,183]},{"teal":68,"source":"contracts\\BiatecConfigProvider.algo.ts:65","pc":[184]},{"teal":72,"source":"contracts\\BiatecConfigProvider.algo.ts:66","pc":[185,186]},{"teal":73,"source":"contracts\\BiatecConfigProvider.algo.ts:66","pc":[187]},{"teal":74,"source":"contracts\\BiatecConfigProvider.algo.ts:66","pc":[188]},{"teal":75,"source":"contracts\\BiatecConfigProvider.algo.ts:60","pc":[189]},{"teal":80,"source":"contracts\\BiatecConfigProvider.algo.ts:72","pc":[190,191,192]},{"teal":81,"source":"contracts\\BiatecConfigProvider.algo.ts:72","pc":[193,194,195]},{"teal":84,"source":"contracts\\BiatecConfigProvider.algo.ts:72","pc":[196,197,198]},{"teal":85,"source":"contracts\\BiatecConfigProvider.algo.ts:72","pc":[199]},{"teal":86,"source":"contracts\\BiatecConfigProvider.algo.ts:72","pc":[200]},{"teal":92,"source":"contracts\\BiatecConfigProvider.algo.ts:72","pc":[201,202,203]},{"teal":99,"source":"contracts\\BiatecConfigProvider.algo.ts:74","pc":[204,205]},{"teal":100,"source":"contracts\\BiatecConfigProvider.algo.ts:74","pc":[206]},{"teal":101,"source":"contracts\\BiatecConfigProvider.algo.ts:74","pc":[207]},{"teal":102,"source":"contracts\\BiatecConfigProvider.algo.ts:74","pc":[208]},{"teal":105,"source":"contracts\\BiatecConfigProvider.algo.ts:73","errorMessage":"Only addressUdpater setup in the config can update application","pc":[209]},{"teal":109,"source":"contracts\\BiatecConfigProvider.algo.ts:77","pc":[210,211]},{"teal":110,"source":"contracts\\BiatecConfigProvider.algo.ts:77","pc":[212,213]},{"teal":111,"source":"contracts\\BiatecConfigProvider.algo.ts:77","pc":[214]},{"teal":112,"source":"contracts\\BiatecConfigProvider.algo.ts:72","pc":[215]},{"teal":117,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[216,217,218]},{"teal":118,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[219]},{"teal":121,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[220,221,222]},{"teal":122,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[223]},{"teal":125,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[224,225,226]},{"teal":126,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[227]},{"teal":127,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[228]},{"teal":128,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[229]},{"teal":129,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[230]},{"teal":132,"source":"contracts\\BiatecConfigProvider.algo.ts:84","errorMessage":"argument 2 (biatecFee) for bootstrap must be a uint256","pc":[231]},{"teal":135,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[232,233,234]},{"teal":136,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[235]},{"teal":137,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[236]},{"teal":144,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[237,238,239]},{"teal":148,"source":"contracts\\BiatecConfigProvider.algo.ts:85","pc":[240,241]},{"teal":149,"source":"contracts\\BiatecConfigProvider.algo.ts:85","pc":[242]},{"teal":150,"source":"contracts\\BiatecConfigProvider.algo.ts:85","pc":[243]},{"teal":151,"source":"contracts\\BiatecConfigProvider.algo.ts:85","pc":[244]},{"teal":154,"source":"contracts\\BiatecConfigProvider.algo.ts:85","errorMessage":"Only updater can call bootstrap method","pc":[245]},{"teal":158,"source":"contracts\\BiatecConfigProvider.algo.ts:86","pc":[246,247]},{"teal":159,"source":"contracts\\BiatecConfigProvider.algo.ts:86","pc":[248]},{"teal":160,"source":"contracts\\BiatecConfigProvider.algo.ts:86","pc":[249,250]},{"teal":161,"source":"contracts\\BiatecConfigProvider.algo.ts:86","pc":[251]},{"teal":162,"source":"contracts\\BiatecConfigProvider.algo.ts:86","pc":[252]},{"teal":165,"source":"contracts\\BiatecConfigProvider.algo.ts:86","errorMessage":"Biatec cannot set fees higher then 50% of lp fees","pc":[253]},{"teal":169,"source":"contracts\\BiatecConfigProvider.algo.ts:87","pc":[254,255]},{"teal":170,"source":"contracts\\BiatecConfigProvider.algo.ts:87","pc":[256,257]},{"teal":171,"source":"contracts\\BiatecConfigProvider.algo.ts:87","pc":[258]},{"teal":175,"source":"contracts\\BiatecConfigProvider.algo.ts:88","pc":[259,260]},{"teal":176,"source":"contracts\\BiatecConfigProvider.algo.ts:88","pc":[261,262]},{"teal":177,"source":"contracts\\BiatecConfigProvider.algo.ts:88","pc":[263]},{"teal":181,"source":"contracts\\BiatecConfigProvider.algo.ts:89","pc":[264,265]},{"teal":182,"source":"contracts\\BiatecConfigProvider.algo.ts:89","pc":[266,267]},{"teal":183,"source":"contracts\\BiatecConfigProvider.algo.ts:89","pc":[268]},{"teal":184,"source":"contracts\\BiatecConfigProvider.algo.ts:84","pc":[269]},{"teal":189,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[270,271,272]},{"teal":190,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[273]},{"teal":191,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[274]},{"teal":192,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[275]},{"teal":193,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[276]},{"teal":196,"source":"contracts\\BiatecConfigProvider.algo.ts:97","errorMessage":"argument 0 (a) for setAddressUdpater must be a address","pc":[277]},{"teal":199,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[278,279,280]},{"teal":200,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[281]},{"teal":201,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[282]},{"teal":209,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[283,284,285]},{"teal":213,"source":"contracts\\BiatecConfigProvider.algo.ts:98","pc":[286,287]},{"teal":214,"source":"contracts\\BiatecConfigProvider.algo.ts:98","pc":[288]},{"teal":215,"source":"contracts\\BiatecConfigProvider.algo.ts:98","pc":[289]},{"teal":216,"source":"contracts\\BiatecConfigProvider.algo.ts:98","pc":[290]},{"teal":219,"source":"contracts\\BiatecConfigProvider.algo.ts:98","errorMessage":"Only updater can change updater address","pc":[291]},{"teal":223,"source":"contracts\\BiatecConfigProvider.algo.ts:99","pc":[292]},{"teal":224,"source":"contracts\\BiatecConfigProvider.algo.ts:99","pc":[293,294]},{"teal":225,"source":"contracts\\BiatecConfigProvider.algo.ts:99","pc":[295]},{"teal":226,"source":"contracts\\BiatecConfigProvider.algo.ts:97","pc":[296]},{"teal":231,"source":"contracts\\BiatecConfigProvider.algo.ts:107","pc":[297,298,299]},{"teal":232,"source":"contracts\\BiatecConfigProvider.algo.ts:107","pc":[300]},{"teal":235,"source":"contracts\\BiatecConfigProvider.algo.ts:107","pc":[301,302,303]},{"teal":236,"source":"contracts\\BiatecConfigProvider.algo.ts:107","pc":[304]},{"teal":237,"source":"contracts\\BiatecConfigProvider.algo.ts:107","pc":[305]},{"teal":245,"source":"contracts\\BiatecConfigProvider.algo.ts:107","pc":[306,307,308]},{"teal":249,"source":"contracts\\BiatecConfigProvider.algo.ts:108","pc":[309,310]},{"teal":250,"source":"contracts\\BiatecConfigProvider.algo.ts:108","pc":[311]},{"teal":251,"source":"contracts\\BiatecConfigProvider.algo.ts:108","pc":[312]},{"teal":252,"source":"contracts\\BiatecConfigProvider.algo.ts:108","pc":[313]},{"teal":255,"source":"contracts\\BiatecConfigProvider.algo.ts:108","errorMessage":"Only updater can pause and unpause the biatec services","pc":[314]},{"teal":259,"source":"contracts\\BiatecConfigProvider.algo.ts:109","pc":[315,316]},{"teal":260,"source":"contracts\\BiatecConfigProvider.algo.ts:109","pc":[317,318]},{"teal":261,"source":"contracts\\BiatecConfigProvider.algo.ts:109","pc":[319]},{"teal":262,"source":"contracts\\BiatecConfigProvider.algo.ts:107","pc":[320]},{"teal":267,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[321,322,323]},{"teal":268,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[324]},{"teal":269,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[325]},{"teal":270,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[326]},{"teal":271,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[327]},{"teal":274,"source":"contracts\\BiatecConfigProvider.algo.ts:117","errorMessage":"argument 0 (a) for setAddressGov must be a address","pc":[328]},{"teal":277,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[329,330,331]},{"teal":278,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[332]},{"teal":279,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[333]},{"teal":287,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[334,335,336]},{"teal":291,"source":"contracts\\BiatecConfigProvider.algo.ts:118","pc":[337,338]},{"teal":292,"source":"contracts\\BiatecConfigProvider.algo.ts:118","pc":[339]},{"teal":293,"source":"contracts\\BiatecConfigProvider.algo.ts:118","pc":[340]},{"teal":294,"source":"contracts\\BiatecConfigProvider.algo.ts:118","pc":[341]},{"teal":297,"source":"contracts\\BiatecConfigProvider.algo.ts:118","errorMessage":"Only updater can change gov address","pc":[342]},{"teal":301,"source":"contracts\\BiatecConfigProvider.algo.ts:119","pc":[343,344]},{"teal":302,"source":"contracts\\BiatecConfigProvider.algo.ts:119","pc":[345,346]},{"teal":303,"source":"contracts\\BiatecConfigProvider.algo.ts:119","pc":[347]},{"teal":304,"source":"contracts\\BiatecConfigProvider.algo.ts:117","pc":[348]},{"teal":309,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[349,350,351]},{"teal":310,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[352]},{"teal":311,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[353]},{"teal":312,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[354]},{"teal":313,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[355]},{"teal":316,"source":"contracts\\BiatecConfigProvider.algo.ts:127","errorMessage":"argument 0 (a) for setAddressExecutive must be a address","pc":[356]},{"teal":319,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[357,358,359]},{"teal":320,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[360]},{"teal":321,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[361]},{"teal":329,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[362,363,364]},{"teal":333,"source":"contracts\\BiatecConfigProvider.algo.ts:128","pc":[365,366]},{"teal":334,"source":"contracts\\BiatecConfigProvider.algo.ts:128","pc":[367]},{"teal":335,"source":"contracts\\BiatecConfigProvider.algo.ts:128","pc":[368]},{"teal":336,"source":"contracts\\BiatecConfigProvider.algo.ts:128","pc":[369]},{"teal":339,"source":"contracts\\BiatecConfigProvider.algo.ts:128","errorMessage":"Only updater can change addressExecutive","pc":[370]},{"teal":343,"source":"contracts\\BiatecConfigProvider.algo.ts:129","pc":[371]},{"teal":344,"source":"contracts\\BiatecConfigProvider.algo.ts:129","pc":[372,373]},{"teal":345,"source":"contracts\\BiatecConfigProvider.algo.ts:129","pc":[374]},{"teal":346,"source":"contracts\\BiatecConfigProvider.algo.ts:127","pc":[375]},{"teal":351,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[376,377,378]},{"teal":352,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[379]},{"teal":353,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[380]},{"teal":354,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[381]},{"teal":355,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[382]},{"teal":358,"source":"contracts\\BiatecConfigProvider.algo.ts:137","errorMessage":"argument 0 (a) for setAddressExecutiveFee must be a address","pc":[383]},{"teal":361,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[384,385,386]},{"teal":362,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[387]},{"teal":363,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[388]},{"teal":371,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[389,390,391]},{"teal":375,"source":"contracts\\BiatecConfigProvider.algo.ts:138","pc":[392,393]},{"teal":376,"source":"contracts\\BiatecConfigProvider.algo.ts:138","pc":[394]},{"teal":377,"source":"contracts\\BiatecConfigProvider.algo.ts:138","pc":[395]},{"teal":378,"source":"contracts\\BiatecConfigProvider.algo.ts:138","pc":[396]},{"teal":381,"source":"contracts\\BiatecConfigProvider.algo.ts:138","errorMessage":"Only addressExecutive can change fee executor address","pc":[397]},{"teal":385,"source":"contracts\\BiatecConfigProvider.algo.ts:139","pc":[398]},{"teal":386,"source":"contracts\\BiatecConfigProvider.algo.ts:139","pc":[399,400]},{"teal":387,"source":"contracts\\BiatecConfigProvider.algo.ts:139","pc":[401]},{"teal":388,"source":"contracts\\BiatecConfigProvider.algo.ts:137","pc":[402]},{"teal":393,"source":"contracts\\BiatecConfigProvider.algo.ts:147","pc":[403,404,405]},{"teal":394,"source":"contracts\\BiatecConfigProvider.algo.ts:147","pc":[406]},{"teal":397,"source":"contracts\\BiatecConfigProvider.algo.ts:147","pc":[407,408,409]},{"teal":398,"source":"contracts\\BiatecConfigProvider.algo.ts:147","pc":[410]},{"teal":399,"source":"contracts\\BiatecConfigProvider.algo.ts:147","pc":[411]},{"teal":407,"source":"contracts\\BiatecConfigProvider.algo.ts:147","pc":[412,413,414]},{"teal":411,"source":"contracts\\BiatecConfigProvider.algo.ts:148","pc":[415,416]},{"teal":412,"source":"contracts\\BiatecConfigProvider.algo.ts:148","pc":[417]},{"teal":413,"source":"contracts\\BiatecConfigProvider.algo.ts:148","pc":[418]},{"teal":414,"source":"contracts\\BiatecConfigProvider.algo.ts:148","pc":[419]},{"teal":417,"source":"contracts\\BiatecConfigProvider.algo.ts:148","errorMessage":"Only updater can change appIdentityProvider","pc":[420]},{"teal":421,"source":"contracts\\BiatecConfigProvider.algo.ts:149","pc":[421,422]},{"teal":422,"source":"contracts\\BiatecConfigProvider.algo.ts:149","pc":[423,424]},{"teal":423,"source":"contracts\\BiatecConfigProvider.algo.ts:149","pc":[425]},{"teal":424,"source":"contracts\\BiatecConfigProvider.algo.ts:147","pc":[426]},{"teal":429,"source":"contracts\\BiatecConfigProvider.algo.ts:157","pc":[427,428,429]},{"teal":430,"source":"contracts\\BiatecConfigProvider.algo.ts:157","pc":[430]},{"teal":433,"source":"contracts\\BiatecConfigProvider.algo.ts:157","pc":[431,432,433]},{"teal":434,"source":"contracts\\BiatecConfigProvider.algo.ts:157","pc":[434]},{"teal":435,"source":"contracts\\BiatecConfigProvider.algo.ts:157","pc":[435]},{"teal":443,"source":"contracts\\BiatecConfigProvider.algo.ts:157","pc":[436,437,438]},{"teal":447,"source":"contracts\\BiatecConfigProvider.algo.ts:158","pc":[439,440]},{"teal":448,"source":"contracts\\BiatecConfigProvider.algo.ts:158","pc":[441]},{"teal":449,"source":"contracts\\BiatecConfigProvider.algo.ts:158","pc":[442]},{"teal":450,"source":"contracts\\BiatecConfigProvider.algo.ts:158","pc":[443]},{"teal":453,"source":"contracts\\BiatecConfigProvider.algo.ts:158","errorMessage":"Only updater can change appPoolProvider","pc":[444]},{"teal":457,"source":"contracts\\BiatecConfigProvider.algo.ts:159","pc":[445,446]},{"teal":458,"source":"contracts\\BiatecConfigProvider.algo.ts:159","pc":[447,448]},{"teal":459,"source":"contracts\\BiatecConfigProvider.algo.ts:159","pc":[449]},{"teal":460,"source":"contracts\\BiatecConfigProvider.algo.ts:157","pc":[450]},{"teal":465,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[451,452,453]},{"teal":466,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[454]},{"teal":467,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[455]},{"teal":468,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[456]},{"teal":469,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[457]},{"teal":472,"source":"contracts\\BiatecConfigProvider.algo.ts:171","errorMessage":"argument 0 (biatecFee) for setBiatecFee must be a uint256","pc":[458]},{"teal":475,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[459,460,461]},{"teal":476,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[462]},{"teal":477,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[463]},{"teal":489,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[464,465,466]},{"teal":493,"source":"contracts\\BiatecConfigProvider.algo.ts:172","pc":[467,468]},{"teal":494,"source":"contracts\\BiatecConfigProvider.algo.ts:172","pc":[469]},{"teal":495,"source":"contracts\\BiatecConfigProvider.algo.ts:172","pc":[470]},{"teal":496,"source":"contracts\\BiatecConfigProvider.algo.ts:172","pc":[471]},{"teal":499,"source":"contracts\\BiatecConfigProvider.algo.ts:172","errorMessage":"Only executive address can change fees","pc":[472]},{"teal":503,"source":"contracts\\BiatecConfigProvider.algo.ts:173","pc":[473,474]},{"teal":504,"source":"contracts\\BiatecConfigProvider.algo.ts:173","pc":[475]},{"teal":505,"source":"contracts\\BiatecConfigProvider.algo.ts:173","pc":[476,477]},{"teal":506,"source":"contracts\\BiatecConfigProvider.algo.ts:173","pc":[478]},{"teal":507,"source":"contracts\\BiatecConfigProvider.algo.ts:173","pc":[479]},{"teal":510,"source":"contracts\\BiatecConfigProvider.algo.ts:173","errorMessage":"Biatec cannot set fees higher then 50% of lp fees","pc":[480]},{"teal":514,"source":"contracts\\BiatecConfigProvider.algo.ts:174","pc":[481,482]},{"teal":515,"source":"contracts\\BiatecConfigProvider.algo.ts:174","pc":[483,484]},{"teal":516,"source":"contracts\\BiatecConfigProvider.algo.ts:174","pc":[485]},{"teal":517,"source":"contracts\\BiatecConfigProvider.algo.ts:171","pc":[486]},{"teal":522,"source":"contracts\\BiatecConfigProvider.algo.ts:188","pc":[487,488,489]},{"teal":523,"source":"contracts\\BiatecConfigProvider.algo.ts:188","pc":[490]},{"teal":526,"source":"contracts\\BiatecConfigProvider.algo.ts:187","pc":[491,492,493]},{"teal":527,"source":"contracts\\BiatecConfigProvider.algo.ts:187","pc":[494]},{"teal":530,"source":"contracts\\BiatecConfigProvider.algo.ts:186","pc":[495,496,497]},{"teal":531,"source":"contracts\\BiatecConfigProvider.algo.ts:186","pc":[498]},{"teal":534,"source":"contracts\\BiatecConfigProvider.algo.ts:185","pc":[499,500,501]},{"teal":535,"source":"contracts\\BiatecConfigProvider.algo.ts:185","pc":[502,503,504]},{"teal":538,"source":"contracts\\BiatecConfigProvider.algo.ts:184","pc":[505,506,507]},{"teal":539,"source":"contracts\\BiatecConfigProvider.algo.ts:184","pc":[508,509,510]},{"teal":542,"source":"contracts\\BiatecConfigProvider.algo.ts:183","pc":[511,512,513]},{"teal":543,"source":"contracts\\BiatecConfigProvider.algo.ts:183","pc":[514,515,516]},{"teal":546,"source":"contracts\\BiatecConfigProvider.algo.ts:182","pc":[517,518,519]},{"teal":547,"source":"contracts\\BiatecConfigProvider.algo.ts:182","pc":[520]},{"teal":548,"source":"contracts\\BiatecConfigProvider.algo.ts:182","pc":[521]},{"teal":556,"source":"contracts\\BiatecConfigProvider.algo.ts:182","pc":[522,523,524]},{"teal":563,"source":"contracts\\BiatecConfigProvider.algo.ts:191","pc":[525,526]},{"teal":564,"source":"contracts\\BiatecConfigProvider.algo.ts:191","pc":[527]},{"teal":565,"source":"contracts\\BiatecConfigProvider.algo.ts:191","pc":[528]},{"teal":566,"source":"contracts\\BiatecConfigProvider.algo.ts:191","pc":[529]},{"teal":569,"source":"contracts\\BiatecConfigProvider.algo.ts:190","errorMessage":"Only fee executor setup in the config can take the collected fees","pc":[530]},{"teal":581,"source":"contracts\\BiatecConfigProvider.algo.ts:194","pc":[531]},{"teal":582,"source":"contracts\\BiatecConfigProvider.algo.ts:194","pc":[532,533]},{"teal":583,"source":"contracts\\BiatecConfigProvider.algo.ts:194","pc":[534,535]},{"teal":587,"source":"contracts\\BiatecConfigProvider.algo.ts:195","pc":[536,537]},{"teal":588,"source":"contracts\\BiatecConfigProvider.algo.ts:195","pc":[538,539]},{"teal":592,"source":"contracts\\BiatecConfigProvider.algo.ts:196","pc":[540,541]},{"teal":593,"source":"contracts\\BiatecConfigProvider.algo.ts:196","pc":[542,543]},{"teal":597,"source":"contracts\\BiatecConfigProvider.algo.ts:197","pc":[544,545]},{"teal":598,"source":"contracts\\BiatecConfigProvider.algo.ts:197","pc":[546,547]},{"teal":602,"source":"contracts\\BiatecConfigProvider.algo.ts:198","pc":[548,549]},{"teal":603,"source":"contracts\\BiatecConfigProvider.algo.ts:198","pc":[550,551]},{"teal":607,"source":"contracts\\BiatecConfigProvider.algo.ts:199","pc":[552,553]},{"teal":608,"source":"contracts\\BiatecConfigProvider.algo.ts:199","pc":[554,555]},{"teal":612,"source":"contracts\\BiatecConfigProvider.algo.ts:200","pc":[556,557]},{"teal":613,"source":"contracts\\BiatecConfigProvider.algo.ts:200","pc":[558,559]},{"teal":617,"source":"contracts\\BiatecConfigProvider.algo.ts:201","pc":[560]},{"teal":618,"source":"contracts\\BiatecConfigProvider.algo.ts:201","pc":[561,562]},{"teal":621,"source":"contracts\\BiatecConfigProvider.algo.ts:194","pc":[563]},{"teal":622,"source":"contracts\\BiatecConfigProvider.algo.ts:182","pc":[564]},{"teal":627,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[565,566,567,568,569,570]},{"teal":630,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[571,572,573]},{"teal":631,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[574]},{"teal":634,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[575,576,577]},{"teal":635,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[578]},{"teal":638,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[579,580,581]},{"teal":639,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[582]},{"teal":640,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[583]},{"teal":641,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[584]},{"teal":642,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[585]},{"teal":643,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[586]},{"teal":654,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[587,588,589]},{"teal":661,"source":"contracts\\BiatecConfigProvider.algo.ts:215","pc":[590,591]},{"teal":662,"source":"contracts\\BiatecConfigProvider.algo.ts:215","pc":[592]},{"teal":663,"source":"contracts\\BiatecConfigProvider.algo.ts:215","pc":[593]},{"teal":664,"source":"contracts\\BiatecConfigProvider.algo.ts:215","pc":[594]},{"teal":667,"source":"contracts\\BiatecConfigProvider.algo.ts:214","errorMessage":"Only fee executor setup in the config can take the collected fees","pc":[595]},{"teal":671,"source":"contracts\\BiatecConfigProvider.algo.ts:219","pc":[596,597]},{"teal":672,"source":"contracts\\BiatecConfigProvider.algo.ts:219","pc":[598,599]},{"teal":673,"source":"contracts\\BiatecConfigProvider.algo.ts:219","pc":[600,601]},{"teal":674,"source":"contracts\\BiatecConfigProvider.algo.ts:219","pc":[602,603,604]},{"teal":678,"source":"contracts\\BiatecConfigProvider.algo.ts:221","pc":[605,606]},{"teal":679,"source":"contracts\\BiatecConfigProvider.algo.ts:213","pc":[607]},{"teal":688,"source":"contracts\\BiatecConfigProvider.algo.ts:230","pc":[608,609,610]},{"teal":693,"source":"contracts\\BiatecConfigProvider.algo.ts:231","pc":[611,612]},{"teal":694,"source":"contracts\\BiatecConfigProvider.algo.ts:231","pc":[613]},{"teal":695,"source":"contracts\\BiatecConfigProvider.algo.ts:231","pc":[614]},{"teal":696,"source":"contracts\\BiatecConfigProvider.algo.ts:231","pc":[615,616,617]},{"teal":705,"source":"contracts\\BiatecConfigProvider.algo.ts:232","pc":[618]},{"teal":706,"source":"contracts\\BiatecConfigProvider.algo.ts:232","pc":[619]},{"teal":707,"source":"contracts\\BiatecConfigProvider.algo.ts:232","pc":[620,621]},{"teal":711,"source":"contracts\\BiatecConfigProvider.algo.ts:233","pc":[622,623]},{"teal":712,"source":"contracts\\BiatecConfigProvider.algo.ts:233","pc":[624,625]},{"teal":716,"source":"contracts\\BiatecConfigProvider.algo.ts:234","pc":[626,627]},{"teal":717,"source":"contracts\\BiatecConfigProvider.algo.ts:234","pc":[628,629]},{"teal":721,"source":"contracts\\BiatecConfigProvider.algo.ts:235","pc":[630]},{"teal":722,"source":"contracts\\BiatecConfigProvider.algo.ts:235","pc":[631,632]},{"teal":725,"source":"contracts\\BiatecConfigProvider.algo.ts:232","pc":[633]},{"teal":726,"source":"contracts\\BiatecConfigProvider.algo.ts:231","pc":[634,635,636]},{"teal":736,"source":"contracts\\BiatecConfigProvider.algo.ts:238","pc":[637]},{"teal":737,"source":"contracts\\BiatecConfigProvider.algo.ts:238","pc":[638,639]},{"teal":738,"source":"contracts\\BiatecConfigProvider.algo.ts:238","pc":[640,641]},{"teal":742,"source":"contracts\\BiatecConfigProvider.algo.ts:239","pc":[642,643]},{"teal":743,"source":"contracts\\BiatecConfigProvider.algo.ts:239","pc":[644,645]},{"teal":747,"source":"contracts\\BiatecConfigProvider.algo.ts:240","pc":[646,647]},{"teal":748,"source":"contracts\\BiatecConfigProvider.algo.ts:240","pc":[648,649]},{"teal":752,"source":"contracts\\BiatecConfigProvider.algo.ts:241","pc":[650,651]},{"teal":753,"source":"contracts\\BiatecConfigProvider.algo.ts:241","pc":[652,653]},{"teal":757,"source":"contracts\\BiatecConfigProvider.algo.ts:242","pc":[654]},{"teal":758,"source":"contracts\\BiatecConfigProvider.algo.ts:242","pc":[655,656]},{"teal":761,"source":"contracts\\BiatecConfigProvider.algo.ts:238","pc":[657]},{"teal":764,"source":"contracts\\BiatecConfigProvider.algo.ts:230","pc":[658]},{"teal":767,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[659,660,661,662,663,664]},{"teal":768,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[665,666,667]},{"teal":769,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[668,669,670,671]},{"teal":772,"source":"contracts\\BiatecConfigProvider.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[672]},{"teal":775,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[673,674,675,676,677,678]},{"teal":776,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[679,680,681,682,683,684]},{"teal":777,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[685,686,687,688,689,690]},{"teal":778,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[691,692,693,694,695,696]},{"teal":779,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[697,698,699,700,701,702]},{"teal":780,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[703,704,705,706,707,708]},{"teal":781,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[709,710,711,712,713,714]},{"teal":782,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[715,716,717,718,719,720]},{"teal":783,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[721,722,723,724,725,726]},{"teal":784,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[727,728,729,730,731,732]},{"teal":785,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[733,734,735,736,737,738]},{"teal":786,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[739,740,741]},{"teal":787,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765]},{"teal":790,"source":"contracts\\BiatecConfigProvider.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[766]},{"teal":793,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[767,768,769,770,771,772]},{"teal":794,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[773,774,775]},{"teal":795,"source":"contracts\\BiatecConfigProvider.algo.ts:6","pc":[776,777,778,779]},{"teal":798,"source":"contracts\\BiatecConfigProvider.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[780]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiADASAAJgsBdQJlZgFlIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7msoAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBXNjdmVyAWcBcwFmAWkBcDEYFIEGCzEZCI0MAh0AAAAAAAACewAAAg8AAAAAAAAAAAAAAIgAAiJDigAAJwWAFkJJQVRFQy1DT05GSUctMDEtMDItMDFnKjEAZycGMQBnKDEAZykxAGcnByRniTYaAVcCAIgAAiJDigEAMQAoZBJEJwWL/2eJNhoDFzYaAhc2GgFJFSMSRIgAAiJDigMAMQAoZBJEi/8rJwSipkQnCIv/ZycJi/5nJwqL/WeJNhoBSRUjEkSIAAIiQ4oBADEAKGQSRCiL/2eJNhoBF4gAAiJDigEAMQAoZBJEJweL/2eJNhoBSRUjEkSIAAIiQ4oBADEAKGQSRCcGi/9niTYaAUkVIxJEiAACIkOKAQAxAChkEkQqi/9niTYaAUkVIxJEiAACIkOKAQAxACpkEkQpi/9niTYaAReIAAIiQ4oBADEAKGQSRCcJi/9niTYaAReIAAIiQ4oBADEAKGQSRCcKi/9niTYaAUkVIxJEiAACIkOKAQAxACpkEkSL/ysnBKKmRCcIi/9niTYaBhc2GgUXNhoEFzYaA1cCADYaAlcCADYaAVcCAIgAAiJDigYAMQApZBJEsYECshCL/rILi/2yP4v8sgyL+rIOi/uyDYv/sgoksgGziYAEFR98dTYaAhc2GgEXiAAFFlCwIkOKAgExAClkEkSL/ov/MQCIAAOL/omKAwCL/iQSQQATsSKyEIv/sgeL/bIIJLIBs0IAFbGBBLIQi/+yFIv+shGL/bISJLIBs4mABLhEezY2GgCOAf3lAIAESVzn7YAEv8IIYIAEDNwQ/IAEa5VfS4AEixh7PYAEUOB9iIAEur4eEYAExYudpIAEyjRKNIAESfOhf4AEhyg3MDYaAI4L/dr+EP4r/kP+X/56/pX+rf7F/un/NwCABGk2xi82GgCOAf2yAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":1,"patch":2,"commitHash":"088f89dd+"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the BiatecConfigProvider contract
 */
export type BiatecConfigProviderArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'updateApplication(byte[])void': {
      newVersion: Uint8Array
    }
    'bootstrap(uint256,uint64,uint64)void': {
      /**
       * Biatec fees
       */
      biatecFee: bigint | number
      appBiatecIdentityProvider: bigint | number
      appBiatecPoolProvider: bigint | number
    }
    'setAddressUdpater(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setPaused(uint64)void': {
      /**
       * Address
       */
      a: bigint | number
    }
    'setAddressGov(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setAddressExecutive(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setAddressExecutiveFee(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setBiatecIdentity(uint64)void': {
      /**
       * Address
       */
      a: bigint | number
    }
    'setBiatecPool(uint64)void': {
      /**
       * Address
       */
      a: bigint | number
    }
    'setBiatecFee(uint256)void': {
      /**
       * Fee
       */
      biatecFee: bigint | number
    }
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void': {
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
    }
    'withdrawExcessAssets(uint64,uint64)uint64': {
      /**
       * Asset to withdraw. If native token, then zero
       */
      asset: bigint | number
      /**
       * Amount of the asset to be withdrawn
       */
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'updateApplication(byte[])void': [newVersion: Uint8Array]
    'bootstrap(uint256,uint64,uint64)void': [biatecFee: bigint | number, appBiatecIdentityProvider: bigint | number, appBiatecPoolProvider: bigint | number]
    'setAddressUdpater(address)void': [a: string]
    'setPaused(uint64)void': [a: bigint | number]
    'setAddressGov(address)void': [a: string]
    'setAddressExecutive(address)void': [a: string]
    'setAddressExecutiveFee(address)void': [a: string]
    'setBiatecIdentity(uint64)void': [a: bigint | number]
    'setBiatecPool(uint64)void': [a: bigint | number]
    'setBiatecFee(uint256)void': [biatecFee: bigint | number]
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void': [votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
    'withdrawExcessAssets(uint64,uint64)uint64': [asset: bigint | number, amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BiatecConfigProviderReturns = {
  'createApplication()void': void
  'updateApplication(byte[])void': void
  'bootstrap(uint256,uint64,uint64)void': void
  'setAddressUdpater(address)void': void
  'setPaused(uint64)void': void
  'setAddressGov(address)void': void
  'setAddressExecutive(address)void': void
  'setAddressExecutiveFee(address)void': void
  'setBiatecIdentity(uint64)void': void
  'setBiatecPool(uint64)void': void
  'setBiatecFee(uint256)void': void
  'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void': void
  'withdrawExcessAssets(uint64,uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the BiatecConfigProvider smart contract.
 */
export type BiatecConfigProviderTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BiatecConfigProviderArgs['obj']['createApplication()void']
      argsTuple: BiatecConfigProviderArgs['tuple']['createApplication()void']
      returns: BiatecConfigProviderReturns['createApplication()void']
    }>
    & Record<'updateApplication(byte[])void' | 'updateApplication', {
      argsObj: BiatecConfigProviderArgs['obj']['updateApplication(byte[])void']
      argsTuple: BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']
      returns: BiatecConfigProviderReturns['updateApplication(byte[])void']
    }>
    & Record<'bootstrap(uint256,uint64,uint64)void' | 'bootstrap', {
      argsObj: BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']
      returns: BiatecConfigProviderReturns['bootstrap(uint256,uint64,uint64)void']
    }>
    & Record<'setAddressUdpater(address)void' | 'setAddressUdpater', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']
      returns: BiatecConfigProviderReturns['setAddressUdpater(address)void']
    }>
    & Record<'setPaused(uint64)void' | 'setPaused', {
      argsObj: BiatecConfigProviderArgs['obj']['setPaused(uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']
      returns: BiatecConfigProviderReturns['setPaused(uint64)void']
    }>
    & Record<'setAddressGov(address)void' | 'setAddressGov', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressGov(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']
      returns: BiatecConfigProviderReturns['setAddressGov(address)void']
    }>
    & Record<'setAddressExecutive(address)void' | 'setAddressExecutive', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']
      returns: BiatecConfigProviderReturns['setAddressExecutive(address)void']
    }>
    & Record<'setAddressExecutiveFee(address)void' | 'setAddressExecutiveFee', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']
      returns: BiatecConfigProviderReturns['setAddressExecutiveFee(address)void']
    }>
    & Record<'setBiatecIdentity(uint64)void' | 'setBiatecIdentity', {
      argsObj: BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']
      returns: BiatecConfigProviderReturns['setBiatecIdentity(uint64)void']
    }>
    & Record<'setBiatecPool(uint64)void' | 'setBiatecPool', {
      argsObj: BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']
      returns: BiatecConfigProviderReturns['setBiatecPool(uint64)void']
    }>
    & Record<'setBiatecFee(uint256)void' | 'setBiatecFee', {
      argsObj: BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']
      returns: BiatecConfigProviderReturns['setBiatecFee(uint256)void']
    }>
    & Record<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']
      returns: BiatecConfigProviderReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']
    }>
    & Record<'withdrawExcessAssets(uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64']
      argsTuple: BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']
      returns: BiatecConfigProviderReturns['withdrawExcessAssets(uint64,uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        addressUdpater: string
        addressGov: string
        addressExecutive: string
        addressExecutiveFee: string
        appBiatecIdentityProvider: bigint
        appBiatecPoolProvider: bigint
        suspended: bigint
        biatecFee: bigint
        version: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BiatecConfigProviderSignatures = keyof BiatecConfigProviderTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecConfigProviderNonVoidMethodSignatures = keyof BiatecConfigProviderTypes['methods'] extends infer T ? T extends keyof BiatecConfigProviderTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BiatecConfigProvider smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecConfigProviderSignatures> = BiatecConfigProviderTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecConfigProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecConfigProviderSignatures> = BiatecConfigProviderTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecConfigProviderTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BiatecConfigProviderCreateCallParams =
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecConfigProviderUpdateCallParams =
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & {method: 'updateApplication'}>
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & {method: 'updateApplication(byte[])void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecConfigProviderDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BiatecConfigProviderCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: BiatecConfigProviderUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecConfigProvider smart contract
 */
export abstract class BiatecConfigProviderParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecConfigProviderCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecConfigProviderParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BiatecConfigProvider smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecConfigProviderUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(byte[])void':
            return BiatecConfigProviderParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint256,uint64,uint64)void ABI method
   *
   * Setup the contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint256,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.biatecFee, params.args.appBiatecIdentityProvider, params.args.appBiatecPoolProvider],
    }
  }
  /**
   * Constructs a no op call for the setAddressUdpater(address)void ABI method
   *
   * Top secret account with which it is possible update contracts or identity provider
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressUdpater(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressUdpater(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setPaused(uint64)void ABI method
   *
   * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPaused(params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setPaused(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setAddressGov(address)void ABI method
   *
   * Execution address with which it is possible to opt in for governance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressGov(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressGov(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setAddressExecutive(address)void ABI method
   *
   * Execution address with which it is possible to change global biatec fees
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressExecutive(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressExecutive(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setAddressExecutiveFee(address)void ABI method
   *
   * Execution fee address is address which can take fees from pools.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressExecutiveFee(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressExecutiveFee(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setBiatecIdentity(uint64)void ABI method
   *
   * App identity setter
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBiatecIdentity(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBiatecIdentity(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setBiatecPool(uint64)void ABI method
   *
   * App identity setter
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBiatecPool(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBiatecPool(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setBiatecFee(uint256)void ABI method
   *
  * Fees in 9 decimals. 1_000_000_000 = 100%
  Fees in 9 decimals. 10_000_000 = 1%
  Fees in 9 decimals. 100_000 = 0,01%


  Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBiatecFee(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBiatecFee(uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.biatecFee],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to this smart contract biatec can use them.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecConfigProvider smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecConfigProviderFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BiatecConfigProviderFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecConfigProviderClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BiatecConfigProviderClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BiatecConfigProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecConfigProviderDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BiatecConfigProviderParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BiatecConfigProviderCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? BiatecConfigProviderParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (BiatecConfigProviderUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BiatecConfigProviderClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecConfigProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BiatecConfigProviderParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(BiatecConfigProviderParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecConfigProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BiatecConfigProviderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecConfigProvider smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BiatecConfigProviderParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BiatecConfigProviderReturns['createApplication()void']) }, appClient: new BiatecConfigProviderClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BiatecConfigProvider smart contract
 */
export class BiatecConfigProviderClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BiatecConfigProviderClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecConfigProvider app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BiatecConfigProviderClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecConfigProviderNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `BiatecConfigProviderClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BiatecConfigProviderClient> {
    return new BiatecConfigProviderClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `BiatecConfigProviderClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BiatecConfigProviderClient> {
    return new BiatecConfigProviderClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the `updateApplication(byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(BiatecConfigProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `bootstrap(uint256,uint64,uint64)void` ABI method.
     *
     * Setup the contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressUdpater(address)void` ABI method.
     *
     * Top secret account with which it is possible update contracts or identity provider
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressUdpater: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressUdpater(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setPaused(uint64)void` ABI method.
     *
     * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPaused: (params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setPaused(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressGov(address)void` ABI method.
     *
     * Execution address with which it is possible to opt in for governance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressGov: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressGov(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to change global biatec fees
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressExecutive: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressExecutive(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutiveFee(address)void` ABI method.
     *
     * Execution fee address is address which can take fees from pools.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressExecutiveFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressExecutiveFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecIdentity(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBiatecIdentity: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setBiatecIdentity(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecPool(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBiatecPool: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setBiatecPool(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecFee(uint256)void` ABI method.
     *
    * Fees in 9 decimals. 1_000_000_000 = 100%
    Fees in 9 decimals. 10_000_000 = 1%
    Fees in 9 decimals. 100_000 = 0,01%


    Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBiatecFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setBiatecFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `withdrawExcessAssets(uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the `updateApplication(byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(BiatecConfigProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `bootstrap(uint256,uint64,uint64)void` ABI method.
     *
     * Setup the contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressUdpater(address)void` ABI method.
     *
     * Top secret account with which it is possible update contracts or identity provider
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressUdpater: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressUdpater(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setPaused(uint64)void` ABI method.
     *
     * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPaused: (params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setPaused(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressGov(address)void` ABI method.
     *
     * Execution address with which it is possible to opt in for governance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressGov: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressGov(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to change global biatec fees
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressExecutive: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressExecutive(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutiveFee(address)void` ABI method.
     *
     * Execution fee address is address which can take fees from pools.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressExecutiveFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressExecutiveFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecIdentity(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBiatecIdentity: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setBiatecIdentity(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecPool(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBiatecPool: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setBiatecPool(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecFee(uint256)void` ABI method.
     *
    * Fees in 9 decimals. 1_000_000_000 = 100%
    Fees in 9 decimals. 10_000_000 = 1%
    Fees in 9 decimals. 100_000 = 0,01%


    Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBiatecFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setBiatecFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `withdrawExcessAssets(uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the `updateApplication(byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(BiatecConfigProviderParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['updateApplication(byte[])void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `bootstrap(uint256,uint64,uint64)void` ABI method.
     *
     * Setup the contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['bootstrap(uint256,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressUdpater(address)void` ABI method.
     *
     * Top secret account with which it is possible update contracts or identity provider
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressUdpater: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressUdpater(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressUdpater(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setPaused(uint64)void` ABI method.
     *
     * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPaused: async (params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setPaused(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setPaused(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressGov(address)void` ABI method.
     *
     * Execution address with which it is possible to opt in for governance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressGov: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressGov(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressGov(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to change global biatec fees
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressExecutive: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressExecutive(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressExecutive(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutiveFee(address)void` ABI method.
     *
     * Execution fee address is address which can take fees from pools.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressExecutiveFee: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressExecutiveFee(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressExecutiveFee(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecIdentity(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBiatecIdentity: async (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setBiatecIdentity(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setBiatecIdentity(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecPool(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBiatecPool: async (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setBiatecPool(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setBiatecPool(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecFee(uint256)void` ABI method.
     *
    * Fees in 9 decimals. 1_000_000_000 = 100%
    Fees in 9 decimals. 10_000_000 = 1%
    Fees in 9 decimals. 100_000 = 0,01%


    Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBiatecFee: async (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setBiatecFee(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setBiatecFee(uint256)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `withdrawExcessAssets(uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.withdrawExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['withdrawExcessAssets(uint64,uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecConfigProviderClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BiatecConfigProvider app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecConfigProvider app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          addressUdpater: result.addressUdpater,
          addressGov: result.addressGov,
          addressExecutive: result.addressExecutive,
          addressExecutiveFee: result.addressExecutiveFee,
          appBiatecIdentityProvider: result.appBiatecIdentityProvider,
          appBiatecPoolProvider: result.appBiatecPoolProvider,
          suspended: result.suspended,
          biatecFee: result.biatecFee,
          version: new BinaryStateValue(result.version),
        }
      },
      /**
       * Get the current value of the addressUdpater key in global state
       */
      addressUdpater: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressUdpater")) as string | undefined },
      /**
       * Get the current value of the addressGov key in global state
       */
      addressGov: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressGov")) as string | undefined },
      /**
       * Get the current value of the addressExecutive key in global state
       */
      addressExecutive: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressExecutive")) as string | undefined },
      /**
       * Get the current value of the addressExecutiveFee key in global state
       */
      addressExecutiveFee: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressExecutiveFee")) as string | undefined },
      /**
       * Get the current value of the appBiatecIdentityProvider key in global state
       */
      appBiatecIdentityProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecIdentityProvider")) as bigint | undefined },
      /**
       * Get the current value of the appBiatecPoolProvider key in global state
       */
      appBiatecPoolProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecPoolProvider")) as bigint | undefined },
      /**
       * Get the current value of the suspended key in global state
       */
      suspended: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("suspended")) as bigint | undefined },
      /**
       * Get the current value of the biatecFee key in global state
       */
      biatecFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("biatecFee")) as bigint | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): BiatecConfigProviderComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint256,uint64,uint64)void method call against the BiatecConfigProvider contract
       */
      bootstrap(params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressUdpater(address)void method call against the BiatecConfigProvider contract
       */
      setAddressUdpater(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressUdpater(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setPaused(uint64)void method call against the BiatecConfigProvider contract
       */
      setPaused(params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPaused(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressGov(address)void method call against the BiatecConfigProvider contract
       */
      setAddressGov(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressGov(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressExecutive(address)void method call against the BiatecConfigProvider contract
       */
      setAddressExecutive(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressExecutive(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressExecutiveFee(address)void method call against the BiatecConfigProvider contract
       */
      setAddressExecutiveFee(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressExecutiveFee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBiatecIdentity(uint64)void method call against the BiatecConfigProvider contract
       */
      setBiatecIdentity(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBiatecIdentity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBiatecPool(uint64)void method call against the BiatecConfigProvider contract
       */
      setBiatecPool(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBiatecPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBiatecFee(uint256)void method call against the BiatecConfigProvider contract
       */
      setBiatecFee(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBiatecFee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void method call against the BiatecConfigProvider contract
       */
      sendOnlineKeyRegistration(params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64)uint64 method call against the BiatecConfigProvider contract
       */
      withdrawExcessAssets(params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawExcessAssets(uint64,uint64)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the BiatecConfigProvider contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BiatecConfigProviderComposer
  }
}
export type BiatecConfigProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint256,uint64,uint64)void ABI method.
   *
   * Setup the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['bootstrap(uint256,uint64,uint64)void'] | undefined]>

  /**
   * Calls the setAddressUdpater(address)void ABI method.
   *
   * Top secret account with which it is possible update contracts or identity provider
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressUdpater(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressUdpater(address)void'] | undefined]>

  /**
   * Calls the setPaused(uint64)void ABI method.
   *
   * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPaused(params?: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setPaused(uint64)void'] | undefined]>

  /**
   * Calls the setAddressGov(address)void ABI method.
   *
   * Execution address with which it is possible to opt in for governance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressGov(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressGov(address)void'] | undefined]>

  /**
   * Calls the setAddressExecutive(address)void ABI method.
   *
   * Execution address with which it is possible to change global biatec fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressExecutive(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressExecutive(address)void'] | undefined]>

  /**
   * Calls the setAddressExecutiveFee(address)void ABI method.
   *
   * Execution fee address is address which can take fees from pools.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressExecutiveFee(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressExecutiveFee(address)void'] | undefined]>

  /**
   * Calls the setBiatecIdentity(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecIdentity(params?: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setBiatecIdentity(uint64)void'] | undefined]>

  /**
   * Calls the setBiatecPool(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecPool(params?: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setBiatecPool(uint64)void'] | undefined]>

  /**
   * Calls the setBiatecFee(uint256)void ABI method.
   *
  * Fees in 9 decimals. 1_000_000_000 = 100%
  Fees in 9 decimals. 10_000_000 = 1%
  Fees in 9 decimals. 100_000 = 0,01%


  Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecFee(params?: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setBiatecFee(uint256)void'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to this smart contract biatec can use them.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(params?: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['withdrawExcessAssets(uint64,uint64)uint64'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['updateApplication(byte[])void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecConfigProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecConfigProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecConfigProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BiatecConfigProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BiatecConfigProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecConfigProviderComposerResults<TReturns>>
}
export type BiatecConfigProviderComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

