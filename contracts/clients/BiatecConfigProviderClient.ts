/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(byte[])void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "bootstrap(uint256,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressUdpater(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPaused(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressGov(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressExecutive(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressExecutiveFee(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setBiatecIdentity(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setBiatecPool(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setBiatecFee(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawExcessAssets(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "addressUdpater": {
          "type": "bytes",
          "key": "u"
        },
        "addressGov": {
          "type": "bytes",
          "key": "g"
        },
        "addressExecutive": {
          "type": "bytes",
          "key": "e"
        },
        "addressExecutiveFee": {
          "type": "bytes",
          "key": "ef"
        },
        "appBiatecIdentityProvider": {
          "type": "uint64",
          "key": "i"
        },
        "appBiatecPoolProvider": {
          "type": "uint64",
          "key": "p"
        },
        "suspended": {
          "type": "uint64",
          "key": "s"
        },
        "biatecFee": {
          "type": "bytes",
          "key": "f"
        },
        "version": {
          "type": "bytes",
          "key": "scver"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecConfigProvider",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "addressUdpater from global biatec configuration is allowed to update application",
        "args": [
          {
            "name": "newVersion",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Setup the contract",
        "args": [
          {
            "name": "biatecFee",
            "type": "uint256",
            "desc": "Biatec fees"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64"
          },
          {
            "name": "appBiatecPoolProvider",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressUdpater",
        "desc": "Top secret account with which it is possible update contracts or identity provider",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPaused",
        "desc": "Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.",
        "args": [
          {
            "name": "a",
            "type": "uint64",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressGov",
        "desc": "Execution address with which it is possible to opt in for governance",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressExecutive",
        "desc": "Execution address with which it is possible to change global biatec fees",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressExecutiveFee",
        "desc": "Execution fee address is address which can take fees from pools.",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setBiatecIdentity",
        "desc": "App identity setter",
        "args": [
          {
            "name": "a",
            "type": "uint64",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setBiatecPool",
        "desc": "App identity setter",
        "args": [
          {
            "name": "a",
            "type": "uint64",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setBiatecFee",
        "desc": "Fees in 9 decimals. 1_000_000_000 = 100%Fees in 9 decimals. 10_000_000 = 1%Fees in 9 decimals. 100_000 = 0,01%Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee",
        "args": [
          {
            "name": "biatecFee",
            "type": "uint256",
            "desc": "Fee"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendOnlineKeyRegistration",
        "desc": "addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "votePK",
            "type": "byte[]"
          },
          {
            "name": "selectionPK",
            "type": "byte[]"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdrawExcessAssets",
        "desc": "If someone deposits excess assets to this smart contract biatec can use them.Only addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw. If native token, then zero"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of the asset to be withdrawn"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the BiatecConfigProvider smart contract.
 */
export type BiatecConfigProvider = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateApplication(byte[])void' | 'updateApplication', {
      argsObj: {
        newVersion: Uint8Array
      }
      argsTuple: [newVersion: Uint8Array]
      returns: void
    }>
    & Record<'bootstrap(uint256,uint64,uint64)void' | 'bootstrap', {
      argsObj: {
        /**
         * Biatec fees
         */
        biatecFee: bigint | number
        appBiatecIdentityProvider: bigint | number
        appBiatecPoolProvider: bigint | number
      }
      argsTuple: [biatecFee: bigint | number, appBiatecIdentityProvider: bigint | number, appBiatecPoolProvider: bigint | number]
      returns: void
    }>
    & Record<'setAddressUdpater(address)void' | 'setAddressUdpater', {
      argsObj: {
        /**
         * Address
         */
        a: string
      }
      argsTuple: [a: string]
      returns: void
    }>
    & Record<'setPaused(uint64)void' | 'setPaused', {
      argsObj: {
        /**
         * Address
         */
        a: bigint | number
      }
      argsTuple: [a: bigint | number]
      returns: void
    }>
    & Record<'setAddressGov(address)void' | 'setAddressGov', {
      argsObj: {
        /**
         * Address
         */
        a: string
      }
      argsTuple: [a: string]
      returns: void
    }>
    & Record<'setAddressExecutive(address)void' | 'setAddressExecutive', {
      argsObj: {
        /**
         * Address
         */
        a: string
      }
      argsTuple: [a: string]
      returns: void
    }>
    & Record<'setAddressExecutiveFee(address)void' | 'setAddressExecutiveFee', {
      argsObj: {
        /**
         * Address
         */
        a: string
      }
      argsTuple: [a: string]
      returns: void
    }>
    & Record<'setBiatecIdentity(uint64)void' | 'setBiatecIdentity', {
      argsObj: {
        /**
         * Address
         */
        a: bigint | number
      }
      argsTuple: [a: bigint | number]
      returns: void
    }>
    & Record<'setBiatecPool(uint64)void' | 'setBiatecPool', {
      argsObj: {
        /**
         * Address
         */
        a: bigint | number
      }
      argsTuple: [a: bigint | number]
      returns: void
    }>
    & Record<'setBiatecFee(uint256)void' | 'setBiatecFee', {
      argsObj: {
        /**
         * Fee
         */
        biatecFee: bigint | number
      }
      argsTuple: [biatecFee: bigint | number]
      returns: void
    }>
    & Record<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: {
        votePK: Uint8Array
        selectionPK: Uint8Array
        stateProofPK: Uint8Array
        voteFirst: bigint | number
        voteLast: bigint | number
        voteKeyDilution: bigint | number
      }
      argsTuple: [votePK: Uint8Array, selectionPK: Uint8Array, stateProofPK: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'withdrawExcessAssets(uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: {
        /**
         * Asset to withdraw. If native token, then zero
         */
        asset: bigint | number
        /**
         * Amount of the asset to be withdrawn
         */
        amount: bigint | number
      }
      argsTuple: [asset: bigint | number, amount: bigint | number]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'u'?: BinaryState
      'g'?: BinaryState
      'e'?: BinaryState
      'ef'?: BinaryState
      'i'?: IntegerState
      'p'?: IntegerState
      's'?: IntegerState
      'f'?: BinaryState
      'scver'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BiatecConfigProviderSig = keyof BiatecConfigProvider['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BiatecConfigProviderSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BiatecConfigProvider smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BiatecConfigProviderSig> = BiatecConfigProvider['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecConfigProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecConfigProviderSig> = BiatecConfigProvider['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BiatecConfigProviderCreateCalls = (typeof BiatecConfigProviderCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BiatecConfigProviderCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type BiatecConfigProviderUpdateCalls = (typeof BiatecConfigProviderCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type BiatecConfigProviderUpdateCallParams =
  | TypedCallParams<'updateApplication(byte[])void'>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecConfigProviderDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BiatecConfigProviderCreateCalls) => BiatecConfigProviderCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: BiatecConfigProviderUpdateCalls) => BiatecConfigProviderUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BiatecConfigProviderCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BiatecConfigProvider smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication(byte[])void' as const,
          methodArgs: Array.isArray(args) ? args : [args.newVersion],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint256,uint64,uint64)void ABI method
   *
   * Setup the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(uint256,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(uint256,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.biatecFee, args.appBiatecIdentityProvider, args.appBiatecPoolProvider],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAddressUdpater(address)void ABI method
   *
   * Top secret account with which it is possible update contracts or identity provider
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAddressUdpater(args: MethodArgs<'setAddressUdpater(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAddressUdpater(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setPaused(uint64)void ABI method
   *
   * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPaused(args: MethodArgs<'setPaused(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPaused(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAddressGov(address)void ABI method
   *
   * Execution address with which it is possible to opt in for governance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAddressGov(args: MethodArgs<'setAddressGov(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAddressGov(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAddressExecutive(address)void ABI method
   *
   * Execution address with which it is possible to change global biatec fees
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAddressExecutive(args: MethodArgs<'setAddressExecutive(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAddressExecutive(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAddressExecutiveFee(address)void ABI method
   *
   * Execution fee address is address which can take fees from pools.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAddressExecutiveFee(args: MethodArgs<'setAddressExecutiveFee(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAddressExecutiveFee(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setBiatecIdentity(uint64)void ABI method
   *
   * App identity setter
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBiatecIdentity(args: MethodArgs<'setBiatecIdentity(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setBiatecIdentity(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setBiatecPool(uint64)void ABI method
   *
   * App identity setter
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBiatecPool(args: MethodArgs<'setBiatecPool(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setBiatecPool(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.a],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setBiatecFee(uint256)void ABI method
   *
   * Fees in 9 decimals. 1_000_000_000 = 100%Fees in 9 decimals. 10_000_000 = 1%Fees in 9 decimals. 100_000 = 0,01%Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBiatecFee(args: MethodArgs<'setBiatecFee(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setBiatecFee(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.biatecFee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.votePK, args.selectionPK, args.stateProofPK, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64)uint64 ABI method
   *
   * If someone deposits excess assets to this smart contract biatec can use them.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdrawExcessAssets(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.amount],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BiatecConfigProvider smart contract
 */
export class BiatecConfigProviderClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BiatecConfigProviderClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BiatecConfigProvider['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BiatecConfigProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BiatecConfigProviderDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BiatecConfigProviderCallFactory.create)
    const updateArgs = params.updateCall?.(BiatecConfigProviderCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BiatecConfigProvider smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BiatecConfigProviderCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<'updateApplication(byte[])void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(BiatecConfigProviderCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(uint256,uint64,uint64)void ABI method.
   *
   * Setup the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(uint256,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the setAddressUdpater(address)void ABI method.
   *
   * Top secret account with which it is possible update contracts or identity provider
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAddressUdpater(args: MethodArgs<'setAddressUdpater(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setAddressUdpater(args, params))
  }

  /**
   * Calls the setPaused(uint64)void ABI method.
   *
   * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPaused(args: MethodArgs<'setPaused(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setPaused(args, params))
  }

  /**
   * Calls the setAddressGov(address)void ABI method.
   *
   * Execution address with which it is possible to opt in for governance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAddressGov(args: MethodArgs<'setAddressGov(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setAddressGov(args, params))
  }

  /**
   * Calls the setAddressExecutive(address)void ABI method.
   *
   * Execution address with which it is possible to change global biatec fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAddressExecutive(args: MethodArgs<'setAddressExecutive(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setAddressExecutive(args, params))
  }

  /**
   * Calls the setAddressExecutiveFee(address)void ABI method.
   *
   * Execution fee address is address which can take fees from pools.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAddressExecutiveFee(args: MethodArgs<'setAddressExecutiveFee(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setAddressExecutiveFee(args, params))
  }

  /**
   * Calls the setBiatecIdentity(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBiatecIdentity(args: MethodArgs<'setBiatecIdentity(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setBiatecIdentity(args, params))
  }

  /**
   * Calls the setBiatecPool(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBiatecPool(args: MethodArgs<'setBiatecPool(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setBiatecPool(args, params))
  }

  /**
   * Calls the setBiatecFee(uint256)void ABI method.
   *
   * Fees in 9 decimals. 1_000_000_000 = 100%Fees in 9 decimals. 10_000_000 = 1%Fees in 9 decimals. 100_000 = 0,01%Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBiatecFee(args: MethodArgs<'setBiatecFee(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.setBiatecFee(args, params))
  }

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.sendOnlineKeyRegistration(args, params))
  }

  /**
   * Calls the withdrawExcessAssets(uint64,uint64)uint64 ABI method.
   *
   * If someone deposits excess assets to this smart contract biatec can use them.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecConfigProviderCallFactory.withdrawExcessAssets(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BiatecConfigProvider['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get u() {
        return BiatecConfigProviderClient.getBinaryState(state, 'u')
      },
      get g() {
        return BiatecConfigProviderClient.getBinaryState(state, 'g')
      },
      get e() {
        return BiatecConfigProviderClient.getBinaryState(state, 'e')
      },
      get ef() {
        return BiatecConfigProviderClient.getBinaryState(state, 'ef')
      },
      get i() {
        return BiatecConfigProviderClient.getIntegerState(state, 'i')
      },
      get p() {
        return BiatecConfigProviderClient.getIntegerState(state, 'p')
      },
      get s() {
        return BiatecConfigProviderClient.getIntegerState(state, 's')
      },
      get f() {
        return BiatecConfigProviderClient.getBinaryState(state, 'f')
      },
      get scver() {
        return BiatecConfigProviderClient.getBinaryState(state, 'scver')
      },
    }
  }

  public compose(): BiatecConfigProviderComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(uint256,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAddressUdpater(args: MethodArgs<'setAddressUdpater(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAddressUdpater(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPaused(args: MethodArgs<'setPaused(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPaused(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAddressGov(args: MethodArgs<'setAddressGov(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAddressGov(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAddressExecutive(args: MethodArgs<'setAddressExecutive(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAddressExecutive(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAddressExecutiveFee(args: MethodArgs<'setAddressExecutiveFee(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAddressExecutiveFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setBiatecIdentity(args: MethodArgs<'setBiatecIdentity(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setBiatecIdentity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setBiatecPool(args: MethodArgs<'setBiatecPool(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setBiatecPool(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setBiatecFee(args: MethodArgs<'setBiatecFee(uint256)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setBiatecFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendOnlineKeyRegistration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawExcessAssets(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params?: AppClientCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BiatecConfigProviderComposer
  }
}
export type BiatecConfigProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint256,uint64,uint64)void ABI method.
   *
   * Setup the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(uint256,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'bootstrap(uint256,uint64,uint64)void'>]>

  /**
   * Calls the setAddressUdpater(address)void ABI method.
   *
   * Top secret account with which it is possible update contracts or identity provider
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressUdpater(args: MethodArgs<'setAddressUdpater(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setAddressUdpater(address)void'>]>

  /**
   * Calls the setPaused(uint64)void ABI method.
   *
   * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPaused(args: MethodArgs<'setPaused(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setPaused(uint64)void'>]>

  /**
   * Calls the setAddressGov(address)void ABI method.
   *
   * Execution address with which it is possible to opt in for governance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressGov(args: MethodArgs<'setAddressGov(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setAddressGov(address)void'>]>

  /**
   * Calls the setAddressExecutive(address)void ABI method.
   *
   * Execution address with which it is possible to change global biatec fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressExecutive(args: MethodArgs<'setAddressExecutive(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setAddressExecutive(address)void'>]>

  /**
   * Calls the setAddressExecutiveFee(address)void ABI method.
   *
   * Execution fee address is address which can take fees from pools.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressExecutiveFee(args: MethodArgs<'setAddressExecutiveFee(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setAddressExecutiveFee(address)void'>]>

  /**
   * Calls the setBiatecIdentity(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecIdentity(args: MethodArgs<'setBiatecIdentity(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setBiatecIdentity(uint64)void'>]>

  /**
   * Calls the setBiatecPool(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecPool(args: MethodArgs<'setBiatecPool(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setBiatecPool(uint64)void'>]>

  /**
   * Calls the setBiatecFee(uint256)void ABI method.
   *
   * Fees in 9 decimals. 1_000_000_000 = 100%Fees in 9 decimals. 10_000_000 = 1%Fees in 9 decimals. 100_000 = 0,01%Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecFee(args: MethodArgs<'setBiatecFee(uint256)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'setBiatecFee(uint256)void'>]>

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64)uint64 ABI method.
   *
   * If someone deposits excess assets to this smart contract biatec can use them.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64)uint64'>, params?: AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'withdrawExcessAssets(uint64,uint64)uint64'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication(byte[])void'>, params?: AppClientCallCoreParams & AppClientCompilationParams): BiatecConfigProviderComposer<[...TReturns, MethodReturn<'updateApplication(byte[])void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): BiatecConfigProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BiatecConfigProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BiatecConfigProviderComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<BiatecConfigProviderComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BiatecConfigProviderComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BiatecConfigProviderComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
