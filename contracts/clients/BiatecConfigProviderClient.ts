/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"BiatecConfigProvider","desc":"","methods":[{"name":"createApplication","desc":"Initial setup","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","desc":"addressUdpater from global biatec configuration is allowed to update application","args":[{"name":"newVersion","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"bootstrap","desc":"Setup the contract","args":[{"name":"biatecFee","type":"uint256","desc":"Biatec fees"},{"name":"appBiatecIdentityProvider","type":"uint64"},{"name":"appBiatecPoolProvider","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressUdpater","desc":"Top secret account with which it is possible update contracts or identity provider","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setPaused","desc":"Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.","args":[{"name":"a","type":"uint64","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressGov","desc":"Execution address with which it is possible to opt in for governance","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressExecutive","desc":"Execution address with which it is possible to change global biatec fees","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setAddressExecutiveFee","desc":"Execution fee address is address which can take fees from pools.","args":[{"name":"a","type":"address","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setBiatecIdentity","desc":"App identity setter","args":[{"name":"a","type":"uint64","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setBiatecPool","desc":"App identity setter","args":[{"name":"a","type":"uint64","desc":"Address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"setBiatecFee","desc":"Fees in 9 decimals. 1_000_000_000 = 100%\nFees in 9 decimals. 10_000_000 = 1%\nFees in 9 decimals. 100_000 = 0,01%\n\n\nFees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee","args":[{"name":"biatecFee","type":"uint256","desc":"Fee"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendOnlineKeyRegistration","desc":"addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"votePK","type":"byte[]"},{"name":"selectionPK","type":"byte[]"},{"name":"stateProofPK","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"},{"name":"fee","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawExcessAssets","desc":"If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"asset","type":"uint64","desc":"Asset to withdraw. If native token, then zero"},{"name":"amount","type":"uint64","desc":"Amount of the asset to be withdrawn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":6,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"addressUdpater":{"key":"dQ==","keyType":"AVMBytes","valueType":"address"},"addressGov":{"key":"Zw==","keyType":"AVMBytes","valueType":"address"},"addressExecutive":{"key":"ZQ==","keyType":"AVMBytes","valueType":"address"},"addressExecutiveFee":{"key":"ZWY=","keyType":"AVMBytes","valueType":"address"},"appBiatecIdentityProvider":{"key":"aQ==","keyType":"AVMBytes","valueType":"uint64"},"appBiatecPoolProvider":{"key":"cA==","keyType":"AVMBytes","valueType":"uint64"},"suspended":{"key":"cw==","keyType":"AVMBytes","valueType":"uint64"},"biatecFee":{"key":"Zg==","keyType":"AVMBytes","valueType":"uint256"},"version":{"key":"c2N2ZXI=","keyType":"AVMBytes","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[155],"errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","teal":25},{"pc":[209],"errorMessage":"Only addressUdpater setup in the config can update application","teal":102},{"pc":[235],"errorMessage":"argument 2 (biatecFee) for bootstrap must be a uint256","teal":139},{"pc":[249],"errorMessage":"Only updater can call bootstrap method","teal":161},{"pc":[258],"errorMessage":"Biatec cannot set fees higher then 50% of lp fees","teal":172},{"pc":[282],"errorMessage":"argument 0 (a) for setAddressUdpater must be a address","teal":203},{"pc":[296],"errorMessage":"Only updater can change updater address","teal":226},{"pc":[319],"errorMessage":"Only updater can pause and unpause the biatec services","teal":262},{"pc":[333],"errorMessage":"argument 0 (a) for setAddressGov must be a address","teal":281},{"pc":[347],"errorMessage":"Only updater can change gov address","teal":304},{"pc":[361],"errorMessage":"argument 0 (a) for setAddressExecutive must be a address","teal":323},{"pc":[375],"errorMessage":"Only updater can change addressExecutive","teal":346},{"pc":[388],"errorMessage":"argument 0 (a) for setAddressExecutiveFee must be a address","teal":365},{"pc":[402],"errorMessage":"Only addressExecutive can change fee executor address","teal":388},{"pc":[425],"errorMessage":"Only updater can change appIdentityProvider","teal":424},{"pc":[449],"errorMessage":"Only updater can change appPoolProvider","teal":460},{"pc":[463],"errorMessage":"argument 0 (biatecFee) for setBiatecFee must be a uint256","teal":479},{"pc":[477],"errorMessage":"Only executive address can change fees","teal":506},{"pc":[486],"errorMessage":"Biatec cannot set fees higher then 50% of lp fees","teal":517},{"pc":[540],"errorMessage":"Only fee executor setup in the config can take the collected fees","teal":577},{"pc":[606],"errorMessage":"Only fee executor setup in the config can take the collected fees","teal":672},{"pc":[683],"errorMessage":"this contract does not implement the given ABI method for create NoOp","teal":777},{"pc":[777],"errorMessage":"this contract does not implement the given ABI method for call NoOp","teal":795},{"pc":[791],"errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","teal":803}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiADASAAJgwBdQJlZgFlFkJJQVRFQy1DT05GSUctMDEtMDItMDEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuaygAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIFc2N2ZXIBZwFzAWYBaQFwMRgUgQYLMRkIjQwCEQAAAAAAAAJvAAACAwAAAAAAAAAAAAAAiAACIkOKAAAnBitnKjEAZycHMQBnKDEAZykxAGcnCCRniTYaAVcCAIgAAiJDigEAMQAoZBJEK7CL/7AnBitniTYaAxc2GgIXNhoBSRUjEkSIAAIiQ4oDADEAKGQSRIv/JwQnBaKmRCcJi/9nJwqL/mcnC4v9Z4k2GgFJFSMSRIgAAiJDigEAMQAoZBJEKIv/Z4k2GgEXiAACIkOKAQAxAChkEkQnCIv/Z4k2GgFJFSMSRIgAAiJDigEAMQAoZBJEJweL/2eJNhoBSRUjEkSIAAIiQ4oBADEAKGQSRCqL/2eJNhoBSRUjEkSIAAIiQ4oBADEAKmQSRCmL/2eJNhoBF4gAAiJDigEAMQAoZBJEJwqL/2eJNhoBF4gAAiJDigEAMQAoZBJEJwuL/2eJNhoBSRUjEkSIAAIiQ4oBADEAKmQSRIv/JwQnBaKmRCcJi/9niTYaBxc2GgYXNhoFFzYaBBc2GgNXAgA2GgJXAgA2GgFXAgCIAAIiQ4oHADEAKWQSRLGBArIQi/6yC4v9sj+L/LIMi/qyDov7sg2L/7IKi/myAbOJgAQVH3x1NhoCFzYaAReIAAUWULAiQ4oCATEAKWQSRIv+i/8xAIgAA4v+iYoDAIv+JBJBABOxIrIQi/+yB4v9sggksgGzQgAVsYEEshCL/7IUi/6yEYv9shIksgGziYAEuER7NjYaAI4B/fEAgARJXOftgAS/wghggAQM3BD8gARrlV9LgASLGHs9gARQ4H2IgAS6vh4RgATFi52kgATKNEo0gARK5unLgASHKDcwNhoAjgv90/4K/iX+Pf5Z/nT+j/6n/r/+5P83AIAEaTbGLzYaAI4B/acA","clear":"Cg=="}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the BiatecConfigProvider contract
 */
export type BiatecConfigProviderArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'updateApplication(byte[])void': {
      newVersion: Uint8Array
    }
    'bootstrap(uint256,uint64,uint64)void': {
      /**
       * Biatec fees
       */
      biatecFee: bigint | number
      appBiatecIdentityProvider: bigint | number
      appBiatecPoolProvider: bigint | number
    }
    'setAddressUdpater(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setPaused(uint64)void': {
      /**
       * Address
       */
      a: bigint | number
    }
    'setAddressGov(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setAddressExecutive(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setAddressExecutiveFee(address)void': {
      /**
       * Address
       */
      a: string
    }
    'setBiatecIdentity(uint64)void': {
      /**
       * Address
       */
      a: bigint | number
    }
    'setBiatecPool(uint64)void': {
      /**
       * Address
       */
      a: bigint | number
    }
    'setBiatecFee(uint256)void': {
      /**
       * Fee
       */
      biatecFee: bigint | number
    }
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': {
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
      fee: bigint | number
    }
    'withdrawExcessAssets(uint64,uint64)uint64': {
      /**
       * Asset to withdraw. If native token, then zero
       */
      asset: bigint | number
      /**
       * Amount of the asset to be withdrawn
       */
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'updateApplication(byte[])void': [newVersion: Uint8Array]
    'bootstrap(uint256,uint64,uint64)void': [biatecFee: bigint | number, appBiatecIdentityProvider: bigint | number, appBiatecPoolProvider: bigint | number]
    'setAddressUdpater(address)void': [a: string]
    'setPaused(uint64)void': [a: bigint | number]
    'setAddressGov(address)void': [a: string]
    'setAddressExecutive(address)void': [a: string]
    'setAddressExecutiveFee(address)void': [a: string]
    'setBiatecIdentity(uint64)void': [a: bigint | number]
    'setBiatecPool(uint64)void': [a: bigint | number]
    'setBiatecFee(uint256)void': [biatecFee: bigint | number]
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': [votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number, fee: bigint | number]
    'withdrawExcessAssets(uint64,uint64)uint64': [asset: bigint | number, amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BiatecConfigProviderReturns = {
  'createApplication()void': void
  'updateApplication(byte[])void': void
  'bootstrap(uint256,uint64,uint64)void': void
  'setAddressUdpater(address)void': void
  'setPaused(uint64)void': void
  'setAddressGov(address)void': void
  'setAddressExecutive(address)void': void
  'setAddressExecutiveFee(address)void': void
  'setBiatecIdentity(uint64)void': void
  'setBiatecPool(uint64)void': void
  'setBiatecFee(uint256)void': void
  'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': void
  'withdrawExcessAssets(uint64,uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the BiatecConfigProvider smart contract.
 */
export type BiatecConfigProviderTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BiatecConfigProviderArgs['obj']['createApplication()void']
      argsTuple: BiatecConfigProviderArgs['tuple']['createApplication()void']
      returns: BiatecConfigProviderReturns['createApplication()void']
    }>
    & Record<'updateApplication(byte[])void' | 'updateApplication', {
      argsObj: BiatecConfigProviderArgs['obj']['updateApplication(byte[])void']
      argsTuple: BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']
      returns: BiatecConfigProviderReturns['updateApplication(byte[])void']
    }>
    & Record<'bootstrap(uint256,uint64,uint64)void' | 'bootstrap', {
      argsObj: BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']
      returns: BiatecConfigProviderReturns['bootstrap(uint256,uint64,uint64)void']
    }>
    & Record<'setAddressUdpater(address)void' | 'setAddressUdpater', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']
      returns: BiatecConfigProviderReturns['setAddressUdpater(address)void']
    }>
    & Record<'setPaused(uint64)void' | 'setPaused', {
      argsObj: BiatecConfigProviderArgs['obj']['setPaused(uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']
      returns: BiatecConfigProviderReturns['setPaused(uint64)void']
    }>
    & Record<'setAddressGov(address)void' | 'setAddressGov', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressGov(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']
      returns: BiatecConfigProviderReturns['setAddressGov(address)void']
    }>
    & Record<'setAddressExecutive(address)void' | 'setAddressExecutive', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']
      returns: BiatecConfigProviderReturns['setAddressExecutive(address)void']
    }>
    & Record<'setAddressExecutiveFee(address)void' | 'setAddressExecutiveFee', {
      argsObj: BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']
      returns: BiatecConfigProviderReturns['setAddressExecutiveFee(address)void']
    }>
    & Record<'setBiatecIdentity(uint64)void' | 'setBiatecIdentity', {
      argsObj: BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']
      returns: BiatecConfigProviderReturns['setBiatecIdentity(uint64)void']
    }>
    & Record<'setBiatecPool(uint64)void' | 'setBiatecPool', {
      argsObj: BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']
      returns: BiatecConfigProviderReturns['setBiatecPool(uint64)void']
    }>
    & Record<'setBiatecFee(uint256)void' | 'setBiatecFee', {
      argsObj: BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']
      returns: BiatecConfigProviderReturns['setBiatecFee(uint256)void']
    }>
    & Record<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      argsTuple: BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      returns: BiatecConfigProviderReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
    }>
    & Record<'withdrawExcessAssets(uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64']
      argsTuple: BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']
      returns: BiatecConfigProviderReturns['withdrawExcessAssets(uint64,uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        addressUdpater: string
        addressGov: string
        addressExecutive: string
        addressExecutiveFee: string
        appBiatecIdentityProvider: bigint
        appBiatecPoolProvider: bigint
        suspended: bigint
        biatecFee: bigint
        version: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BiatecConfigProviderSignatures = keyof BiatecConfigProviderTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecConfigProviderNonVoidMethodSignatures = keyof BiatecConfigProviderTypes['methods'] extends infer T ? T extends keyof BiatecConfigProviderTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BiatecConfigProvider smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecConfigProviderSignatures> = BiatecConfigProviderTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecConfigProvider smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecConfigProviderSignatures> = BiatecConfigProviderTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecConfigProviderTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BiatecConfigProviderCreateCallParams =
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecConfigProviderUpdateCallParams =
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & {method: 'updateApplication'}>
  | Expand<CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & {method: 'updateApplication(byte[])void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecConfigProviderDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BiatecConfigProviderCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: BiatecConfigProviderUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecConfigProvider smart contract
 */
export abstract class BiatecConfigProviderParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecConfigProviderCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecConfigProviderParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BiatecConfigProvider smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecConfigProviderUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(byte[])void':
            return BiatecConfigProviderParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint256,uint64,uint64)void ABI method
   *
   * Setup the contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint256,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.biatecFee, params.args.appBiatecIdentityProvider, params.args.appBiatecPoolProvider],
    }
  }
  /**
   * Constructs a no op call for the setAddressUdpater(address)void ABI method
   *
   * Top secret account with which it is possible update contracts or identity provider
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressUdpater(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressUdpater(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setPaused(uint64)void ABI method
   *
   * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPaused(params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setPaused(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setAddressGov(address)void ABI method
   *
   * Execution address with which it is possible to opt in for governance
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressGov(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressGov(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setAddressExecutive(address)void ABI method
   *
   * Execution address with which it is possible to change global biatec fees
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressExecutive(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressExecutive(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setAddressExecutiveFee(address)void ABI method
   *
   * Execution fee address is address which can take fees from pools.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAddressExecutiveFee(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAddressExecutiveFee(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setBiatecIdentity(uint64)void ABI method
   *
   * App identity setter
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBiatecIdentity(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBiatecIdentity(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setBiatecPool(uint64)void ABI method
   *
   * App identity setter
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBiatecPool(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBiatecPool(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.a],
    }
  }
  /**
   * Constructs a no op call for the setBiatecFee(uint256)void ABI method
   *
  * Fees in 9 decimals. 1_000_000_000 = 100%
  Fees in 9 decimals. 10_000_000 = 1%
  Fees in 9 decimals. 100_000 = 0,01%
  
  
  Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setBiatecFee(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setBiatecFee(uint256)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.biatecFee],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecConfigProvider smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecConfigProviderFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BiatecConfigProviderFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecConfigProviderClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BiatecConfigProviderClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BiatecConfigProvider smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecConfigProviderDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BiatecConfigProviderParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BiatecConfigProviderCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? BiatecConfigProviderParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (BiatecConfigProviderUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BiatecConfigProviderClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecConfigProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BiatecConfigProviderParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(BiatecConfigProviderParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecConfigProvider smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BiatecConfigProviderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecConfigProvider smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BiatecConfigProviderArgs['obj']['createApplication()void'] | BiatecConfigProviderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BiatecConfigProviderParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BiatecConfigProviderReturns['createApplication()void']) }, appClient: new BiatecConfigProviderClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BiatecConfigProvider smart contract
 */
export class BiatecConfigProviderClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BiatecConfigProviderClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecConfigProvider app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BiatecConfigProviderClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecConfigProviderNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BiatecConfigProviderClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BiatecConfigProviderClient> {
    return new BiatecConfigProviderClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BiatecConfigProviderClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BiatecConfigProviderClient> {
    return new BiatecConfigProviderClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the `updateApplication(byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(BiatecConfigProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `bootstrap(uint256,uint64,uint64)void` ABI method.
     *
     * Setup the contract
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressUdpater(address)void` ABI method.
     *
     * Top secret account with which it is possible update contracts or identity provider
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressUdpater: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressUdpater(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setPaused(uint64)void` ABI method.
     *
     * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPaused: (params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setPaused(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressGov(address)void` ABI method.
     *
     * Execution address with which it is possible to opt in for governance
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressGov: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressGov(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to change global biatec fees
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressExecutive: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressExecutive(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutiveFee(address)void` ABI method.
     *
     * Execution fee address is address which can take fees from pools.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setAddressExecutiveFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setAddressExecutiveFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecIdentity(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBiatecIdentity: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setBiatecIdentity(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecPool(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBiatecPool: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setBiatecPool(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecFee(uint256)void` ABI method.
     *
    * Fees in 9 decimals. 1_000_000_000 = 100%
    Fees in 9 decimals. 10_000_000 = 1%
    Fees in 9 decimals. 100_000 = 0,01%
    
    
    Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setBiatecFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.setBiatecFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `withdrawExcessAssets(uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecConfigProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the `updateApplication(byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(BiatecConfigProviderParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `bootstrap(uint256,uint64,uint64)void` ABI method.
     *
     * Setup the contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressUdpater(address)void` ABI method.
     *
     * Top secret account with which it is possible update contracts or identity provider
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressUdpater: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressUdpater(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setPaused(uint64)void` ABI method.
     *
     * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPaused: (params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setPaused(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressGov(address)void` ABI method.
     *
     * Execution address with which it is possible to opt in for governance
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressGov: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressGov(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to change global biatec fees
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressExecutive: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressExecutive(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutiveFee(address)void` ABI method.
     *
     * Execution fee address is address which can take fees from pools.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setAddressExecutiveFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setAddressExecutiveFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecIdentity(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBiatecIdentity: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setBiatecIdentity(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecPool(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBiatecPool: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setBiatecPool(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecFee(uint256)void` ABI method.
     *
    * Fees in 9 decimals. 1_000_000_000 = 100%
    Fees in 9 decimals. 10_000_000 = 1%
    Fees in 9 decimals. 100_000 = 0,01%
    
    
    Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setBiatecFee: (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.setBiatecFee(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `withdrawExcessAssets(uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecConfigProviderParamsFactory.withdrawExcessAssets(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecConfigProvider smart contract using the `updateApplication(byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(BiatecConfigProviderParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['updateApplication(byte[])void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `bootstrap(uint256,uint64,uint64)void` ABI method.
     *
     * Setup the contract
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['bootstrap(uint256,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressUdpater(address)void` ABI method.
     *
     * Top secret account with which it is possible update contracts or identity provider
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressUdpater: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressUdpater(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressUdpater(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setPaused(uint64)void` ABI method.
     *
     * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPaused: async (params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setPaused(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setPaused(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressGov(address)void` ABI method.
     *
     * Execution address with which it is possible to opt in for governance
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressGov: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressGov(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressGov(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutive(address)void` ABI method.
     *
     * Execution address with which it is possible to change global biatec fees
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressExecutive: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressExecutive(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressExecutive(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setAddressExecutiveFee(address)void` ABI method.
     *
     * Execution fee address is address which can take fees from pools.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setAddressExecutiveFee: async (params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setAddressExecutiveFee(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setAddressExecutiveFee(address)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecIdentity(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBiatecIdentity: async (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setBiatecIdentity(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setBiatecIdentity(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecPool(uint64)void` ABI method.
     *
     * App identity setter
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBiatecPool: async (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setBiatecPool(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setBiatecPool(uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `setBiatecFee(uint256)void` ABI method.
     *
    * Fees in 9 decimals. 1_000_000_000 = 100%
    Fees in 9 decimals. 10_000_000 = 1%
    Fees in 9 decimals. 100_000 = 0,01%
    
    
    Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setBiatecFee: async (params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.setBiatecFee(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['setBiatecFee(uint256)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecConfigProvider smart contract using the `withdrawExcessAssets(uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to this smart contract biatec can use them.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecConfigProviderParamsFactory.withdrawExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecConfigProviderReturns['withdrawExcessAssets(uint64,uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecConfigProviderClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BiatecConfigProvider app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecConfigProvider app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          addressUdpater: result.addressUdpater,
          addressGov: result.addressGov,
          addressExecutive: result.addressExecutive,
          addressExecutiveFee: result.addressExecutiveFee,
          appBiatecIdentityProvider: result.appBiatecIdentityProvider,
          appBiatecPoolProvider: result.appBiatecPoolProvider,
          suspended: result.suspended,
          biatecFee: result.biatecFee,
          version: new BinaryStateValue(result.version),
        }
      },
      /**
       * Get the current value of the addressUdpater key in global state
       */
      addressUdpater: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressUdpater")) as string | undefined },
      /**
       * Get the current value of the addressGov key in global state
       */
      addressGov: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressGov")) as string | undefined },
      /**
       * Get the current value of the addressExecutive key in global state
       */
      addressExecutive: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressExecutive")) as string | undefined },
      /**
       * Get the current value of the addressExecutiveFee key in global state
       */
      addressExecutiveFee: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("addressExecutiveFee")) as string | undefined },
      /**
       * Get the current value of the appBiatecIdentityProvider key in global state
       */
      appBiatecIdentityProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecIdentityProvider")) as bigint | undefined },
      /**
       * Get the current value of the appBiatecPoolProvider key in global state
       */
      appBiatecPoolProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecPoolProvider")) as bigint | undefined },
      /**
       * Get the current value of the suspended key in global state
       */
      suspended: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("suspended")) as bigint | undefined },
      /**
       * Get the current value of the biatecFee key in global state
       */
      biatecFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("biatecFee")) as bigint | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): BiatecConfigProviderComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint256,uint64,uint64)void method call against the BiatecConfigProvider contract
       */
      bootstrap(params: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressUdpater(address)void method call against the BiatecConfigProvider contract
       */
      setAddressUdpater(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressUdpater(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setPaused(uint64)void method call against the BiatecConfigProvider contract
       */
      setPaused(params: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPaused(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressGov(address)void method call against the BiatecConfigProvider contract
       */
      setAddressGov(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressGov(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressExecutive(address)void method call against the BiatecConfigProvider contract
       */
      setAddressExecutive(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressExecutive(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAddressExecutiveFee(address)void method call against the BiatecConfigProvider contract
       */
      setAddressExecutiveFee(params: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setAddressExecutiveFee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBiatecIdentity(uint64)void method call against the BiatecConfigProvider contract
       */
      setBiatecIdentity(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBiatecIdentity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBiatecPool(uint64)void method call against the BiatecConfigProvider contract
       */
      setBiatecPool(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBiatecPool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setBiatecFee(uint256)void method call against the BiatecConfigProvider contract
       */
      setBiatecFee(params: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setBiatecFee(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void method call against the BiatecConfigProvider contract
       */
      sendOnlineKeyRegistration(params: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64)uint64 method call against the BiatecConfigProvider contract
       */
      withdrawExcessAssets(params: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawExcessAssets(uint64,uint64)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the BiatecConfigProvider contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BiatecConfigProviderComposer
  }
}
export type BiatecConfigProviderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint256,uint64,uint64)void ABI method.
   *
   * Setup the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BiatecConfigProviderArgs['obj']['bootstrap(uint256,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['bootstrap(uint256,uint64,uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['bootstrap(uint256,uint64,uint64)void'] | undefined]>

  /**
   * Calls the setAddressUdpater(address)void ABI method.
   *
   * Top secret account with which it is possible update contracts or identity provider
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressUdpater(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressUdpater(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressUdpater(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressUdpater(address)void'] | undefined]>

  /**
   * Calls the setPaused(uint64)void ABI method.
   *
   * Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPaused(params?: CallParams<BiatecConfigProviderArgs['obj']['setPaused(uint64)void'] | BiatecConfigProviderArgs['tuple']['setPaused(uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setPaused(uint64)void'] | undefined]>

  /**
   * Calls the setAddressGov(address)void ABI method.
   *
   * Execution address with which it is possible to opt in for governance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressGov(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressGov(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressGov(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressGov(address)void'] | undefined]>

  /**
   * Calls the setAddressExecutive(address)void ABI method.
   *
   * Execution address with which it is possible to change global biatec fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressExecutive(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutive(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutive(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressExecutive(address)void'] | undefined]>

  /**
   * Calls the setAddressExecutiveFee(address)void ABI method.
   *
   * Execution fee address is address which can take fees from pools.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddressExecutiveFee(params?: CallParams<BiatecConfigProviderArgs['obj']['setAddressExecutiveFee(address)void'] | BiatecConfigProviderArgs['tuple']['setAddressExecutiveFee(address)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setAddressExecutiveFee(address)void'] | undefined]>

  /**
   * Calls the setBiatecIdentity(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecIdentity(params?: CallParams<BiatecConfigProviderArgs['obj']['setBiatecIdentity(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecIdentity(uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setBiatecIdentity(uint64)void'] | undefined]>

  /**
   * Calls the setBiatecPool(uint64)void ABI method.
   *
   * App identity setter
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecPool(params?: CallParams<BiatecConfigProviderArgs['obj']['setBiatecPool(uint64)void'] | BiatecConfigProviderArgs['tuple']['setBiatecPool(uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setBiatecPool(uint64)void'] | undefined]>

  /**
   * Calls the setBiatecFee(uint256)void ABI method.
   *
  * Fees in 9 decimals. 1_000_000_000 = 100%
  Fees in 9 decimals. 10_000_000 = 1%
  Fees in 9 decimals. 100_000 = 0,01%
  
  
  Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBiatecFee(params?: CallParams<BiatecConfigProviderArgs['obj']['setBiatecFee(uint256)void'] | BiatecConfigProviderArgs['tuple']['setBiatecFee(uint256)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['setBiatecFee(uint256)void'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<BiatecConfigProviderArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecConfigProviderArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to this smart contract biatec can use them.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(params?: CallParams<BiatecConfigProviderArgs['obj']['withdrawExcessAssets(uint64,uint64)uint64'] | BiatecConfigProviderArgs['tuple']['withdrawExcessAssets(uint64,uint64)uint64']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['withdrawExcessAssets(uint64,uint64)uint64'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecConfigProvider smart contract using the updateApplication(byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<BiatecConfigProviderArgs['obj']['updateApplication(byte[])void'] | BiatecConfigProviderArgs['tuple']['updateApplication(byte[])void']>): BiatecConfigProviderComposer<[...TReturns, BiatecConfigProviderReturns['updateApplication(byte[])void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecConfigProvider smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecConfigProviderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecConfigProviderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecConfigProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BiatecConfigProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BiatecConfigProviderComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecConfigProviderComposerResults<TReturns>>
}
export type BiatecConfigProviderComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

