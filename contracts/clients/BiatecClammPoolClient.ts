/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(uint64,byte[])void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "getCurrentPrice()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPriceDivider()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLPTokenId()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOfflineKeyRegistration(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateDistributedLiquidity(uint64,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetA": {
          "type": "uint64",
          "key": "a"
        },
        "assetB": {
          "type": "uint64",
          "key": "b"
        },
        "assetLp": {
          "type": "uint64",
          "key": "lp"
        },
        "assetABalance": {
          "type": "bytes",
          "key": "ab"
        },
        "assetBBalance": {
          "type": "bytes",
          "key": "bb"
        },
        "priceMin": {
          "type": "uint64",
          "key": "pMin"
        },
        "priceMax": {
          "type": "uint64",
          "key": "pMax"
        },
        "priceMinSqrt": {
          "type": "bytes",
          "key": "pMinS"
        },
        "priceMaxSqrt": {
          "type": "bytes",
          "key": "pMaxS"
        },
        "Liqudity": {
          "type": "bytes",
          "key": "L"
        },
        "LiqudityUsersFromFees": {
          "type": "bytes",
          "key": "Lu"
        },
        "LiqudityBiatecFromFees": {
          "type": "bytes",
          "key": "Lb"
        },
        "fee": {
          "type": "uint64",
          "key": "f"
        },
        "currentPrice": {
          "type": "uint64",
          "key": "price"
        },
        "scale": {
          "type": "uint64",
          "key": "scale"
        },
        "appBiatecConfigProvider": {
          "type": "uint64",
          "key": "bc"
        },
        "verificationClass": {
          "type": "uint64",
          "key": "c"
        },
        "version": {
          "type": "bytes",
          "key": "scver"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 8,
      "num_uints": 10
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecClammPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "addressUdpater from global biatec configuration is allowed to update application",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "newVersion",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getCurrentPrice",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getPriceDivider",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getLPTokenId",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Anybody can deploy the clamm smart contract",
        "args": [
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A ID must be lower then Asset B ID"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec amm provider"
          },
          {
            "name": "appBiatecPoolProvider",
            "type": "uint64",
            "desc": "Pool provider"
          },
          {
            "name": "txSeed",
            "type": "pay",
            "desc": "Seed transaction so that smart contract can opt in to the assets"
          },
          {
            "name": "fee",
            "type": "uint64",
            "desc": "Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%"
          },
          {
            "name": "priceMin",
            "type": "uint64",
            "desc": "Min price range. At this point all assets are in asset A."
          },
          {
            "name": "priceMax",
            "type": "uint64",
            "desc": "Max price range. At this point all assets are in asset B."
          },
          {
            "name": "currentPrice",
            "type": "uint64",
            "desc": "Deployer can specify the current price for easier deployemnt."
          },
          {
            "name": "verificationClass",
            "type": "uint8",
            "desc": "Minimum verification level from the biatec identity. Level 0 means no kyc."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "LP token ID"
        }
      },
      {
        "name": "addLiquidity",
        "desc": "This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Configuration reference"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64",
            "desc": "Identity service reference"
          },
          {
            "name": "txAssetADeposit",
            "type": "txn",
            "desc": "Transfer of asset A to the LP pool"
          },
          {
            "name": "txAssetBDeposit",
            "type": "txn",
            "desc": "Transfer of asset B to the LP pool"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "assetLp",
            "type": "uint64",
            "desc": "Liquidity pool asset"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "LP Token quantity distributed"
        }
      },
      {
        "name": "removeLiquidity",
        "desc": "This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Configuration reference"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64",
            "desc": "Identity service reference"
          },
          {
            "name": "txLpXfer",
            "type": "axfer",
            "desc": "Transfer of the LP token"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "assetLp",
            "type": "uint64",
            "desc": "LP pool asset"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "LP position reduced"
        }
      },
      {
        "name": "removeLiquidityAdmin",
        "desc": "This method allows biatec admin to reduce the lp position created by lp fees allocation.Only addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "assetLp",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint256",
            "desc": "Amount to withdraw. If zero, removes all available lps from fees."
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "LP position reduced"
        }
      },
      {
        "name": "swap",
        "desc": "Swap Asset A to Asset B or Asset B to Asst A",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64"
          },
          {
            "name": "appBiatecPoolProvider",
            "type": "uint64"
          },
          {
            "name": "txSwap",
            "type": "txn",
            "desc": "Transfer of the token to be deposited to the pool. To the owner the other asset will be sent."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "minimumToReceive",
            "type": "uint64",
            "desc": "If number greater then zero, the check is performed for the output of the other asset"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "distributeExcessAssets",
        "desc": "If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.Only addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "amountA",
            "type": "uint256",
            "desc": "Amount of asset A to be deposited to the liquidity. In base decimals (9)"
          },
          {
            "name": "amountB",
            "type": "uint256",
            "desc": "Amount of asset B to be deposited to the liquidity. In base decimals (9)"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "withdrawExcessAssets",
        "desc": "If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.Only addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "amountA",
            "type": "uint64",
            "desc": "Amount of asset A to be deposited to the liquidity. In asset a decimals"
          },
          {
            "name": "amountB",
            "type": "uint64",
            "desc": "Amount of asset B to be deposited to the liquidity. In asset b decimals"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "sendOnlineKeyRegistration",
        "desc": "addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "votePk",
            "type": "byte[]"
          },
          {
            "name": "selectionPk",
            "type": "byte[]"
          },
          {
            "name": "stateProofPk",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendOfflineKeyRegistration",
        "desc": "addressExecutiveFee can perfom key unregistration for this LP poolOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "calculateDistributedLiquidity",
        "desc": "Calculates the number of LP tokens issued to users",
        "readonly": true,
        "args": [
          {
            "name": "assetLp",
            "type": "uint64"
          },
          {
            "name": "currentDeposit",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "calculateLiquidityFlatPrice",
        "readonly": true,
        "args": [
          {
            "name": "x",
            "type": "uint256"
          },
          {
            "name": "y",
            "type": "uint256"
          },
          {
            "name": "price",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "calculateLiquidityD",
        "desc": "Calculates the liquidity  from the x - Asset A position and y - Asset B positionThis method calculates discriminant - first part of the calculation.It is divided so that the readonly method does not need to charge fees",
        "readonly": true,
        "args": [
          {
            "name": "x",
            "type": "uint256",
            "desc": "Asset A position balanced on the curve"
          },
          {
            "name": "y",
            "type": "uint256",
            "desc": "Asset B position balanced on the curve"
          },
          {
            "name": "priceMin",
            "type": "uint256",
            "desc": "Minimum price variable in base scale decimals (pa)"
          },
          {
            "name": "priceMax",
            "type": "uint256",
            "desc": "Maximum price variable in base scale decimals (pb)"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMin) in base scale decimals Variable pas"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMax) in base scale decimals Variable pbs"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user."
        }
      },
      {
        "name": "calculateLiquidityWithD",
        "desc": "Calculates the liquidity  from the x - Asset A position and y - Asset B position",
        "readonly": true,
        "args": [
          {
            "name": "x",
            "type": "uint256",
            "desc": "Asset A position balanced on the curve"
          },
          {
            "name": "y",
            "type": "uint256",
            "desc": "Asset B position balanced on the curve"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMin) in base scale decimals Variable pas"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMax) in base scale decimals Variable pbs"
          },
          {
            "name": "dSqrt",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user."
        }
      },
      {
        "name": "calculatePrice",
        "desc": "Get the current price when asset a has x",
        "readonly": true,
        "args": [
          {
            "name": "assetAQuantity",
            "type": "uint256",
            "desc": "x"
          },
          {
            "name": "assetBQuantity",
            "type": "uint256",
            "desc": "y"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMin)"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMax)"
          },
          {
            "name": "liquidity",
            "type": "uint256",
            "desc": "Current pool liquidity - L variable"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "the price with specified quantity with the price range set in the contract"
        }
      },
      {
        "name": "calculateAssetBWithdrawOnAssetADeposit",
        "desc": "Calculates how much asset B will be taken from the smart contract on asset A deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(Min price). Variable pMinS, in base scale"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable pMaxS, in base scale"
          },
          {
            "name": "liqudity",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetAWithdrawOnAssetBDeposit",
        "desc": "Calculates how much asset A will be taken from the smart contract on asset B deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(Min price). Variable pMinS, in base scale"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable pMaxS, in base scale"
          },
          {
            "name": "liqudity",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetAWithdrawOnLpDeposit",
        "desc": "Calculates how much asset A will be taken from the smart contract on LP asset deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "LP Asset amount in Base decimal representation.."
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "liqudity",
            "type": "uint256",
            "desc": "Current liqudity. Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetBWithdrawOnLpDeposit",
        "desc": "Calculates how much asset B will be taken from the smart contract on LP asset deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "LP Asset amount in Base decimal representation.."
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable ab, in base scale"
          },
          {
            "name": "liqudity",
            "type": "uint256",
            "desc": "Current liqudity. Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetBDepositOnAssetADeposit",
        "desc": "Calculates how much asset B should be deposited when user deposit asset a and b.On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user",
        "readonly": true,
        "args": [
          {
            "name": "inAmountA",
            "type": "uint256",
            "desc": "Asset A amount in Base decimal representation"
          },
          {
            "name": "inAmountB",
            "type": "uint256",
            "desc": "Asset B amount in Base decimal representation"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetADepositOnAssetBDeposit",
        "desc": "Calculates how much asset A should be deposited when user deposit asset a and bOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user",
        "readonly": true,
        "args": [
          {
            "name": "inAmountA",
            "type": "uint256",
            "desc": "Asset A amount in Base decimal representation"
          },
          {
            "name": "inAmountB",
            "type": "uint256",
            "desc": "Asset B amount in Base decimal representation"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset A to be deposited. The result is in Base decimals (9)"
        }
      },
      {
        "name": "status",
        "readonly": true,
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "assetA",
            "type": "uint64"
          },
          {
            "name": "assetB",
            "type": "uint64"
          },
          {
            "name": "assetLp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the BiatecClammPool smart contract.
 */
export type BiatecClammPool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateApplication(uint64,byte[])void' | 'updateApplication', {
      argsObj: {
        appBiatecConfigProvider: bigint | number
        newVersion: Uint8Array
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, newVersion: Uint8Array]
      returns: void
    }>
    & Record<'getCurrentPrice()uint64' | 'getCurrentPrice', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getPriceDivider()uint64' | 'getPriceDivider', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getLPTokenId()uint64' | 'getLPTokenId', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64' | 'bootstrap', {
      argsObj: {
        /**
         * Asset A ID must be lower then Asset B ID
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * Biatec amm provider
         */
        appBiatecConfigProvider: bigint | number
        /**
         * Pool provider
         */
        appBiatecPoolProvider: bigint | number
        /**
         * Seed transaction so that smart contract can opt in to the assets
         */
        txSeed: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%
         */
        fee: bigint | number
        /**
         * Min price range. At this point all assets are in asset A.
         */
        priceMin: bigint | number
        /**
         * Max price range. At this point all assets are in asset B.
         */
        priceMax: bigint | number
        /**
         * Deployer can specify the current price for easier deployemnt.
         */
        currentPrice: bigint | number
        /**
         * Minimum verification level from the biatec identity. Level 0 means no kyc.
         */
        verificationClass: number
      }
      argsTuple: [assetA: bigint | number, assetB: bigint | number, appBiatecConfigProvider: bigint | number, appBiatecPoolProvider: bigint | number, txSeed: TransactionToSign | Transaction | Promise<SendTransactionResult>, fee: bigint | number, priceMin: bigint | number, priceMax: bigint | number, currentPrice: bigint | number, verificationClass: number]
      /**
       * LP token ID
       */
      returns: bigint
    }>
    & Record<'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64' | 'addLiquidity', {
      argsObj: {
        /**
         * Configuration reference
         */
        appBiatecConfigProvider: bigint | number
        /**
         * Identity service reference
         */
        appBiatecIdentityProvider: bigint | number
        /**
         * Transfer of asset A to the LP pool
         */
        txAssetADeposit: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Transfer of asset B to the LP pool
         */
        txAssetBDeposit: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * Liquidity pool asset
         */
        assetLp: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, appBiatecIdentityProvider: bigint | number, txAssetADeposit: TransactionToSign | Transaction | Promise<SendTransactionResult>, txAssetBDeposit: TransactionToSign | Transaction | Promise<SendTransactionResult>, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number]
      /**
       * LP Token quantity distributed
       */
      returns: bigint
    }>
    & Record<'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256' | 'removeLiquidity', {
      argsObj: {
        /**
         * Configuration reference
         */
        appBiatecConfigProvider: bigint | number
        /**
         * Identity service reference
         */
        appBiatecIdentityProvider: bigint | number
        /**
         * Transfer of the LP token
         */
        txLpXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * LP pool asset
         */
        assetLp: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, appBiatecIdentityProvider: bigint | number, txLpXfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number]
      /**
       * LP position reduced
       */
      returns: bigint
    }>
    & Record<'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256' | 'removeLiquidityAdmin', {
      argsObj: {
        /**
         * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
         */
        appBiatecConfigProvider: bigint | number
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        assetLp: bigint | number
        /**
         * Amount to withdraw. If zero, removes all available lps from fees.
         */
        amount: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number, amount: bigint | number]
      /**
       * LP position reduced
       */
      returns: bigint
    }>
    & Record<'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256' | 'swap', {
      argsObj: {
        appBiatecConfigProvider: bigint | number
        appBiatecIdentityProvider: bigint | number
        appBiatecPoolProvider: bigint | number
        /**
         * Transfer of the token to be deposited to the pool. To the owner the other asset will be sent.
         */
        txSwap: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * If number greater then zero, the check is performed for the output of the other asset
         */
        minimumToReceive: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, appBiatecIdentityProvider: bigint | number, appBiatecPoolProvider: bigint | number, txSwap: TransactionToSign | Transaction | Promise<SendTransactionResult>, assetA: bigint | number, assetB: bigint | number, minimumToReceive: bigint | number]
      returns: bigint
    }>
    & Record<'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256' | 'distributeExcessAssets', {
      argsObj: {
        /**
         * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
         */
        appBiatecConfigProvider: bigint | number
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * Amount of asset A to be deposited to the liquidity. In base decimals (9)
         */
        amountA: bigint | number
        /**
         * Amount of asset B to be deposited to the liquidity. In base decimals (9)
         */
        amountB: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, amountA: bigint | number, amountB: bigint | number]
      returns: bigint
    }>
    & Record<'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: {
        /**
         * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
         */
        appBiatecConfigProvider: bigint | number
        /**
         * Asset A
         */
        assetA: bigint | number
        /**
         * Asset B
         */
        assetB: bigint | number
        /**
         * Amount of asset A to be deposited to the liquidity. In asset a decimals
         */
        amountA: bigint | number
        /**
         * Amount of asset B to be deposited to the liquidity. In asset b decimals
         */
        amountB: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, amountA: bigint | number, amountB: bigint | number]
      returns: bigint
    }>
    & Record<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: {
        appBiatecConfigProvider: bigint | number
        votePk: Uint8Array
        selectionPk: Uint8Array
        stateProofPk: Uint8Array
        voteFirst: bigint | number
        voteLast: bigint | number
        voteKeyDilution: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'sendOfflineKeyRegistration(uint64)void' | 'sendOfflineKeyRegistration', {
      argsObj: {
        appBiatecConfigProvider: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number]
      returns: void
    }>
    & Record<'calculateDistributedLiquidity(uint64,uint256)uint256' | 'calculateDistributedLiquidity', {
      argsObj: {
        assetLp: bigint | number
        currentDeposit: bigint | number
      }
      argsTuple: [assetLp: bigint | number, currentDeposit: bigint | number]
      returns: bigint
    }>
    & Record<'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256' | 'calculateLiquidityFlatPrice', {
      argsObj: {
        x: bigint | number
        y: bigint | number
        price: bigint | number
      }
      argsTuple: [x: bigint | number, y: bigint | number, price: bigint | number]
      returns: bigint
    }>
    & Record<'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateLiquidityD', {
      argsObj: {
        /**
         * Asset A position balanced on the curve
         */
        x: bigint | number
        /**
         * Asset B position balanced on the curve
         */
        y: bigint | number
        /**
         * Minimum price variable in base scale decimals (pa)
         */
        priceMin: bigint | number
        /**
         * Maximum price variable in base scale decimals (pb)
         */
        priceMax: bigint | number
        /**
         * sqrt(priceMin) in base scale decimals Variable pas
         */
        priceMinSqrt: bigint | number
        /**
         * sqrt(priceMax) in base scale decimals Variable pbs
         */
        priceMaxSqrt: bigint | number
      }
      argsTuple: [x: bigint | number, y: bigint | number, priceMin: bigint | number, priceMax: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number]
      /**
       * Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
       */
      returns: bigint
    }>
    & Record<'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateLiquidityWithD', {
      argsObj: {
        /**
         * Asset A position balanced on the curve
         */
        x: bigint | number
        /**
         * Asset B position balanced on the curve
         */
        y: bigint | number
        /**
         * sqrt(priceMin) in base scale decimals Variable pas
         */
        priceMinSqrt: bigint | number
        /**
         * sqrt(priceMax) in base scale decimals Variable pbs
         */
        priceMaxSqrt: bigint | number
        dSqrt: bigint | number
      }
      argsTuple: [x: bigint | number, y: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, dSqrt: bigint | number]
      /**
       * Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
       */
      returns: bigint
    }>
    & Record<'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256' | 'calculatePrice', {
      argsObj: {
        /**
         * x
         */
        assetAQuantity: bigint | number
        /**
         * y
         */
        assetBQuantity: bigint | number
        /**
         * sqrt(priceMin)
         */
        priceMinSqrt: bigint | number
        /**
         * sqrt(priceMax)
         */
        priceMaxSqrt: bigint | number
        /**
         * Current pool liquidity - L variable
         */
        liquidity: bigint | number
      }
      argsTuple: [assetAQuantity: bigint | number, assetBQuantity: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, liquidity: bigint | number]
      /**
       * the price with specified quantity with the price range set in the contract
       */
      returns: bigint
    }>
    & Record<'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateAssetBWithdrawOnAssetADeposit', {
      argsObj: {
        /**
         * Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
         */
        inAmount: bigint | number
        /**
         * Asset A balance. Variable ab, in base scale
         */
        assetABalance: bigint | number
        /**
         * Asset B balance. Variable bb, in base scale
         */
        assetBBalance: bigint | number
        /**
         * sqrt(Min price). Variable pMinS, in base scale
         */
        priceMinSqrt: bigint | number
        /**
         * sqrt(Max price). Variable pMaxS, in base scale
         */
        priceMaxSqrt: bigint | number
        /**
         * sqrt(Max price). Variable L, in base scale
         */
        liqudity: bigint | number
      }
      argsTuple: [inAmount: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, liqudity: bigint | number]
      /**
       * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: bigint
    }>
    & Record<'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateAssetAWithdrawOnAssetBDeposit', {
      argsObj: {
        /**
         * Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
         */
        inAmount: bigint | number
        /**
         * Asset A balance. Variable ab, in base scale
         */
        assetABalance: bigint | number
        /**
         * Asset B balance. Variable bb, in base scale
         */
        assetBBalance: bigint | number
        /**
         * sqrt(Min price). Variable pMinS, in base scale
         */
        priceMinSqrt: bigint | number
        /**
         * sqrt(Max price). Variable pMaxS, in base scale
         */
        priceMaxSqrt: bigint | number
        /**
         * sqrt(Max price). Variable L, in base scale
         */
        liqudity: bigint | number
      }
      argsTuple: [inAmount: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, liqudity: bigint | number]
      /**
       * Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: bigint
    }>
    & Record<'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' | 'calculateAssetAWithdrawOnLpDeposit', {
      argsObj: {
        /**
         * LP Asset amount in Base decimal representation..
         */
        inAmount: bigint | number
        /**
         * Asset A balance. Variable ab, in base scale
         */
        assetABalance: bigint | number
        /**
         * Current liqudity. Variable L, in base scale
         */
        liqudity: bigint | number
      }
      argsTuple: [inAmount: bigint | number, assetABalance: bigint | number, liqudity: bigint | number]
      /**
       * Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: bigint
    }>
    & Record<'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' | 'calculateAssetBWithdrawOnLpDeposit', {
      argsObj: {
        /**
         * LP Asset amount in Base decimal representation..
         */
        inAmount: bigint | number
        /**
         * Asset B balance. Variable ab, in base scale
         */
        assetBBalance: bigint | number
        /**
         * Current liqudity. Variable L, in base scale
         */
        liqudity: bigint | number
      }
      argsTuple: [inAmount: bigint | number, assetBBalance: bigint | number, liqudity: bigint | number]
      /**
       * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: bigint
    }>
    & Record<'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256' | 'calculateAssetBDepositOnAssetADeposit', {
      argsObj: {
        /**
         * Asset A amount in Base decimal representation
         */
        inAmountA: bigint | number
        /**
         * Asset B amount in Base decimal representation
         */
        inAmountB: bigint | number
        /**
         * Asset A balance. Variable ab, in base scale
         */
        assetABalance: bigint | number
        /**
         * Asset B balance. Variable bb, in base scale
         */
        assetBBalance: bigint | number
      }
      argsTuple: [inAmountA: bigint | number, inAmountB: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number]
      /**
       * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: bigint
    }>
    & Record<'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256' | 'calculateAssetADepositOnAssetBDeposit', {
      argsObj: {
        /**
         * Asset A amount in Base decimal representation
         */
        inAmountA: bigint | number
        /**
         * Asset B amount in Base decimal representation
         */
        inAmountB: bigint | number
        /**
         * Asset A balance. Variable ab, in base scale
         */
        assetABalance: bigint | number
        /**
         * Asset B balance. Variable bb, in base scale
         */
        assetBBalance: bigint | number
      }
      argsTuple: [inAmountA: bigint | number, inAmountB: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number]
      /**
       * Amount of asset A to be deposited. The result is in Base decimals (9)
       */
      returns: bigint
    }>
    & Record<'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'status', {
      argsObj: {
        appBiatecConfigProvider: bigint | number
        assetA: bigint | number
        assetB: bigint | number
        assetLp: bigint | number
      }
      argsTuple: [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number]
      returns: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      a?: IntegerState
      b?: IntegerState
      lp?: IntegerState
      ab?: BinaryState
      bb?: BinaryState
      pMin?: IntegerState
      pMax?: IntegerState
      pMinS?: BinaryState
      pMaxS?: BinaryState
      l?: BinaryState
      lu?: BinaryState
      lb?: BinaryState
      f?: IntegerState
      price?: IntegerState
      scale?: IntegerState
      bc?: IntegerState
      c?: IntegerState
      scver?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BiatecClammPoolSig = keyof BiatecClammPool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BiatecClammPoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BiatecClammPool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BiatecClammPoolSig> = BiatecClammPool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecClammPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecClammPoolSig> = BiatecClammPool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BiatecClammPoolCreateCalls = (typeof BiatecClammPoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BiatecClammPoolCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type BiatecClammPoolUpdateCalls = (typeof BiatecClammPoolCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type BiatecClammPoolUpdateCallParams =
  | TypedCallParams<'updateApplication(uint64,byte[])void'>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecClammPoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BiatecClammPoolCreateCalls) => BiatecClammPoolCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: BiatecClammPoolUpdateCalls) => BiatecClammPoolUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BiatecClammPoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BiatecClammPool smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication(uint64,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication(uint64,byte[])void' as const,
          methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.newVersion],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getCurrentPrice()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCurrentPrice(args: MethodArgs<'getCurrentPrice()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getCurrentPrice()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPriceDivider()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPriceDivider(args: MethodArgs<'getPriceDivider()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPriceDivider()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getLPTokenId()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLpTokenId(args: MethodArgs<'getLPTokenId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getLPTokenId()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64 ABI method
   *
   * Anybody can deploy the clamm smart contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetA, args.assetB, args.appBiatecConfigProvider, args.appBiatecPoolProvider, args.txSeed, args.fee, args.priceMin, args.priceMax, args.currentPrice, args.verificationClass],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 ABI method
   *
   * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addLiquidity(args: MethodArgs<'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.appBiatecIdentityProvider, args.txAssetADeposit, args.txAssetBDeposit, args.assetA, args.assetB, args.assetLp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 ABI method
   *
   * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeLiquidity(args: MethodArgs<'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.appBiatecIdentityProvider, args.txLpXfer, args.assetA, args.assetB, args.assetLp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 ABI method
   *
   * This method allows biatec admin to reduce the lp position created by lp fees allocation.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeLiquidityAdmin(args: MethodArgs<'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.assetA, args.assetB, args.assetLp, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 ABI method
   *
   * Swap Asset A to Asset B or Asset B to Asst A
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static swap(args: MethodArgs<'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.appBiatecIdentityProvider, args.appBiatecPoolProvider, args.txSwap, args.assetA, args.assetB, args.minimumToReceive],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 ABI method
   *
   * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static distributeExcessAssets(args: MethodArgs<'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.assetA, args.assetB, args.amountA, args.amountB],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.assetA, args.assetB, args.amountA, args.amountB],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.votePk, args.selectionPk, args.stateProofPk, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendOfflineKeyRegistration(uint64)void ABI method
   *
   * addressExecutiveFee can perfom key unregistration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendOfflineKeyRegistration(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateDistributedLiquidity(uint64,uint256)uint256 ABI method
   *
   * Calculates the number of LP tokens issued to users
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateDistributedLiquidity(args: MethodArgs<'calculateDistributedLiquidity(uint64,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateDistributedLiquidity(uint64,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetLp, args.currentDeposit],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateLiquidityFlatPrice(args: MethodArgs<'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.x, args.y, args.price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B positionThis method calculates discriminant - first part of the calculation.It is divided so that the readonly method does not need to charge fees
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateLiquidityD(args: MethodArgs<'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.x, args.y, args.priceMin, args.priceMax, args.priceMinSqrt, args.priceMaxSqrt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateLiquidityWithD(args: MethodArgs<'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.x, args.y, args.priceMinSqrt, args.priceMaxSqrt, args.dSqrt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Get the current price when asset a has x
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculatePrice(args: MethodArgs<'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetAQuantity, args.assetBQuantity, args.priceMinSqrt, args.priceMaxSqrt, args.liquidity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateAssetBWithdrawOnAssetADeposit(args: MethodArgs<'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.inAmount, args.assetABalance, args.assetBBalance, args.priceMinSqrt, args.priceMaxSqrt, args.liqudity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateAssetAWithdrawOnAssetBDeposit(args: MethodArgs<'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.inAmount, args.assetABalance, args.assetBBalance, args.priceMinSqrt, args.priceMaxSqrt, args.liqudity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateAssetAWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.inAmount, args.assetABalance, args.liqudity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset B will be taken from the smart contract on LP asset deposit
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateAssetBWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.inAmount, args.assetBBalance, args.liqudity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset B should be deposited when user deposit asset a and b.On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateAssetBDepositOnAssetADeposit(args: MethodArgs<'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.inAmountA, args.inAmountB, args.assetABalance, args.assetBBalance],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset A should be deposited when user deposit asset a and bOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateAssetADepositOnAssetBDeposit(args: MethodArgs<'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.inAmountA, args.inAmountB, args.assetABalance, args.assetBBalance],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static status(args: MethodArgs<'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.appBiatecConfigProvider, args.assetA, args.assetB, args.assetLp],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BiatecClammPool smart contract
 */
export class BiatecClammPoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BiatecClammPoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BiatecClammPool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BiatecClammPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BiatecClammPoolDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BiatecClammPoolCallFactory.create)
    const updateArgs = params.updateCall?.(BiatecClammPoolCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BiatecClammPool smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BiatecClammPoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication(uint64,byte[])void'>, params: AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'updateApplication(uint64,byte[])void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(BiatecClammPoolCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the getCurrentPrice()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getCurrentPrice(args: MethodArgs<'getCurrentPrice()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.getCurrentPrice(args, params))
  }

  /**
   * Calls the getPriceDivider()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPriceDivider(args: MethodArgs<'getPriceDivider()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.getPriceDivider(args, params))
  }

  /**
   * Calls the getLPTokenId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLpTokenId(args: MethodArgs<'getLPTokenId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.getLpTokenId(args, params))
  }

  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64 ABI method.
   *
   * Anybody can deploy the clamm smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: LP token ID
   */
  public bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 ABI method.
   *
   * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: LP Token quantity distributed
   */
  public addLiquidity(args: MethodArgs<'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.addLiquidity(args, params))
  }

  /**
   * Calls the removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 ABI method.
   *
   * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: LP position reduced
   */
  public removeLiquidity(args: MethodArgs<'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.removeLiquidity(args, params))
  }

  /**
   * Calls the removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 ABI method.
   *
   * This method allows biatec admin to reduce the lp position created by lp fees allocation.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: LP position reduced
   */
  public removeLiquidityAdmin(args: MethodArgs<'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.removeLiquidityAdmin(args, params))
  }

  /**
   * Calls the swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 ABI method.
   *
   * Swap Asset A to Asset B or Asset B to Asst A
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public swap(args: MethodArgs<'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.swap(args, params))
  }

  /**
   * Calls the distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 ABI method.
   *
   * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public distributeExcessAssets(args: MethodArgs<'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.distributeExcessAssets(args, params))
  }

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.withdrawExcessAssets(args, params))
  }

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.sendOnlineKeyRegistration(args, params))
  }

  /**
   * Calls the sendOfflineKeyRegistration(uint64)void ABI method.
   *
   * addressExecutiveFee can perfom key unregistration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.sendOfflineKeyRegistration(args, params))
  }

  /**
   * Calls the calculateDistributedLiquidity(uint64,uint256)uint256 ABI method.
   *
   * Calculates the number of LP tokens issued to users
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public calculateDistributedLiquidity(args: MethodArgs<'calculateDistributedLiquidity(uint64,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateDistributedLiquidity(args, params))
  }

  /**
   * Calls the calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public calculateLiquidityFlatPrice(args: MethodArgs<'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateLiquidityFlatPrice(args, params))
  }

  /**
   * Calls the calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B positionThis method calculates discriminant - first part of the calculation.It is divided so that the readonly method does not need to charge fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
   */
  public calculateLiquidityD(args: MethodArgs<'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateLiquidityD(args, params))
  }

  /**
   * Calls the calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
   */
  public calculateLiquidityWithD(args: MethodArgs<'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateLiquidityWithD(args, params))
  }

  /**
   * Calls the calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Get the current price when asset a has x
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: the price with specified quantity with the price range set in the contract
   */
  public calculatePrice(args: MethodArgs<'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculatePrice(args, params))
  }

  /**
   * Calls the calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  public calculateAssetBWithdrawOnAssetADeposit(args: MethodArgs<'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateAssetBWithdrawOnAssetADeposit(args, params))
  }

  /**
   * Calls the calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
   */
  public calculateAssetAWithdrawOnAssetBDeposit(args: MethodArgs<'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateAssetAWithdrawOnAssetBDeposit(args, params))
  }

  /**
   * Calls the calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
   */
  public calculateAssetAWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateAssetAWithdrawOnLpDeposit(args, params))
  }

  /**
   * Calls the calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B will be taken from the smart contract on LP asset deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  public calculateAssetBWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateAssetBWithdrawOnLpDeposit(args, params))
  }

  /**
   * Calls the calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B should be deposited when user deposit asset a and b.On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  public calculateAssetBDepositOnAssetADeposit(args: MethodArgs<'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateAssetBDepositOnAssetADeposit(args, params))
  }

  /**
   * Calls the calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A should be deposited when user deposit asset a and bOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of asset A to be deposited. The result is in Base decimals (9)
   */
  public calculateAssetADepositOnAssetBDeposit(args: MethodArgs<'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.calculateAssetADepositOnAssetBDeposit(args, params))
  }

  /**
   * Calls the status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public status(args: MethodArgs<'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BiatecClammPoolCallFactory.status(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BiatecClammPool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get a() {
        return BiatecClammPoolClient.getIntegerState(state, 'a')
      },
      get b() {
        return BiatecClammPoolClient.getIntegerState(state, 'b')
      },
      get lp() {
        return BiatecClammPoolClient.getIntegerState(state, 'lp')
      },
      get ab() {
        return BiatecClammPoolClient.getBinaryState(state, 'ab')
      },
      get bb() {
        return BiatecClammPoolClient.getBinaryState(state, 'bb')
      },
      get pMin() {
        return BiatecClammPoolClient.getIntegerState(state, 'pMin')
      },
      get pMax() {
        return BiatecClammPoolClient.getIntegerState(state, 'pMax')
      },
      get pMinS() {
        return BiatecClammPoolClient.getBinaryState(state, 'pMinS')
      },
      get pMaxS() {
        return BiatecClammPoolClient.getBinaryState(state, 'pMaxS')
      },
      get l() {
        return BiatecClammPoolClient.getBinaryState(state, 'L')
      },
      get lu() {
        return BiatecClammPoolClient.getBinaryState(state, 'Lu')
      },
      get lb() {
        return BiatecClammPoolClient.getBinaryState(state, 'Lb')
      },
      get f() {
        return BiatecClammPoolClient.getIntegerState(state, 'f')
      },
      get price() {
        return BiatecClammPoolClient.getIntegerState(state, 'price')
      },
      get scale() {
        return BiatecClammPoolClient.getIntegerState(state, 'scale')
      },
      get bc() {
        return BiatecClammPoolClient.getIntegerState(state, 'bc')
      },
      get c() {
        return BiatecClammPoolClient.getIntegerState(state, 'c')
      },
      get scver() {
        return BiatecClammPoolClient.getBinaryState(state, 'scver')
      },
    }
  }

  public compose(): BiatecClammPoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getCurrentPrice(args: MethodArgs<'getCurrentPrice()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCurrentPrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPriceDivider(args: MethodArgs<'getPriceDivider()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPriceDivider(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLpTokenId(args: MethodArgs<'getLPTokenId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLpTokenId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addLiquidity(args: MethodArgs<'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addLiquidity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeLiquidity(args: MethodArgs<'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeLiquidity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeLiquidityAdmin(args: MethodArgs<'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeLiquidityAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      swap(args: MethodArgs<'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.swap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      distributeExcessAssets(args: MethodArgs<'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.distributeExcessAssets(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawExcessAssets(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendOnlineKeyRegistration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendOfflineKeyRegistration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateDistributedLiquidity(args: MethodArgs<'calculateDistributedLiquidity(uint64,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateDistributedLiquidity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateLiquidityFlatPrice(args: MethodArgs<'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateLiquidityFlatPrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateLiquidityD(args: MethodArgs<'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateLiquidityD(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateLiquidityWithD(args: MethodArgs<'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateLiquidityWithD(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculatePrice(args: MethodArgs<'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculatePrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateAssetBWithdrawOnAssetADeposit(args: MethodArgs<'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateAssetBWithdrawOnAssetADeposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateAssetAWithdrawOnAssetBDeposit(args: MethodArgs<'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateAssetAWithdrawOnAssetBDeposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateAssetAWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateAssetAWithdrawOnLpDeposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateAssetBWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateAssetBWithdrawOnLpDeposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateAssetBDepositOnAssetADeposit(args: MethodArgs<'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateAssetBDepositOnAssetADeposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateAssetADepositOnAssetBDeposit(args: MethodArgs<'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateAssetADepositOnAssetBDeposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      status(args: MethodArgs<'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.status(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication(uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BiatecClammPoolComposer
  }
}
export type BiatecClammPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getCurrentPrice()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentPrice(args: MethodArgs<'getCurrentPrice()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'getCurrentPrice()uint64'>]>

  /**
   * Calls the getPriceDivider()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPriceDivider(args: MethodArgs<'getPriceDivider()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'getPriceDivider()uint64'>]>

  /**
   * Calls the getLPTokenId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLpTokenId(args: MethodArgs<'getLPTokenId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'getLPTokenId()uint64'>]>

  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64 ABI method.
   *
   * Anybody can deploy the clamm smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64'>]>

  /**
   * Calls the addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 ABI method.
   *
   * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(args: MethodArgs<'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'>]>

  /**
   * Calls the removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 ABI method.
   *
   * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(args: MethodArgs<'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'>]>

  /**
   * Calls the removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 ABI method.
   *
   * This method allows biatec admin to reduce the lp position created by lp fees allocation.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidityAdmin(args: MethodArgs<'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'>]>

  /**
   * Calls the swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 ABI method.
   *
   * Swap Asset A to Asset B or Asset B to Asst A
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(args: MethodArgs<'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'>]>

  /**
   * Calls the distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 ABI method.
   *
   * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeExcessAssets(args: MethodArgs<'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'>]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.Only addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(args: MethodArgs<'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'>]>

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * addressExecutiveFee can perfom key registration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(args: MethodArgs<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the sendOfflineKeyRegistration(uint64)void ABI method.
   *
   * addressExecutiveFee can perfom key unregistration for this LP poolOnly addressExecutiveFee is allowed to execute this method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOfflineKeyRegistration(args: MethodArgs<'sendOfflineKeyRegistration(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'sendOfflineKeyRegistration(uint64)void'>]>

  /**
   * Calls the calculateDistributedLiquidity(uint64,uint256)uint256 ABI method.
   *
   * Calculates the number of LP tokens issued to users
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateDistributedLiquidity(args: MethodArgs<'calculateDistributedLiquidity(uint64,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateDistributedLiquidity(uint64,uint256)uint256'>]>

  /**
   * Calls the calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityFlatPrice(args: MethodArgs<'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B positionThis method calculates discriminant - first part of the calculation.It is divided so that the readonly method does not need to charge fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityD(args: MethodArgs<'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityWithD(args: MethodArgs<'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Get the current price when asset a has x
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePrice(args: MethodArgs<'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBWithdrawOnAssetADeposit(args: MethodArgs<'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetAWithdrawOnAssetBDeposit(args: MethodArgs<'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetAWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B will be taken from the smart contract on LP asset deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBWithdrawOnLpDeposit(args: MethodArgs<'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B should be deposited when user deposit asset a and b.On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBDepositOnAssetADeposit(args: MethodArgs<'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A should be deposited when user deposit asset a and bOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetADepositOnAssetBDeposit(args: MethodArgs<'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'>]>

  /**
   * Calls the status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  status(args: MethodArgs<'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, MethodReturn<'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication(uint64,byte[])void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): BiatecClammPoolComposer<[...TReturns, MethodReturn<'updateApplication(uint64,byte[])void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): BiatecClammPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BiatecClammPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BiatecClammPoolComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<BiatecClammPoolComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BiatecClammPoolComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BiatecClammPoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
