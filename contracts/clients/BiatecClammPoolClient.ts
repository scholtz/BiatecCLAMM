/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client';
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app';
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from '@algorandfoundation/algokit-utils/types/app-arc56';
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client';
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from '@algorandfoundation/algokit-utils/types/app-factory';
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from '@algorandfoundation/algokit-utils/types/composer';
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from '@algorandfoundation/algokit-utils/types/transaction';
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk';

export const APP_SPEC: Arc56Contract = {
  name: 'BiatecClammPool',
  desc: '',
  methods: [
    {
      name: 'createApplication',
      desc: 'Initial setup',
      args: [],
      returns: { type: 'void' },
      actions: { create: ['NoOp'], call: [] },
    },
    {
      name: 'updateApplication',
      desc: 'addressUdpater from global biatec configuration is allowed to update application',
      args: [
        { name: 'appBiatecConfigProvider', type: 'uint64' },
        { name: 'newVersion', type: 'byte[]' },
      ],
      returns: { type: 'void' },
      actions: { create: [], call: ['UpdateApplication'] },
    },
    {
      name: 'getCurrentPrice',
      readonly: true,
      args: [],
      returns: { type: 'uint64' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'getPriceDivider',
      readonly: true,
      args: [],
      returns: { type: 'uint64' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'getLPTokenId',
      readonly: true,
      args: [],
      returns: { type: 'uint64' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'bootstrap',
      desc: 'Only Biatec Pool Provider can deploy and bootsrap this smart contract',
      args: [
        { name: 'assetA', type: 'uint64', desc: 'Asset A ID must be lower then Asset B ID' },
        { name: 'assetB', type: 'uint64', desc: 'Asset B' },
        { name: 'appBiatecConfigProvider', type: 'uint64', desc: 'Biatec amm provider' },
        { name: 'appBiatecPoolProvider', type: 'uint64', desc: 'Pool provider' },
        { name: 'txSeed', type: 'pay', desc: 'Seed transaction so that smart contract can opt in to the assets' },
        {
          name: 'fee',
          type: 'uint64',
          desc: 'Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%',
        },
        { name: 'priceMin', type: 'uint64', desc: 'Min price range. At this point all assets are in asset A.' },
        { name: 'priceMax', type: 'uint64', desc: 'Max price range. At this point all assets are in asset B.' },
        { name: 'currentPrice', type: 'uint64', desc: 'Deployer can specify the current price for easier deployemnt.' },
        {
          name: 'verificationClass',
          type: 'uint64',
          desc: 'Minimum verification level from the biatec identity. Level 0 means no kyc.',
        },
      ],
      returns: { type: 'uint64', desc: 'LP token ID' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'bootstrapStep2',
      desc: 'When we know the app id of this pool, we can register it properly at the pool provider',
      args: [],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'addLiquidity',
      desc: 'This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token',
      args: [
        { name: 'appBiatecConfigProvider', type: 'uint64', desc: 'Configuration reference' },
        { name: 'appBiatecIdentityProvider', type: 'uint64', desc: 'Identity service reference' },
        { name: 'txAssetADeposit', type: 'txn', desc: 'Transfer of asset A to the LP pool' },
        { name: 'txAssetBDeposit', type: 'txn', desc: 'Transfer of asset B to the LP pool' },
        { name: 'assetA', type: 'uint64', desc: 'Asset A' },
        { name: 'assetB', type: 'uint64', desc: 'Asset B' },
        { name: 'assetLp', type: 'uint64', desc: 'Liquidity pool asset' },
      ],
      returns: { type: 'uint64', desc: 'LP Token quantity distributed' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'removeLiquidity',
      desc: 'This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool',
      args: [
        { name: 'appBiatecConfigProvider', type: 'uint64', desc: 'Configuration reference' },
        { name: 'appBiatecIdentityProvider', type: 'uint64', desc: 'Identity service reference' },
        { name: 'txLpXfer', type: 'axfer', desc: 'Transfer of the LP token' },
        { name: 'assetA', type: 'uint64', desc: 'Asset A' },
        { name: 'assetB', type: 'uint64', desc: 'Asset B' },
        { name: 'assetLp', type: 'uint64', desc: 'LP pool asset' },
      ],
      returns: { type: 'uint256', desc: 'LP position reduced' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'removeLiquidityAdmin',
      desc: 'This method allows biatec admin to reduce the lp position created by lp fees allocation.\n\n\nOnly addressExecutiveFee is allowed to execute this method.',
      args: [
        {
          name: 'appBiatecConfigProvider',
          type: 'uint64',
          desc: 'Biatec config app. Only addressExecutiveFee is allowed to execute this method.',
        },
        { name: 'assetA', type: 'uint64', desc: 'Asset A' },
        { name: 'assetB', type: 'uint64', desc: 'Asset B' },
        { name: 'assetLp', type: 'uint64' },
        { name: 'amount', type: 'uint256', desc: 'Amount to withdraw. If zero, removes all available lps from fees.' },
      ],
      returns: { type: 'uint256', desc: 'LP position reduced' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'swap',
      desc: 'Swap Asset A to Asset B or Asset B to Asst A',
      args: [
        { name: 'appBiatecConfigProvider', type: 'uint64' },
        { name: 'appBiatecIdentityProvider', type: 'uint64' },
        { name: 'appBiatecPoolProvider', type: 'uint64' },
        {
          name: 'txSwap',
          type: 'txn',
          desc: 'Transfer of the token to be deposited to the pool. To the owner the other asset will be sent.',
        },
        { name: 'assetA', type: 'uint64', desc: 'Asset A' },
        { name: 'assetB', type: 'uint64', desc: 'Asset B' },
        {
          name: 'minimumToReceive',
          type: 'uint64',
          desc: 'If number greater then zero, the check is performed for the output of the other asset',
        },
      ],
      returns: { type: 'uint256' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'distributeExcessAssets',
      desc: 'If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.\nIf someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.\n\n\nThis method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.\n\n\nOnly addressExecutiveFee is allowed to execute this method.',
      args: [
        {
          name: 'appBiatecConfigProvider',
          type: 'uint64',
          desc: 'Biatec config app. Only addressExecutiveFee is allowed to execute this method.',
        },
        { name: 'assetA', type: 'uint64', desc: 'Asset A' },
        { name: 'assetB', type: 'uint64', desc: 'Asset B' },
        {
          name: 'amountA',
          type: 'uint256',
          desc: 'Amount of asset A to be deposited to the liquidity. In base decimals (9)',
        },
        {
          name: 'amountB',
          type: 'uint256',
          desc: 'Amount of asset B to be deposited to the liquidity. In base decimals (9)',
        },
      ],
      returns: { type: 'uint256' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'withdrawExcessAssets',
      desc: 'If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.\nIf someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.\n\n\nThis method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.\n\n\nOnly addressExecutiveFee is allowed to execute this method.',
      args: [
        {
          name: 'appBiatecConfigProvider',
          type: 'uint64',
          desc: 'Biatec config app. Only addressExecutiveFee is allowed to execute this method.',
        },
        { name: 'assetA', type: 'uint64', desc: 'Asset A' },
        { name: 'assetB', type: 'uint64', desc: 'Asset B' },
        {
          name: 'amountA',
          type: 'uint64',
          desc: 'Amount of asset A to be deposited to the liquidity. In asset a decimals',
        },
        {
          name: 'amountB',
          type: 'uint64',
          desc: 'Amount of asset B to be deposited to the liquidity. In asset b decimals',
        },
      ],
      returns: { type: 'uint64' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'sendOnlineKeyRegistration',
      desc: 'addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.',
      args: [
        { name: 'appBiatecConfigProvider', type: 'uint64' },
        { name: 'votePk', type: 'byte[]' },
        { name: 'selectionPk', type: 'byte[]' },
        { name: 'stateProofPk', type: 'byte[]' },
        { name: 'voteFirst', type: 'uint64' },
        { name: 'voteLast', type: 'uint64' },
        { name: 'voteKeyDilution', type: 'uint64' },
      ],
      returns: { type: 'void' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateDistributedLiquidity',
      desc: 'addressExecutiveFee can perfom key unregistration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.',
      readonly: true,
      args: [
        { name: 'assetLp', type: 'uint64' },
        { name: 'currentDeposit', type: 'uint256' },
      ],
      returns: { type: 'uint256' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateLiquidityFlatPrice',
      readonly: true,
      args: [
        { name: 'x', type: 'uint256' },
        { name: 'y', type: 'uint256' },
        { name: 'price', type: 'uint256' },
      ],
      returns: { type: 'uint256' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateLiquidityD',
      desc: 'Calculates the liquidity  from the x - Asset A position and y - Asset B position\nThis method calculates discriminant - first part of the calculation.\nIt is divided so that the readonly method does not need to charge fees',
      readonly: true,
      args: [
        { name: 'x', type: 'uint256', desc: 'Asset A position balanced on the curve' },
        { name: 'y', type: 'uint256', desc: 'Asset B position balanced on the curve' },
        { name: 'priceMin', type: 'uint256', desc: 'Minimum price variable in base scale decimals (pa)' },
        { name: 'priceMax', type: 'uint256', desc: 'Maximum price variable in base scale decimals (pb)' },
        { name: 'priceMinSqrt', type: 'uint256', desc: 'sqrt(priceMin) in base scale decimals Variable pas' },
        { name: 'priceMaxSqrt', type: 'uint256', desc: 'sqrt(priceMax) in base scale decimals Variable pbs' },
      ],
      returns: {
        type: 'uint256',
        desc: 'Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.',
      },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateLiquidityWithD',
      desc: 'Calculates the liquidity  from the x - Asset A position and y - Asset B position',
      readonly: true,
      args: [
        { name: 'x', type: 'uint256', desc: 'Asset A position balanced on the curve' },
        { name: 'y', type: 'uint256', desc: 'Asset B position balanced on the curve' },
        { name: 'priceMinSqrt', type: 'uint256', desc: 'sqrt(priceMin) in base scale decimals Variable pas' },
        { name: 'priceMaxSqrt', type: 'uint256', desc: 'sqrt(priceMax) in base scale decimals Variable pbs' },
        { name: 'dSqrt', type: 'uint256' },
      ],
      returns: {
        type: 'uint256',
        desc: 'Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.',
      },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculatePrice',
      desc: 'Get the current price when asset a has x',
      readonly: true,
      args: [
        { name: 'assetAQuantity', type: 'uint256', desc: 'x' },
        { name: 'assetBQuantity', type: 'uint256', desc: 'y' },
        { name: 'priceMinSqrt', type: 'uint256', desc: 'sqrt(priceMin)' },
        { name: 'priceMaxSqrt', type: 'uint256', desc: 'sqrt(priceMax)' },
        { name: 'liquidity', type: 'uint256', desc: 'Current pool liquidity - L variable' },
      ],
      returns: { type: 'uint256', desc: 'the price with specified quantity with the price range set in the contract' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateAssetBWithdrawOnAssetADeposit',
      desc: 'Calculates how much asset B will be taken from the smart contract on asset A deposit',
      readonly: true,
      args: [
        {
          name: 'inAmount',
          type: 'uint256',
          desc: 'Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000',
        },
        { name: 'assetABalance', type: 'uint256', desc: 'Asset A balance. Variable ab, in base scale' },
        { name: 'assetBBalance', type: 'uint256', desc: 'Asset B balance. Variable bb, in base scale' },
        { name: 'priceMinSqrt', type: 'uint256', desc: 'sqrt(Min price). Variable pMinS, in base scale' },
        { name: 'priceMaxSqrt', type: 'uint256', desc: 'sqrt(Max price). Variable pMaxS, in base scale' },
        { name: 'liqudity', type: 'uint256', desc: 'sqrt(Max price). Variable L, in base scale' },
      ],
      returns: {
        type: 'uint256',
        desc: 'Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)',
      },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateAssetAWithdrawOnAssetBDeposit',
      desc: 'Calculates how much asset A will be taken from the smart contract on asset B deposit',
      readonly: true,
      args: [
        {
          name: 'inAmount',
          type: 'uint256',
          desc: 'Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000',
        },
        { name: 'assetABalance', type: 'uint256', desc: 'Asset A balance. Variable ab, in base scale' },
        { name: 'assetBBalance', type: 'uint256', desc: 'Asset B balance. Variable bb, in base scale' },
        { name: 'priceMinSqrt', type: 'uint256', desc: 'sqrt(Min price). Variable pMinS, in base scale' },
        { name: 'priceMaxSqrt', type: 'uint256', desc: 'sqrt(Max price). Variable pMaxS, in base scale' },
        { name: 'liqudity', type: 'uint256', desc: 'sqrt(Max price). Variable L, in base scale' },
      ],
      returns: {
        type: 'uint256',
        desc: 'Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)',
      },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateAssetAWithdrawOnLpDeposit',
      desc: 'Calculates how much asset A will be taken from the smart contract on LP asset deposit',
      readonly: true,
      args: [
        { name: 'inAmount', type: 'uint256', desc: 'LP Asset amount in Base decimal representation..' },
        { name: 'assetABalance', type: 'uint256', desc: 'Asset A balance. Variable ab, in base scale' },
        { name: 'liqudity', type: 'uint256', desc: 'Current liqudity. Variable L, in base scale' },
      ],
      returns: {
        type: 'uint256',
        desc: 'Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)',
      },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateAssetBDepositOnAssetADeposit',
      desc: 'Calculates how much asset B should be deposited when user deposit asset a and b.\n\n\nOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user',
      readonly: true,
      args: [
        { name: 'inAmountA', type: 'uint256', desc: 'Asset A amount in Base decimal representation' },
        { name: 'inAmountB', type: 'uint256', desc: 'Asset B amount in Base decimal representation' },
        { name: 'assetABalance', type: 'uint256', desc: 'Asset A balance. Variable ab, in base scale' },
        { name: 'assetBBalance', type: 'uint256', desc: 'Asset B balance. Variable bb, in base scale' },
      ],
      returns: {
        type: 'uint256',
        desc: 'Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)',
      },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'calculateAssetADepositOnAssetBDeposit',
      desc: 'Calculates how much asset A should be deposited when user deposit asset a and b\n\n\nOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user',
      readonly: true,
      args: [
        { name: 'inAmountA', type: 'uint256', desc: 'Asset A amount in Base decimal representation' },
        { name: 'inAmountB', type: 'uint256', desc: 'Asset B amount in Base decimal representation' },
        { name: 'assetABalance', type: 'uint256', desc: 'Asset A balance. Variable ab, in base scale' },
        { name: 'assetBBalance', type: 'uint256', desc: 'Asset B balance. Variable bb, in base scale' },
      ],
      returns: { type: 'uint256', desc: 'Amount of asset A to be deposited. The result is in Base decimals (9)' },
      actions: { create: [], call: ['NoOp'] },
    },
    {
      name: 'status',
      readonly: true,
      args: [
        { name: 'appBiatecConfigProvider', type: 'uint64' },
        { name: 'assetA', type: 'uint64' },
        { name: 'assetB', type: 'uint64' },
        { name: 'assetLp', type: 'uint64' },
      ],
      returns: {
        type: '(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)',
        struct: 'AmmStatus',
      },
      actions: { create: [], call: ['NoOp'] },
    },
  ],
  arcs: [4, 56],
  structs: {
    AmmStatus: [
      { name: 'scale', type: 'uint64' },
      { name: 'assetABalance', type: 'uint64' },
      { name: 'assetBBalance', type: 'uint64' },
      { name: 'realABalance', type: 'uint64' },
      { name: 'realBBalance', type: 'uint64' },
      { name: 'priceMinSqrt', type: 'uint64' },
      { name: 'priceMaxSqrt', type: 'uint64' },
      { name: 'currentLiqudity', type: 'uint64' },
      { name: 'releasedLiqudity', type: 'uint64' },
      { name: 'liqudityUsersFromFees', type: 'uint64' },
      { name: 'liqudityBiatecFromFees', type: 'uint64' },
      { name: 'assetA', type: 'uint64' },
      { name: 'assetB', type: 'uint64' },
      { name: 'poolToken', type: 'uint64' },
      { name: 'price', type: 'uint64' },
      { name: 'fee', type: 'uint64' },
      { name: 'biatecFee', type: 'uint64' },
      { name: 'verificationClass', type: 'uint64' },
    ],
  },
  state: {
    schema: { global: { bytes: 9, ints: 10 }, local: { bytes: 0, ints: 0 } },
    keys: {
      global: {
        setupFinished: { key: 'cw==', keyType: 'AVMBytes', valueType: 'bool' },
        assetA: { key: 'YQ==', keyType: 'AVMBytes', valueType: 'uint64' },
        assetB: { key: 'Yg==', keyType: 'AVMBytes', valueType: 'uint64' },
        assetLp: { key: 'bHA=', keyType: 'AVMBytes', valueType: 'uint64' },
        assetABalance: { key: 'YWI=', keyType: 'AVMBytes', valueType: 'uint256' },
        assetBBalance: { key: 'YmI=', keyType: 'AVMBytes', valueType: 'uint256' },
        priceMin: { key: 'cE1pbg==', keyType: 'AVMBytes', valueType: 'uint64' },
        priceMax: { key: 'cE1heA==', keyType: 'AVMBytes', valueType: 'uint64' },
        priceMinSqrt: { key: 'cE1pblM=', keyType: 'AVMBytes', valueType: 'uint256' },
        priceMaxSqrt: { key: 'cE1heFM=', keyType: 'AVMBytes', valueType: 'uint256' },
        Liqudity: { key: 'TA==', keyType: 'AVMBytes', valueType: 'uint256' },
        LiqudityUsersFromFees: { key: 'THU=', keyType: 'AVMBytes', valueType: 'uint256' },
        LiqudityBiatecFromFees: { key: 'TGI=', keyType: 'AVMBytes', valueType: 'uint256' },
        fee: { key: 'Zg==', keyType: 'AVMBytes', valueType: 'uint64' },
        currentPrice: { key: 'cHJpY2U=', keyType: 'AVMBytes', valueType: 'uint64' },
        scale: { key: 'c2NhbGU=', keyType: 'AVMBytes', valueType: 'uint64' },
        appBiatecConfigProvider: { key: 'YmM=', keyType: 'AVMBytes', valueType: 'uint64' },
        verificationClass: { key: 'Yw==', keyType: 'AVMBytes', valueType: 'uint64' },
        version: { key: 'c2N2ZXI=', keyType: 'AVMBytes', valueType: 'AVMBytes' },
      },
      local: {},
      box: {},
    },
    maps: { global: {}, local: {}, box: {} },
  },
  bareActions: { create: [], call: [] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        { teal: 1, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [0] },
        {
          teal: 2,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          pc: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
        },
        {
          teal: 3,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          pc: [
            20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
            74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
            122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
            143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
            185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
            227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
            248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
            269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
            290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
            311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331,
            332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
            353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
            374, 375, 376, 377, 378, 379,
          ],
        },
        { teal: 15, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [380, 381] },
        { teal: 16, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [382] },
        { teal: 17, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [383, 384] },
        { teal: 18, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [385] },
        { teal: 19, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [386, 387] },
        { teal: 20, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [388] },
        {
          teal: 21,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          pc: [
            389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
            410, 411, 412, 413, 414,
          ],
        },
        {
          teal: 25,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          errorMessage:
            'The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?',
          pc: [415],
        },
        { teal: 30, source: 'contracts\\BiatecClammPool.algo.ts:110', pc: [416, 417, 418] },
        { teal: 31, source: 'contracts\\BiatecClammPool.algo.ts:110', pc: [419] },
        { teal: 32, source: 'contracts\\BiatecClammPool.algo.ts:110', pc: [420] },
        { teal: 38, source: 'contracts\\BiatecClammPool.algo.ts:110', pc: [421, 422, 423] },
        { teal: 42, source: 'contracts\\BiatecClammPool.algo.ts:111', pc: [424, 425] },
        { teal: 43, source: 'contracts\\BiatecClammPool.algo.ts:111', pc: [426] },
        { teal: 47, source: 'contracts\\BiatecClammPool.algo.ts:112', pc: [427, 428] },
        { teal: 48, source: 'contracts\\BiatecClammPool.algo.ts:112', pc: [429, 430, 431, 432, 433, 434] },
        { teal: 49, source: 'contracts\\BiatecClammPool.algo.ts:112', pc: [435] },
        { teal: 53, source: 'contracts\\BiatecClammPool.algo.ts:113', pc: [436, 437] },
        { teal: 54, source: 'contracts\\BiatecClammPool.algo.ts:113', pc: [438] },
        { teal: 55, source: 'contracts\\BiatecClammPool.algo.ts:113', pc: [439] },
        { teal: 59, source: 'contracts\\BiatecClammPool.algo.ts:114', pc: [440, 441] },
        { teal: 60, source: 'contracts\\BiatecClammPool.algo.ts:114', pc: [442, 443] },
        { teal: 61, source: 'contracts\\BiatecClammPool.algo.ts:114', pc: [444] },
        { teal: 65, source: 'contracts\\BiatecClammPool.algo.ts:115', pc: [445, 446] },
        { teal: 66, source: 'contracts\\BiatecClammPool.algo.ts:115', pc: [447, 448] },
        { teal: 67, source: 'contracts\\BiatecClammPool.algo.ts:115', pc: [449] },
        { teal: 71, source: 'contracts\\BiatecClammPool.algo.ts:116', pc: [450, 451] },
        { teal: 72, source: 'contracts\\BiatecClammPool.algo.ts:116', pc: [452, 453] },
        { teal: 73, source: 'contracts\\BiatecClammPool.algo.ts:116', pc: [454] },
        { teal: 77, source: 'contracts\\BiatecClammPool.algo.ts:117', pc: [455, 456] },
        { teal: 78, source: 'contracts\\BiatecClammPool.algo.ts:117', pc: [457] },
        { teal: 79, source: 'contracts\\BiatecClammPool.algo.ts:117', pc: [458] },
        { teal: 83, source: 'contracts\\BiatecClammPool.algo.ts:118', pc: [459, 460] },
        { teal: 84, source: 'contracts\\BiatecClammPool.algo.ts:118', pc: [461, 462] },
        { teal: 85, source: 'contracts\\BiatecClammPool.algo.ts:118', pc: [463] },
        { teal: 89, source: 'contracts\\BiatecClammPool.algo.ts:119', pc: [464, 465] },
        { teal: 90, source: 'contracts\\BiatecClammPool.algo.ts:119', pc: [466] },
        { teal: 91, source: 'contracts\\BiatecClammPool.algo.ts:119', pc: [467, 468] },
        { teal: 92, source: 'contracts\\BiatecClammPool.algo.ts:119', pc: [469] },
        { teal: 93, source: 'contracts\\BiatecClammPool.algo.ts:119', pc: [470, 471] },
        { teal: 94, source: 'contracts\\BiatecClammPool.algo.ts:119', pc: [472] },
        { teal: 95, source: 'contracts\\BiatecClammPool.algo.ts:119', pc: [473] },
        { teal: 96, source: 'contracts\\BiatecClammPool.algo.ts:110', pc: [474] },
        { teal: 101, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [475, 476, 477] },
        { teal: 102, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [478, 479, 480] },
        { teal: 105, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [481, 482, 483] },
        { teal: 106, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [484] },
        { teal: 109, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [485, 486, 487] },
        { teal: 110, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [488] },
        { teal: 111, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [489] },
        { teal: 117, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [490, 491, 492] },
        { teal: 120, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [493] },
        { teal: 124, source: 'contracts\\BiatecClammPool.algo.ts:126', pc: [494, 495] },
        { teal: 125, source: 'contracts\\BiatecClammPool.algo.ts:126', pc: [496, 497] },
        { teal: 126, source: 'contracts\\BiatecClammPool.algo.ts:126', pc: [498] },
        { teal: 127, source: 'contracts\\BiatecClammPool.algo.ts:126', pc: [499] },
        { teal: 130, source: 'contracts\\BiatecClammPool.algo.ts:126', errorMessage: 'E_CONFIG', pc: [500] },
        { teal: 134, source: 'contracts\\BiatecClammPool.algo.ts:127', pc: [501, 502] },
        { teal: 135, source: 'contracts\\BiatecClammPool.algo.ts:127', pc: [503, 504, 505] },
        { teal: 136, source: 'contracts\\BiatecClammPool.algo.ts:127', pc: [506] },
        {
          teal: 139,
          source: 'contracts\\BiatecClammPool.algo.ts:127',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('u')",
          pc: [507],
        },
        { teal: 140, source: 'contracts\\BiatecClammPool.algo.ts:127', pc: [508, 509] },
        { teal: 144, source: 'contracts\\BiatecClammPool.algo.ts:128', pc: [510, 511] },
        { teal: 145, source: 'contracts\\BiatecClammPool.algo.ts:128', pc: [512, 513] },
        { teal: 146, source: 'contracts\\BiatecClammPool.algo.ts:128', pc: [514] },
        { teal: 149, source: 'contracts\\BiatecClammPool.algo.ts:128', errorMessage: 'E_UPDATER', pc: [515] },
        { teal: 153, source: 'contracts\\BiatecClammPool.algo.ts:129', pc: [516, 517] },
        { teal: 154, source: 'contracts\\BiatecClammPool.algo.ts:129', pc: [518, 519] },
        { teal: 155, source: 'contracts\\BiatecClammPool.algo.ts:129', pc: [520] },
        { teal: 156, source: 'contracts\\BiatecClammPool.algo.ts:125', pc: [521] },
        { teal: 161, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [522, 523] },
        { teal: 164, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [524, 525, 526] },
        { teal: 165, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [527] },
        { teal: 166, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [528] },
        { teal: 167, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [529] },
        { teal: 168, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [530] },
        { teal: 169, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [531] },
        { teal: 173, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [532, 533, 534] },
        { teal: 177, source: 'contracts\\BiatecClammPool.algo.ts:134', pc: [535, 536] },
        { teal: 178, source: 'contracts\\BiatecClammPool.algo.ts:134', pc: [537] },
        { teal: 179, source: 'contracts\\BiatecClammPool.algo.ts:132', pc: [538] },
        { teal: 184, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [539, 540] },
        { teal: 187, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [541, 542, 543] },
        { teal: 188, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [544] },
        { teal: 189, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [545] },
        { teal: 190, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [546] },
        { teal: 191, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [547] },
        { teal: 192, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [548] },
        { teal: 196, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [549, 550, 551] },
        { teal: 200, source: 'contracts\\BiatecClammPool.algo.ts:139', pc: [552, 553] },
        { teal: 201, source: 'contracts\\BiatecClammPool.algo.ts:139', pc: [554] },
        { teal: 202, source: 'contracts\\BiatecClammPool.algo.ts:137', pc: [555] },
        { teal: 207, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [556, 557] },
        { teal: 210, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [558, 559, 560] },
        { teal: 211, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [561] },
        { teal: 212, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [562] },
        { teal: 213, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [563] },
        { teal: 214, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [564] },
        { teal: 215, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [565] },
        { teal: 219, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [566, 567, 568] },
        { teal: 223, source: 'contracts\\BiatecClammPool.algo.ts:144', pc: [569, 570] },
        { teal: 224, source: 'contracts\\BiatecClammPool.algo.ts:144', pc: [571] },
        { teal: 225, source: 'contracts\\BiatecClammPool.algo.ts:142', pc: [572] },
        { teal: 230, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [573, 574] },
        { teal: 233, source: 'contracts\\BiatecClammPool.algo.ts:171', pc: [575, 576, 577] },
        { teal: 234, source: 'contracts\\BiatecClammPool.algo.ts:171', pc: [578] },
        { teal: 237, source: 'contracts\\BiatecClammPool.algo.ts:170', pc: [579, 580, 581] },
        { teal: 238, source: 'contracts\\BiatecClammPool.algo.ts:170', pc: [582] },
        { teal: 241, source: 'contracts\\BiatecClammPool.algo.ts:169', pc: [583, 584, 585] },
        { teal: 242, source: 'contracts\\BiatecClammPool.algo.ts:169', pc: [586] },
        { teal: 245, source: 'contracts\\BiatecClammPool.algo.ts:168', pc: [587, 588, 589] },
        { teal: 246, source: 'contracts\\BiatecClammPool.algo.ts:168', pc: [590] },
        { teal: 249, source: 'contracts\\BiatecClammPool.algo.ts:167', pc: [591, 592, 593] },
        { teal: 250, source: 'contracts\\BiatecClammPool.algo.ts:167', pc: [594] },
        { teal: 253, source: 'contracts\\BiatecClammPool.algo.ts:166', pc: [595, 596] },
        { teal: 254, source: 'contracts\\BiatecClammPool.algo.ts:166', pc: [597] },
        { teal: 255, source: 'contracts\\BiatecClammPool.algo.ts:166', pc: [598] },
        { teal: 256, source: 'contracts\\BiatecClammPool.algo.ts:166', pc: [599] },
        { teal: 257, source: 'contracts\\BiatecClammPool.algo.ts:166', pc: [600, 601] },
        { teal: 258, source: 'contracts\\BiatecClammPool.algo.ts:166', pc: [602] },
        { teal: 259, source: 'contracts\\BiatecClammPool.algo.ts:166', pc: [603] },
        {
          teal: 262,
          source: 'contracts\\BiatecClammPool.algo.ts:166',
          errorMessage: 'argument 5 (txSeed) for bootstrap must be a pay transaction',
          pc: [604],
        },
        { teal: 265, source: 'contracts\\BiatecClammPool.algo.ts:165', pc: [605, 606, 607] },
        { teal: 266, source: 'contracts\\BiatecClammPool.algo.ts:165', pc: [608] },
        { teal: 269, source: 'contracts\\BiatecClammPool.algo.ts:164', pc: [609, 610, 611] },
        { teal: 270, source: 'contracts\\BiatecClammPool.algo.ts:164', pc: [612] },
        { teal: 273, source: 'contracts\\BiatecClammPool.algo.ts:163', pc: [613, 614, 615] },
        { teal: 274, source: 'contracts\\BiatecClammPool.algo.ts:163', pc: [616] },
        { teal: 277, source: 'contracts\\BiatecClammPool.algo.ts:162', pc: [617, 618, 619] },
        { teal: 278, source: 'contracts\\BiatecClammPool.algo.ts:162', pc: [620] },
        { teal: 281, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [621, 622, 623] },
        { teal: 282, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [624] },
        { teal: 283, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [625] },
        { teal: 284, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [626] },
        { teal: 285, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [627] },
        { teal: 286, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [628] },
        { teal: 303, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [629, 630, 631] },
        { teal: 306, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [632] },
        { teal: 307, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [633] },
        { teal: 311, source: 'contracts\\BiatecClammPool.algo.ts:173', pc: [634, 635] },
        { teal: 312, source: 'contracts\\BiatecClammPool.algo.ts:173', pc: [636, 637] },
        { teal: 313, source: 'contracts\\BiatecClammPool.algo.ts:173', pc: [638] },
        {
          teal: 316,
          source: 'contracts\\BiatecClammPool.algo.ts:173',
          errorMessage: 'Only the pool provider can init this contract',
          pc: [639],
        },
        { teal: 321, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [640, 641] },
        { teal: 322, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [642, 643] },
        { teal: 323, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [644, 645] },
        { teal: 324, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [646] },
        {
          teal: 327,
          source: 'contracts\\BiatecClammPool.algo.ts:174',
          errorMessage:
            'transaction verification failed: {"txn":"txSeed","field":"receiver","expected":"this.app.address"}',
          pc: [647],
        },
        { teal: 330, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [648, 649] },
        { teal: 331, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [650, 651] },
        { teal: 332, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [652, 653, 654, 655] },
        { teal: 333, source: 'contracts\\BiatecClammPool.algo.ts:174', pc: [656] },
        {
          teal: 336,
          source: 'contracts\\BiatecClammPool.algo.ts:174',
          errorMessage:
            'transaction verification failed: {"txn":"txSeed","field":"amount","condition":"greaterThanEqualTo","expected":">=400_000"}',
          pc: [657],
        },
        { teal: 340, source: 'contracts\\BiatecClammPool.algo.ts:175', pc: [658, 659] },
        { teal: 341, source: 'contracts\\BiatecClammPool.algo.ts:175', pc: [660] },
        { teal: 342, source: 'contracts\\BiatecClammPool.algo.ts:175', pc: [661] },
        { teal: 343, source: 'contracts\\BiatecClammPool.algo.ts:175', pc: [662] },
        { teal: 346, source: 'contracts\\BiatecClammPool.algo.ts:175', errorMessage: 'E_PRICE_MAX', pc: [663] },
        { teal: 350, source: 'contracts\\BiatecClammPool.algo.ts:176', pc: [664, 665] },
        { teal: 351, source: 'contracts\\BiatecClammPool.algo.ts:176', pc: [666, 667, 668] },
        { teal: 352, source: 'contracts\\BiatecClammPool.algo.ts:176', pc: [669, 670] },
        { teal: 353, source: 'contracts\\BiatecClammPool.algo.ts:176', pc: [671] },
        { teal: 354, source: 'contracts\\BiatecClammPool.algo.ts:176', pc: [672] },
        { teal: 357, source: 'contracts\\BiatecClammPool.algo.ts:176', errorMessage: 'E_SENDER', pc: [673] },
        { teal: 361, source: 'contracts\\BiatecClammPool.algo.ts:177', pc: [674, 675] },
        { teal: 362, source: 'contracts\\BiatecClammPool.algo.ts:177', pc: [676] },
        { teal: 363, source: 'contracts\\BiatecClammPool.algo.ts:177', pc: [677] },
        { teal: 366, source: 'contracts\\BiatecClammPool.algo.ts:177', errorMessage: 'E_PRICE', pc: [678] },
        { teal: 370, source: 'contracts\\BiatecClammPool.algo.ts:179', pc: [679, 680] },
        { teal: 371, source: 'contracts\\BiatecClammPool.algo.ts:179', pc: [681] },
        { teal: 372, source: 'contracts\\BiatecClammPool.algo.ts:179', pc: [682] },
        { teal: 375, source: 'contracts\\BiatecClammPool.algo.ts:179', errorMessage: 'Asset B must be ASA', pc: [683] },
        { teal: 379, source: 'contracts\\BiatecClammPool.algo.ts:180', pc: [684, 685] },
        { teal: 380, source: 'contracts\\BiatecClammPool.algo.ts:180', pc: [686, 687, 688, 689, 690] },
        { teal: 381, source: 'contracts\\BiatecClammPool.algo.ts:180', pc: [691] },
        { teal: 382, source: 'contracts\\BiatecClammPool.algo.ts:180', pc: [692] },
        { teal: 386, source: 'contracts\\BiatecClammPool.algo.ts:182', pc: [693, 694, 695] },
        { teal: 387, source: 'contracts\\BiatecClammPool.algo.ts:182', pc: [696, 697] },
        { teal: 388, source: 'contracts\\BiatecClammPool.algo.ts:182', pc: [698] },
        { teal: 389, source: 'contracts\\BiatecClammPool.algo.ts:182', pc: [699] },
        { teal: 390, source: 'contracts\\BiatecClammPool.algo.ts:182', pc: [700] },
        { teal: 391, source: 'contracts\\BiatecClammPool.algo.ts:182', pc: [701] },
        { teal: 392, source: 'contracts\\BiatecClammPool.algo.ts:182', pc: [702] },
        { teal: 397, source: 'contracts\\BiatecClammPool.algo.ts:183', pc: [703, 704] },
        { teal: 398, source: 'contracts\\BiatecClammPool.algo.ts:183', pc: [705] },
        { teal: 399, source: 'contracts\\BiatecClammPool.algo.ts:183', pc: [706] },
        { teal: 400, source: 'contracts\\BiatecClammPool.algo.ts:183', pc: [707, 708, 709] },
        { teal: 405, source: 'contracts\\BiatecClammPool.algo.ts:184', pc: [710, 711] },
        { teal: 406, source: 'contracts\\BiatecClammPool.algo.ts:184', pc: [712, 713] },
        { teal: 407, source: 'contracts\\BiatecClammPool.algo.ts:184', pc: [714] },
        { teal: 408, source: 'contracts\\BiatecClammPool.algo.ts:184', pc: [715, 716] },
        { teal: 409, source: 'contracts\\BiatecClammPool.algo.ts:184', pc: [717] },
        { teal: 410, source: 'contracts\\BiatecClammPool.algo.ts:184', pc: [718] },
        { teal: 415, source: 'contracts\\BiatecClammPool.algo.ts:186', pc: [719, 720] },
        { teal: 416, source: 'contracts\\BiatecClammPool.algo.ts:186', pc: [721, 722] },
        { teal: 417, source: 'contracts\\BiatecClammPool.algo.ts:186', pc: [723] },
        { teal: 418, source: 'contracts\\BiatecClammPool.algo.ts:186', pc: [724, 725] },
        { teal: 419, source: 'contracts\\BiatecClammPool.algo.ts:186', pc: [726] },
        { teal: 420, source: 'contracts\\BiatecClammPool.algo.ts:186', pc: [727] },
        { teal: 424, source: 'contracts\\BiatecClammPool.algo.ts:188', pc: [728, 729] },
        { teal: 425, source: 'contracts\\BiatecClammPool.algo.ts:188', pc: [730] },
        { teal: 426, source: 'contracts\\BiatecClammPool.algo.ts:188', pc: [731] },
        { teal: 427, source: 'contracts\\BiatecClammPool.algo.ts:188', pc: [732] },
        { teal: 430, source: 'contracts\\BiatecClammPool.algo.ts:188', errorMessage: 'E_FEE', pc: [733] },
        { teal: 434, source: 'contracts\\BiatecClammPool.algo.ts:190', pc: [734, 735] },
        { teal: 435, source: 'contracts\\BiatecClammPool.algo.ts:190', pc: [736, 737] },
        { teal: 436, source: 'contracts\\BiatecClammPool.algo.ts:190', pc: [738] },
        {
          teal: 439,
          source: 'contracts\\BiatecClammPool.algo.ts:190',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('p')",
          pc: [739],
        },
        { teal: 440, source: 'contracts\\BiatecClammPool.algo.ts:190', pc: [740, 741] },
        { teal: 447, source: 'contracts\\BiatecClammPool.algo.ts:192', pc: [742, 743] },
        { teal: 448, source: 'contracts\\BiatecClammPool.algo.ts:192', pc: [744, 745] },
        { teal: 449, source: 'contracts\\BiatecClammPool.algo.ts:192', pc: [746] },
        { teal: 452, source: 'contracts\\BiatecClammPool.algo.ts:191', errorMessage: 'E_CONFIG', pc: [747] },
        { teal: 456, source: 'contracts\\BiatecClammPool.algo.ts:195', pc: [748, 749] },
        { teal: 457, source: 'contracts\\BiatecClammPool.algo.ts:195', pc: [750, 751] },
        { teal: 458, source: 'contracts\\BiatecClammPool.algo.ts:195', pc: [752] },
        {
          teal: 461,
          source: 'contracts\\BiatecClammPool.algo.ts:195',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('s')",
          pc: [753],
        },
        { teal: 462, source: 'contracts\\BiatecClammPool.algo.ts:195', pc: [754, 755] },
        { teal: 466, source: 'contracts\\BiatecClammPool.algo.ts:196', pc: [756, 757] },
        { teal: 467, source: 'contracts\\BiatecClammPool.algo.ts:196', pc: [758] },
        { teal: 468, source: 'contracts\\BiatecClammPool.algo.ts:196', pc: [759] },
        { teal: 471, source: 'contracts\\BiatecClammPool.algo.ts:196', errorMessage: 'E_PAUSED', pc: [760] },
        { teal: 475, source: 'contracts\\BiatecClammPool.algo.ts:198', pc: [761, 762] },
        { teal: 476, source: 'contracts\\BiatecClammPool.algo.ts:198', pc: [763, 764] },
        { teal: 477, source: 'contracts\\BiatecClammPool.algo.ts:198', pc: [765] },
        { teal: 481, source: 'contracts\\BiatecClammPool.algo.ts:200', pc: [766, 767] },
        { teal: 482, source: 'contracts\\BiatecClammPool.algo.ts:200', pc: [768, 769] },
        { teal: 483, source: 'contracts\\BiatecClammPool.algo.ts:200', pc: [770] },
        { teal: 487, source: 'contracts\\BiatecClammPool.algo.ts:201', pc: [771, 772] },
        { teal: 488, source: 'contracts\\BiatecClammPool.algo.ts:201', pc: [773, 774] },
        { teal: 489, source: 'contracts\\BiatecClammPool.algo.ts:201', pc: [775] },
        { teal: 493, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [776, 777] },
        { teal: 494, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [778, 779] },
        { teal: 495, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [780] },
        { teal: 496, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [781] },
        { teal: 497, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [782] },
        { teal: 498, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [783] },
        { teal: 499, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [784] },
        { teal: 500, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [785] },
        { teal: 501, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [786] },
        { teal: 502, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [787] },
        {
          teal: 505,
          source: 'contracts\\BiatecClammPool.algo.ts:202',
          errorMessage: 'sqrt((priceMin as uint256) * s) overflowed 256 bits',
          pc: [788],
        },
        { teal: 506, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [789] },
        { teal: 507, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [790] },
        { teal: 508, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [791] },
        { teal: 509, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [792] },
        { teal: 510, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [793] },
        { teal: 511, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [794] },
        { teal: 512, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [795] },
        { teal: 513, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [796] },
        { teal: 514, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [797] },
        { teal: 515, source: 'contracts\\BiatecClammPool.algo.ts:202', pc: [798] },
        { teal: 519, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [799, 800] },
        { teal: 520, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [801, 802] },
        { teal: 521, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [803] },
        { teal: 522, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [804] },
        { teal: 523, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [805] },
        { teal: 524, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [806] },
        { teal: 525, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [807] },
        { teal: 526, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [808] },
        { teal: 527, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [809] },
        { teal: 528, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [810] },
        {
          teal: 531,
          source: 'contracts\\BiatecClammPool.algo.ts:203',
          errorMessage: 'sqrt((priceMax as uint256) * s) overflowed 256 bits',
          pc: [811],
        },
        { teal: 532, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [812] },
        { teal: 533, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [813] },
        { teal: 534, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [814] },
        { teal: 535, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [815] },
        { teal: 536, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [816] },
        { teal: 537, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [817] },
        { teal: 538, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [818] },
        { teal: 539, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [819] },
        { teal: 540, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [820] },
        { teal: 541, source: 'contracts\\BiatecClammPool.algo.ts:203', pc: [821] },
        { teal: 545, source: 'contracts\\BiatecClammPool.algo.ts:204', pc: [822] },
        { teal: 546, source: 'contracts\\BiatecClammPool.algo.ts:204', pc: [823, 824] },
        { teal: 547, source: 'contracts\\BiatecClammPool.algo.ts:204', pc: [825] },
        { teal: 551, source: 'contracts\\BiatecClammPool.algo.ts:205', pc: [826, 827] },
        { teal: 552, source: 'contracts\\BiatecClammPool.algo.ts:205', pc: [828, 829] },
        { teal: 553, source: 'contracts\\BiatecClammPool.algo.ts:205', pc: [830] },
        { teal: 557, source: 'contracts\\BiatecClammPool.algo.ts:206', pc: [831, 832] },
        { teal: 558, source: 'contracts\\BiatecClammPool.algo.ts:206', pc: [833, 834] },
        { teal: 559, source: 'contracts\\BiatecClammPool.algo.ts:206', pc: [835] },
        { teal: 563, source: 'contracts\\BiatecClammPool.algo.ts:208', pc: [836, 837] },
        { teal: 564, source: 'contracts\\BiatecClammPool.algo.ts:208', pc: [838, 839] },
        { teal: 565, source: 'contracts\\BiatecClammPool.algo.ts:208', pc: [840] },
        { teal: 569, source: 'contracts\\BiatecClammPool.algo.ts:209', pc: [841, 842] },
        { teal: 570, source: 'contracts\\BiatecClammPool.algo.ts:209', pc: [843, 844] },
        { teal: 571, source: 'contracts\\BiatecClammPool.algo.ts:209', pc: [845] },
        { teal: 575, source: 'contracts\\BiatecClammPool.algo.ts:210', pc: [846, 847] },
        { teal: 576, source: 'contracts\\BiatecClammPool.algo.ts:210', pc: [848, 849] },
        { teal: 577, source: 'contracts\\BiatecClammPool.algo.ts:210', pc: [850, 851] },
        { teal: 578, source: 'contracts\\BiatecClammPool.algo.ts:210', pc: [852, 853, 854] },
        { teal: 579, source: 'contracts\\BiatecClammPool.algo.ts:210', pc: [855] },
        { teal: 583, source: 'contracts\\BiatecClammPool.algo.ts:211', pc: [856, 857] },
        { teal: 584, source: 'contracts\\BiatecClammPool.algo.ts:211', pc: [858, 859] },
        { teal: 585, source: 'contracts\\BiatecClammPool.algo.ts:211', pc: [860] },
        { teal: 589, source: 'contracts\\BiatecClammPool.algo.ts:212', pc: [861, 862] },
        { teal: 590, source: 'contracts\\BiatecClammPool.algo.ts:212', pc: [863, 864, 865] },
        { teal: 594, source: 'contracts\\BiatecClammPool.algo.ts:213', pc: [866, 867] },
        { teal: 595, source: 'contracts\\BiatecClammPool.algo.ts:213', pc: [868, 869, 870] },
        { teal: 599, source: 'contracts\\BiatecClammPool.algo.ts:214', pc: [871, 872] },
        { teal: 600, source: 'contracts\\BiatecClammPool.algo.ts:214', pc: [873, 874] },
        { teal: 601, source: 'contracts\\BiatecClammPool.algo.ts:214', pc: [875] },
        { teal: 605, source: 'contracts\\BiatecClammPool.algo.ts:216', pc: [876, 877] },
        { teal: 606, source: 'contracts\\BiatecClammPool.algo.ts:216', pc: [878] },
        { teal: 609, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [879, 880] },
        { teal: 612, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [881, 882] },
        { teal: 613, source: 'contracts\\BiatecClammPool.algo.ts:161', pc: [883] },
        { teal: 618, source: 'contracts\\BiatecClammPool.algo.ts:221', pc: [884, 885, 886] },
        { teal: 619, source: 'contracts\\BiatecClammPool.algo.ts:221', pc: [887] },
        { teal: 620, source: 'contracts\\BiatecClammPool.algo.ts:221', pc: [888] },
        { teal: 626, source: 'contracts\\BiatecClammPool.algo.ts:221', pc: [889, 890, 891] },
        { teal: 629, source: 'contracts\\BiatecClammPool.algo.ts:221', pc: [892] },
        { teal: 630, source: 'contracts\\BiatecClammPool.algo.ts:221', pc: [893] },
        { teal: 634, source: 'contracts\\BiatecClammPool.algo.ts:222', pc: [894, 895] },
        { teal: 635, source: 'contracts\\BiatecClammPool.algo.ts:222', pc: [896] },
        { teal: 636, source: 'contracts\\BiatecClammPool.algo.ts:222', pc: [897] },
        { teal: 637, source: 'contracts\\BiatecClammPool.algo.ts:222', pc: [898] },
        { teal: 638, source: 'contracts\\BiatecClammPool.algo.ts:222', pc: [899] },
        { teal: 639, source: 'contracts\\BiatecClammPool.algo.ts:222', pc: [900] },
        { teal: 643, source: 'contracts\\BiatecClammPool.algo.ts:223', pc: [901, 902] },
        { teal: 644, source: 'contracts\\BiatecClammPool.algo.ts:223', pc: [903] },
        { teal: 645, source: 'contracts\\BiatecClammPool.algo.ts:223', pc: [904, 905] },
        { teal: 649, source: 'contracts\\BiatecClammPool.algo.ts:224', pc: [906, 907] },
        { teal: 650, source: 'contracts\\BiatecClammPool.algo.ts:224', pc: [908, 909] },
        { teal: 651, source: 'contracts\\BiatecClammPool.algo.ts:224', pc: [910] },
        {
          teal: 654,
          source: 'contracts\\BiatecClammPool.algo.ts:224',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('p')",
          pc: [911],
        },
        { teal: 655, source: 'contracts\\BiatecClammPool.algo.ts:224', pc: [912, 913] },
        { teal: 664, source: 'contracts\\BiatecClammPool.algo.ts:225', pc: [914] },
        { teal: 665, source: 'contracts\\BiatecClammPool.algo.ts:225', pc: [915, 916] },
        { teal: 666, source: 'contracts\\BiatecClammPool.algo.ts:225', pc: [917, 918] },
        { teal: 667, source: 'contracts\\BiatecClammPool.algo.ts:226', pc: [919, 920, 921, 922, 923, 924] },
        { teal: 668, source: 'contracts\\BiatecClammPool.algo.ts:226', pc: [925, 926] },
        { teal: 674, source: 'contracts\\BiatecClammPool.algo.ts:228', pc: [927] },
        { teal: 675, source: 'contracts\\BiatecClammPool.algo.ts:228', pc: [928, 929] },
        { teal: 679, source: 'contracts\\BiatecClammPool.algo.ts:229', pc: [930, 931] },
        { teal: 680, source: 'contracts\\BiatecClammPool.algo.ts:229', pc: [932, 933] },
        { teal: 683, source: 'contracts\\BiatecClammPool.algo.ts:225', pc: [934] },
        { teal: 687, source: 'contracts\\BiatecClammPool.algo.ts:231', pc: [935, 936] },
        { teal: 688, source: 'contracts\\BiatecClammPool.algo.ts:231', pc: [937] },
        { teal: 689, source: 'contracts\\BiatecClammPool.algo.ts:231', pc: [938, 939] },
        { teal: 690, source: 'contracts\\BiatecClammPool.algo.ts:231', pc: [940] },
        { teal: 691, source: 'contracts\\BiatecClammPool.algo.ts:231', pc: [941, 942] },
        { teal: 692, source: 'contracts\\BiatecClammPool.algo.ts:231', pc: [943] },
        { teal: 693, source: 'contracts\\BiatecClammPool.algo.ts:231', pc: [944] },
        { teal: 694, source: 'contracts\\BiatecClammPool.algo.ts:221', pc: [945] },
        { teal: 703, source: 'contracts\\BiatecClammPool.algo.ts:239', pc: [946, 947, 948] },
        { teal: 708, source: 'contracts\\BiatecClammPool.algo.ts:240', pc: [949, 950] },
        { teal: 709, source: 'contracts\\BiatecClammPool.algo.ts:240', pc: [951] },
        { teal: 710, source: 'contracts\\BiatecClammPool.algo.ts:240', pc: [952] },
        { teal: 711, source: 'contracts\\BiatecClammPool.algo.ts:240', pc: [953, 954, 955] },
        { teal: 720, source: 'contracts\\BiatecClammPool.algo.ts:241', pc: [956] },
        { teal: 721, source: 'contracts\\BiatecClammPool.algo.ts:241', pc: [957] },
        { teal: 722, source: 'contracts\\BiatecClammPool.algo.ts:241', pc: [958, 959] },
        { teal: 726, source: 'contracts\\BiatecClammPool.algo.ts:242', pc: [960, 961] },
        { teal: 727, source: 'contracts\\BiatecClammPool.algo.ts:242', pc: [962, 963] },
        { teal: 731, source: 'contracts\\BiatecClammPool.algo.ts:243', pc: [964, 965] },
        { teal: 732, source: 'contracts\\BiatecClammPool.algo.ts:243', pc: [966, 967] },
        { teal: 736, source: 'contracts\\BiatecClammPool.algo.ts:244', pc: [968] },
        { teal: 737, source: 'contracts\\BiatecClammPool.algo.ts:244', pc: [969, 970] },
        { teal: 740, source: 'contracts\\BiatecClammPool.algo.ts:241', pc: [971] },
        { teal: 741, source: 'contracts\\BiatecClammPool.algo.ts:240', pc: [972, 973, 974] },
        { teal: 751, source: 'contracts\\BiatecClammPool.algo.ts:247', pc: [975] },
        { teal: 752, source: 'contracts\\BiatecClammPool.algo.ts:247', pc: [976, 977] },
        { teal: 753, source: 'contracts\\BiatecClammPool.algo.ts:247', pc: [978, 979] },
        { teal: 757, source: 'contracts\\BiatecClammPool.algo.ts:248', pc: [980, 981] },
        { teal: 758, source: 'contracts\\BiatecClammPool.algo.ts:248', pc: [982, 983] },
        { teal: 762, source: 'contracts\\BiatecClammPool.algo.ts:249', pc: [984, 985] },
        { teal: 763, source: 'contracts\\BiatecClammPool.algo.ts:249', pc: [986, 987] },
        { teal: 767, source: 'contracts\\BiatecClammPool.algo.ts:250', pc: [988, 989] },
        { teal: 768, source: 'contracts\\BiatecClammPool.algo.ts:250', pc: [990, 991] },
        { teal: 772, source: 'contracts\\BiatecClammPool.algo.ts:251', pc: [992] },
        { teal: 773, source: 'contracts\\BiatecClammPool.algo.ts:251', pc: [993, 994] },
        { teal: 776, source: 'contracts\\BiatecClammPool.algo.ts:247', pc: [995] },
        { teal: 779, source: 'contracts\\BiatecClammPool.algo.ts:239', pc: [996] },
        { teal: 786, source: 'contracts\\BiatecClammPool.algo.ts:260', pc: [997, 998, 999] },
        { teal: 791, source: 'contracts\\BiatecClammPool.algo.ts:261', pc: [1000, 1001] },
        { teal: 792, source: 'contracts\\BiatecClammPool.algo.ts:261', pc: [1002] },
        { teal: 793, source: 'contracts\\BiatecClammPool.algo.ts:261', pc: [1003] },
        { teal: 794, source: 'contracts\\BiatecClammPool.algo.ts:261', pc: [1004, 1005, 1006] },
        { teal: 799, source: 'contracts\\BiatecClammPool.algo.ts:263', pc: [1007] },
        { teal: 800, source: 'contracts\\BiatecClammPool.algo.ts:263', pc: [1008, 1009] },
        { teal: 801, source: 'contracts\\BiatecClammPool.algo.ts:263', pc: [1010, 1011] },
        { teal: 802, source: 'contracts\\BiatecClammPool.algo.ts:263', pc: [1012, 1013, 1014] },
        { teal: 805, source: 'contracts\\BiatecClammPool.algo.ts:260', pc: [1015] },
        { teal: 814, source: 'contracts\\BiatecClammPool.algo.ts:272', pc: [1016, 1017, 1018] },
        { teal: 817, source: 'contracts\\BiatecClammPool.algo.ts:272', pc: [1019] },
        { teal: 818, source: 'contracts\\BiatecClammPool.algo.ts:272', pc: [1020] },
        { teal: 822, source: 'contracts\\BiatecClammPool.algo.ts:276', pc: [1021, 1022, 1023, 1024, 1025, 1026] },
        { teal: 823, source: 'contracts\\BiatecClammPool.algo.ts:276', pc: [1027, 1028] },
        { teal: 828, source: 'contracts\\BiatecClammPool.algo.ts:277', pc: [1029, 1030] },
        { teal: 829, source: 'contracts\\BiatecClammPool.algo.ts:277', pc: [1031] },
        { teal: 830, source: 'contracts\\BiatecClammPool.algo.ts:277', pc: [1032] },
        { teal: 831, source: 'contracts\\BiatecClammPool.algo.ts:277', pc: [1033, 1034, 1035] },
        { teal: 836, source: 'contracts\\BiatecClammPool.algo.ts:278', pc: [1036, 1037] },
        { teal: 837, source: 'contracts\\BiatecClammPool.algo.ts:278', pc: [1038, 1039] },
        { teal: 838, source: 'contracts\\BiatecClammPool.algo.ts:278', pc: [1040] },
        { teal: 839, source: 'contracts\\BiatecClammPool.algo.ts:278', pc: [1041, 1042] },
        { teal: 850, source: 'contracts\\BiatecClammPool.algo.ts:282', pc: [1043, 1044, 1045, 1046] },
        { teal: 851, source: 'contracts\\BiatecClammPool.algo.ts:285', pc: [1047, 1048] },
        { teal: 852, source: 'contracts\\BiatecClammPool.algo.ts:282', pc: [1049] },
        { teal: 853, source: 'contracts\\BiatecClammPool.algo.ts:286', pc: [1050, 1051, 1052] },
        { teal: 854, source: 'contracts\\BiatecClammPool.algo.ts:285', pc: [1053] },
        { teal: 855, source: 'contracts\\BiatecClammPool.algo.ts:287', pc: [1054, 1055] },
        { teal: 856, source: 'contracts\\BiatecClammPool.algo.ts:287', pc: [1056, 1057] },
        { teal: 857, source: 'contracts\\BiatecClammPool.algo.ts:287', pc: [1058] },
        { teal: 858, source: 'contracts\\BiatecClammPool.algo.ts:286', pc: [1059] },
        { teal: 859, source: 'contracts\\BiatecClammPool.algo.ts:281', pc: [1060, 1061] },
        { teal: 871, source: 'contracts\\BiatecClammPool.algo.ts:291', pc: [1062] },
        { teal: 872, source: 'contracts\\BiatecClammPool.algo.ts:291', pc: [1063, 1064] },
        { teal: 873, source: 'contracts\\BiatecClammPool.algo.ts:291', pc: [1065, 1066] },
        { teal: 877, source: 'contracts\\BiatecClammPool.algo.ts:292', pc: [1067, 1068] },
        { teal: 878, source: 'contracts\\BiatecClammPool.algo.ts:292', pc: [1069, 1070] },
        { teal: 882, source: 'contracts\\BiatecClammPool.algo.ts:293', pc: [1071, 1072, 1073, 1074, 1075] },
        { teal: 883, source: 'contracts\\BiatecClammPool.algo.ts:293', pc: [1076, 1077] },
        {
          teal: 887,
          source: 'contracts\\BiatecClammPool.algo.ts:295',
          pc: [1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088],
        },
        { teal: 888, source: 'contracts\\BiatecClammPool.algo.ts:295', pc: [1089, 1090] },
        { teal: 892, source: 'contracts\\BiatecClammPool.algo.ts:296', pc: [1091, 1092] },
        { teal: 893, source: 'contracts\\BiatecClammPool.algo.ts:296', pc: [1093, 1094] },
        { teal: 897, source: 'contracts\\BiatecClammPool.algo.ts:297', pc: [1095, 1096] },
        { teal: 898, source: 'contracts\\BiatecClammPool.algo.ts:297', pc: [1097, 1098] },
        { teal: 902, source: 'contracts\\BiatecClammPool.algo.ts:298', pc: [1099, 1100] },
        { teal: 903, source: 'contracts\\BiatecClammPool.algo.ts:298', pc: [1101, 1102] },
        { teal: 906, source: 'contracts\\BiatecClammPool.algo.ts:291', pc: [1103] },
        { teal: 907, source: 'contracts\\BiatecClammPool.algo.ts:291', pc: [1104, 1105] },
        { teal: 910, source: 'contracts\\BiatecClammPool.algo.ts:291', pc: [1106] },
        { teal: 911, source: 'contracts\\BiatecClammPool.algo.ts:291', pc: [1107, 1108] },
        { teal: 914, source: 'contracts\\BiatecClammPool.algo.ts:272', pc: [1109, 1110] },
        { teal: 917, source: 'contracts\\BiatecClammPool.algo.ts:272', pc: [1111, 1112] },
        { teal: 918, source: 'contracts\\BiatecClammPool.algo.ts:272', pc: [1113] },
        { teal: 922, source: 'contracts\\BiatecClammPool.algo.ts:302', pc: [1114, 1115, 1116] },
        { teal: 926, source: 'contracts\\BiatecClammPool.algo.ts:303', pc: [1117, 1118] },
        { teal: 927, source: 'contracts\\BiatecClammPool.algo.ts:303', pc: [1119, 1120] },
        { teal: 928, source: 'contracts\\BiatecClammPool.algo.ts:303', pc: [1121] },
        { teal: 929, source: 'contracts\\BiatecClammPool.algo.ts:303', pc: [1122] },
        {
          teal: 932,
          source: 'contracts\\BiatecClammPool.algo.ts:303',
          errorMessage: 'assetA does not match',
          pc: [1123],
        },
        { teal: 936, source: 'contracts\\BiatecClammPool.algo.ts:304', pc: [1124, 1125] },
        { teal: 937, source: 'contracts\\BiatecClammPool.algo.ts:304', pc: [1126, 1127] },
        { teal: 938, source: 'contracts\\BiatecClammPool.algo.ts:304', pc: [1128] },
        { teal: 939, source: 'contracts\\BiatecClammPool.algo.ts:304', pc: [1129] },
        {
          teal: 942,
          source: 'contracts\\BiatecClammPool.algo.ts:304',
          errorMessage: 'assetB does not match',
          pc: [1130],
        },
        { teal: 943, source: 'contracts\\BiatecClammPool.algo.ts:302', pc: [1131] },
        { teal: 947, source: 'contracts\\BiatecClammPool.algo.ts:307', pc: [1132, 1133, 1134] },
        { teal: 951, source: 'contracts\\BiatecClammPool.algo.ts:308', pc: [1135, 1136] },
        { teal: 952, source: 'contracts\\BiatecClammPool.algo.ts:308', pc: [1137, 1138] },
        { teal: 953, source: 'contracts\\BiatecClammPool.algo.ts:308', pc: [1139, 1140, 1141] },
        { teal: 957, source: 'contracts\\BiatecClammPool.algo.ts:309', pc: [1142, 1143] },
        { teal: 958, source: 'contracts\\BiatecClammPool.algo.ts:309', pc: [1144, 1145] },
        { teal: 959, source: 'contracts\\BiatecClammPool.algo.ts:309', pc: [1146] },
        { teal: 960, source: 'contracts\\BiatecClammPool.algo.ts:309', pc: [1147] },
        {
          teal: 963,
          source: 'contracts\\BiatecClammPool.algo.ts:309',
          errorMessage: 'assetLp does not match',
          pc: [1148],
        },
        { teal: 964, source: 'contracts\\BiatecClammPool.algo.ts:307', pc: [1149] },
        { teal: 969, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1150, 1151] },
        { teal: 972, source: 'contracts\\BiatecClammPool.algo.ts:330', pc: [1152, 1153, 1154] },
        { teal: 973, source: 'contracts\\BiatecClammPool.algo.ts:330', pc: [1155] },
        { teal: 976, source: 'contracts\\BiatecClammPool.algo.ts:329', pc: [1156, 1157, 1158] },
        { teal: 977, source: 'contracts\\BiatecClammPool.algo.ts:329', pc: [1159] },
        { teal: 980, source: 'contracts\\BiatecClammPool.algo.ts:328', pc: [1160, 1161, 1162] },
        { teal: 981, source: 'contracts\\BiatecClammPool.algo.ts:328', pc: [1163] },
        { teal: 984, source: 'contracts\\BiatecClammPool.algo.ts:327', pc: [1164, 1165] },
        { teal: 985, source: 'contracts\\BiatecClammPool.algo.ts:327', pc: [1166] },
        { teal: 986, source: 'contracts\\BiatecClammPool.algo.ts:327', pc: [1167] },
        { teal: 989, source: 'contracts\\BiatecClammPool.algo.ts:326', pc: [1168, 1169] },
        { teal: 990, source: 'contracts\\BiatecClammPool.algo.ts:326', pc: [1170, 1171] },
        { teal: 991, source: 'contracts\\BiatecClammPool.algo.ts:326', pc: [1172] },
        { teal: 994, source: 'contracts\\BiatecClammPool.algo.ts:325', pc: [1173, 1174, 1175] },
        { teal: 995, source: 'contracts\\BiatecClammPool.algo.ts:325', pc: [1176] },
        { teal: 998, source: 'contracts\\BiatecClammPool.algo.ts:324', pc: [1177, 1178, 1179] },
        { teal: 999, source: 'contracts\\BiatecClammPool.algo.ts:324', pc: [1180] },
        { teal: 1002, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1181, 1182, 1183] },
        { teal: 1003, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1184] },
        { teal: 1004, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1185] },
        { teal: 1005, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1186] },
        { teal: 1006, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1187] },
        { teal: 1007, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1188] },
        { teal: 1021, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1189, 1190, 1191] },
        { teal: 1024, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1192] },
        { teal: 1025, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [1193, 1194] },
        { teal: 1029, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1195] },
        { teal: 1030, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1196, 1197] },
        { teal: 1031, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1198, 1199] },
        { teal: 1032, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1200] },
        { teal: 1033, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1201, 1202] },
        { teal: 1034, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1203, 1204] },
        { teal: 1035, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1205] },
        { teal: 1036, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1206, 1207] },
        { teal: 1037, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1208, 1209] },
        { teal: 1038, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1210, 1211] },
        { teal: 1039, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1212, 1213] },
        { teal: 1040, source: 'contracts\\BiatecClammPool.algo.ts:332', pc: [1214] },
        { teal: 1044, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1215] },
        { teal: 1045, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1216, 1217] },
        { teal: 1046, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1218, 1219] },
        { teal: 1047, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1220] },
        { teal: 1048, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1221, 1222] },
        { teal: 1049, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1223, 1224] },
        { teal: 1050, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1225] },
        { teal: 1051, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1226, 1227] },
        { teal: 1052, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1228, 1229] },
        { teal: 1053, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1230, 1231] },
        { teal: 1054, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1232, 1233] },
        { teal: 1055, source: 'contracts\\BiatecClammPool.algo.ts:333', pc: [1234] },
        { teal: 1060, source: 'contracts\\BiatecClammPool.algo.ts:335', pc: [1235, 1236] },
        { teal: 1061, source: 'contracts\\BiatecClammPool.algo.ts:335', pc: [1237, 1238] },
        { teal: 1062, source: 'contracts\\BiatecClammPool.algo.ts:335', pc: [1239, 1240] },
        { teal: 1063, source: 'contracts\\BiatecClammPool.algo.ts:335', pc: [1241, 1242, 1243] },
        { teal: 1067, source: 'contracts\\BiatecClammPool.algo.ts:337', pc: [1244, 1245] },
        { teal: 1068, source: 'contracts\\BiatecClammPool.algo.ts:337', pc: [1246, 1247] },
        { teal: 1069, source: 'contracts\\BiatecClammPool.algo.ts:337', pc: [1248, 1249, 1250] },
        { teal: 1073, source: 'contracts\\BiatecClammPool.algo.ts:339', pc: [1251, 1252] },
        { teal: 1074, source: 'contracts\\BiatecClammPool.algo.ts:339', pc: [1253, 1254] },
        { teal: 1079, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1255, 1256] },
        { teal: 1080, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1257] },
        { teal: 1081, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1258] },
        { teal: 1082, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1259, 1260, 1261] },
        { teal: 1087, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1262, 1263] },
        { teal: 1088, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1264, 1265] },
        { teal: 1089, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1266] },
        { teal: 1090, source: 'contracts\\BiatecClammPool.algo.ts:340', pc: [1267, 1268] },
        { teal: 1095, source: 'contracts\\BiatecClammPool.algo.ts:342', pc: [1269, 1270] },
        { teal: 1096, source: 'contracts\\BiatecClammPool.algo.ts:342', pc: [1271, 1272] },
        { teal: 1097, source: 'contracts\\BiatecClammPool.algo.ts:342', pc: [1273, 1274] },
        { teal: 1098, source: 'contracts\\BiatecClammPool.algo.ts:342', pc: [1275] },
        { teal: 1099, source: 'contracts\\BiatecClammPool.algo.ts:342', pc: [1276] },
        { teal: 1100, source: 'contracts\\BiatecClammPool.algo.ts:342', pc: [1277] },
        { teal: 1101, source: 'contracts\\BiatecClammPool.algo.ts:342', pc: [1278, 1279] },
        { teal: 1105, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1280, 1281] },
        { teal: 1106, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1282, 1283] },
        { teal: 1107, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1284, 1285] },
        { teal: 1108, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1286, 1287] },
        { teal: 1109, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1288] },
        { teal: 1110, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1289] },
        { teal: 1111, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1290] },
        { teal: 1112, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1291] },
        { teal: 1113, source: 'contracts\\BiatecClammPool.algo.ts:344', pc: [1292, 1293] },
        { teal: 1117, source: 'contracts\\BiatecClammPool.algo.ts:346', pc: [1294, 1295] },
        { teal: 1118, source: 'contracts\\BiatecClammPool.algo.ts:346', pc: [1296, 1297] },
        { teal: 1119, source: 'contracts\\BiatecClammPool.algo.ts:346', pc: [1298] },
        { teal: 1120, source: 'contracts\\BiatecClammPool.algo.ts:346', pc: [1299] },
        { teal: 1121, source: 'contracts\\BiatecClammPool.algo.ts:346', pc: [1300, 1301] },
        { teal: 1125, source: 'contracts\\BiatecClammPool.algo.ts:348', pc: [1302, 1303] },
        { teal: 1126, source: 'contracts\\BiatecClammPool.algo.ts:348', pc: [1304, 1305] },
        { teal: 1127, source: 'contracts\\BiatecClammPool.algo.ts:348', pc: [1306] },
        { teal: 1128, source: 'contracts\\BiatecClammPool.algo.ts:348', pc: [1307, 1308] },
        { teal: 1129, source: 'contracts\\BiatecClammPool.algo.ts:348', pc: [1309] },
        { teal: 1130, source: 'contracts\\BiatecClammPool.algo.ts:348', pc: [1310, 1311] },
        { teal: 1134, source: 'contracts\\BiatecClammPool.algo.ts:349', pc: [1312, 1313] },
        { teal: 1135, source: 'contracts\\BiatecClammPool.algo.ts:349', pc: [1314, 1315] },
        { teal: 1136, source: 'contracts\\BiatecClammPool.algo.ts:349', pc: [1316] },
        { teal: 1137, source: 'contracts\\BiatecClammPool.algo.ts:349', pc: [1317, 1318] },
        { teal: 1138, source: 'contracts\\BiatecClammPool.algo.ts:349', pc: [1319] },
        { teal: 1139, source: 'contracts\\BiatecClammPool.algo.ts:349', pc: [1320, 1321] },
        { teal: 1144, source: 'contracts\\BiatecClammPool.algo.ts:351', pc: [1322, 1323] },
        { teal: 1145, source: 'contracts\\BiatecClammPool.algo.ts:351', pc: [1324] },
        { teal: 1146, source: 'contracts\\BiatecClammPool.algo.ts:351', pc: [1325] },
        { teal: 1147, source: 'contracts\\BiatecClammPool.algo.ts:351', pc: [1326, 1327, 1328] },
        { teal: 1152, source: 'contracts\\BiatecClammPool.algo.ts:352', pc: [1329, 1330] },
        { teal: 1153, source: 'contracts\\BiatecClammPool.algo.ts:352', pc: [1331, 1332] },
        { teal: 1154, source: 'contracts\\BiatecClammPool.algo.ts:352', pc: [1333, 1334] },
        { teal: 1155, source: 'contracts\\BiatecClammPool.algo.ts:352', pc: [1335] },
        { teal: 1156, source: 'contracts\\BiatecClammPool.algo.ts:352', pc: [1336] },
        { teal: 1157, source: 'contracts\\BiatecClammPool.algo.ts:351', pc: [1337, 1338, 1339] },
        { teal: 1162, source: 'contracts\\BiatecClammPool.algo.ts:354', pc: [1340, 1341] },
        { teal: 1163, source: 'contracts\\BiatecClammPool.algo.ts:354', pc: [1342, 1343] },
        { teal: 1164, source: 'contracts\\BiatecClammPool.algo.ts:354', pc: [1344] },
        { teal: 1165, source: 'contracts\\BiatecClammPool.algo.ts:354', pc: [1345] },
        { teal: 1166, source: 'contracts\\BiatecClammPool.algo.ts:354', pc: [1346] },
        { teal: 1172, source: 'contracts\\BiatecClammPool.algo.ts:357', pc: [1347, 1348] },
        { teal: 1173, source: 'contracts\\BiatecClammPool.algo.ts:357', pc: [1349, 1350] },
        { teal: 1174, source: 'contracts\\BiatecClammPool.algo.ts:357', pc: [1351, 1352] },
        { teal: 1175, source: 'contracts\\BiatecClammPool.algo.ts:357', pc: [1353] },
        { teal: 1176, source: 'contracts\\BiatecClammPool.algo.ts:357', pc: [1354, 1355, 1356] },
        { teal: 1181, source: 'contracts\\BiatecClammPool.algo.ts:358', pc: [1357, 1358] },
        { teal: 1182, source: 'contracts\\BiatecClammPool.algo.ts:358', pc: [1359] },
        { teal: 1183, source: 'contracts\\BiatecClammPool.algo.ts:358', pc: [1360, 1361] },
        { teal: 1184, source: 'contracts\\BiatecClammPool.algo.ts:358', pc: [1362, 1363] },
        { teal: 1185, source: 'contracts\\BiatecClammPool.algo.ts:358', pc: [1364] },
        {
          teal: 1188,
          source: 'contracts\\BiatecClammPool.algo.ts:358',
          errorMessage: 'failed to cast txAssetADeposit to axfer',
          pc: [1365],
        },
        { teal: 1189, source: 'contracts\\BiatecClammPool.algo.ts:358', pc: [1366, 1367] },
        { teal: 1198, source: 'contracts\\BiatecClammPool.algo.ts:359', pc: [1368, 1369] },
        { teal: 1199, source: 'contracts\\BiatecClammPool.algo.ts:359', pc: [1370, 1371] },
        { teal: 1200, source: 'contracts\\BiatecClammPool.algo.ts:359', pc: [1372, 1373] },
        { teal: 1201, source: 'contracts\\BiatecClammPool.algo.ts:359', pc: [1374] },
        {
          teal: 1204,
          source: 'contracts\\BiatecClammPool.algo.ts:359',
          errorMessage: 'transaction verification failed: {"txn":"xfer","field":"typeEnum","expected":"axfer"}',
          pc: [1375],
        },
        { teal: 1207, source: 'contracts\\BiatecClammPool.algo.ts:359', pc: [1376, 1377] },
        { teal: 1208, source: 'contracts\\BiatecClammPool.algo.ts:360', pc: [1378, 1379] },
        { teal: 1209, source: 'contracts\\BiatecClammPool.algo.ts:360', pc: [1380, 1381] },
        { teal: 1210, source: 'contracts\\BiatecClammPool.algo.ts:360', pc: [1382] },
        {
          teal: 1213,
          source: 'contracts\\BiatecClammPool.algo.ts:360',
          errorMessage:
            'transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}',
          pc: [1383],
        },
        { teal: 1216, source: 'contracts\\BiatecClammPool.algo.ts:359', pc: [1384, 1385] },
        { teal: 1217, source: 'contracts\\BiatecClammPool.algo.ts:361', pc: [1386, 1387] },
        { teal: 1218, source: 'contracts\\BiatecClammPool.algo.ts:361', pc: [1388, 1389] },
        { teal: 1219, source: 'contracts\\BiatecClammPool.algo.ts:361', pc: [1390] },
        {
          teal: 1222,
          source: 'contracts\\BiatecClammPool.algo.ts:361',
          errorMessage: 'transaction verification failed: {"txn":"xfer","field":"xferAsset","expected":"assetA"}',
          pc: [1391],
        },
        { teal: 1225, source: 'contracts\\BiatecClammPool.algo.ts:359', pc: [1392, 1393] },
        { teal: 1226, source: 'contracts\\BiatecClammPool.algo.ts:362', pc: [1394, 1395] },
        { teal: 1227, source: 'contracts\\BiatecClammPool.algo.ts:362', pc: [1396] },
        { teal: 1228, source: 'contracts\\BiatecClammPool.algo.ts:362', pc: [1397] },
        {
          teal: 1231,
          source: 'contracts\\BiatecClammPool.algo.ts:362',
          errorMessage:
            'transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThanEqualTo","expected":">=0"}',
          pc: [1398],
        },
        { teal: 1232, source: 'contracts\\BiatecClammPool.algo.ts:357', pc: [1399, 1400, 1401] },
        { teal: 1237, source: 'contracts\\BiatecClammPool.algo.ts:364', pc: [1402, 1403] },
        { teal: 1238, source: 'contracts\\BiatecClammPool.algo.ts:364', pc: [1404, 1405] },
        { teal: 1239, source: 'contracts\\BiatecClammPool.algo.ts:364', pc: [1406] },
        { teal: 1240, source: 'contracts\\BiatecClammPool.algo.ts:364', pc: [1407] },
        { teal: 1241, source: 'contracts\\BiatecClammPool.algo.ts:364', pc: [1408, 1409, 1410] },
        { teal: 1246, source: 'contracts\\BiatecClammPool.algo.ts:365', pc: [1411, 1412] },
        { teal: 1247, source: 'contracts\\BiatecClammPool.algo.ts:365', pc: [1413] },
        { teal: 1248, source: 'contracts\\BiatecClammPool.algo.ts:365', pc: [1414, 1415] },
        { teal: 1249, source: 'contracts\\BiatecClammPool.algo.ts:365', pc: [1416] },
        { teal: 1250, source: 'contracts\\BiatecClammPool.algo.ts:365', pc: [1417] },
        {
          teal: 1253,
          source: 'contracts\\BiatecClammPool.algo.ts:365',
          errorMessage: 'failed to cast txAssetADeposit to pay',
          pc: [1418],
        },
        { teal: 1254, source: 'contracts\\BiatecClammPool.algo.ts:365', pc: [1419, 1420] },
        { teal: 1262, source: 'contracts\\BiatecClammPool.algo.ts:366', pc: [1421, 1422] },
        { teal: 1263, source: 'contracts\\BiatecClammPool.algo.ts:366', pc: [1423, 1424] },
        { teal: 1264, source: 'contracts\\BiatecClammPool.algo.ts:366', pc: [1425] },
        { teal: 1265, source: 'contracts\\BiatecClammPool.algo.ts:366', pc: [1426] },
        {
          teal: 1268,
          source: 'contracts\\BiatecClammPool.algo.ts:366',
          errorMessage: 'transaction verification failed: {"txn":"payTx","field":"typeEnum","expected":"pay"}',
          pc: [1427],
        },
        { teal: 1271, source: 'contracts\\BiatecClammPool.algo.ts:366', pc: [1428, 1429] },
        { teal: 1272, source: 'contracts\\BiatecClammPool.algo.ts:367', pc: [1430, 1431] },
        { teal: 1273, source: 'contracts\\BiatecClammPool.algo.ts:367', pc: [1432, 1433] },
        { teal: 1274, source: 'contracts\\BiatecClammPool.algo.ts:367', pc: [1434] },
        {
          teal: 1277,
          source: 'contracts\\BiatecClammPool.algo.ts:367',
          errorMessage:
            'transaction verification failed: {"txn":"payTx","field":"receiver","expected":"this.app.address"}',
          pc: [1435],
        },
        { teal: 1280, source: 'contracts\\BiatecClammPool.algo.ts:366', pc: [1436, 1437] },
        { teal: 1281, source: 'contracts\\BiatecClammPool.algo.ts:368', pc: [1438, 1439] },
        { teal: 1282, source: 'contracts\\BiatecClammPool.algo.ts:368', pc: [1440] },
        { teal: 1283, source: 'contracts\\BiatecClammPool.algo.ts:368', pc: [1441] },
        {
          teal: 1286,
          source: 'contracts\\BiatecClammPool.algo.ts:368',
          errorMessage:
            'transaction verification failed: {"txn":"payTx","field":"amount","condition":"greaterThanEqualTo","expected":">=0"}',
          pc: [1442],
        },
        { teal: 1287, source: 'contracts\\BiatecClammPool.algo.ts:364', pc: [1443, 1444, 1445] },
        { teal: 1292, source: 'contracts\\BiatecClammPool.algo.ts:371', pc: [1446] },
        {
          teal: 1295,
          source: 'contracts\\BiatecClammPool.algo.ts:371',
          errorMessage: 'Unsupported tx type of the asset A',
          pc: [1447],
        },
        { teal: 1301, source: 'contracts\\BiatecClammPool.algo.ts:374', pc: [1448, 1449] },
        { teal: 1302, source: 'contracts\\BiatecClammPool.algo.ts:374', pc: [1450] },
        { teal: 1303, source: 'contracts\\BiatecClammPool.algo.ts:374', pc: [1451] },
        { teal: 1304, source: 'contracts\\BiatecClammPool.algo.ts:374', pc: [1452, 1453, 1454] },
        { teal: 1309, source: 'contracts\\BiatecClammPool.algo.ts:375', pc: [1455, 1456] },
        { teal: 1310, source: 'contracts\\BiatecClammPool.algo.ts:375', pc: [1457, 1458] },
        { teal: 1311, source: 'contracts\\BiatecClammPool.algo.ts:375', pc: [1459, 1460] },
        { teal: 1312, source: 'contracts\\BiatecClammPool.algo.ts:375', pc: [1461] },
        { teal: 1313, source: 'contracts\\BiatecClammPool.algo.ts:375', pc: [1462] },
        { teal: 1314, source: 'contracts\\BiatecClammPool.algo.ts:374', pc: [1463, 1464, 1465] },
        { teal: 1319, source: 'contracts\\BiatecClammPool.algo.ts:377', pc: [1466, 1467] },
        { teal: 1320, source: 'contracts\\BiatecClammPool.algo.ts:377', pc: [1468, 1469] },
        { teal: 1321, source: 'contracts\\BiatecClammPool.algo.ts:377', pc: [1470] },
        { teal: 1322, source: 'contracts\\BiatecClammPool.algo.ts:377', pc: [1471] },
        { teal: 1323, source: 'contracts\\BiatecClammPool.algo.ts:377', pc: [1472] },
        { teal: 1329, source: 'contracts\\BiatecClammPool.algo.ts:380', pc: [1473, 1474] },
        { teal: 1330, source: 'contracts\\BiatecClammPool.algo.ts:380', pc: [1475, 1476] },
        { teal: 1331, source: 'contracts\\BiatecClammPool.algo.ts:380', pc: [1477, 1478] },
        { teal: 1332, source: 'contracts\\BiatecClammPool.algo.ts:380', pc: [1479] },
        { teal: 1333, source: 'contracts\\BiatecClammPool.algo.ts:380', pc: [1480, 1481, 1482] },
        { teal: 1338, source: 'contracts\\BiatecClammPool.algo.ts:381', pc: [1483, 1484] },
        { teal: 1339, source: 'contracts\\BiatecClammPool.algo.ts:381', pc: [1485] },
        { teal: 1340, source: 'contracts\\BiatecClammPool.algo.ts:381', pc: [1486, 1487] },
        { teal: 1341, source: 'contracts\\BiatecClammPool.algo.ts:381', pc: [1488, 1489] },
        { teal: 1342, source: 'contracts\\BiatecClammPool.algo.ts:381', pc: [1490] },
        {
          teal: 1345,
          source: 'contracts\\BiatecClammPool.algo.ts:381',
          errorMessage: 'failed to cast txAssetBDeposit to axfer',
          pc: [1491],
        },
        { teal: 1346, source: 'contracts\\BiatecClammPool.algo.ts:381', pc: [1492, 1493] },
        { teal: 1355, source: 'contracts\\BiatecClammPool.algo.ts:382', pc: [1494, 1495] },
        { teal: 1356, source: 'contracts\\BiatecClammPool.algo.ts:382', pc: [1496, 1497] },
        { teal: 1357, source: 'contracts\\BiatecClammPool.algo.ts:382', pc: [1498, 1499] },
        { teal: 1358, source: 'contracts\\BiatecClammPool.algo.ts:382', pc: [1500] },
        {
          teal: 1361,
          source: 'contracts\\BiatecClammPool.algo.ts:382',
          errorMessage: 'transaction verification failed: {"txn":"xfer","field":"typeEnum","expected":"axfer"}',
          pc: [1501],
        },
        { teal: 1364, source: 'contracts\\BiatecClammPool.algo.ts:382', pc: [1502, 1503] },
        { teal: 1365, source: 'contracts\\BiatecClammPool.algo.ts:383', pc: [1504, 1505] },
        { teal: 1366, source: 'contracts\\BiatecClammPool.algo.ts:383', pc: [1506, 1507] },
        { teal: 1367, source: 'contracts\\BiatecClammPool.algo.ts:383', pc: [1508] },
        {
          teal: 1370,
          source: 'contracts\\BiatecClammPool.algo.ts:383',
          errorMessage:
            'transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}',
          pc: [1509],
        },
        { teal: 1373, source: 'contracts\\BiatecClammPool.algo.ts:382', pc: [1510, 1511] },
        { teal: 1374, source: 'contracts\\BiatecClammPool.algo.ts:384', pc: [1512, 1513] },
        { teal: 1375, source: 'contracts\\BiatecClammPool.algo.ts:384', pc: [1514, 1515] },
        { teal: 1376, source: 'contracts\\BiatecClammPool.algo.ts:384', pc: [1516] },
        {
          teal: 1379,
          source: 'contracts\\BiatecClammPool.algo.ts:384',
          errorMessage: 'transaction verification failed: {"txn":"xfer","field":"xferAsset","expected":"assetB"}',
          pc: [1517],
        },
        { teal: 1382, source: 'contracts\\BiatecClammPool.algo.ts:382', pc: [1518, 1519] },
        { teal: 1383, source: 'contracts\\BiatecClammPool.algo.ts:385', pc: [1520, 1521] },
        { teal: 1384, source: 'contracts\\BiatecClammPool.algo.ts:385', pc: [1522] },
        { teal: 1385, source: 'contracts\\BiatecClammPool.algo.ts:385', pc: [1523] },
        {
          teal: 1388,
          source: 'contracts\\BiatecClammPool.algo.ts:385',
          errorMessage:
            'transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThanEqualTo","expected":">=0"}',
          pc: [1524],
        },
        { teal: 1389, source: 'contracts\\BiatecClammPool.algo.ts:380', pc: [1525, 1526, 1527] },
        { teal: 1394, source: 'contracts\\BiatecClammPool.algo.ts:387', pc: [1528, 1529] },
        { teal: 1395, source: 'contracts\\BiatecClammPool.algo.ts:387', pc: [1530, 1531] },
        { teal: 1396, source: 'contracts\\BiatecClammPool.algo.ts:387', pc: [1532] },
        { teal: 1397, source: 'contracts\\BiatecClammPool.algo.ts:387', pc: [1533] },
        { teal: 1398, source: 'contracts\\BiatecClammPool.algo.ts:387', pc: [1534, 1535, 1536] },
        { teal: 1403, source: 'contracts\\BiatecClammPool.algo.ts:388', pc: [1537, 1538] },
        { teal: 1404, source: 'contracts\\BiatecClammPool.algo.ts:388', pc: [1539] },
        { teal: 1405, source: 'contracts\\BiatecClammPool.algo.ts:388', pc: [1540, 1541] },
        { teal: 1406, source: 'contracts\\BiatecClammPool.algo.ts:388', pc: [1542] },
        { teal: 1407, source: 'contracts\\BiatecClammPool.algo.ts:388', pc: [1543] },
        {
          teal: 1410,
          source: 'contracts\\BiatecClammPool.algo.ts:388',
          errorMessage: 'failed to cast txAssetBDeposit to pay',
          pc: [1544],
        },
        { teal: 1411, source: 'contracts\\BiatecClammPool.algo.ts:388', pc: [1545, 1546] },
        { teal: 1419, source: 'contracts\\BiatecClammPool.algo.ts:389', pc: [1547, 1548] },
        { teal: 1420, source: 'contracts\\BiatecClammPool.algo.ts:389', pc: [1549, 1550] },
        { teal: 1421, source: 'contracts\\BiatecClammPool.algo.ts:389', pc: [1551] },
        { teal: 1422, source: 'contracts\\BiatecClammPool.algo.ts:389', pc: [1552] },
        {
          teal: 1425,
          source: 'contracts\\BiatecClammPool.algo.ts:389',
          errorMessage: 'transaction verification failed: {"txn":"payTx","field":"typeEnum","expected":"pay"}',
          pc: [1553],
        },
        { teal: 1428, source: 'contracts\\BiatecClammPool.algo.ts:389', pc: [1554, 1555] },
        { teal: 1429, source: 'contracts\\BiatecClammPool.algo.ts:390', pc: [1556, 1557] },
        { teal: 1430, source: 'contracts\\BiatecClammPool.algo.ts:390', pc: [1558, 1559] },
        { teal: 1431, source: 'contracts\\BiatecClammPool.algo.ts:390', pc: [1560] },
        {
          teal: 1434,
          source: 'contracts\\BiatecClammPool.algo.ts:390',
          errorMessage:
            'transaction verification failed: {"txn":"payTx","field":"receiver","expected":"this.app.address"}',
          pc: [1561],
        },
        { teal: 1437, source: 'contracts\\BiatecClammPool.algo.ts:389', pc: [1562, 1563] },
        { teal: 1438, source: 'contracts\\BiatecClammPool.algo.ts:391', pc: [1564, 1565] },
        { teal: 1439, source: 'contracts\\BiatecClammPool.algo.ts:391', pc: [1566] },
        { teal: 1440, source: 'contracts\\BiatecClammPool.algo.ts:391', pc: [1567] },
        {
          teal: 1443,
          source: 'contracts\\BiatecClammPool.algo.ts:391',
          errorMessage:
            'transaction verification failed: {"txn":"payTx","field":"amount","condition":"greaterThanEqualTo","expected":">=0"}',
          pc: [1568],
        },
        { teal: 1444, source: 'contracts\\BiatecClammPool.algo.ts:387', pc: [1569, 1570, 1571] },
        { teal: 1449, source: 'contracts\\BiatecClammPool.algo.ts:394', pc: [1572] },
        {
          teal: 1452,
          source: 'contracts\\BiatecClammPool.algo.ts:394',
          errorMessage: 'Unsupported tx type of the asset B',
          pc: [1573],
        },
        { teal: 1458, source: 'contracts\\BiatecClammPool.algo.ts:399', pc: [1574, 1575] },
        { teal: 1459, source: 'contracts\\BiatecClammPool.algo.ts:399', pc: [1576] },
        { teal: 1460, source: 'contracts\\BiatecClammPool.algo.ts:399', pc: [1577, 1578] },
        { teal: 1461, source: 'contracts\\BiatecClammPool.algo.ts:399', pc: [1579] },
        { teal: 1462, source: 'contracts\\BiatecClammPool.algo.ts:399', pc: [1580] },
        { teal: 1463, source: 'contracts\\BiatecClammPool.algo.ts:399', pc: [1581, 1582, 1583] },
        { teal: 1468, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1584, 1585] },
        { teal: 1469, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1586, 1587] },
        { teal: 1470, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1588] },
        { teal: 1471, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1589] },
        { teal: 1472, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1590] },
        { teal: 1473, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1591] },
        {
          teal: 1476,
          source: 'contracts\\BiatecClammPool.algo.ts:400',
          errorMessage: 'assetLpDelicmalScale2Scale overflowed 256 bits',
          pc: [1592],
        },
        { teal: 1477, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1593] },
        { teal: 1478, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1594] },
        { teal: 1479, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1595] },
        { teal: 1480, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1596] },
        { teal: 1481, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1597] },
        { teal: 1482, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1598] },
        { teal: 1483, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1599] },
        { teal: 1484, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1600] },
        { teal: 1485, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1601] },
        { teal: 1486, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1602, 1603] },
        { teal: 1487, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1604] },
        { teal: 1488, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1605] },
        { teal: 1489, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1606] },
        { teal: 1490, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1607] },
        {
          teal: 1493,
          source: 'contracts\\BiatecClammPool.algo.ts:400',
          errorMessage: 'bDepositInBaseScale overflowed 256 bits',
          pc: [1608],
        },
        { teal: 1494, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1609] },
        { teal: 1495, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1610] },
        { teal: 1496, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1611] },
        { teal: 1497, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1612] },
        { teal: 1498, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1613] },
        { teal: 1499, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1614] },
        { teal: 1500, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1615] },
        { teal: 1501, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1616] },
        { teal: 1502, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1617] },
        { teal: 1503, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1618, 1619] },
        { teal: 1504, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1620] },
        { teal: 1505, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1621] },
        { teal: 1506, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1622] },
        { teal: 1507, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1623] },
        {
          teal: 1510,
          source: 'contracts\\BiatecClammPool.algo.ts:400',
          errorMessage: 'aDepositInBaseScale overflowed 256 bits',
          pc: [1624],
        },
        { teal: 1511, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1625] },
        { teal: 1512, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1626] },
        { teal: 1513, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1627] },
        { teal: 1514, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1628] },
        { teal: 1515, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1629] },
        { teal: 1516, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1630] },
        { teal: 1517, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1631] },
        { teal: 1518, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1632] },
        { teal: 1519, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1633] },
        { teal: 1520, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1634, 1635, 1636] },
        { teal: 1521, source: 'contracts\\BiatecClammPool.algo.ts:400', pc: [1637, 1638, 1639] },
        { teal: 1527, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1640] },
        { teal: 1528, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1641] },
        { teal: 1529, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1642, 1643] },
        { teal: 1530, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1644] },
        { teal: 1531, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1645] },
        { teal: 1532, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1646, 1647, 1648] },
        { teal: 1533, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1649, 1650] },
        { teal: 1534, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1651] },
        { teal: 1535, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1652, 1653] },
        { teal: 1536, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1654] },
        { teal: 1537, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1655] },
        { teal: 1540, source: 'contracts\\BiatecClammPool.algo.ts:405', pc: [1656, 1657, 1658] },
        { teal: 1550, source: 'contracts\\BiatecClammPool.algo.ts:414', pc: [1659, 1660] },
        { teal: 1551, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1661, 1662] },
        { teal: 1552, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1663] },
        { teal: 1553, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1664] },
        { teal: 1554, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1665] },
        { teal: 1555, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1666] },
        {
          teal: 1558,
          source: 'contracts\\BiatecClammPool.algo.ts:413',
          errorMessage: 'assetLpDelicmalScale2Scale overflowed 256 bits',
          pc: [1667],
        },
        { teal: 1559, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1668] },
        { teal: 1560, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1669] },
        { teal: 1561, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1670] },
        { teal: 1562, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1671] },
        { teal: 1563, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1672] },
        { teal: 1564, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1673] },
        { teal: 1565, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1674] },
        { teal: 1566, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1675] },
        { teal: 1567, source: 'contracts\\BiatecClammPool.algo.ts:413', pc: [1676] },
        { teal: 1568, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1677, 1678] },
        { teal: 1569, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1679] },
        { teal: 1570, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1680] },
        { teal: 1571, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1681] },
        { teal: 1572, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1682] },
        {
          teal: 1575,
          source: 'contracts\\BiatecClammPool.algo.ts:412',
          errorMessage: 'bDepositInBaseScale overflowed 256 bits',
          pc: [1683],
        },
        { teal: 1576, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1684] },
        { teal: 1577, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1685] },
        { teal: 1578, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1686] },
        { teal: 1579, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1687] },
        { teal: 1580, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1688] },
        { teal: 1581, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1689] },
        { teal: 1582, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1690] },
        { teal: 1583, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1691] },
        { teal: 1584, source: 'contracts\\BiatecClammPool.algo.ts:412', pc: [1692] },
        { teal: 1585, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1693, 1694] },
        { teal: 1586, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1695] },
        { teal: 1587, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1696] },
        { teal: 1588, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1697] },
        { teal: 1589, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1698] },
        {
          teal: 1592,
          source: 'contracts\\BiatecClammPool.algo.ts:411',
          errorMessage: 'aDepositInBaseScale overflowed 256 bits',
          pc: [1699],
        },
        { teal: 1593, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1700] },
        { teal: 1594, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1701] },
        { teal: 1595, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1702] },
        { teal: 1596, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1703] },
        { teal: 1597, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1704] },
        { teal: 1598, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1705] },
        { teal: 1599, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1706] },
        { teal: 1600, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1707] },
        { teal: 1601, source: 'contracts\\BiatecClammPool.algo.ts:411', pc: [1708] },
        { teal: 1602, source: 'contracts\\BiatecClammPool.algo.ts:410', pc: [1709, 1710, 1711] },
        { teal: 1603, source: 'contracts\\BiatecClammPool.algo.ts:410', pc: [1712, 1713] },
        { teal: 1613, source: 'contracts\\BiatecClammPool.algo.ts:422', pc: [1714, 1715] },
        { teal: 1614, source: 'contracts\\BiatecClammPool.algo.ts:422', pc: [1716] },
        { teal: 1615, source: 'contracts\\BiatecClammPool.algo.ts:421', pc: [1717, 1718] },
        { teal: 1616, source: 'contracts\\BiatecClammPool.algo.ts:421', pc: [1719] },
        { teal: 1617, source: 'contracts\\BiatecClammPool.algo.ts:420', pc: [1720, 1721] },
        { teal: 1618, source: 'contracts\\BiatecClammPool.algo.ts:420', pc: [1722] },
        { teal: 1619, source: 'contracts\\BiatecClammPool.algo.ts:419', pc: [1723, 1724] },
        { teal: 1620, source: 'contracts\\BiatecClammPool.algo.ts:419', pc: [1725] },
        { teal: 1621, source: 'contracts\\BiatecClammPool.algo.ts:418', pc: [1726] },
        { teal: 1622, source: 'contracts\\BiatecClammPool.algo.ts:418', pc: [1727] },
        { teal: 1623, source: 'contracts\\BiatecClammPool.algo.ts:417', pc: [1728, 1729, 1730] },
        { teal: 1624, source: 'contracts\\BiatecClammPool.algo.ts:417', pc: [1731, 1732] },
        { teal: 1628, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1733, 1734] },
        { teal: 1629, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1735, 1736] },
        { teal: 1630, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1737] },
        { teal: 1631, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1738] },
        { teal: 1632, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1739, 1740] },
        { teal: 1633, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1741] },
        {
          teal: 1636,
          source: 'contracts\\BiatecClammPool.algo.ts:425',
          errorMessage: 'newPrice as uint64 overflowed 64 bits',
          pc: [1742],
        },
        { teal: 1637, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1743, 1744] },
        { teal: 1638, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1745] },
        { teal: 1639, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1746] },
        { teal: 1640, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1747] },
        { teal: 1641, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1748] },
        { teal: 1642, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1749, 1750] },
        { teal: 1643, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1751] },
        { teal: 1644, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1752] },
        { teal: 1645, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1753] },
        { teal: 1646, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1754] },
        { teal: 1647, source: 'contracts\\BiatecClammPool.algo.ts:425', pc: [1755] },
        { teal: 1651, source: 'contracts\\BiatecClammPool.algo.ts:426', pc: [1756, 1757] },
        { teal: 1652, source: 'contracts\\BiatecClammPool.algo.ts:426', pc: [1758, 1759, 1760] },
        { teal: 1662, source: 'contracts\\BiatecClammPool.algo.ts:437', pc: [1761, 1762] },
        { teal: 1663, source: 'contracts\\BiatecClammPool.algo.ts:437', pc: [1763] },
        { teal: 1664, source: 'contracts\\BiatecClammPool.algo.ts:436', pc: [1764] },
        { teal: 1665, source: 'contracts\\BiatecClammPool.algo.ts:436', pc: [1765] },
        { teal: 1666, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1766, 1767] },
        { teal: 1667, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1768] },
        { teal: 1668, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1769] },
        { teal: 1669, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1770] },
        { teal: 1670, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1771] },
        {
          teal: 1673,
          source: 'contracts\\BiatecClammPool.algo.ts:435',
          errorMessage: 'bDepositInBaseScale overflowed 256 bits',
          pc: [1772],
        },
        { teal: 1674, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1773] },
        { teal: 1675, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1774] },
        { teal: 1676, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1775] },
        { teal: 1677, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1776] },
        { teal: 1678, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1777] },
        { teal: 1679, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1778] },
        { teal: 1680, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1779] },
        { teal: 1681, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1780] },
        { teal: 1682, source: 'contracts\\BiatecClammPool.algo.ts:435', pc: [1781] },
        { teal: 1683, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1782, 1783] },
        { teal: 1684, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1784] },
        { teal: 1685, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1785] },
        { teal: 1686, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1786] },
        { teal: 1687, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1787] },
        {
          teal: 1690,
          source: 'contracts\\BiatecClammPool.algo.ts:434',
          errorMessage: 'aDepositInBaseScale overflowed 256 bits',
          pc: [1788],
        },
        { teal: 1691, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1789] },
        { teal: 1692, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1790] },
        { teal: 1693, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1791] },
        { teal: 1694, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1792] },
        { teal: 1695, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1793] },
        { teal: 1696, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1794] },
        { teal: 1697, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1795] },
        { teal: 1698, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1796] },
        { teal: 1699, source: 'contracts\\BiatecClammPool.algo.ts:434', pc: [1797] },
        { teal: 1700, source: 'contracts\\BiatecClammPool.algo.ts:433', pc: [1798, 1799, 1800] },
        { teal: 1701, source: 'contracts\\BiatecClammPool.algo.ts:433', pc: [1801, 1802] },
        { teal: 1710, source: 'contracts\\BiatecClammPool.algo.ts:444', pc: [1803, 1804] },
        { teal: 1711, source: 'contracts\\BiatecClammPool.algo.ts:444', pc: [1805] },
        { teal: 1712, source: 'contracts\\BiatecClammPool.algo.ts:443', pc: [1806] },
        { teal: 1713, source: 'contracts\\BiatecClammPool.algo.ts:443', pc: [1807] },
        { teal: 1714, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1808, 1809] },
        { teal: 1715, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1810] },
        { teal: 1716, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1811] },
        { teal: 1717, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1812] },
        { teal: 1718, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1813] },
        {
          teal: 1721,
          source: 'contracts\\BiatecClammPool.algo.ts:442',
          errorMessage: 'bDepositInBaseScale overflowed 256 bits',
          pc: [1814],
        },
        { teal: 1722, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1815] },
        { teal: 1723, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1816] },
        { teal: 1724, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1817] },
        { teal: 1725, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1818] },
        { teal: 1726, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1819] },
        { teal: 1727, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1820] },
        { teal: 1728, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1821] },
        { teal: 1729, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1822] },
        { teal: 1730, source: 'contracts\\BiatecClammPool.algo.ts:442', pc: [1823] },
        { teal: 1731, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1824, 1825] },
        { teal: 1732, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1826] },
        { teal: 1733, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1827] },
        { teal: 1734, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1828] },
        { teal: 1735, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1829] },
        {
          teal: 1738,
          source: 'contracts\\BiatecClammPool.algo.ts:441',
          errorMessage: 'aDepositInBaseScale overflowed 256 bits',
          pc: [1830],
        },
        { teal: 1739, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1831] },
        { teal: 1740, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1832] },
        { teal: 1741, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1833] },
        { teal: 1742, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1834] },
        { teal: 1743, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1835] },
        { teal: 1744, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1836] },
        { teal: 1745, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1837] },
        { teal: 1746, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1838] },
        { teal: 1747, source: 'contracts\\BiatecClammPool.algo.ts:441', pc: [1839] },
        { teal: 1748, source: 'contracts\\BiatecClammPool.algo.ts:440', pc: [1840, 1841, 1842] },
        { teal: 1749, source: 'contracts\\BiatecClammPool.algo.ts:440', pc: [1843, 1844] },
        { teal: 1753, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1845, 1846] },
        { teal: 1754, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1847, 1848] },
        { teal: 1755, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1849] },
        { teal: 1756, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1850] },
        { teal: 1757, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1851] },
        { teal: 1758, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1852, 1853] },
        { teal: 1759, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1854] },
        {
          teal: 1762,
          source: 'contracts\\BiatecClammPool.algo.ts:446',
          errorMessage: '(a / assetADelicmalScale2Scale) as uint64 overflowed 64 bits',
          pc: [1855],
        },
        { teal: 1763, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1856, 1857] },
        { teal: 1764, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1858] },
        { teal: 1765, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1859] },
        { teal: 1766, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1860] },
        { teal: 1767, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1861] },
        { teal: 1768, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1862, 1863] },
        { teal: 1769, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1864] },
        { teal: 1770, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1865] },
        { teal: 1771, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1866] },
        { teal: 1772, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1867] },
        { teal: 1773, source: 'contracts\\BiatecClammPool.algo.ts:446', pc: [1868, 1869] },
        { teal: 1777, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1870, 1871] },
        { teal: 1778, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1872, 1873] },
        { teal: 1779, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1874] },
        { teal: 1780, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1875] },
        { teal: 1781, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1876] },
        { teal: 1782, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1877, 1878] },
        { teal: 1783, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1879] },
        {
          teal: 1786,
          source: 'contracts\\BiatecClammPool.algo.ts:447',
          errorMessage: '(b / assetBDelicmalScale2Scale) as uint64 overflowed 64 bits',
          pc: [1880],
        },
        { teal: 1787, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1881, 1882] },
        { teal: 1788, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1883] },
        { teal: 1789, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1884] },
        { teal: 1790, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1885] },
        { teal: 1791, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1886] },
        { teal: 1792, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1887, 1888] },
        { teal: 1793, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1889] },
        { teal: 1794, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1890] },
        { teal: 1795, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1891] },
        { teal: 1796, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1892] },
        { teal: 1797, source: 'contracts\\BiatecClammPool.algo.ts:447', pc: [1893, 1894] },
        { teal: 1802, source: 'contracts\\BiatecClammPool.algo.ts:449', pc: [1895, 1896] },
        { teal: 1803, source: 'contracts\\BiatecClammPool.algo.ts:449', pc: [1897, 1898] },
        { teal: 1804, source: 'contracts\\BiatecClammPool.algo.ts:449', pc: [1899, 1900] },
        { teal: 1805, source: 'contracts\\BiatecClammPool.algo.ts:449', pc: [1901] },
        { teal: 1806, source: 'contracts\\BiatecClammPool.algo.ts:449', pc: [1902, 1903, 1904] },
        { teal: 1812, source: 'contracts\\BiatecClammPool.algo.ts:456', pc: [1905, 1906] },
        { teal: 1813, source: 'contracts\\BiatecClammPool.algo.ts:456', pc: [1907, 1908] },
        { teal: 1814, source: 'contracts\\BiatecClammPool.algo.ts:456', pc: [1909, 1910] },
        { teal: 1815, source: 'contracts\\BiatecClammPool.algo.ts:456', pc: [1911] },
        { teal: 1816, source: 'contracts\\BiatecClammPool.algo.ts:456', pc: [1912, 1913, 1914] },
        { teal: 1821, source: 'contracts\\BiatecClammPool.algo.ts:457', pc: [1915] },
        {
          teal: 1824,
          source: 'contracts\\BiatecClammPool.algo.ts:457',
          errorMessage: 'Dominant is asset B',
          pc: [1916],
        },
        { teal: 1830, source: 'contracts\\BiatecClammPool.algo.ts:459', pc: [1917, 1918] },
        { teal: 1831, source: 'contracts\\BiatecClammPool.algo.ts:459', pc: [1919, 1920] },
        { teal: 1832, source: 'contracts\\BiatecClammPool.algo.ts:459', pc: [1921, 1922] },
        { teal: 1833, source: 'contracts\\BiatecClammPool.algo.ts:459', pc: [1923] },
        { teal: 1834, source: 'contracts\\BiatecClammPool.algo.ts:459', pc: [1924] },
        { teal: 1835, source: 'contracts\\BiatecClammPool.algo.ts:459', pc: [1925] },
        { teal: 1836, source: 'contracts\\BiatecClammPool.algo.ts:459', pc: [1926, 1927, 1928] },
        { teal: 1841, source: 'contracts\\BiatecClammPool.algo.ts:461', pc: [1929, 1930] },
        { teal: 1842, source: 'contracts\\BiatecClammPool.algo.ts:461', pc: [1931, 1932] },
        { teal: 1843, source: 'contracts\\BiatecClammPool.algo.ts:461', pc: [1933, 1934] },
        { teal: 1844, source: 'contracts\\BiatecClammPool.algo.ts:461', pc: [1935] },
        { teal: 1845, source: 'contracts\\BiatecClammPool.algo.ts:461', pc: [1936, 1937] },
        { teal: 1846, source: 'contracts\\BiatecClammPool.algo.ts:461', pc: [1938, 1939] },
        { teal: 1847, source: 'contracts\\BiatecClammPool.algo.ts:461', pc: [1940, 1941, 1942] },
        { teal: 1852, source: 'contracts\\BiatecClammPool.algo.ts:463', pc: [1943, 1944] },
        { teal: 1853, source: 'contracts\\BiatecClammPool.algo.ts:463', pc: [1945, 1946] },
        { teal: 1857, source: 'contracts\\BiatecClammPool.algo.ts:464', pc: [1947, 1948] },
        { teal: 1858, source: 'contracts\\BiatecClammPool.algo.ts:464', pc: [1949] },
        { teal: 1859, source: 'contracts\\BiatecClammPool.algo.ts:464', pc: [1950, 1951] },
        { teal: 1860, source: 'contracts\\BiatecClammPool.algo.ts:464', pc: [1952] },
        { teal: 1861, source: 'contracts\\BiatecClammPool.algo.ts:464', pc: [1953, 1954] },
        { teal: 1865, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1955, 1956] },
        { teal: 1866, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1957, 1958] },
        { teal: 1867, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1959] },
        { teal: 1868, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1960] },
        { teal: 1869, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1961] },
        { teal: 1870, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1962] },
        {
          teal: 1873,
          source: 'contracts\\BiatecClammPool.algo.ts:465',
          errorMessage: 'assetLpDelicmalScale2Scale overflowed 256 bits',
          pc: [1963],
        },
        { teal: 1874, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1964] },
        { teal: 1875, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1965] },
        { teal: 1876, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1966] },
        { teal: 1877, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1967] },
        { teal: 1878, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1968] },
        { teal: 1879, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1969] },
        { teal: 1880, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1970] },
        { teal: 1881, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1971] },
        { teal: 1882, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1972] },
        { teal: 1883, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1973, 1974] },
        { teal: 1884, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1975] },
        { teal: 1885, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1976] },
        { teal: 1886, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1977] },
        { teal: 1887, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1978] },
        {
          teal: 1890,
          source: 'contracts\\BiatecClammPool.algo.ts:465',
          errorMessage: 'realAssetBDeposit overflowed 256 bits',
          pc: [1979],
        },
        { teal: 1891, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1980] },
        { teal: 1892, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1981] },
        { teal: 1893, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1982] },
        { teal: 1894, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1983] },
        { teal: 1895, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1984] },
        { teal: 1896, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1985] },
        { teal: 1897, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1986] },
        { teal: 1898, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1987] },
        { teal: 1899, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1988] },
        { teal: 1900, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1989, 1990] },
        { teal: 1901, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1991] },
        { teal: 1902, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1992] },
        { teal: 1903, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1993] },
        { teal: 1904, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1994] },
        {
          teal: 1907,
          source: 'contracts\\BiatecClammPool.algo.ts:465',
          errorMessage: 'realAssetADeposit overflowed 256 bits',
          pc: [1995],
        },
        { teal: 1908, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1996] },
        { teal: 1909, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1997] },
        { teal: 1910, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1998] },
        { teal: 1911, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [1999] },
        { teal: 1912, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [2000] },
        { teal: 1913, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [2001] },
        { teal: 1914, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [2002] },
        { teal: 1915, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [2003] },
        { teal: 1916, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [2004] },
        { teal: 1917, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [2005, 2006, 2007] },
        { teal: 1918, source: 'contracts\\BiatecClammPool.algo.ts:465', pc: [2008, 2009, 2010] },
        { teal: 1924, source: 'contracts\\BiatecClammPool.algo.ts:468', pc: [2011, 2012] },
        { teal: 1925, source: 'contracts\\BiatecClammPool.algo.ts:468', pc: [2013, 2014] },
        { teal: 1926, source: 'contracts\\BiatecClammPool.algo.ts:468', pc: [2015, 2016] },
        { teal: 1927, source: 'contracts\\BiatecClammPool.algo.ts:468', pc: [2017] },
        { teal: 1928, source: 'contracts\\BiatecClammPool.algo.ts:468', pc: [2018, 2019, 2020] },
        { teal: 1934, source: 'contracts\\BiatecClammPool.algo.ts:475', pc: [2021, 2022] },
        { teal: 1935, source: 'contracts\\BiatecClammPool.algo.ts:475', pc: [2023, 2024] },
        { teal: 1936, source: 'contracts\\BiatecClammPool.algo.ts:475', pc: [2025, 2026] },
        { teal: 1937, source: 'contracts\\BiatecClammPool.algo.ts:475', pc: [2027] },
        { teal: 1938, source: 'contracts\\BiatecClammPool.algo.ts:475', pc: [2028, 2029, 2030] },
        { teal: 1943, source: 'contracts\\BiatecClammPool.algo.ts:476', pc: [2031] },
        {
          teal: 1946,
          source: 'contracts\\BiatecClammPool.algo.ts:476',
          errorMessage: 'Dominant is asset A',
          pc: [2032],
        },
        { teal: 1952, source: 'contracts\\BiatecClammPool.algo.ts:478', pc: [2033, 2034] },
        { teal: 1953, source: 'contracts\\BiatecClammPool.algo.ts:478', pc: [2035, 2036] },
        { teal: 1954, source: 'contracts\\BiatecClammPool.algo.ts:478', pc: [2037, 2038] },
        { teal: 1955, source: 'contracts\\BiatecClammPool.algo.ts:478', pc: [2039] },
        { teal: 1956, source: 'contracts\\BiatecClammPool.algo.ts:478', pc: [2040] },
        { teal: 1957, source: 'contracts\\BiatecClammPool.algo.ts:478', pc: [2041] },
        { teal: 1958, source: 'contracts\\BiatecClammPool.algo.ts:478', pc: [2042, 2043, 2044] },
        { teal: 1963, source: 'contracts\\BiatecClammPool.algo.ts:480', pc: [2045, 2046] },
        { teal: 1964, source: 'contracts\\BiatecClammPool.algo.ts:480', pc: [2047, 2048] },
        { teal: 1965, source: 'contracts\\BiatecClammPool.algo.ts:480', pc: [2049, 2050] },
        { teal: 1966, source: 'contracts\\BiatecClammPool.algo.ts:480', pc: [2051] },
        { teal: 1967, source: 'contracts\\BiatecClammPool.algo.ts:480', pc: [2052, 2053] },
        { teal: 1968, source: 'contracts\\BiatecClammPool.algo.ts:480', pc: [2054, 2055] },
        { teal: 1969, source: 'contracts\\BiatecClammPool.algo.ts:480', pc: [2056, 2057, 2058] },
        { teal: 1974, source: 'contracts\\BiatecClammPool.algo.ts:482', pc: [2059, 2060] },
        { teal: 1975, source: 'contracts\\BiatecClammPool.algo.ts:482', pc: [2061] },
        { teal: 1976, source: 'contracts\\BiatecClammPool.algo.ts:482', pc: [2062, 2063] },
        { teal: 1977, source: 'contracts\\BiatecClammPool.algo.ts:482', pc: [2064] },
        { teal: 1978, source: 'contracts\\BiatecClammPool.algo.ts:482', pc: [2065, 2066] },
        { teal: 1982, source: 'contracts\\BiatecClammPool.algo.ts:483', pc: [2067, 2068] },
        { teal: 1983, source: 'contracts\\BiatecClammPool.algo.ts:483', pc: [2069, 2070] },
        { teal: 1987, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2071, 2072] },
        { teal: 1988, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2073, 2074] },
        { teal: 1989, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2075] },
        { teal: 1990, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2076] },
        { teal: 1991, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2077] },
        { teal: 1992, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2078] },
        {
          teal: 1995,
          source: 'contracts\\BiatecClammPool.algo.ts:484',
          errorMessage: 'assetLpDelicmalScale2Scale overflowed 256 bits',
          pc: [2079],
        },
        { teal: 1996, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2080] },
        { teal: 1997, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2081] },
        { teal: 1998, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2082] },
        { teal: 1999, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2083] },
        { teal: 2000, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2084] },
        { teal: 2001, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2085] },
        { teal: 2002, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2086] },
        { teal: 2003, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2087] },
        { teal: 2004, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2088] },
        { teal: 2005, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2089, 2090] },
        { teal: 2006, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2091] },
        { teal: 2007, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2092] },
        { teal: 2008, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2093] },
        { teal: 2009, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2094] },
        {
          teal: 2012,
          source: 'contracts\\BiatecClammPool.algo.ts:484',
          errorMessage: 'realAssetBDeposit overflowed 256 bits',
          pc: [2095],
        },
        { teal: 2013, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2096] },
        { teal: 2014, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2097] },
        { teal: 2015, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2098] },
        { teal: 2016, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2099] },
        { teal: 2017, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2100] },
        { teal: 2018, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2101] },
        { teal: 2019, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2102] },
        { teal: 2020, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2103] },
        { teal: 2021, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2104] },
        { teal: 2022, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2105, 2106] },
        { teal: 2023, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2107] },
        { teal: 2024, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2108] },
        { teal: 2025, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2109] },
        { teal: 2026, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2110] },
        {
          teal: 2029,
          source: 'contracts\\BiatecClammPool.algo.ts:484',
          errorMessage: 'realAssetADeposit overflowed 256 bits',
          pc: [2111],
        },
        { teal: 2030, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2112] },
        { teal: 2031, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2113] },
        { teal: 2032, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2114] },
        { teal: 2033, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2115] },
        { teal: 2034, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2116] },
        { teal: 2035, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2117] },
        { teal: 2036, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2118] },
        { teal: 2037, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2119] },
        { teal: 2038, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2120] },
        { teal: 2039, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2121, 2122, 2123] },
        { teal: 2040, source: 'contracts\\BiatecClammPool.algo.ts:484', pc: [2124, 2125, 2126] },
        { teal: 2046, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2127, 2128] },
        { teal: 2047, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2129, 2130] },
        { teal: 2048, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2131, 2132] },
        { teal: 2049, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2133] },
        { teal: 2050, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2134] },
        { teal: 2051, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2135, 2136, 2137] },
        { teal: 2052, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2138, 2139] },
        { teal: 2053, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2140, 2141] },
        { teal: 2054, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2142, 2143] },
        { teal: 2055, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2144] },
        { teal: 2056, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2145] },
        { teal: 2059, source: 'contracts\\BiatecClammPool.algo.ts:486', pc: [2146, 2147, 2148] },
        { teal: 2064, source: 'contracts\\BiatecClammPool.algo.ts:487', pc: [2149, 2150] },
        { teal: 2065, source: 'contracts\\BiatecClammPool.algo.ts:487', pc: [2151, 2152] },
        { teal: 2069, source: 'contracts\\BiatecClammPool.algo.ts:488', pc: [2153, 2154] },
        { teal: 2070, source: 'contracts\\BiatecClammPool.algo.ts:488', pc: [2155, 2156] },
        { teal: 2074, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2157, 2158] },
        { teal: 2075, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2159, 2160] },
        { teal: 2076, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2161] },
        { teal: 2077, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2162] },
        { teal: 2078, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2163] },
        { teal: 2079, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2164] },
        {
          teal: 2082,
          source: 'contracts\\BiatecClammPool.algo.ts:489',
          errorMessage: 'assetLpDelicmalScale2Scale overflowed 256 bits',
          pc: [2165],
        },
        { teal: 2083, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2166] },
        { teal: 2084, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2167] },
        { teal: 2085, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2168] },
        { teal: 2086, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2169] },
        { teal: 2087, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2170] },
        { teal: 2088, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2171] },
        { teal: 2089, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2172] },
        { teal: 2090, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2173] },
        { teal: 2091, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2174] },
        { teal: 2092, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2175, 2176] },
        { teal: 2093, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2177] },
        { teal: 2094, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2178] },
        { teal: 2095, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2179] },
        { teal: 2096, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2180] },
        {
          teal: 2099,
          source: 'contracts\\BiatecClammPool.algo.ts:489',
          errorMessage: 'realAssetBDeposit overflowed 256 bits',
          pc: [2181],
        },
        { teal: 2100, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2182] },
        { teal: 2101, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2183] },
        { teal: 2102, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2184] },
        { teal: 2103, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2185] },
        { teal: 2104, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2186] },
        { teal: 2105, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2187] },
        { teal: 2106, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2188] },
        { teal: 2107, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2189] },
        { teal: 2108, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2190] },
        { teal: 2109, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2191, 2192] },
        { teal: 2110, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2193] },
        { teal: 2111, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2194] },
        { teal: 2112, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2195] },
        { teal: 2113, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2196] },
        {
          teal: 2116,
          source: 'contracts\\BiatecClammPool.algo.ts:489',
          errorMessage: 'realAssetADeposit overflowed 256 bits',
          pc: [2197],
        },
        { teal: 2117, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2198] },
        { teal: 2118, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2199] },
        { teal: 2119, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2200] },
        { teal: 2120, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2201] },
        { teal: 2121, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2202] },
        { teal: 2122, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2203] },
        { teal: 2123, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2204] },
        { teal: 2124, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2205] },
        { teal: 2125, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2206] },
        { teal: 2126, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2207, 2208, 2209] },
        { teal: 2127, source: 'contracts\\BiatecClammPool.algo.ts:489', pc: [2210, 2211, 2212] },
        { teal: 2133, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2213, 2214] },
        { teal: 2134, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2215, 2216] },
        { teal: 2135, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2217, 2218] },
        { teal: 2136, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2219] },
        { teal: 2137, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2220] },
        { teal: 2138, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2221, 2222, 2223] },
        { teal: 2139, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2224, 2225] },
        { teal: 2140, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2226, 2227] },
        { teal: 2141, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2228, 2229] },
        { teal: 2142, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2230] },
        { teal: 2143, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2231] },
        { teal: 2146, source: 'contracts\\BiatecClammPool.algo.ts:492', pc: [2232, 2233, 2234] },
        { teal: 2151, source: 'contracts\\BiatecClammPool.algo.ts:493', pc: [2235, 2236] },
        { teal: 2152, source: 'contracts\\BiatecClammPool.algo.ts:493', pc: [2237, 2238] },
        { teal: 2156, source: 'contracts\\BiatecClammPool.algo.ts:494', pc: [2239, 2240] },
        { teal: 2157, source: 'contracts\\BiatecClammPool.algo.ts:494', pc: [2241, 2242] },
        { teal: 2161, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2243, 2244] },
        { teal: 2162, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2245, 2246] },
        { teal: 2163, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2247] },
        { teal: 2164, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2248] },
        { teal: 2165, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2249] },
        { teal: 2166, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2250] },
        {
          teal: 2169,
          source: 'contracts\\BiatecClammPool.algo.ts:495',
          errorMessage: 'assetLpDelicmalScale2Scale overflowed 256 bits',
          pc: [2251],
        },
        { teal: 2170, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2252] },
        { teal: 2171, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2253] },
        { teal: 2172, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2254] },
        { teal: 2173, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2255] },
        { teal: 2174, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2256] },
        { teal: 2175, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2257] },
        { teal: 2176, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2258] },
        { teal: 2177, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2259] },
        { teal: 2178, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2260] },
        { teal: 2179, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2261, 2262] },
        { teal: 2180, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2263] },
        { teal: 2181, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2264] },
        { teal: 2182, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2265] },
        { teal: 2183, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2266] },
        {
          teal: 2186,
          source: 'contracts\\BiatecClammPool.algo.ts:495',
          errorMessage: 'realAssetBDeposit overflowed 256 bits',
          pc: [2267],
        },
        { teal: 2187, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2268] },
        { teal: 2188, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2269] },
        { teal: 2189, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2270] },
        { teal: 2190, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2271] },
        { teal: 2191, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2272] },
        { teal: 2192, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2273] },
        { teal: 2193, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2274] },
        { teal: 2194, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2275] },
        { teal: 2195, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2276] },
        { teal: 2196, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2277, 2278] },
        { teal: 2197, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2279] },
        { teal: 2198, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2280] },
        { teal: 2199, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2281] },
        { teal: 2200, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2282] },
        {
          teal: 2203,
          source: 'contracts\\BiatecClammPool.algo.ts:495',
          errorMessage: 'realAssetADeposit overflowed 256 bits',
          pc: [2283],
        },
        { teal: 2204, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2284] },
        { teal: 2205, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2285] },
        { teal: 2206, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2286] },
        { teal: 2207, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2287] },
        { teal: 2208, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2288] },
        { teal: 2209, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2289] },
        { teal: 2210, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2290] },
        { teal: 2211, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2291] },
        { teal: 2212, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2292] },
        { teal: 2213, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2293, 2294, 2295] },
        { teal: 2214, source: 'contracts\\BiatecClammPool.algo.ts:495', pc: [2296, 2297, 2298] },
        { teal: 2220, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2299, 2300] },
        { teal: 2221, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2301] },
        { teal: 2222, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2302] },
        { teal: 2223, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2303] },
        { teal: 2224, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2304, 2305, 2306] },
        { teal: 2225, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2307, 2308] },
        { teal: 2226, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2309] },
        { teal: 2227, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2310] },
        { teal: 2228, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2311] },
        { teal: 2231, source: 'contracts\\BiatecClammPool.algo.ts:498', pc: [2312, 2313, 2314] },
        { teal: 2237, source: 'contracts\\BiatecClammPool.algo.ts:500', pc: [2315, 2316] },
        { teal: 2238, source: 'contracts\\BiatecClammPool.algo.ts:500', pc: [2317, 2318] },
        { teal: 2239, source: 'contracts\\BiatecClammPool.algo.ts:500', pc: [2319] },
        { teal: 2240, source: 'contracts\\BiatecClammPool.algo.ts:500', pc: [2320] },
        { teal: 2241, source: 'contracts\\BiatecClammPool.algo.ts:500', pc: [2321, 2322, 2323] },
        { teal: 2246, source: 'contracts\\BiatecClammPool.algo.ts:501', pc: [2324, 2325] },
        { teal: 2247, source: 'contracts\\BiatecClammPool.algo.ts:501', pc: [2326, 2327] },
        { teal: 2248, source: 'contracts\\BiatecClammPool.algo.ts:501', pc: [2328, 2329] },
        { teal: 2249, source: 'contracts\\BiatecClammPool.algo.ts:501', pc: [2330, 2331] },
        { teal: 2250, source: 'contracts\\BiatecClammPool.algo.ts:501', pc: [2332, 2333, 2334] },
        { teal: 2256, source: 'contracts\\BiatecClammPool.algo.ts:503', pc: [2335, 2336] },
        { teal: 2257, source: 'contracts\\BiatecClammPool.algo.ts:503', pc: [2337, 2338] },
        { teal: 2258, source: 'contracts\\BiatecClammPool.algo.ts:503', pc: [2339] },
        { teal: 2259, source: 'contracts\\BiatecClammPool.algo.ts:503', pc: [2340] },
        { teal: 2260, source: 'contracts\\BiatecClammPool.algo.ts:503', pc: [2341, 2342, 2343] },
        { teal: 2265, source: 'contracts\\BiatecClammPool.algo.ts:504', pc: [2344, 2345] },
        { teal: 2266, source: 'contracts\\BiatecClammPool.algo.ts:504', pc: [2346, 2347] },
        { teal: 2267, source: 'contracts\\BiatecClammPool.algo.ts:504', pc: [2348, 2349] },
        { teal: 2268, source: 'contracts\\BiatecClammPool.algo.ts:504', pc: [2350, 2351] },
        { teal: 2269, source: 'contracts\\BiatecClammPool.algo.ts:504', pc: [2352, 2353, 2354] },
        { teal: 2274, source: 'contracts\\BiatecClammPool.algo.ts:506', pc: [2355] },
        { teal: 2275, source: 'contracts\\BiatecClammPool.algo.ts:506', pc: [2356, 2357, 2358] },
        { teal: 2280, source: 'contracts\\BiatecClammPool.algo.ts:508', pc: [2359] },
        {
          teal: 2283,
          source: 'contracts\\BiatecClammPool.algo.ts:508',
          errorMessage: 'failed to calculate exact liqudidity',
          pc: [2360],
        },
        { teal: 2287, source: 'contracts\\BiatecClammPool.algo.ts:509', pc: [2361, 2362] },
        { teal: 2291, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [2363, 2364] },
        { teal: 2294, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [2365, 2366] },
        { teal: 2295, source: 'contracts\\BiatecClammPool.algo.ts:323', pc: [2367] },
        { teal: 2306, source: 'contracts\\BiatecClammPool.algo.ts:520', pc: [2368, 2369, 2370] },
        { teal: 2309, source: 'contracts\\BiatecClammPool.algo.ts:520', pc: [2371] },
        { teal: 2310, source: 'contracts\\BiatecClammPool.algo.ts:520', pc: [2372, 2373] },
        { teal: 2314, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2374] },
        { teal: 2315, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2375, 2376] },
        { teal: 2316, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2377, 2378] },
        { teal: 2317, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2379] },
        { teal: 2318, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2380, 2381] },
        { teal: 2319, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2382, 2383] },
        { teal: 2320, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2384] },
        { teal: 2321, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2385, 2386] },
        { teal: 2322, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2387, 2388] },
        { teal: 2323, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2389, 2390] },
        { teal: 2324, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2391, 2392] },
        { teal: 2325, source: 'contracts\\BiatecClammPool.algo.ts:526', pc: [2393] },
        { teal: 2329, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2394] },
        { teal: 2330, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2395] },
        { teal: 2331, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2396] },
        { teal: 2332, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2397, 2398] },
        { teal: 2333, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2399] },
        { teal: 2334, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2400] },
        { teal: 2335, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2401] },
        { teal: 2336, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2402] },
        { teal: 2337, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2403] },
        {
          teal: 2340,
          source: 'contracts\\BiatecClammPool.algo.ts:528',
          errorMessage: 'this.assetABalance.value + realAssetADeposit overflowed 256 bits',
          pc: [2404],
        },
        { teal: 2341, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2405] },
        { teal: 2342, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2406] },
        { teal: 2343, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2407] },
        { teal: 2344, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2408] },
        { teal: 2345, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2409] },
        { teal: 2346, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2410] },
        { teal: 2347, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2411] },
        { teal: 2348, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2412] },
        { teal: 2349, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2413] },
        { teal: 2350, source: 'contracts\\BiatecClammPool.algo.ts:528', pc: [2414] },
        { teal: 2354, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2415, 2416] },
        { teal: 2355, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2417] },
        { teal: 2356, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2418] },
        { teal: 2357, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2419, 2420] },
        { teal: 2358, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2421] },
        { teal: 2359, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2422] },
        { teal: 2360, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2423] },
        { teal: 2361, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2424] },
        { teal: 2362, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2425] },
        {
          teal: 2365,
          source: 'contracts\\BiatecClammPool.algo.ts:529',
          errorMessage: 'this.assetBBalance.value + realAssetBDeposit overflowed 256 bits',
          pc: [2426],
        },
        { teal: 2366, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2427] },
        { teal: 2367, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2428] },
        { teal: 2368, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2429] },
        { teal: 2369, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2430] },
        { teal: 2370, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2431] },
        { teal: 2371, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2432] },
        { teal: 2372, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2433] },
        { teal: 2373, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2434] },
        { teal: 2374, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2435] },
        { teal: 2375, source: 'contracts\\BiatecClammPool.algo.ts:529', pc: [2436] },
        { teal: 2379, source: 'contracts\\BiatecClammPool.algo.ts:532', pc: [2437] },
        { teal: 2380, source: 'contracts\\BiatecClammPool.algo.ts:532', pc: [2438] },
        { teal: 2381, source: 'contracts\\BiatecClammPool.algo.ts:532', pc: [2439, 2440] },
        { teal: 2385, source: 'contracts\\BiatecClammPool.algo.ts:533', pc: [2441, 2442] },
        { teal: 2386, source: 'contracts\\BiatecClammPool.algo.ts:533', pc: [2443] },
        { teal: 2387, source: 'contracts\\BiatecClammPool.algo.ts:533', pc: [2444, 2445] },
        { teal: 2391, source: 'contracts\\BiatecClammPool.algo.ts:534', pc: [2446, 2447] },
        { teal: 2392, source: 'contracts\\BiatecClammPool.algo.ts:534', pc: [2448] },
        { teal: 2393, source: 'contracts\\BiatecClammPool.algo.ts:534', pc: [2449] },
        { teal: 2394, source: 'contracts\\BiatecClammPool.algo.ts:534', pc: [2450, 2451] },
        { teal: 2398, source: 'contracts\\BiatecClammPool.algo.ts:535', pc: [2452, 2453] },
        { teal: 2399, source: 'contracts\\BiatecClammPool.algo.ts:535', pc: [2454] },
        { teal: 2400, source: 'contracts\\BiatecClammPool.algo.ts:535', pc: [2455] },
        { teal: 2401, source: 'contracts\\BiatecClammPool.algo.ts:535', pc: [2456, 2457] },
        { teal: 2405, source: 'contracts\\BiatecClammPool.algo.ts:536', pc: [2458, 2459] },
        { teal: 2406, source: 'contracts\\BiatecClammPool.algo.ts:536', pc: [2460] },
        { teal: 2407, source: 'contracts\\BiatecClammPool.algo.ts:536', pc: [2461, 2462] },
        { teal: 2411, source: 'contracts\\BiatecClammPool.algo.ts:537', pc: [2463, 2464] },
        { teal: 2412, source: 'contracts\\BiatecClammPool.algo.ts:537', pc: [2465] },
        { teal: 2413, source: 'contracts\\BiatecClammPool.algo.ts:537', pc: [2466, 2467] },
        { teal: 2417, source: 'contracts\\BiatecClammPool.algo.ts:538', pc: [2468, 2469] },
        { teal: 2418, source: 'contracts\\BiatecClammPool.algo.ts:538', pc: [2470, 2471] },
        { teal: 2423, source: 'contracts\\BiatecClammPool.algo.ts:539', pc: [2472, 2473] },
        { teal: 2424, source: 'contracts\\BiatecClammPool.algo.ts:539', pc: [2474, 2475] },
        { teal: 2425, source: 'contracts\\BiatecClammPool.algo.ts:539', pc: [2476] },
        { teal: 2426, source: 'contracts\\BiatecClammPool.algo.ts:539', pc: [2477, 2478, 2479] },
        { teal: 2431, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2480, 2481] },
        { teal: 2432, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2482] },
        { teal: 2433, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2483] },
        { teal: 2434, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2484] },
        { teal: 2435, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2485] },
        {
          teal: 2438,
          source: 'contracts\\BiatecClammPool.algo.ts:540',
          errorMessage: 'priceMin overflowed 256 bits',
          pc: [2486],
        },
        { teal: 2439, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2487] },
        { teal: 2440, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2488] },
        { teal: 2441, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2489] },
        { teal: 2442, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2490] },
        { teal: 2443, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2491] },
        { teal: 2444, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2492] },
        { teal: 2445, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2493] },
        { teal: 2446, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2494] },
        { teal: 2447, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2495] },
        { teal: 2448, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2496, 2497] },
        { teal: 2449, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2498, 2499] },
        { teal: 2450, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2500, 2501, 2502] },
        { teal: 2451, source: 'contracts\\BiatecClammPool.algo.ts:540', pc: [2503, 2504] },
        { teal: 2452, source: 'contracts\\BiatecClammPool.algo.ts:539', pc: [2505, 2506, 2507] },
        { teal: 2457, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2508, 2509] },
        { teal: 2458, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2510, 2511] },
        { teal: 2459, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2512, 2513] },
        { teal: 2460, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2514] },
        { teal: 2461, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2515] },
        { teal: 2462, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2516] },
        { teal: 2463, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2517] },
        {
          teal: 2466,
          source: 'contracts\\BiatecClammPool.algo.ts:542',
          errorMessage: 'priceMax overflowed 256 bits',
          pc: [2518],
        },
        { teal: 2467, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2519] },
        { teal: 2468, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2520] },
        { teal: 2469, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2521] },
        { teal: 2470, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2522] },
        { teal: 2471, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2523] },
        { teal: 2472, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2524] },
        { teal: 2473, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2525] },
        { teal: 2474, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2526] },
        { teal: 2475, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2527] },
        { teal: 2476, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2528, 2529] },
        { teal: 2477, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2530] },
        { teal: 2478, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2531] },
        { teal: 2479, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2532] },
        { teal: 2480, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2533] },
        {
          teal: 2483,
          source: 'contracts\\BiatecClammPool.algo.ts:542',
          errorMessage: 'priceMin overflowed 256 bits',
          pc: [2534],
        },
        { teal: 2484, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2535] },
        { teal: 2485, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2536] },
        { teal: 2486, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2537] },
        { teal: 2487, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2538] },
        { teal: 2488, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2539] },
        { teal: 2489, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2540] },
        { teal: 2490, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2541] },
        { teal: 2491, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2542] },
        { teal: 2492, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2543] },
        { teal: 2493, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2544, 2545] },
        { teal: 2494, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2546, 2547] },
        { teal: 2495, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2548, 2549, 2550] },
        { teal: 2496, source: 'contracts\\BiatecClammPool.algo.ts:542', pc: [2551, 2552] },
        { teal: 2500, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2553, 2554] },
        { teal: 2501, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2555] },
        { teal: 2502, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2556] },
        { teal: 2503, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2557] },
        { teal: 2504, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2558] },
        {
          teal: 2507,
          source: 'contracts\\BiatecClammPool.algo.ts:543',
          errorMessage: 'D_SQRT overflowed 256 bits',
          pc: [2559],
        },
        { teal: 2508, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2560] },
        { teal: 2509, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2561] },
        { teal: 2510, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2562] },
        { teal: 2511, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2563] },
        { teal: 2512, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2564] },
        { teal: 2513, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2565] },
        { teal: 2514, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2566] },
        { teal: 2515, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2567] },
        { teal: 2516, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2568] },
        { teal: 2517, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2569, 2570] },
        { teal: 2518, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2571, 2572] },
        { teal: 2519, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2573, 2574] },
        { teal: 2520, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2575, 2576] },
        { teal: 2521, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2577, 2578, 2579] },
        { teal: 2522, source: 'contracts\\BiatecClammPool.algo.ts:543', pc: [2580, 2581] },
        { teal: 2527, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2582, 2583] },
        { teal: 2528, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2584, 2585] },
        { teal: 2529, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2586] },
        { teal: 2530, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2587] },
        { teal: 2531, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2588, 2589] },
        { teal: 2532, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2590] },
        { teal: 2533, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2591] },
        { teal: 2534, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2592] },
        { teal: 2535, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2593, 2594] },
        { teal: 2536, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2595] },
        {
          teal: 2539,
          source: 'contracts\\BiatecClammPool.algo.ts:546',
          errorMessage:
            '((newLiqudity - this.Liqudity.value) / assetLpDelicmalScale2Scale) as uint64 overflowed 64 bits',
          pc: [2596],
        },
        { teal: 2540, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2597, 2598] },
        { teal: 2541, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2599] },
        { teal: 2542, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2600] },
        { teal: 2543, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2601] },
        { teal: 2544, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2602] },
        { teal: 2545, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2603, 2604] },
        { teal: 2546, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2605] },
        { teal: 2547, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2606] },
        { teal: 2548, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2607] },
        { teal: 2549, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2608] },
        { teal: 2550, source: 'contracts\\BiatecClammPool.algo.ts:546', pc: [2609, 2610] },
        { teal: 2554, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2611, 2612] },
        { teal: 2555, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2613, 2614] },
        { teal: 2556, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2615] },
        { teal: 2557, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2616] },
        { teal: 2558, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2617] },
        { teal: 2559, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2618] },
        {
          teal: 2562,
          source: 'contracts\\BiatecClammPool.algo.ts:548',
          errorMessage: 'newLiqudity overflowed 256 bits',
          pc: [2619],
        },
        { teal: 2563, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2620] },
        { teal: 2564, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2621] },
        { teal: 2565, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2622] },
        { teal: 2566, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2623] },
        { teal: 2567, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2624] },
        { teal: 2568, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2625] },
        { teal: 2569, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2626] },
        { teal: 2570, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2627] },
        { teal: 2571, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2628] },
        { teal: 2572, source: 'contracts\\BiatecClammPool.algo.ts:548', pc: [2629] },
        { teal: 2576, source: 'contracts\\BiatecClammPool.algo.ts:550', pc: [2630, 2631] },
        { teal: 2577, source: 'contracts\\BiatecClammPool.algo.ts:550', pc: [2632, 2633] },
        { teal: 2578, source: 'contracts\\BiatecClammPool.algo.ts:550', pc: [2634, 2635] },
        { teal: 2579, source: 'contracts\\BiatecClammPool.algo.ts:550', pc: [2636, 2637, 2638] },
        { teal: 2583, source: 'contracts\\BiatecClammPool.algo.ts:556', pc: [2639, 2640] },
        { teal: 2584, source: 'contracts\\BiatecClammPool.algo.ts:556', pc: [2641] },
        { teal: 2585, source: 'contracts\\BiatecClammPool.algo.ts:556', pc: [2642] },
        { teal: 2588, source: 'contracts\\BiatecClammPool.algo.ts:556', errorMessage: 'LP-ZERO-ERR', pc: [2643] },
        { teal: 2592, source: 'contracts\\BiatecClammPool.algo.ts:557', pc: [2644, 2645] },
        { teal: 2595, source: 'contracts\\BiatecClammPool.algo.ts:520', pc: [2646, 2647] },
        { teal: 2598, source: 'contracts\\BiatecClammPool.algo.ts:520', pc: [2648, 2649] },
        { teal: 2599, source: 'contracts\\BiatecClammPool.algo.ts:520', pc: [2650] },
        { teal: 2604, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2651, 2652] },
        { teal: 2607, source: 'contracts\\BiatecClammPool.algo.ts:576', pc: [2653, 2654, 2655] },
        { teal: 2608, source: 'contracts\\BiatecClammPool.algo.ts:576', pc: [2656] },
        { teal: 2611, source: 'contracts\\BiatecClammPool.algo.ts:575', pc: [2657, 2658, 2659] },
        { teal: 2612, source: 'contracts\\BiatecClammPool.algo.ts:575', pc: [2660] },
        { teal: 2615, source: 'contracts\\BiatecClammPool.algo.ts:574', pc: [2661, 2662, 2663] },
        { teal: 2616, source: 'contracts\\BiatecClammPool.algo.ts:574', pc: [2664] },
        { teal: 2619, source: 'contracts\\BiatecClammPool.algo.ts:573', pc: [2665, 2666] },
        { teal: 2620, source: 'contracts\\BiatecClammPool.algo.ts:573', pc: [2667] },
        { teal: 2621, source: 'contracts\\BiatecClammPool.algo.ts:573', pc: [2668] },
        { teal: 2622, source: 'contracts\\BiatecClammPool.algo.ts:573', pc: [2669] },
        { teal: 2623, source: 'contracts\\BiatecClammPool.algo.ts:573', pc: [2670, 2671] },
        { teal: 2624, source: 'contracts\\BiatecClammPool.algo.ts:573', pc: [2672, 2673] },
        { teal: 2625, source: 'contracts\\BiatecClammPool.algo.ts:573', pc: [2674] },
        {
          teal: 2628,
          source: 'contracts\\BiatecClammPool.algo.ts:573',
          errorMessage: 'argument 3 (txLpXfer) for removeLiquidity must be a axfer transaction',
          pc: [2675],
        },
        { teal: 2631, source: 'contracts\\BiatecClammPool.algo.ts:572', pc: [2676, 2677, 2678] },
        { teal: 2632, source: 'contracts\\BiatecClammPool.algo.ts:572', pc: [2679] },
        { teal: 2635, source: 'contracts\\BiatecClammPool.algo.ts:571', pc: [2680, 2681, 2682] },
        { teal: 2636, source: 'contracts\\BiatecClammPool.algo.ts:571', pc: [2683] },
        { teal: 2639, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2684, 2685, 2686] },
        { teal: 2640, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2687] },
        { teal: 2641, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2688] },
        { teal: 2642, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2689] },
        { teal: 2643, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2690] },
        {
          teal: 2646,
          source: 'contracts\\BiatecClammPool.algo.ts:570',
          errorMessage: 'removeLiquidity return value overflowed 256 bits',
          pc: [2691],
        },
        { teal: 2647, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2692] },
        { teal: 2648, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2693] },
        { teal: 2649, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2694] },
        { teal: 2650, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2695] },
        { teal: 2651, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2696] },
        { teal: 2652, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2697] },
        { teal: 2653, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2698] },
        { teal: 2654, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2699] },
        { teal: 2655, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2700] },
        { teal: 2656, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2701] },
        { teal: 2657, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2702] },
        { teal: 2658, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2703] },
        { teal: 2659, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2704] },
        { teal: 2672, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2705, 2706, 2707] },
        { teal: 2675, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2708] },
        { teal: 2676, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [2709, 2710] },
        { teal: 2681, source: 'contracts\\BiatecClammPool.algo.ts:579', pc: [2711, 2712] },
        { teal: 2682, source: 'contracts\\BiatecClammPool.algo.ts:579', pc: [2713, 2714] },
        { teal: 2683, source: 'contracts\\BiatecClammPool.algo.ts:579', pc: [2715, 2716] },
        { teal: 2684, source: 'contracts\\BiatecClammPool.algo.ts:579', pc: [2717, 2718, 2719] },
        { teal: 2693, source: 'contracts\\BiatecClammPool.algo.ts:580', pc: [2720, 2721] },
        { teal: 2694, source: 'contracts\\BiatecClammPool.algo.ts:581', pc: [2722, 2723] },
        { teal: 2695, source: 'contracts\\BiatecClammPool.algo.ts:581', pc: [2724, 2725] },
        { teal: 2696, source: 'contracts\\BiatecClammPool.algo.ts:581', pc: [2726] },
        {
          teal: 2699,
          source: 'contracts\\BiatecClammPool.algo.ts:581',
          errorMessage:
            'transaction verification failed: {"txn":"txLpXfer","field":"assetReceiver","expected":"this.app.address"}',
          pc: [2727],
        },
        { teal: 2702, source: 'contracts\\BiatecClammPool.algo.ts:580', pc: [2728, 2729] },
        { teal: 2703, source: 'contracts\\BiatecClammPool.algo.ts:582', pc: [2730, 2731] },
        { teal: 2704, source: 'contracts\\BiatecClammPool.algo.ts:582', pc: [2732, 2733] },
        { teal: 2705, source: 'contracts\\BiatecClammPool.algo.ts:582', pc: [2734] },
        {
          teal: 2708,
          source: 'contracts\\BiatecClammPool.algo.ts:582',
          errorMessage: 'transaction verification failed: {"txn":"txLpXfer","field":"xferAsset","expected":"assetLp"}',
          pc: [2735],
        },
        { teal: 2711, source: 'contracts\\BiatecClammPool.algo.ts:580', pc: [2736, 2737] },
        { teal: 2712, source: 'contracts\\BiatecClammPool.algo.ts:583', pc: [2738, 2739] },
        { teal: 2713, source: 'contracts\\BiatecClammPool.algo.ts:583', pc: [2740] },
        { teal: 2714, source: 'contracts\\BiatecClammPool.algo.ts:583', pc: [2741] },
        {
          teal: 2717,
          source: 'contracts\\BiatecClammPool.algo.ts:583',
          errorMessage:
            'transaction verification failed: {"txn":"txLpXfer","field":"assetAmount","condition":"greaterThanEqualTo","expected":">=0"}',
          pc: [2742],
        },
        { teal: 2721, source: 'contracts\\BiatecClammPool.algo.ts:586', pc: [2743, 2744] },
        { teal: 2722, source: 'contracts\\BiatecClammPool.algo.ts:586', pc: [2745, 2746] },
        { teal: 2723, source: 'contracts\\BiatecClammPool.algo.ts:586', pc: [2747, 2748, 2749] },
        { teal: 2727, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2750] },
        { teal: 2728, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2751, 2752] },
        { teal: 2729, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2753, 2754] },
        { teal: 2730, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2755] },
        { teal: 2731, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2756, 2757] },
        { teal: 2732, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2758, 2759] },
        { teal: 2733, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2760] },
        { teal: 2734, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2761, 2762] },
        { teal: 2735, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2763, 2764] },
        { teal: 2736, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2765, 2766] },
        { teal: 2737, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2767, 2768] },
        { teal: 2738, source: 'contracts\\BiatecClammPool.algo.ts:589', pc: [2769] },
        { teal: 2742, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2770] },
        { teal: 2743, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2771, 2772] },
        { teal: 2744, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2773, 2774] },
        { teal: 2745, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2775] },
        { teal: 2746, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2776, 2777] },
        { teal: 2747, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2778, 2779] },
        { teal: 2748, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2780] },
        { teal: 2749, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2781, 2782] },
        { teal: 2750, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2783, 2784] },
        { teal: 2751, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2785, 2786] },
        { teal: 2752, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2787, 2788] },
        { teal: 2753, source: 'contracts\\BiatecClammPool.algo.ts:590', pc: [2789] },
        { teal: 2757, source: 'contracts\\BiatecClammPool.algo.ts:592', pc: [2790, 2791] },
        { teal: 2758, source: 'contracts\\BiatecClammPool.algo.ts:592', pc: [2792, 2793] },
        { teal: 2763, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2794, 2795] },
        { teal: 2764, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2796] },
        { teal: 2765, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2797] },
        { teal: 2766, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2798, 2799, 2800] },
        { teal: 2771, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2801, 2802] },
        { teal: 2772, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2803, 2804] },
        { teal: 2773, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2805] },
        { teal: 2774, source: 'contracts\\BiatecClammPool.algo.ts:593', pc: [2806, 2807] },
        { teal: 2779, source: 'contracts\\BiatecClammPool.algo.ts:595', pc: [2808, 2809] },
        { teal: 2780, source: 'contracts\\BiatecClammPool.algo.ts:595', pc: [2810, 2811] },
        { teal: 2781, source: 'contracts\\BiatecClammPool.algo.ts:595', pc: [2812, 2813] },
        { teal: 2782, source: 'contracts\\BiatecClammPool.algo.ts:595', pc: [2814] },
        { teal: 2783, source: 'contracts\\BiatecClammPool.algo.ts:595', pc: [2815] },
        { teal: 2784, source: 'contracts\\BiatecClammPool.algo.ts:595', pc: [2816] },
        { teal: 2785, source: 'contracts\\BiatecClammPool.algo.ts:595', pc: [2817, 2818] },
        { teal: 2789, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2819, 2820] },
        { teal: 2790, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2821, 2822] },
        { teal: 2791, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2823, 2824] },
        { teal: 2792, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2825, 2826] },
        { teal: 2793, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2827] },
        { teal: 2794, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2828] },
        { teal: 2795, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2829] },
        { teal: 2796, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2830] },
        { teal: 2797, source: 'contracts\\BiatecClammPool.algo.ts:597', pc: [2831, 2832] },
        { teal: 2801, source: 'contracts\\BiatecClammPool.algo.ts:599', pc: [2833, 2834] },
        { teal: 2802, source: 'contracts\\BiatecClammPool.algo.ts:599', pc: [2835, 2836] },
        { teal: 2803, source: 'contracts\\BiatecClammPool.algo.ts:599', pc: [2837] },
        { teal: 2804, source: 'contracts\\BiatecClammPool.algo.ts:599', pc: [2838] },
        { teal: 2805, source: 'contracts\\BiatecClammPool.algo.ts:599', pc: [2839, 2840] },
        { teal: 2809, source: 'contracts\\BiatecClammPool.algo.ts:601', pc: [2841, 2842] },
        { teal: 2810, source: 'contracts\\BiatecClammPool.algo.ts:601', pc: [2843, 2844] },
        { teal: 2811, source: 'contracts\\BiatecClammPool.algo.ts:601', pc: [2845] },
        { teal: 2812, source: 'contracts\\BiatecClammPool.algo.ts:601', pc: [2846, 2847] },
        { teal: 2816, source: 'contracts\\BiatecClammPool.algo.ts:602', pc: [2848, 2849] },
        { teal: 2817, source: 'contracts\\BiatecClammPool.algo.ts:602', pc: [2850, 2851] },
        { teal: 2818, source: 'contracts\\BiatecClammPool.algo.ts:602', pc: [2852] },
        { teal: 2819, source: 'contracts\\BiatecClammPool.algo.ts:602', pc: [2853, 2854] },
        { teal: 2823, source: 'contracts\\BiatecClammPool.algo.ts:603', pc: [2855, 2856] },
        { teal: 2824, source: 'contracts\\BiatecClammPool.algo.ts:603', pc: [2857, 2858] },
        { teal: 2828, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2859, 2860] },
        { teal: 2829, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2861] },
        { teal: 2830, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2862] },
        { teal: 2831, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2863] },
        { teal: 2832, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2864] },
        {
          teal: 2835,
          source: 'contracts\\BiatecClammPool.algo.ts:604',
          errorMessage: 'lpDelta overflowed 256 bits',
          pc: [2865],
        },
        { teal: 2836, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2866] },
        { teal: 2837, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2867] },
        { teal: 2838, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2868] },
        { teal: 2839, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2869] },
        { teal: 2840, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2870] },
        { teal: 2841, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2871] },
        { teal: 2842, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2872] },
        { teal: 2843, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2873] },
        { teal: 2844, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2874] },
        { teal: 2845, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2875, 2876] },
        { teal: 2846, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2877, 2878, 2879] },
        { teal: 2847, source: 'contracts\\BiatecClammPool.algo.ts:604', pc: [2880, 2881] },
        { teal: 2852, source: 'contracts\\BiatecClammPool.algo.ts:605', pc: [2882, 2883] },
        { teal: 2853, source: 'contracts\\BiatecClammPool.algo.ts:605', pc: [2884, 2885] },
        { teal: 2854, source: 'contracts\\BiatecClammPool.algo.ts:605', pc: [2886] },
        { teal: 2855, source: 'contracts\\BiatecClammPool.algo.ts:605', pc: [2887, 2888, 2889] },
        { teal: 2860, source: 'contracts\\BiatecClammPool.algo.ts:607', pc: [2890, 2891] },
        { teal: 2861, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [2892] },
        { teal: 2862, source: 'contracts\\BiatecClammPool.algo.ts:607', pc: [2893] },
        { teal: 2863, source: 'contracts\\BiatecClammPool.algo.ts:607', pc: [2894, 2895] },
        { teal: 2864, source: 'contracts\\BiatecClammPool.algo.ts:607', pc: [2896] },
        { teal: 2865, source: 'contracts\\BiatecClammPool.algo.ts:607', pc: [2897, 2898] },
        { teal: 2869, source: 'contracts\\BiatecClammPool.algo.ts:608', pc: [2899, 2900] },
        { teal: 2870, source: 'contracts\\BiatecClammPool.algo.ts:608', pc: [2901] },
        { teal: 2871, source: 'contracts\\BiatecClammPool.algo.ts:608', pc: [2902, 2903] },
        { teal: 2872, source: 'contracts\\BiatecClammPool.algo.ts:608', pc: [2904] },
        { teal: 2873, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [2905] },
        { teal: 2874, source: 'contracts\\BiatecClammPool.algo.ts:608', pc: [2906] },
        { teal: 2875, source: 'contracts\\BiatecClammPool.algo.ts:608', pc: [2907, 2908] },
        { teal: 2879, source: 'contracts\\BiatecClammPool.algo.ts:609', pc: [2909, 2910] },
        { teal: 2880, source: 'contracts\\BiatecClammPool.algo.ts:609', pc: [2911, 2912] },
        { teal: 2881, source: 'contracts\\BiatecClammPool.algo.ts:609', pc: [2913] },
        { teal: 2882, source: 'contracts\\BiatecClammPool.algo.ts:609', pc: [2914, 2915] },
        { teal: 2886, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2916, 2917] },
        { teal: 2887, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2918] },
        { teal: 2888, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2919] },
        { teal: 2889, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2920, 2921] },
        { teal: 2890, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2922] },
        { teal: 2891, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2923] },
        { teal: 2892, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2924] },
        { teal: 2893, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2925] },
        { teal: 2894, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2926] },
        {
          teal: 2897,
          source: 'contracts\\BiatecClammPool.algo.ts:610',
          errorMessage: 'this.LiqudityUsersFromFees.value - myPortionOfFeesCollected overflowed 256 bits',
          pc: [2927],
        },
        { teal: 2898, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2928] },
        { teal: 2899, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2929] },
        { teal: 2900, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2930] },
        { teal: 2901, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2931] },
        { teal: 2902, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2932] },
        { teal: 2903, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2933] },
        { teal: 2904, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2934] },
        { teal: 2905, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2935] },
        { teal: 2906, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2936] },
        { teal: 2907, source: 'contracts\\BiatecClammPool.algo.ts:610', pc: [2937] },
        { teal: 2916, source: 'contracts\\BiatecClammPool.algo.ts:615', pc: [2938, 2939] },
        { teal: 2917, source: 'contracts\\BiatecClammPool.algo.ts:615', pc: [2940] },
        { teal: 2918, source: 'contracts\\BiatecClammPool.algo.ts:614', pc: [2941] },
        { teal: 2919, source: 'contracts\\BiatecClammPool.algo.ts:614', pc: [2942] },
        { teal: 2920, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2943, 2944] },
        { teal: 2921, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2945] },
        { teal: 2922, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2946] },
        { teal: 2923, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2947] },
        { teal: 2924, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2948] },
        {
          teal: 2927,
          source: 'contracts\\BiatecClammPool.algo.ts:613',
          errorMessage: 'lpDeltaWithFees overflowed 256 bits',
          pc: [2949],
        },
        { teal: 2928, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2950] },
        { teal: 2929, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2951] },
        { teal: 2930, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2952] },
        { teal: 2931, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2953] },
        { teal: 2932, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2954] },
        { teal: 2933, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2955] },
        { teal: 2934, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2956] },
        { teal: 2935, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2957] },
        { teal: 2936, source: 'contracts\\BiatecClammPool.algo.ts:613', pc: [2958] },
        { teal: 2937, source: 'contracts\\BiatecClammPool.algo.ts:612', pc: [2959, 2960, 2961] },
        { teal: 2938, source: 'contracts\\BiatecClammPool.algo.ts:612', pc: [2962, 2963] },
        { teal: 2942, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2964, 2965] },
        { teal: 2943, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2966, 2967] },
        { teal: 2944, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2968] },
        { teal: 2945, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2969] },
        { teal: 2946, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2970] },
        { teal: 2947, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2971, 2972] },
        { teal: 2948, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2973] },
        {
          teal: 2951,
          source: 'contracts\\BiatecClammPool.algo.ts:617',
          errorMessage: '(aToSend / assetADelicmalScale2Scale) as uint64 overflowed 64 bits',
          pc: [2974],
        },
        { teal: 2952, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2975, 2976] },
        { teal: 2953, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2977] },
        { teal: 2954, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2978] },
        { teal: 2955, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2979] },
        { teal: 2956, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2980] },
        { teal: 2957, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2981, 2982] },
        { teal: 2958, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2983] },
        { teal: 2959, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2984] },
        { teal: 2960, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2985] },
        { teal: 2961, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2986] },
        { teal: 2962, source: 'contracts\\BiatecClammPool.algo.ts:617', pc: [2987, 2988] },
        { teal: 2967, source: 'contracts\\BiatecClammPool.algo.ts:618', pc: [2989, 2990] },
        { teal: 2968, source: 'contracts\\BiatecClammPool.algo.ts:618', pc: [2991] },
        { teal: 2969, source: 'contracts\\BiatecClammPool.algo.ts:618', pc: [2992] },
        { teal: 2970, source: 'contracts\\BiatecClammPool.algo.ts:618', pc: [2993, 2994, 2995] },
        { teal: 2975, source: 'contracts\\BiatecClammPool.algo.ts:619', pc: [2996, 2997] },
        { teal: 2976, source: 'contracts\\BiatecClammPool.algo.ts:619', pc: [2998, 2999] },
        { teal: 2977, source: 'contracts\\BiatecClammPool.algo.ts:619', pc: [3000, 3001] },
        { teal: 2978, source: 'contracts\\BiatecClammPool.algo.ts:619', pc: [3002, 3003, 3004] },
        { teal: 2987, source: 'contracts\\BiatecClammPool.algo.ts:624', pc: [3005, 3006] },
        { teal: 2988, source: 'contracts\\BiatecClammPool.algo.ts:624', pc: [3007] },
        { teal: 2989, source: 'contracts\\BiatecClammPool.algo.ts:623', pc: [3008, 3009] },
        { teal: 2990, source: 'contracts\\BiatecClammPool.algo.ts:623', pc: [3010] },
        { teal: 2991, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3011, 3012] },
        { teal: 2992, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3013] },
        { teal: 2993, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3014] },
        { teal: 2994, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3015] },
        { teal: 2995, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3016] },
        {
          teal: 2998,
          source: 'contracts\\BiatecClammPool.algo.ts:622',
          errorMessage: 'lpDeltaWithFees overflowed 256 bits',
          pc: [3017],
        },
        { teal: 2999, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3018] },
        { teal: 3000, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3019] },
        { teal: 3001, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3020] },
        { teal: 3002, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3021] },
        { teal: 3003, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3022] },
        { teal: 3004, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3023] },
        { teal: 3005, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3024] },
        { teal: 3006, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3025] },
        { teal: 3007, source: 'contracts\\BiatecClammPool.algo.ts:622', pc: [3026] },
        { teal: 3008, source: 'contracts\\BiatecClammPool.algo.ts:621', pc: [3027, 3028, 3029] },
        { teal: 3009, source: 'contracts\\BiatecClammPool.algo.ts:621', pc: [3030, 3031] },
        { teal: 3013, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3032, 3033] },
        { teal: 3014, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3034, 3035] },
        { teal: 3015, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3036] },
        { teal: 3016, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3037] },
        { teal: 3017, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3038] },
        { teal: 3018, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3039, 3040] },
        { teal: 3019, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3041] },
        {
          teal: 3022,
          source: 'contracts\\BiatecClammPool.algo.ts:626',
          errorMessage: '(bToSend / assetBDelicmalScale2Scale) as uint64 overflowed 64 bits',
          pc: [3042],
        },
        { teal: 3023, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3043, 3044] },
        { teal: 3024, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3045] },
        { teal: 3025, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3046] },
        { teal: 3026, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3047] },
        { teal: 3027, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3048] },
        { teal: 3028, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3049, 3050] },
        { teal: 3029, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3051] },
        { teal: 3030, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3052] },
        { teal: 3031, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3053] },
        { teal: 3032, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3054] },
        { teal: 3033, source: 'contracts\\BiatecClammPool.algo.ts:626', pc: [3055, 3056] },
        { teal: 3038, source: 'contracts\\BiatecClammPool.algo.ts:627', pc: [3057, 3058] },
        { teal: 3039, source: 'contracts\\BiatecClammPool.algo.ts:627', pc: [3059] },
        { teal: 3040, source: 'contracts\\BiatecClammPool.algo.ts:627', pc: [3060] },
        { teal: 3041, source: 'contracts\\BiatecClammPool.algo.ts:627', pc: [3061, 3062, 3063] },
        { teal: 3046, source: 'contracts\\BiatecClammPool.algo.ts:628', pc: [3064, 3065] },
        { teal: 3047, source: 'contracts\\BiatecClammPool.algo.ts:628', pc: [3066, 3067] },
        { teal: 3048, source: 'contracts\\BiatecClammPool.algo.ts:628', pc: [3068, 3069] },
        { teal: 3049, source: 'contracts\\BiatecClammPool.algo.ts:628', pc: [3070, 3071, 3072] },
        { teal: 3054, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3073, 3074] },
        { teal: 3055, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3075] },
        { teal: 3056, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3076] },
        { teal: 3057, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3077] },
        { teal: 3058, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3078, 3079, 3080] },
        { teal: 3059, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3081, 3082] },
        { teal: 3060, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3083] },
        { teal: 3061, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3084] },
        { teal: 3062, source: 'contracts\\BiatecClammPool.algo.ts:632', pc: [3085] },
        { teal: 3066, source: 'contracts\\BiatecClammPool.algo.ts:632', errorMessage: 'ERR-REM-ZERO', pc: [3086] },
        { teal: 3070, source: 'contracts\\BiatecClammPool.algo.ts:634', pc: [3087] },
        { teal: 3071, source: 'contracts\\BiatecClammPool.algo.ts:634', pc: [3088] },
        { teal: 3072, source: 'contracts\\BiatecClammPool.algo.ts:634', pc: [3089, 3090] },
        { teal: 3073, source: 'contracts\\BiatecClammPool.algo.ts:634', pc: [3091] },
        { teal: 3074, source: 'contracts\\BiatecClammPool.algo.ts:634', pc: [3092, 3093] },
        { teal: 3078, source: 'contracts\\BiatecClammPool.algo.ts:635', pc: [3094, 3095] },
        { teal: 3079, source: 'contracts\\BiatecClammPool.algo.ts:635', pc: [3096] },
        { teal: 3080, source: 'contracts\\BiatecClammPool.algo.ts:635', pc: [3097, 3098] },
        { teal: 3081, source: 'contracts\\BiatecClammPool.algo.ts:635', pc: [3099] },
        { teal: 3082, source: 'contracts\\BiatecClammPool.algo.ts:635', pc: [3100, 3101] },
        { teal: 3086, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3102] },
        { teal: 3087, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3103, 3104] },
        { teal: 3088, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3105] },
        { teal: 3089, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3106] },
        { teal: 3090, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3107] },
        { teal: 3091, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3108] },
        {
          teal: 3094,
          source: 'contracts\\BiatecClammPool.algo.ts:636',
          errorMessage: 'newAssetA overflowed 256 bits',
          pc: [3109],
        },
        { teal: 3095, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3110] },
        { teal: 3096, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3111] },
        { teal: 3097, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3112] },
        { teal: 3098, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3113] },
        { teal: 3099, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3114] },
        { teal: 3100, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3115] },
        { teal: 3101, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3116] },
        { teal: 3102, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3117] },
        { teal: 3103, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3118] },
        { teal: 3104, source: 'contracts\\BiatecClammPool.algo.ts:636', pc: [3119] },
        { teal: 3108, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3120, 3121] },
        { teal: 3109, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3122, 3123] },
        { teal: 3110, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3124] },
        { teal: 3111, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3125] },
        { teal: 3112, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3126] },
        { teal: 3113, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3127] },
        {
          teal: 3116,
          source: 'contracts\\BiatecClammPool.algo.ts:637',
          errorMessage: 'newAssetB overflowed 256 bits',
          pc: [3128],
        },
        { teal: 3117, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3129] },
        { teal: 3118, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3130] },
        { teal: 3119, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3131] },
        { teal: 3120, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3132] },
        { teal: 3121, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3133] },
        { teal: 3122, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3134] },
        { teal: 3123, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3135] },
        { teal: 3124, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3136] },
        { teal: 3125, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3137] },
        { teal: 3126, source: 'contracts\\BiatecClammPool.algo.ts:637', pc: [3138] },
        { teal: 3130, source: 'contracts\\BiatecClammPool.algo.ts:641', pc: [3139, 3140] },
        { teal: 3131, source: 'contracts\\BiatecClammPool.algo.ts:641', pc: [3141, 3142] },
        { teal: 3136, source: 'contracts\\BiatecClammPool.algo.ts:642', pc: [3143, 3144] },
        { teal: 3137, source: 'contracts\\BiatecClammPool.algo.ts:642', pc: [3145] },
        { teal: 3138, source: 'contracts\\BiatecClammPool.algo.ts:642', pc: [3146, 3147] },
        { teal: 3139, source: 'contracts\\BiatecClammPool.algo.ts:642', pc: [3148] },
        { teal: 3140, source: 'contracts\\BiatecClammPool.algo.ts:642', pc: [3149] },
        { teal: 3141, source: 'contracts\\BiatecClammPool.algo.ts:642', pc: [3150, 3151, 3152] },
        { teal: 3150, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3153, 3154] },
        { teal: 3151, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3155] },
        { teal: 3152, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3156] },
        { teal: 3153, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3157] },
        { teal: 3154, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3158] },
        { teal: 3155, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3159] },
        { teal: 3156, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3160] },
        {
          teal: 3159,
          source: 'contracts\\BiatecClammPool.algo.ts:646',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [3161],
        },
        { teal: 3160, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3162] },
        { teal: 3161, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3163] },
        { teal: 3162, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3164] },
        { teal: 3163, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3165] },
        { teal: 3164, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3166] },
        { teal: 3165, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3167] },
        { teal: 3166, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3168] },
        { teal: 3167, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3169] },
        { teal: 3168, source: 'contracts\\BiatecClammPool.algo.ts:646', pc: [3170] },
        { teal: 3169, source: 'contracts\\BiatecClammPool.algo.ts:645', pc: [3171, 3172] },
        { teal: 3170, source: 'contracts\\BiatecClammPool.algo.ts:645', pc: [3173] },
        { teal: 3171, source: 'contracts\\BiatecClammPool.algo.ts:644', pc: [3174] },
        { teal: 3172, source: 'contracts\\BiatecClammPool.algo.ts:644', pc: [3175] },
        { teal: 3173, source: 'contracts\\BiatecClammPool.algo.ts:643', pc: [3176, 3177, 3178] },
        { teal: 3174, source: 'contracts\\BiatecClammPool.algo.ts:643', pc: [3179, 3180] },
        { teal: 3175, source: 'contracts\\BiatecClammPool.algo.ts:642', pc: [3181, 3182, 3183] },
        { teal: 3187, source: 'contracts\\BiatecClammPool.algo.ts:655', pc: [3184, 3185] },
        { teal: 3188, source: 'contracts\\BiatecClammPool.algo.ts:655', pc: [3186] },
        { teal: 3189, source: 'contracts\\BiatecClammPool.algo.ts:654', pc: [3187, 3188] },
        { teal: 3190, source: 'contracts\\BiatecClammPool.algo.ts:654', pc: [3189] },
        { teal: 3191, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3190, 3191] },
        { teal: 3192, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3192] },
        { teal: 3193, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3193] },
        { teal: 3194, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3194] },
        { teal: 3195, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3195] },
        { teal: 3196, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3196] },
        { teal: 3197, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3197] },
        {
          teal: 3200,
          source: 'contracts\\BiatecClammPool.algo.ts:653',
          errorMessage: 'this.priceMax.value as uint256 overflowed 256 bits',
          pc: [3198],
        },
        { teal: 3201, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3199] },
        { teal: 3202, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3200] },
        { teal: 3203, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3201] },
        { teal: 3204, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3202] },
        { teal: 3205, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3203] },
        { teal: 3206, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3204] },
        { teal: 3207, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3205] },
        { teal: 3208, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3206] },
        { teal: 3209, source: 'contracts\\BiatecClammPool.algo.ts:653', pc: [3207] },
        { teal: 3210, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3208, 3209] },
        { teal: 3211, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3210] },
        { teal: 3212, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3211] },
        { teal: 3213, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3212] },
        { teal: 3214, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3213] },
        { teal: 3215, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3214] },
        { teal: 3216, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3215] },
        {
          teal: 3219,
          source: 'contracts\\BiatecClammPool.algo.ts:652',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [3216],
        },
        { teal: 3220, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3217] },
        { teal: 3221, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3218] },
        { teal: 3222, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3219] },
        { teal: 3223, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3220] },
        { teal: 3224, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3221] },
        { teal: 3225, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3222] },
        { teal: 3226, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3223] },
        { teal: 3227, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3224] },
        { teal: 3228, source: 'contracts\\BiatecClammPool.algo.ts:652', pc: [3225] },
        { teal: 3229, source: 'contracts\\BiatecClammPool.algo.ts:651', pc: [3226, 3227] },
        { teal: 3230, source: 'contracts\\BiatecClammPool.algo.ts:651', pc: [3228] },
        { teal: 3231, source: 'contracts\\BiatecClammPool.algo.ts:650', pc: [3229] },
        { teal: 3232, source: 'contracts\\BiatecClammPool.algo.ts:650', pc: [3230] },
        { teal: 3233, source: 'contracts\\BiatecClammPool.algo.ts:649', pc: [3231, 3232, 3233] },
        { teal: 3234, source: 'contracts\\BiatecClammPool.algo.ts:649', pc: [3234, 3235] },
        { teal: 3244, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3236, 3237] },
        { teal: 3245, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3238] },
        { teal: 3246, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3239] },
        { teal: 3247, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3240] },
        { teal: 3248, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3241] },
        {
          teal: 3251,
          source: 'contracts\\BiatecClammPool.algo.ts:662',
          errorMessage: 'D_SQRT overflowed 256 bits',
          pc: [3242],
        },
        { teal: 3252, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3243] },
        { teal: 3253, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3244] },
        { teal: 3254, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3245] },
        { teal: 3255, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3246] },
        { teal: 3256, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3247] },
        { teal: 3257, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3248] },
        { teal: 3258, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3249] },
        { teal: 3259, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3250] },
        { teal: 3260, source: 'contracts\\BiatecClammPool.algo.ts:662', pc: [3251] },
        { teal: 3261, source: 'contracts\\BiatecClammPool.algo.ts:661', pc: [3252, 3253] },
        { teal: 3262, source: 'contracts\\BiatecClammPool.algo.ts:661', pc: [3254] },
        { teal: 3263, source: 'contracts\\BiatecClammPool.algo.ts:660', pc: [3255, 3256] },
        { teal: 3264, source: 'contracts\\BiatecClammPool.algo.ts:660', pc: [3257] },
        { teal: 3265, source: 'contracts\\BiatecClammPool.algo.ts:659', pc: [3258, 3259] },
        { teal: 3266, source: 'contracts\\BiatecClammPool.algo.ts:659', pc: [3260] },
        { teal: 3267, source: 'contracts\\BiatecClammPool.algo.ts:658', pc: [3261] },
        { teal: 3268, source: 'contracts\\BiatecClammPool.algo.ts:658', pc: [3262] },
        { teal: 3269, source: 'contracts\\BiatecClammPool.algo.ts:657', pc: [3263, 3264, 3265] },
        { teal: 3270, source: 'contracts\\BiatecClammPool.algo.ts:657', pc: [3266, 3267] },
        { teal: 3275, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3268, 3269] },
        { teal: 3276, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3270, 3271] },
        { teal: 3277, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3272] },
        { teal: 3278, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3273] },
        { teal: 3279, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3274] },
        { teal: 3280, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3275] },
        {
          teal: 3283,
          source: 'contracts\\BiatecClammPool.algo.ts:665',
          errorMessage: 'lAfter overflowed 256 bits',
          pc: [3276],
        },
        { teal: 3284, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3277] },
        { teal: 3285, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3278] },
        { teal: 3286, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3279] },
        { teal: 3287, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3280] },
        { teal: 3288, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3281] },
        { teal: 3289, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3282] },
        { teal: 3290, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3283] },
        { teal: 3291, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3284] },
        { teal: 3292, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3285] },
        { teal: 3293, source: 'contracts\\BiatecClammPool.algo.ts:665', pc: [3286] },
        { teal: 3297, source: 'contracts\\BiatecClammPool.algo.ts:666', pc: [3287, 3288] },
        { teal: 3298, source: 'contracts\\BiatecClammPool.algo.ts:666', pc: [3289, 3290] },
        { teal: 3299, source: 'contracts\\BiatecClammPool.algo.ts:666', pc: [3291] },
        { teal: 3302, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [3292, 3293] },
        { teal: 3305, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [3294, 3295] },
        { teal: 3306, source: 'contracts\\BiatecClammPool.algo.ts:570', pc: [3296] },
        { teal: 3311, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3297, 3298] },
        { teal: 3314, source: 'contracts\\BiatecClammPool.algo.ts:686', pc: [3299, 3300, 3301] },
        { teal: 3315, source: 'contracts\\BiatecClammPool.algo.ts:686', pc: [3302] },
        { teal: 3316, source: 'contracts\\BiatecClammPool.algo.ts:686', pc: [3303] },
        { teal: 3317, source: 'contracts\\BiatecClammPool.algo.ts:686', pc: [3304] },
        { teal: 3318, source: 'contracts\\BiatecClammPool.algo.ts:686', pc: [3305] },
        {
          teal: 3321,
          source: 'contracts\\BiatecClammPool.algo.ts:686',
          errorMessage: 'argument 0 (amount) for removeLiquidityAdmin must be a uint256',
          pc: [3306],
        },
        { teal: 3324, source: 'contracts\\BiatecClammPool.algo.ts:685', pc: [3307, 3308, 3309] },
        { teal: 3325, source: 'contracts\\BiatecClammPool.algo.ts:685', pc: [3310] },
        { teal: 3328, source: 'contracts\\BiatecClammPool.algo.ts:684', pc: [3311, 3312, 3313] },
        { teal: 3329, source: 'contracts\\BiatecClammPool.algo.ts:684', pc: [3314] },
        { teal: 3332, source: 'contracts\\BiatecClammPool.algo.ts:683', pc: [3315, 3316, 3317] },
        { teal: 3333, source: 'contracts\\BiatecClammPool.algo.ts:683', pc: [3318] },
        { teal: 3336, source: 'contracts\\BiatecClammPool.algo.ts:682', pc: [3319, 3320, 3321] },
        { teal: 3337, source: 'contracts\\BiatecClammPool.algo.ts:682', pc: [3322] },
        { teal: 3340, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3323, 3324, 3325] },
        { teal: 3341, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3326] },
        { teal: 3342, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3327] },
        { teal: 3343, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3328] },
        { teal: 3344, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3329] },
        {
          teal: 3347,
          source: 'contracts\\BiatecClammPool.algo.ts:681',
          errorMessage: 'removeLiquidityAdmin return value overflowed 256 bits',
          pc: [3330],
        },
        { teal: 3348, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3331] },
        { teal: 3349, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3332] },
        { teal: 3350, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3333] },
        { teal: 3351, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3334] },
        { teal: 3352, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3335] },
        { teal: 3353, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3336] },
        { teal: 3354, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3337] },
        { teal: 3355, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3338] },
        { teal: 3356, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3339] },
        { teal: 3357, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3340] },
        { teal: 3358, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3341] },
        { teal: 3359, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3342] },
        { teal: 3360, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3343] },
        { teal: 3375, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3344, 3345, 3346] },
        { teal: 3378, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3347] },
        { teal: 3379, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3348, 3349] },
        { teal: 3384, source: 'contracts\\BiatecClammPool.algo.ts:689', pc: [3350, 3351] },
        { teal: 3385, source: 'contracts\\BiatecClammPool.algo.ts:689', pc: [3352, 3353] },
        { teal: 3386, source: 'contracts\\BiatecClammPool.algo.ts:689', pc: [3354, 3355] },
        { teal: 3387, source: 'contracts\\BiatecClammPool.algo.ts:689', pc: [3356, 3357, 3358] },
        { teal: 3391, source: 'contracts\\BiatecClammPool.algo.ts:691', pc: [3359, 3360] },
        { teal: 3392, source: 'contracts\\BiatecClammPool.algo.ts:691', pc: [3361, 3362] },
        { teal: 3393, source: 'contracts\\BiatecClammPool.algo.ts:691', pc: [3363] },
        { teal: 3394, source: 'contracts\\BiatecClammPool.algo.ts:691', pc: [3364] },
        { teal: 3395, source: 'contracts\\BiatecClammPool.algo.ts:691', pc: [3365] },
        { teal: 3399, source: 'contracts\\BiatecClammPool.algo.ts:692', pc: [3366, 3367] },
        { teal: 3400, source: 'contracts\\BiatecClammPool.algo.ts:692', pc: [3368, 3369] },
        { teal: 3401, source: 'contracts\\BiatecClammPool.algo.ts:692', pc: [3370] },
        {
          teal: 3404,
          source: 'contracts\\BiatecClammPool.algo.ts:692',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('ef')",
          pc: [3371],
        },
        { teal: 3405, source: 'contracts\\BiatecClammPool.algo.ts:692', pc: [3372, 3373] },
        { teal: 3409, source: 'contracts\\BiatecClammPool.algo.ts:694', pc: [3374, 3375] },
        { teal: 3410, source: 'contracts\\BiatecClammPool.algo.ts:694', pc: [3376, 3377] },
        { teal: 3411, source: 'contracts\\BiatecClammPool.algo.ts:694', pc: [3378] },
        {
          teal: 3414,
          source: 'contracts\\BiatecClammPool.algo.ts:694',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('s')",
          pc: [3379],
        },
        { teal: 3415, source: 'contracts\\BiatecClammPool.algo.ts:694', pc: [3380, 3381] },
        { teal: 3419, source: 'contracts\\BiatecClammPool.algo.ts:695', pc: [3382, 3383] },
        { teal: 3420, source: 'contracts\\BiatecClammPool.algo.ts:695', pc: [3384] },
        { teal: 3421, source: 'contracts\\BiatecClammPool.algo.ts:695', pc: [3385] },
        { teal: 3424, source: 'contracts\\BiatecClammPool.algo.ts:695', errorMessage: 'E_PAUSED', pc: [3386] },
        { teal: 3428, source: 'contracts\\BiatecClammPool.algo.ts:701', pc: [3387, 3388] },
        { teal: 3429, source: 'contracts\\BiatecClammPool.algo.ts:701', pc: [3389, 3390] },
        { teal: 3430, source: 'contracts\\BiatecClammPool.algo.ts:701', pc: [3391] },
        { teal: 3433, source: 'contracts\\BiatecClammPool.algo.ts:701', errorMessage: 'ERR-EXEC-ONLY', pc: [3392] },
        { teal: 3437, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3393] },
        { teal: 3438, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3394, 3395] },
        { teal: 3439, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3396, 3397] },
        { teal: 3440, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3398] },
        { teal: 3441, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3399, 3400] },
        { teal: 3442, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3401, 3402] },
        { teal: 3443, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3403] },
        { teal: 3444, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3404, 3405] },
        { teal: 3445, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3406, 3407] },
        { teal: 3446, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3408, 3409] },
        { teal: 3447, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3410, 3411] },
        { teal: 3448, source: 'contracts\\BiatecClammPool.algo.ts:703', pc: [3412] },
        { teal: 3452, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3413] },
        { teal: 3453, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3414, 3415] },
        { teal: 3454, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3416, 3417] },
        { teal: 3455, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3418] },
        { teal: 3456, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3419, 3420] },
        { teal: 3457, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3421, 3422] },
        { teal: 3458, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3423] },
        { teal: 3459, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3424, 3425] },
        { teal: 3460, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3426, 3427] },
        { teal: 3461, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3428, 3429] },
        { teal: 3462, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3430, 3431] },
        { teal: 3463, source: 'contracts\\BiatecClammPool.algo.ts:704', pc: [3432] },
        { teal: 3467, source: 'contracts\\BiatecClammPool.algo.ts:706', pc: [3433, 3434] },
        { teal: 3468, source: 'contracts\\BiatecClammPool.algo.ts:706', pc: [3435, 3436] },
        { teal: 3473, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3437, 3438] },
        { teal: 3474, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3439] },
        { teal: 3475, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3440] },
        { teal: 3476, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3441, 3442, 3443] },
        { teal: 3481, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3444, 3445] },
        { teal: 3482, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3446, 3447] },
        { teal: 3483, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3448] },
        { teal: 3484, source: 'contracts\\BiatecClammPool.algo.ts:707', pc: [3449, 3450] },
        { teal: 3489, source: 'contracts\\BiatecClammPool.algo.ts:709', pc: [3451, 3452] },
        { teal: 3490, source: 'contracts\\BiatecClammPool.algo.ts:709', pc: [3453, 3454] },
        { teal: 3491, source: 'contracts\\BiatecClammPool.algo.ts:709', pc: [3455, 3456] },
        { teal: 3492, source: 'contracts\\BiatecClammPool.algo.ts:709', pc: [3457] },
        { teal: 3493, source: 'contracts\\BiatecClammPool.algo.ts:709', pc: [3458] },
        { teal: 3494, source: 'contracts\\BiatecClammPool.algo.ts:709', pc: [3459] },
        { teal: 3495, source: 'contracts\\BiatecClammPool.algo.ts:709', pc: [3460, 3461] },
        { teal: 3499, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3462, 3463] },
        { teal: 3500, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3464, 3465] },
        { teal: 3501, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3466, 3467] },
        { teal: 3502, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3468, 3469] },
        { teal: 3503, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3470] },
        { teal: 3504, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3471] },
        { teal: 3505, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3472] },
        { teal: 3506, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3473] },
        { teal: 3507, source: 'contracts\\BiatecClammPool.algo.ts:711', pc: [3474, 3475] },
        { teal: 3511, source: 'contracts\\BiatecClammPool.algo.ts:713', pc: [3476, 3477] },
        { teal: 3512, source: 'contracts\\BiatecClammPool.algo.ts:713', pc: [3478, 3479] },
        { teal: 3513, source: 'contracts\\BiatecClammPool.algo.ts:713', pc: [3480] },
        { teal: 3514, source: 'contracts\\BiatecClammPool.algo.ts:713', pc: [3481] },
        { teal: 3515, source: 'contracts\\BiatecClammPool.algo.ts:713', pc: [3482, 3483] },
        { teal: 3519, source: 'contracts\\BiatecClammPool.algo.ts:715', pc: [3484, 3485] },
        { teal: 3520, source: 'contracts\\BiatecClammPool.algo.ts:715', pc: [3486, 3487] },
        { teal: 3525, source: 'contracts\\BiatecClammPool.algo.ts:716', pc: [3488, 3489] },
        { teal: 3526, source: 'contracts\\BiatecClammPool.algo.ts:716', pc: [3490, 3491] },
        { teal: 3527, source: 'contracts\\BiatecClammPool.algo.ts:716', pc: [3492] },
        { teal: 3528, source: 'contracts\\BiatecClammPool.algo.ts:716', pc: [3493, 3494, 3495] },
        { teal: 3533, source: 'contracts\\BiatecClammPool.algo.ts:716', pc: [3496, 3497] },
        { teal: 3534, source: 'contracts\\BiatecClammPool.algo.ts:716', pc: [3498] },
        { teal: 3535, source: 'contracts\\BiatecClammPool.algo.ts:716', pc: [3499, 3500] },
        { teal: 3543, source: 'contracts\\BiatecClammPool.algo.ts:718', pc: [3501, 3502] },
        { teal: 3544, source: 'contracts\\BiatecClammPool.algo.ts:718', pc: [3503, 3504] },
        { teal: 3545, source: 'contracts\\BiatecClammPool.algo.ts:718', pc: [3505] },
        { teal: 3546, source: 'contracts\\BiatecClammPool.algo.ts:718', pc: [3506] },
        { teal: 3549, source: 'contracts\\BiatecClammPool.algo.ts:717', errorMessage: 'ERR-TOO-MUCH', pc: [3507] },
        { teal: 3553, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3508, 3509] },
        { teal: 3554, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3510] },
        { teal: 3555, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3511] },
        { teal: 3556, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3512, 3513] },
        { teal: 3557, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3514] },
        { teal: 3558, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3515] },
        { teal: 3559, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3516] },
        { teal: 3560, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3517] },
        { teal: 3561, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3518] },
        {
          teal: 3564,
          source: 'contracts\\BiatecClammPool.algo.ts:721',
          errorMessage: 'this.LiqudityBiatecFromFees.value - lpDeltaWithFees overflowed 256 bits',
          pc: [3519],
        },
        { teal: 3565, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3520] },
        { teal: 3566, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3521] },
        { teal: 3567, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3522] },
        { teal: 3568, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3523] },
        { teal: 3569, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3524] },
        { teal: 3570, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3525] },
        { teal: 3571, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3526] },
        { teal: 3572, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3527] },
        { teal: 3573, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3528] },
        { teal: 3574, source: 'contracts\\BiatecClammPool.algo.ts:721', pc: [3529] },
        { teal: 3582, source: 'contracts\\BiatecClammPool.algo.ts:725', pc: [3530, 3531] },
        { teal: 3583, source: 'contracts\\BiatecClammPool.algo.ts:725', pc: [3532] },
        { teal: 3584, source: 'contracts\\BiatecClammPool.algo.ts:724', pc: [3533] },
        { teal: 3585, source: 'contracts\\BiatecClammPool.algo.ts:724', pc: [3534] },
        { teal: 3586, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3535, 3536] },
        { teal: 3587, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3537] },
        { teal: 3588, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3538] },
        { teal: 3589, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3539] },
        { teal: 3590, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3540] },
        {
          teal: 3593,
          source: 'contracts\\BiatecClammPool.algo.ts:723',
          errorMessage: 'lpDeltaWithFees overflowed 256 bits',
          pc: [3541],
        },
        { teal: 3594, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3542] },
        { teal: 3595, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3543] },
        { teal: 3596, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3544] },
        { teal: 3597, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3545] },
        { teal: 3598, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3546] },
        { teal: 3599, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3547] },
        { teal: 3600, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3548] },
        { teal: 3601, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3549] },
        { teal: 3602, source: 'contracts\\BiatecClammPool.algo.ts:723', pc: [3550] },
        { teal: 3603, source: 'contracts\\BiatecClammPool.algo.ts:722', pc: [3551, 3552, 3553] },
        { teal: 3604, source: 'contracts\\BiatecClammPool.algo.ts:722', pc: [3554, 3555] },
        { teal: 3608, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3556, 3557] },
        { teal: 3609, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3558, 3559] },
        { teal: 3610, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3560] },
        { teal: 3611, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3561] },
        { teal: 3612, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3562] },
        { teal: 3613, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3563, 3564] },
        { teal: 3614, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3565] },
        {
          teal: 3617,
          source: 'contracts\\BiatecClammPool.algo.ts:727',
          errorMessage: '(aToSend / assetADelicmalScale2Scale) as uint64 overflowed 64 bits',
          pc: [3566],
        },
        { teal: 3618, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3567, 3568] },
        { teal: 3619, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3569] },
        { teal: 3620, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3570] },
        { teal: 3621, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3571] },
        { teal: 3622, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3572] },
        { teal: 3623, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3573, 3574] },
        { teal: 3624, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3575] },
        { teal: 3625, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3576] },
        { teal: 3626, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3577] },
        { teal: 3627, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3578] },
        { teal: 3628, source: 'contracts\\BiatecClammPool.algo.ts:727', pc: [3579, 3580] },
        { teal: 3633, source: 'contracts\\BiatecClammPool.algo.ts:728', pc: [3581, 3582] },
        { teal: 3634, source: 'contracts\\BiatecClammPool.algo.ts:728', pc: [3583] },
        { teal: 3635, source: 'contracts\\BiatecClammPool.algo.ts:728', pc: [3584] },
        { teal: 3636, source: 'contracts\\BiatecClammPool.algo.ts:728', pc: [3585, 3586, 3587] },
        { teal: 3641, source: 'contracts\\BiatecClammPool.algo.ts:729', pc: [3588, 3589] },
        { teal: 3642, source: 'contracts\\BiatecClammPool.algo.ts:729', pc: [3590, 3591] },
        { teal: 3643, source: 'contracts\\BiatecClammPool.algo.ts:729', pc: [3592, 3593] },
        { teal: 3644, source: 'contracts\\BiatecClammPool.algo.ts:729', pc: [3594, 3595, 3596] },
        { teal: 3653, source: 'contracts\\BiatecClammPool.algo.ts:734', pc: [3597, 3598] },
        { teal: 3654, source: 'contracts\\BiatecClammPool.algo.ts:734', pc: [3599] },
        { teal: 3655, source: 'contracts\\BiatecClammPool.algo.ts:733', pc: [3600, 3601] },
        { teal: 3656, source: 'contracts\\BiatecClammPool.algo.ts:733', pc: [3602] },
        { teal: 3657, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3603, 3604] },
        { teal: 3658, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3605] },
        { teal: 3659, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3606] },
        { teal: 3660, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3607] },
        { teal: 3661, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3608] },
        {
          teal: 3664,
          source: 'contracts\\BiatecClammPool.algo.ts:732',
          errorMessage: 'lpDeltaWithFees overflowed 256 bits',
          pc: [3609],
        },
        { teal: 3665, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3610] },
        { teal: 3666, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3611] },
        { teal: 3667, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3612] },
        { teal: 3668, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3613] },
        { teal: 3669, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3614] },
        { teal: 3670, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3615] },
        { teal: 3671, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3616] },
        { teal: 3672, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3617] },
        { teal: 3673, source: 'contracts\\BiatecClammPool.algo.ts:732', pc: [3618] },
        { teal: 3674, source: 'contracts\\BiatecClammPool.algo.ts:731', pc: [3619, 3620, 3621] },
        { teal: 3675, source: 'contracts\\BiatecClammPool.algo.ts:731', pc: [3622, 3623] },
        { teal: 3679, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3624, 3625] },
        { teal: 3680, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3626, 3627] },
        { teal: 3681, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3628] },
        { teal: 3682, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3629] },
        { teal: 3683, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3630] },
        { teal: 3684, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3631, 3632] },
        { teal: 3685, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3633] },
        {
          teal: 3688,
          source: 'contracts\\BiatecClammPool.algo.ts:736',
          errorMessage: '(bToSend / assetBDelicmalScale2Scale) as uint64 overflowed 64 bits',
          pc: [3634],
        },
        { teal: 3689, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3635, 3636] },
        { teal: 3690, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3637] },
        { teal: 3691, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3638] },
        { teal: 3692, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3639] },
        { teal: 3693, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3640] },
        { teal: 3694, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3641, 3642] },
        { teal: 3695, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3643] },
        { teal: 3696, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3644] },
        { teal: 3697, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3645] },
        { teal: 3698, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3646] },
        { teal: 3699, source: 'contracts\\BiatecClammPool.algo.ts:736', pc: [3647, 3648] },
        { teal: 3704, source: 'contracts\\BiatecClammPool.algo.ts:737', pc: [3649, 3650] },
        { teal: 3705, source: 'contracts\\BiatecClammPool.algo.ts:737', pc: [3651] },
        { teal: 3706, source: 'contracts\\BiatecClammPool.algo.ts:737', pc: [3652] },
        { teal: 3707, source: 'contracts\\BiatecClammPool.algo.ts:737', pc: [3653, 3654, 3655] },
        { teal: 3712, source: 'contracts\\BiatecClammPool.algo.ts:738', pc: [3656, 3657] },
        { teal: 3713, source: 'contracts\\BiatecClammPool.algo.ts:738', pc: [3658, 3659] },
        { teal: 3714, source: 'contracts\\BiatecClammPool.algo.ts:738', pc: [3660, 3661] },
        { teal: 3715, source: 'contracts\\BiatecClammPool.algo.ts:738', pc: [3662, 3663, 3664] },
        { teal: 3720, source: 'contracts\\BiatecClammPool.algo.ts:741', pc: [3665] },
        { teal: 3721, source: 'contracts\\BiatecClammPool.algo.ts:741', pc: [3666] },
        { teal: 3722, source: 'contracts\\BiatecClammPool.algo.ts:741', pc: [3667, 3668] },
        { teal: 3723, source: 'contracts\\BiatecClammPool.algo.ts:741', pc: [3669] },
        { teal: 3724, source: 'contracts\\BiatecClammPool.algo.ts:741', pc: [3670, 3671] },
        { teal: 3728, source: 'contracts\\BiatecClammPool.algo.ts:742', pc: [3672, 3673] },
        { teal: 3729, source: 'contracts\\BiatecClammPool.algo.ts:742', pc: [3674] },
        { teal: 3730, source: 'contracts\\BiatecClammPool.algo.ts:742', pc: [3675, 3676] },
        { teal: 3731, source: 'contracts\\BiatecClammPool.algo.ts:742', pc: [3677] },
        { teal: 3732, source: 'contracts\\BiatecClammPool.algo.ts:742', pc: [3678, 3679] },
        { teal: 3736, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3680] },
        { teal: 3737, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3681, 3682] },
        { teal: 3738, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3683] },
        { teal: 3739, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3684] },
        { teal: 3740, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3685] },
        { teal: 3741, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3686] },
        {
          teal: 3744,
          source: 'contracts\\BiatecClammPool.algo.ts:743',
          errorMessage: 'newAssetA overflowed 256 bits',
          pc: [3687],
        },
        { teal: 3745, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3688] },
        { teal: 3746, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3689] },
        { teal: 3747, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3690] },
        { teal: 3748, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3691] },
        { teal: 3749, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3692] },
        { teal: 3750, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3693] },
        { teal: 3751, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3694] },
        { teal: 3752, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3695] },
        { teal: 3753, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3696] },
        { teal: 3754, source: 'contracts\\BiatecClammPool.algo.ts:743', pc: [3697] },
        { teal: 3758, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3698, 3699] },
        { teal: 3759, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3700, 3701] },
        { teal: 3760, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3702] },
        { teal: 3761, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3703] },
        { teal: 3762, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3704] },
        { teal: 3763, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3705] },
        {
          teal: 3766,
          source: 'contracts\\BiatecClammPool.algo.ts:744',
          errorMessage: 'newAssetB overflowed 256 bits',
          pc: [3706],
        },
        { teal: 3767, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3707] },
        { teal: 3768, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3708] },
        { teal: 3769, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3709] },
        { teal: 3770, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3710] },
        { teal: 3771, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3711] },
        { teal: 3772, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3712] },
        { teal: 3773, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3713] },
        { teal: 3774, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3714] },
        { teal: 3775, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3715] },
        { teal: 3776, source: 'contracts\\BiatecClammPool.algo.ts:744', pc: [3716] },
        { teal: 3780, source: 'contracts\\BiatecClammPool.algo.ts:748', pc: [3717, 3718] },
        { teal: 3781, source: 'contracts\\BiatecClammPool.algo.ts:748', pc: [3719, 3720] },
        { teal: 3786, source: 'contracts\\BiatecClammPool.algo.ts:749', pc: [3721, 3722] },
        { teal: 3787, source: 'contracts\\BiatecClammPool.algo.ts:749', pc: [3723] },
        { teal: 3788, source: 'contracts\\BiatecClammPool.algo.ts:749', pc: [3724, 3725] },
        { teal: 3789, source: 'contracts\\BiatecClammPool.algo.ts:749', pc: [3726] },
        { teal: 3790, source: 'contracts\\BiatecClammPool.algo.ts:749', pc: [3727] },
        { teal: 3791, source: 'contracts\\BiatecClammPool.algo.ts:749', pc: [3728, 3729, 3730] },
        { teal: 3800, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3731, 3732] },
        { teal: 3801, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3733] },
        { teal: 3802, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3734] },
        { teal: 3803, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3735] },
        { teal: 3804, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3736] },
        { teal: 3805, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3737] },
        { teal: 3806, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3738] },
        {
          teal: 3809,
          source: 'contracts\\BiatecClammPool.algo.ts:753',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [3739],
        },
        { teal: 3810, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3740] },
        { teal: 3811, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3741] },
        { teal: 3812, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3742] },
        { teal: 3813, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3743] },
        { teal: 3814, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3744] },
        { teal: 3815, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3745] },
        { teal: 3816, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3746] },
        { teal: 3817, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3747] },
        { teal: 3818, source: 'contracts\\BiatecClammPool.algo.ts:753', pc: [3748] },
        { teal: 3819, source: 'contracts\\BiatecClammPool.algo.ts:752', pc: [3749, 3750] },
        { teal: 3820, source: 'contracts\\BiatecClammPool.algo.ts:752', pc: [3751] },
        { teal: 3821, source: 'contracts\\BiatecClammPool.algo.ts:751', pc: [3752] },
        { teal: 3822, source: 'contracts\\BiatecClammPool.algo.ts:751', pc: [3753] },
        { teal: 3823, source: 'contracts\\BiatecClammPool.algo.ts:750', pc: [3754, 3755, 3756] },
        { teal: 3824, source: 'contracts\\BiatecClammPool.algo.ts:750', pc: [3757, 3758] },
        { teal: 3825, source: 'contracts\\BiatecClammPool.algo.ts:749', pc: [3759, 3760, 3761] },
        { teal: 3837, source: 'contracts\\BiatecClammPool.algo.ts:762', pc: [3762, 3763] },
        { teal: 3838, source: 'contracts\\BiatecClammPool.algo.ts:762', pc: [3764] },
        { teal: 3839, source: 'contracts\\BiatecClammPool.algo.ts:761', pc: [3765, 3766] },
        { teal: 3840, source: 'contracts\\BiatecClammPool.algo.ts:761', pc: [3767] },
        { teal: 3841, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3768, 3769] },
        { teal: 3842, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3770] },
        { teal: 3843, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3771] },
        { teal: 3844, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3772] },
        { teal: 3845, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3773] },
        { teal: 3846, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3774] },
        { teal: 3847, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3775] },
        {
          teal: 3850,
          source: 'contracts\\BiatecClammPool.algo.ts:760',
          errorMessage: 'this.priceMax.value as uint256 overflowed 256 bits',
          pc: [3776],
        },
        { teal: 3851, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3777] },
        { teal: 3852, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3778] },
        { teal: 3853, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3779] },
        { teal: 3854, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3780] },
        { teal: 3855, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3781] },
        { teal: 3856, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3782] },
        { teal: 3857, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3783] },
        { teal: 3858, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3784] },
        { teal: 3859, source: 'contracts\\BiatecClammPool.algo.ts:760', pc: [3785] },
        { teal: 3860, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3786, 3787] },
        { teal: 3861, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3788] },
        { teal: 3862, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3789] },
        { teal: 3863, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3790] },
        { teal: 3864, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3791] },
        { teal: 3865, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3792] },
        { teal: 3866, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3793] },
        {
          teal: 3869,
          source: 'contracts\\BiatecClammPool.algo.ts:759',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [3794],
        },
        { teal: 3870, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3795] },
        { teal: 3871, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3796] },
        { teal: 3872, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3797] },
        { teal: 3873, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3798] },
        { teal: 3874, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3799] },
        { teal: 3875, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3800] },
        { teal: 3876, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3801] },
        { teal: 3877, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3802] },
        { teal: 3878, source: 'contracts\\BiatecClammPool.algo.ts:759', pc: [3803] },
        { teal: 3879, source: 'contracts\\BiatecClammPool.algo.ts:758', pc: [3804, 3805] },
        { teal: 3880, source: 'contracts\\BiatecClammPool.algo.ts:758', pc: [3806] },
        { teal: 3881, source: 'contracts\\BiatecClammPool.algo.ts:757', pc: [3807] },
        { teal: 3882, source: 'contracts\\BiatecClammPool.algo.ts:757', pc: [3808] },
        { teal: 3883, source: 'contracts\\BiatecClammPool.algo.ts:756', pc: [3809, 3810, 3811] },
        { teal: 3884, source: 'contracts\\BiatecClammPool.algo.ts:756', pc: [3812, 3813] },
        { teal: 3894, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3814, 3815] },
        { teal: 3895, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3816] },
        { teal: 3896, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3817] },
        { teal: 3897, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3818] },
        { teal: 3898, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3819] },
        {
          teal: 3901,
          source: 'contracts\\BiatecClammPool.algo.ts:769',
          errorMessage: 'D_SQRT overflowed 256 bits',
          pc: [3820],
        },
        { teal: 3902, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3821] },
        { teal: 3903, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3822] },
        { teal: 3904, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3823] },
        { teal: 3905, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3824] },
        { teal: 3906, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3825] },
        { teal: 3907, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3826] },
        { teal: 3908, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3827] },
        { teal: 3909, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3828] },
        { teal: 3910, source: 'contracts\\BiatecClammPool.algo.ts:769', pc: [3829] },
        { teal: 3911, source: 'contracts\\BiatecClammPool.algo.ts:768', pc: [3830, 3831] },
        { teal: 3912, source: 'contracts\\BiatecClammPool.algo.ts:768', pc: [3832] },
        { teal: 3913, source: 'contracts\\BiatecClammPool.algo.ts:767', pc: [3833, 3834] },
        { teal: 3914, source: 'contracts\\BiatecClammPool.algo.ts:767', pc: [3835] },
        { teal: 3915, source: 'contracts\\BiatecClammPool.algo.ts:766', pc: [3836, 3837] },
        { teal: 3916, source: 'contracts\\BiatecClammPool.algo.ts:766', pc: [3838] },
        { teal: 3917, source: 'contracts\\BiatecClammPool.algo.ts:765', pc: [3839] },
        { teal: 3918, source: 'contracts\\BiatecClammPool.algo.ts:765', pc: [3840] },
        { teal: 3919, source: 'contracts\\BiatecClammPool.algo.ts:764', pc: [3841, 3842, 3843] },
        { teal: 3920, source: 'contracts\\BiatecClammPool.algo.ts:764', pc: [3844, 3845] },
        { teal: 3925, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3846, 3847] },
        { teal: 3926, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3848, 3849] },
        { teal: 3927, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3850] },
        { teal: 3928, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3851] },
        { teal: 3929, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3852] },
        { teal: 3930, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3853] },
        {
          teal: 3933,
          source: 'contracts\\BiatecClammPool.algo.ts:772',
          errorMessage: 'lAfter overflowed 256 bits',
          pc: [3854],
        },
        { teal: 3934, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3855] },
        { teal: 3935, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3856] },
        { teal: 3936, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3857] },
        { teal: 3937, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3858] },
        { teal: 3938, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3859] },
        { teal: 3939, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3860] },
        { teal: 3940, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3861] },
        { teal: 3941, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3862] },
        { teal: 3942, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3863] },
        { teal: 3943, source: 'contracts\\BiatecClammPool.algo.ts:772', pc: [3864] },
        { teal: 3947, source: 'contracts\\BiatecClammPool.algo.ts:773', pc: [3865, 3866] },
        { teal: 3948, source: 'contracts\\BiatecClammPool.algo.ts:773', pc: [3867, 3868] },
        { teal: 3949, source: 'contracts\\BiatecClammPool.algo.ts:773', pc: [3869] },
        { teal: 3952, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3870, 3871] },
        { teal: 3955, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3872, 3873] },
        { teal: 3956, source: 'contracts\\BiatecClammPool.algo.ts:681', pc: [3874] },
        { teal: 3968, source: 'contracts\\BiatecClammPool.algo.ts:785', pc: [3875, 3876, 3877] },
        { teal: 3971, source: 'contracts\\BiatecClammPool.algo.ts:785', pc: [3878] },
        { teal: 3972, source: 'contracts\\BiatecClammPool.algo.ts:785', pc: [3879, 3880] },
        { teal: 3979, source: 'contracts\\BiatecClammPool.algo.ts:787', pc: [3881, 3882] },
        { teal: 3980, source: 'contracts\\BiatecClammPool.algo.ts:787', pc: [3883, 3884] },
        { teal: 3981, source: 'contracts\\BiatecClammPool.algo.ts:787', pc: [3885] },
        { teal: 3982, source: 'contracts\\BiatecClammPool.algo.ts:787', pc: [3886] },
        {
          teal: 3985,
          source: 'contracts\\BiatecClammPool.algo.ts:786',
          errorMessage: 'ERR-INVALID-CONFIG',
          pc: [3887],
        },
        { teal: 3989, source: 'contracts\\BiatecClammPool.algo.ts:790', pc: [3888, 3889] },
        { teal: 3990, source: 'contracts\\BiatecClammPool.algo.ts:790', pc: [3890, 3891, 3892] },
        { teal: 3991, source: 'contracts\\BiatecClammPool.algo.ts:790', pc: [3893] },
        {
          teal: 3994,
          source: 'contracts\\BiatecClammPool.algo.ts:790',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('i')",
          pc: [3894],
        },
        { teal: 3995, source: 'contracts\\BiatecClammPool.algo.ts:790', pc: [3895, 3896] },
        { teal: 4002, source: 'contracts\\BiatecClammPool.algo.ts:792', pc: [3897, 3898] },
        { teal: 4003, source: 'contracts\\BiatecClammPool.algo.ts:792', pc: [3899, 3900] },
        { teal: 4004, source: 'contracts\\BiatecClammPool.algo.ts:792', pc: [3901] },
        { teal: 4007, source: 'contracts\\BiatecClammPool.algo.ts:791', errorMessage: 'ERR-WRONG-IDENT', pc: [3902] },
        { teal: 4016, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3903] },
        { teal: 4017, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3904, 3905] },
        { teal: 4018, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3906, 3907] },
        { teal: 4019, source: 'contracts\\BiatecClammPool.algo.ts:797', pc: [3908, 3909, 3910, 3911, 3912, 3913] },
        { teal: 4020, source: 'contracts\\BiatecClammPool.algo.ts:797', pc: [3914, 3915] },
        { teal: 4024, source: 'contracts\\BiatecClammPool.algo.ts:798', pc: [3916, 3917] },
        { teal: 4025, source: 'contracts\\BiatecClammPool.algo.ts:798', pc: [3918, 3919] },
        { teal: 4026, source: 'contracts\\BiatecClammPool.algo.ts:798', pc: [3920, 3921, 3922] },
        { teal: 4027, source: 'contracts\\BiatecClammPool.algo.ts:798', pc: [3923, 3924] },
        { teal: 4031, source: 'contracts\\BiatecClammPool.algo.ts:799', pc: [3925] },
        { teal: 4032, source: 'contracts\\BiatecClammPool.algo.ts:799', pc: [3926, 3927] },
        { teal: 4036, source: 'contracts\\BiatecClammPool.algo.ts:800', pc: [3928, 3929] },
        { teal: 4037, source: 'contracts\\BiatecClammPool.algo.ts:800', pc: [3930, 3931] },
        { teal: 4040, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3932] },
        { teal: 4041, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3933, 3934] },
        { teal: 4042, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3935] },
        { teal: 4043, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3936] },
        { teal: 4044, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3937, 3938] },
        { teal: 4045, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3939, 3940, 3941] },
        { teal: 4046, source: 'contracts\\BiatecClammPool.algo.ts:796', pc: [3942, 3943] },
        { teal: 4053, source: 'contracts\\BiatecClammPool.algo.ts:803', pc: [3944, 3945] },
        { teal: 4054, source: 'contracts\\BiatecClammPool.algo.ts:803', pc: [3946, 3947] },
        { teal: 4055, source: 'contracts\\BiatecClammPool.algo.ts:803', pc: [3948, 3949] },
        { teal: 4056, source: 'contracts\\BiatecClammPool.algo.ts:803', pc: [3950, 3951, 3952] },
        { teal: 4057, source: 'contracts\\BiatecClammPool.algo.ts:803', pc: [3953] },
        { teal: 4058, source: 'contracts\\BiatecClammPool.algo.ts:803', pc: [3954] },
        { teal: 4061, source: 'contracts\\BiatecClammPool.algo.ts:802', errorMessage: 'ERR-USER-LOCKED', pc: [3955] },
        { teal: 4068, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3956, 3957] },
        { teal: 4069, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3958, 3959] },
        { teal: 4070, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3960, 3961] },
        { teal: 4071, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3962, 3963, 3964] },
        { teal: 4072, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3965] },
        { teal: 4073, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3966, 3967] },
        { teal: 4074, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3968] },
        { teal: 4075, source: 'contracts\\BiatecClammPool.algo.ts:807', pc: [3969] },
        { teal: 4078, source: 'contracts\\BiatecClammPool.algo.ts:806', errorMessage: 'ERR-LOW-VER', pc: [3970] },
        { teal: 4082, source: 'contracts\\BiatecClammPool.algo.ts:811', pc: [3971, 3972] },
        { teal: 4083, source: 'contracts\\BiatecClammPool.algo.ts:811', pc: [3973, 3974] },
        { teal: 4084, source: 'contracts\\BiatecClammPool.algo.ts:811', pc: [3975] },
        {
          teal: 4087,
          source: 'contracts\\BiatecClammPool.algo.ts:811',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('s')",
          pc: [3976],
        },
        { teal: 4088, source: 'contracts\\BiatecClammPool.algo.ts:811', pc: [3977, 3978] },
        { teal: 4092, source: 'contracts\\BiatecClammPool.algo.ts:812', pc: [3979, 3980] },
        { teal: 4093, source: 'contracts\\BiatecClammPool.algo.ts:812', pc: [3981] },
        { teal: 4094, source: 'contracts\\BiatecClammPool.algo.ts:812', pc: [3982] },
        { teal: 4097, source: 'contracts\\BiatecClammPool.algo.ts:812', errorMessage: 'E_PAUSED', pc: [3983] },
        { teal: 4101, source: 'contracts\\BiatecClammPool.algo.ts:814', pc: [3984, 3985] },
        { teal: 4104, source: 'contracts\\BiatecClammPool.algo.ts:785', pc: [3986, 3987] },
        { teal: 4107, source: 'contracts\\BiatecClammPool.algo.ts:785', pc: [3988, 3989] },
        { teal: 4108, source: 'contracts\\BiatecClammPool.algo.ts:785', pc: [3990] },
        { teal: 4113, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [3991, 3992] },
        { teal: 4116, source: 'contracts\\BiatecClammPool.algo.ts:831', pc: [3993, 3994, 3995] },
        { teal: 4117, source: 'contracts\\BiatecClammPool.algo.ts:831', pc: [3996] },
        { teal: 4120, source: 'contracts\\BiatecClammPool.algo.ts:830', pc: [3997, 3998, 3999] },
        { teal: 4121, source: 'contracts\\BiatecClammPool.algo.ts:830', pc: [4000] },
        { teal: 4124, source: 'contracts\\BiatecClammPool.algo.ts:829', pc: [4001, 4002, 4003] },
        { teal: 4125, source: 'contracts\\BiatecClammPool.algo.ts:829', pc: [4004] },
        { teal: 4128, source: 'contracts\\BiatecClammPool.algo.ts:828', pc: [4005, 4006] },
        { teal: 4129, source: 'contracts\\BiatecClammPool.algo.ts:828', pc: [4007] },
        { teal: 4130, source: 'contracts\\BiatecClammPool.algo.ts:828', pc: [4008] },
        { teal: 4133, source: 'contracts\\BiatecClammPool.algo.ts:827', pc: [4009, 4010, 4011] },
        { teal: 4134, source: 'contracts\\BiatecClammPool.algo.ts:827', pc: [4012] },
        { teal: 4137, source: 'contracts\\BiatecClammPool.algo.ts:826', pc: [4013, 4014, 4015] },
        { teal: 4138, source: 'contracts\\BiatecClammPool.algo.ts:826', pc: [4016] },
        { teal: 4141, source: 'contracts\\BiatecClammPool.algo.ts:825', pc: [4017, 4018, 4019] },
        { teal: 4142, source: 'contracts\\BiatecClammPool.algo.ts:825', pc: [4020] },
        { teal: 4145, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4021, 4022, 4023] },
        { teal: 4146, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4024] },
        { teal: 4147, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4025] },
        { teal: 4148, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4026] },
        { teal: 4149, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4027] },
        {
          teal: 4152,
          source: 'contracts\\BiatecClammPool.algo.ts:824',
          errorMessage: 'swap return value overflowed 256 bits',
          pc: [4028],
        },
        { teal: 4153, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4029] },
        { teal: 4154, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4030] },
        { teal: 4155, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4031] },
        { teal: 4156, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4032] },
        { teal: 4157, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4033] },
        { teal: 4158, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4034] },
        { teal: 4159, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4035] },
        { teal: 4160, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4036] },
        { teal: 4161, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4037] },
        { teal: 4162, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4038] },
        { teal: 4163, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4039] },
        { teal: 4164, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4040] },
        { teal: 4165, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4041] },
        { teal: 4175, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4042, 4043, 4044] },
        { teal: 4178, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4045] },
        { teal: 4179, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [4046, 4047] },
        { teal: 4183, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4048] },
        { teal: 4184, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4049, 4050] },
        { teal: 4185, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4051, 4052] },
        { teal: 4186, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4053] },
        { teal: 4187, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4054, 4055] },
        { teal: 4188, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4056, 4057] },
        { teal: 4189, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4058] },
        { teal: 4190, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4059, 4060] },
        { teal: 4191, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4061, 4062] },
        { teal: 4192, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4063, 4064] },
        { teal: 4193, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4065, 4066] },
        { teal: 4194, source: 'contracts\\BiatecClammPool.algo.ts:833', pc: [4067] },
        { teal: 4198, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4068] },
        { teal: 4199, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4069, 4070] },
        { teal: 4200, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4071, 4072] },
        { teal: 4201, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4073] },
        { teal: 4202, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4074, 4075] },
        { teal: 4203, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4076, 4077] },
        { teal: 4204, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4078] },
        { teal: 4205, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4079, 4080] },
        { teal: 4206, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4081, 4082] },
        { teal: 4207, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4083, 4084] },
        { teal: 4208, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4085, 4086] },
        { teal: 4209, source: 'contracts\\BiatecClammPool.algo.ts:834', pc: [4087] },
        { teal: 4213, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4088] },
        { teal: 4214, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4089, 4090] },
        { teal: 4215, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4091, 4092] },
        { teal: 4216, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4093] },
        { teal: 4217, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4094, 4095] },
        { teal: 4218, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4096, 4097] },
        { teal: 4219, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4098] },
        { teal: 4220, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4099, 4100] },
        { teal: 4221, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4101, 4102] },
        { teal: 4222, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4103, 4104] },
        { teal: 4223, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4105, 4106] },
        { teal: 4224, source: 'contracts\\BiatecClammPool.algo.ts:835', pc: [4107] },
        { teal: 4229, source: 'contracts\\BiatecClammPool.algo.ts:837', pc: [4108, 4109] },
        { teal: 4230, source: 'contracts\\BiatecClammPool.algo.ts:837', pc: [4110, 4111] },
        { teal: 4231, source: 'contracts\\BiatecClammPool.algo.ts:837', pc: [4112, 4113, 4114] },
        { teal: 4236, source: 'contracts\\BiatecClammPool.algo.ts:839', pc: [4115, 4116] },
        { teal: 4237, source: 'contracts\\BiatecClammPool.algo.ts:839', pc: [4117, 4118] },
        { teal: 4238, source: 'contracts\\BiatecClammPool.algo.ts:839', pc: [4119] },
        { teal: 4239, source: 'contracts\\BiatecClammPool.algo.ts:839', pc: [4120] },
        { teal: 4240, source: 'contracts\\BiatecClammPool.algo.ts:839', pc: [4121, 4122, 4123] },
        { teal: 4245, source: 'contracts\\BiatecClammPool.algo.ts:840', pc: [4124, 4125] },
        { teal: 4246, source: 'contracts\\BiatecClammPool.algo.ts:840', pc: [4126] },
        { teal: 4247, source: 'contracts\\BiatecClammPool.algo.ts:840', pc: [4127] },
        { teal: 4248, source: 'contracts\\BiatecClammPool.algo.ts:840', pc: [4128] },
        { teal: 4257, source: 'contracts\\BiatecClammPool.algo.ts:842', pc: [4129, 4130] },
        { teal: 4258, source: 'contracts\\BiatecClammPool.algo.ts:842', pc: [4131, 4132] },
        { teal: 4259, source: 'contracts\\BiatecClammPool.algo.ts:842', pc: [4133] },
        { teal: 4260, source: 'contracts\\BiatecClammPool.algo.ts:842', pc: [4134] },
        {
          teal: 4263,
          source: 'contracts\\BiatecClammPool.algo.ts:842',
          errorMessage: 'transaction verification failed: {"txn":"txSwap","field":"typeEnum","expected":"pay"}',
          pc: [4135],
        },
        { teal: 4266, source: 'contracts\\BiatecClammPool.algo.ts:842', pc: [4136, 4137] },
        { teal: 4267, source: 'contracts\\BiatecClammPool.algo.ts:843', pc: [4138, 4139] },
        { teal: 4268, source: 'contracts\\BiatecClammPool.algo.ts:843', pc: [4140] },
        { teal: 4269, source: 'contracts\\BiatecClammPool.algo.ts:843', pc: [4141] },
        {
          teal: 4272,
          source: 'contracts\\BiatecClammPool.algo.ts:843',
          errorMessage:
            'transaction verification failed: {"txn":"txSwap","field":"amount","condition":"greaterThan","expected":">0"}',
          pc: [4142],
        },
        { teal: 4275, source: 'contracts\\BiatecClammPool.algo.ts:842', pc: [4143, 4144] },
        { teal: 4276, source: 'contracts\\BiatecClammPool.algo.ts:844', pc: [4145, 4146] },
        { teal: 4277, source: 'contracts\\BiatecClammPool.algo.ts:844', pc: [4147, 4148] },
        { teal: 4278, source: 'contracts\\BiatecClammPool.algo.ts:844', pc: [4149] },
        {
          teal: 4281,
          source: 'contracts\\BiatecClammPool.algo.ts:844',
          errorMessage:
            'transaction verification failed: {"txn":"txSwap","field":"receiver","expected":"this.app.address"}',
          pc: [4150],
        },
        { teal: 4284, source: 'contracts\\BiatecClammPool.algo.ts:842', pc: [4151, 4152] },
        { teal: 4285, source: 'contracts\\BiatecClammPool.algo.ts:845', pc: [4153, 4154] },
        { teal: 4286, source: 'contracts\\BiatecClammPool.algo.ts:845', pc: [4155, 4156] },
        { teal: 4287, source: 'contracts\\BiatecClammPool.algo.ts:845', pc: [4157] },
        {
          teal: 4290,
          source: 'contracts\\BiatecClammPool.algo.ts:845',
          errorMessage:
            'transaction verification failed: {"txn":"txSwap","field":"sender","expected":"this.txn.sender"}',
          pc: [4158],
        },
        { teal: 4291, source: 'contracts\\BiatecClammPool.algo.ts:839', pc: [4159, 4160, 4161] },
        { teal: 4296, source: 'contracts\\BiatecClammPool.algo.ts:848', pc: [4162, 4163] },
        { teal: 4297, source: 'contracts\\BiatecClammPool.algo.ts:848', pc: [4164, 4165] },
        { teal: 4298, source: 'contracts\\BiatecClammPool.algo.ts:848', pc: [4166, 4167] },
        { teal: 4299, source: 'contracts\\BiatecClammPool.algo.ts:848', pc: [4168] },
        { teal: 4300, source: 'contracts\\BiatecClammPool.algo.ts:848', pc: [4169] },
        { teal: 4310, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4170, 4171] },
        { teal: 4311, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4172, 4173] },
        { teal: 4312, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4174, 4175] },
        { teal: 4313, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4176] },
        {
          teal: 4316,
          source: 'contracts\\BiatecClammPool.algo.ts:850',
          errorMessage: 'transaction verification failed: {"txn":"txSwap","field":"typeEnum","expected":"axfer"}',
          pc: [4177],
        },
        { teal: 4319, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4178, 4179] },
        { teal: 4320, source: 'contracts\\BiatecClammPool.algo.ts:851', pc: [4180, 4181] },
        { teal: 4321, source: 'contracts\\BiatecClammPool.algo.ts:851', pc: [4182] },
        { teal: 4322, source: 'contracts\\BiatecClammPool.algo.ts:851', pc: [4183] },
        {
          teal: 4325,
          source: 'contracts\\BiatecClammPool.algo.ts:851',
          errorMessage:
            'transaction verification failed: {"txn":"txSwap","field":"assetAmount","condition":"greaterThan","expected":">0"}',
          pc: [4184],
        },
        { teal: 4328, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4185, 4186] },
        { teal: 4329, source: 'contracts\\BiatecClammPool.algo.ts:852', pc: [4187, 4188] },
        { teal: 4330, source: 'contracts\\BiatecClammPool.algo.ts:852', pc: [4189, 4190] },
        { teal: 4331, source: 'contracts\\BiatecClammPool.algo.ts:852', pc: [4191] },
        {
          teal: 4334,
          source: 'contracts\\BiatecClammPool.algo.ts:852',
          errorMessage:
            'transaction verification failed: {"txn":"txSwap","field":"assetReceiver","expected":"this.app.address"}',
          pc: [4192],
        },
        { teal: 4337, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4193, 4194] },
        { teal: 4338, source: 'contracts\\BiatecClammPool.algo.ts:853', pc: [4195, 4196] },
        { teal: 4339, source: 'contracts\\BiatecClammPool.algo.ts:853', pc: [4197, 4198] },
        { teal: 4340, source: 'contracts\\BiatecClammPool.algo.ts:853', pc: [4199] },
        {
          teal: 4343,
          source: 'contracts\\BiatecClammPool.algo.ts:853',
          errorMessage:
            'transaction verification failed: {"txn":"txSwap","field":"sender","expected":"this.txn.sender"}',
          pc: [4200],
        },
        { teal: 4346, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4201, 4202] },
        { teal: 4347, source: 'contracts\\BiatecClammPool.algo.ts:854', pc: [4203, 4204] },
        { teal: 4348, source: 'contracts\\BiatecClammPool.algo.ts:854', pc: [4205, 4206] },
        { teal: 4349, source: 'contracts\\BiatecClammPool.algo.ts:854', pc: [4207] },
        { teal: 4350, source: 'contracts\\BiatecClammPool.algo.ts:850', pc: [4208, 4209] },
        { teal: 4351, source: 'contracts\\BiatecClammPool.algo.ts:854', pc: [4210, 4211] },
        { teal: 4352, source: 'contracts\\BiatecClammPool.algo.ts:854', pc: [4212, 4213] },
        { teal: 4353, source: 'contracts\\BiatecClammPool.algo.ts:854', pc: [4214] },
        { teal: 4354, source: 'contracts\\BiatecClammPool.algo.ts:854', pc: [4215] },
        {
          teal: 4357,
          source: 'contracts\\BiatecClammPool.algo.ts:854',
          errorMessage:
            'transaction verification failed: {"txn":{"txnText":"txSwap"},"field":"xferAsset","condition":"includedIn","expected":"[assetA, assetB]"}',
          pc: [4216],
        },
        { teal: 4362, source: 'contracts\\BiatecClammPool.algo.ts:858', pc: [4217, 4218] },
        { teal: 4363, source: 'contracts\\BiatecClammPool.algo.ts:858', pc: [4219, 4220] },
        { teal: 4364, source: 'contracts\\BiatecClammPool.algo.ts:858', pc: [4221] },
        {
          teal: 4367,
          source: 'contracts\\BiatecClammPool.algo.ts:858',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('p')",
          pc: [4222],
        },
        { teal: 4368, source: 'contracts\\BiatecClammPool.algo.ts:858', pc: [4223, 4224] },
        { teal: 4375, source: 'contracts\\BiatecClammPool.algo.ts:860', pc: [4225, 4226] },
        { teal: 4376, source: 'contracts\\BiatecClammPool.algo.ts:860', pc: [4227, 4228] },
        { teal: 4377, source: 'contracts\\BiatecClammPool.algo.ts:860', pc: [4229] },
        { teal: 4380, source: 'contracts\\BiatecClammPool.algo.ts:859', errorMessage: 'ERR-INVALID-PP', pc: [4230] },
        { teal: 4384, source: 'contracts\\BiatecClammPool.algo.ts:863', pc: [4231, 4232] },
        { teal: 4385, source: 'contracts\\BiatecClammPool.algo.ts:863', pc: [4233, 4234] },
        { teal: 4386, source: 'contracts\\BiatecClammPool.algo.ts:863', pc: [4235, 4236, 4237] },
        { teal: 4387, source: 'contracts\\BiatecClammPool.algo.ts:863', pc: [4238, 4239] },
        { teal: 4391, source: 'contracts\\BiatecClammPool.algo.ts:865', pc: [4240, 4241] },
        { teal: 4392, source: 'contracts\\BiatecClammPool.algo.ts:865', pc: [4242, 4243] },
        { teal: 4397, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4244, 4245] },
        { teal: 4398, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4246] },
        { teal: 4399, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4247] },
        { teal: 4400, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4248, 4249, 4250] },
        { teal: 4405, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4251, 4252] },
        { teal: 4406, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4253, 4254] },
        { teal: 4407, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4255] },
        { teal: 4408, source: 'contracts\\BiatecClammPool.algo.ts:866', pc: [4256, 4257] },
        { teal: 4413, source: 'contracts\\BiatecClammPool.algo.ts:868', pc: [4258, 4259] },
        { teal: 4414, source: 'contracts\\BiatecClammPool.algo.ts:868', pc: [4260, 4261] },
        { teal: 4415, source: 'contracts\\BiatecClammPool.algo.ts:868', pc: [4262, 4263] },
        { teal: 4416, source: 'contracts\\BiatecClammPool.algo.ts:868', pc: [4264] },
        { teal: 4417, source: 'contracts\\BiatecClammPool.algo.ts:868', pc: [4265] },
        { teal: 4418, source: 'contracts\\BiatecClammPool.algo.ts:868', pc: [4266] },
        { teal: 4419, source: 'contracts\\BiatecClammPool.algo.ts:868', pc: [4267, 4268] },
        { teal: 4423, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4269, 4270] },
        { teal: 4424, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4271, 4272] },
        { teal: 4425, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4273, 4274] },
        { teal: 4426, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4275, 4276] },
        { teal: 4427, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4277] },
        { teal: 4428, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4278] },
        { teal: 4429, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4279] },
        { teal: 4430, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4280] },
        { teal: 4431, source: 'contracts\\BiatecClammPool.algo.ts:870', pc: [4281, 4282] },
        { teal: 4436, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [4283] },
        { teal: 4437, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4284, 4285] },
        { teal: 4438, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4286] },
        { teal: 4439, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4287] },
        { teal: 4440, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4288, 4289] },
        { teal: 4441, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4290, 4291] },
        { teal: 4442, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4292, 4293] },
        { teal: 4443, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4294, 4295, 4296] },
        { teal: 4444, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4297] },
        { teal: 4445, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4298] },
        { teal: 4446, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4299] },
        { teal: 4447, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4300, 4301] },
        { teal: 4448, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4302, 4303] },
        { teal: 4449, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4304, 4305] },
        { teal: 4450, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4306, 4307, 4308] },
        { teal: 4451, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4309] },
        { teal: 4452, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4310] },
        { teal: 4453, source: 'contracts\\BiatecClammPool.algo.ts:873', pc: [4311] },
        { teal: 4454, source: 'contracts\\BiatecClammPool.algo.ts:872', pc: [4312] },
        { teal: 4455, source: 'contracts\\BiatecClammPool.algo.ts:872', pc: [4313, 4314] },
        { teal: 4459, source: 'contracts\\BiatecClammPool.algo.ts:874', pc: [4315] },
        { teal: 4460, source: 'contracts\\BiatecClammPool.algo.ts:874', pc: [4316, 4317] },
        { teal: 4464, source: 'contracts\\BiatecClammPool.algo.ts:875', pc: [4318] },
        { teal: 4465, source: 'contracts\\BiatecClammPool.algo.ts:875', pc: [4319, 4320] },
        { teal: 4469, source: 'contracts\\BiatecClammPool.algo.ts:876', pc: [4321] },
        { teal: 4470, source: 'contracts\\BiatecClammPool.algo.ts:876', pc: [4322, 4323] },
        { teal: 4474, source: 'contracts\\BiatecClammPool.algo.ts:877', pc: [4324] },
        { teal: 4475, source: 'contracts\\BiatecClammPool.algo.ts:877', pc: [4325, 4326] },
        { teal: 4479, source: 'contracts\\BiatecClammPool.algo.ts:878', pc: [4327] },
        { teal: 4480, source: 'contracts\\BiatecClammPool.algo.ts:878', pc: [4328, 4329] },
        { teal: 4484, source: 'contracts\\BiatecClammPool.algo.ts:880', pc: [4330] },
        { teal: 4485, source: 'contracts\\BiatecClammPool.algo.ts:880', pc: [4331, 4332] },
        { teal: 4490, source: 'contracts\\BiatecClammPool.algo.ts:881', pc: [4333, 4334] },
        { teal: 4491, source: 'contracts\\BiatecClammPool.algo.ts:881', pc: [4335, 4336] },
        { teal: 4492, source: 'contracts\\BiatecClammPool.algo.ts:881', pc: [4337] },
        { teal: 4493, source: 'contracts\\BiatecClammPool.algo.ts:881', pc: [4338] },
        { teal: 4494, source: 'contracts\\BiatecClammPool.algo.ts:881', pc: [4339, 4340, 4341] },
        { teal: 4499, source: 'contracts\\BiatecClammPool.algo.ts:882', pc: [4342] },
        { teal: 4500, source: 'contracts\\BiatecClammPool.algo.ts:882', pc: [4343, 4344] },
        { teal: 4501, source: 'contracts\\BiatecClammPool.algo.ts:881', pc: [4345, 4346, 4347] },
        { teal: 4506, source: 'contracts\\BiatecClammPool.algo.ts:884', pc: [4348, 4349] },
        { teal: 4507, source: 'contracts\\BiatecClammPool.algo.ts:884', pc: [4350, 4351] },
        { teal: 4508, source: 'contracts\\BiatecClammPool.algo.ts:884', pc: [4352, 4353] },
        { teal: 4509, source: 'contracts\\BiatecClammPool.algo.ts:884', pc: [4354] },
        { teal: 4510, source: 'contracts\\BiatecClammPool.algo.ts:884', pc: [4355, 4356] },
        { teal: 4515, source: 'contracts\\BiatecClammPool.algo.ts:886', pc: [4357, 4358] },
        { teal: 4516, source: 'contracts\\BiatecClammPool.algo.ts:886', pc: [4359, 4360] },
        { teal: 4520, source: 'contracts\\BiatecClammPool.algo.ts:887', pc: [4361, 4362] },
        { teal: 4521, source: 'contracts\\BiatecClammPool.algo.ts:887', pc: [4363, 4364] },
        { teal: 4526, source: 'contracts\\BiatecClammPool.algo.ts:888', pc: [4365, 4366] },
        { teal: 4527, source: 'contracts\\BiatecClammPool.algo.ts:888', pc: [4367, 4368, 4369] },
        { teal: 4532, source: 'contracts\\BiatecClammPool.algo.ts:889', pc: [4370, 4371] },
        { teal: 4533, source: 'contracts\\BiatecClammPool.algo.ts:889', pc: [4372, 4373] },
        { teal: 4538, source: 'contracts\\BiatecClammPool.algo.ts:890', pc: [4374, 4375] },
        { teal: 4539, source: 'contracts\\BiatecClammPool.algo.ts:890', pc: [4376, 4377] },
        { teal: 4540, source: 'contracts\\BiatecClammPool.algo.ts:890', pc: [4378] },
        { teal: 4541, source: 'contracts\\BiatecClammPool.algo.ts:890', pc: [4379] },
        { teal: 4542, source: 'contracts\\BiatecClammPool.algo.ts:890', pc: [4380, 4381, 4382] },
        { teal: 4547, source: 'contracts\\BiatecClammPool.algo.ts:891', pc: [4383, 4384] },
        { teal: 4548, source: 'contracts\\BiatecClammPool.algo.ts:891', pc: [4385, 4386] },
        { teal: 4549, source: 'contracts\\BiatecClammPool.algo.ts:891', pc: [4387] },
        { teal: 4550, source: 'contracts\\BiatecClammPool.algo.ts:891', pc: [4388, 4389] },
        { teal: 4554, source: 'contracts\\BiatecClammPool.algo.ts:892', pc: [4390, 4391] },
        { teal: 4555, source: 'contracts\\BiatecClammPool.algo.ts:892', pc: [4392, 4393] },
        { teal: 4556, source: 'contracts\\BiatecClammPool.algo.ts:892', pc: [4394, 4395] },
        { teal: 4557, source: 'contracts\\BiatecClammPool.algo.ts:890', pc: [4396, 4397, 4398] },
        { teal: 4562, source: 'contracts\\BiatecClammPool.algo.ts:894', pc: [4399, 4400] },
        { teal: 4563, source: 'contracts\\BiatecClammPool.algo.ts:894', pc: [4401, 4402] },
        { teal: 4564, source: 'contracts\\BiatecClammPool.algo.ts:894', pc: [4403] },
        { teal: 4565, source: 'contracts\\BiatecClammPool.algo.ts:894', pc: [4404, 4405] },
        { teal: 4569, source: 'contracts\\BiatecClammPool.algo.ts:895', pc: [4406, 4407] },
        { teal: 4570, source: 'contracts\\BiatecClammPool.algo.ts:895', pc: [4408, 4409] },
        { teal: 4571, source: 'contracts\\BiatecClammPool.algo.ts:895', pc: [4410, 4411] },
        { teal: 4576, source: 'contracts\\BiatecClammPool.algo.ts:897', pc: [4412, 4413] },
        { teal: 4577, source: 'contracts\\BiatecClammPool.algo.ts:897', pc: [4414, 4415] },
        { teal: 4578, source: 'contracts\\BiatecClammPool.algo.ts:897', pc: [4416] },
        { teal: 4579, source: 'contracts\\BiatecClammPool.algo.ts:897', pc: [4417, 4418] },
        { teal: 4583, source: 'contracts\\BiatecClammPool.algo.ts:898', pc: [4419, 4420] },
        { teal: 4584, source: 'contracts\\BiatecClammPool.algo.ts:898', pc: [4421, 4422] },
        { teal: 4585, source: 'contracts\\BiatecClammPool.algo.ts:898', pc: [4423] },
        { teal: 4586, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [4424] },
        { teal: 4587, source: 'contracts\\BiatecClammPool.algo.ts:898', pc: [4425] },
        { teal: 4588, source: 'contracts\\BiatecClammPool.algo.ts:898', pc: [4426, 4427] },
        { teal: 4599, source: 'contracts\\BiatecClammPool.algo.ts:906', pc: [4428, 4429] },
        { teal: 4600, source: 'contracts\\BiatecClammPool.algo.ts:906', pc: [4430] },
        { teal: 4601, source: 'contracts\\BiatecClammPool.algo.ts:905', pc: [4431, 4432] },
        { teal: 4602, source: 'contracts\\BiatecClammPool.algo.ts:905', pc: [4433] },
        { teal: 4603, source: 'contracts\\BiatecClammPool.algo.ts:904', pc: [4434, 4435] },
        { teal: 4604, source: 'contracts\\BiatecClammPool.algo.ts:904', pc: [4436] },
        { teal: 4605, source: 'contracts\\BiatecClammPool.algo.ts:903', pc: [4437, 4438] },
        { teal: 4606, source: 'contracts\\BiatecClammPool.algo.ts:903', pc: [4439] },
        { teal: 4607, source: 'contracts\\BiatecClammPool.algo.ts:902', pc: [4440] },
        { teal: 4608, source: 'contracts\\BiatecClammPool.algo.ts:902', pc: [4441] },
        { teal: 4609, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4442, 4443] },
        { teal: 4610, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4444] },
        { teal: 4611, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4445] },
        { teal: 4612, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4446] },
        { teal: 4613, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4447] },
        {
          teal: 4616,
          source: 'contracts\\BiatecClammPool.algo.ts:901',
          errorMessage: 'inAssetAfterFee overflowed 256 bits',
          pc: [4448],
        },
        { teal: 4617, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4449] },
        { teal: 4618, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4450] },
        { teal: 4619, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4451] },
        { teal: 4620, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4452] },
        { teal: 4621, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4453] },
        { teal: 4622, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4454] },
        { teal: 4623, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4455] },
        { teal: 4624, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4456] },
        { teal: 4625, source: 'contracts\\BiatecClammPool.algo.ts:901', pc: [4457] },
        { teal: 4626, source: 'contracts\\BiatecClammPool.algo.ts:900', pc: [4458, 4459, 4460] },
        { teal: 4627, source: 'contracts\\BiatecClammPool.algo.ts:900', pc: [4461, 4462] },
        { teal: 4631, source: 'contracts\\BiatecClammPool.algo.ts:908', pc: [4463, 4464] },
        { teal: 4632, source: 'contracts\\BiatecClammPool.algo.ts:908', pc: [4465, 4466] },
        { teal: 4636, source: 'contracts\\BiatecClammPool.algo.ts:909', pc: [4467, 4468] },
        { teal: 4637, source: 'contracts\\BiatecClammPool.algo.ts:909', pc: [4469, 4470] },
        { teal: 4638, source: 'contracts\\BiatecClammPool.algo.ts:909', pc: [4471] },
        { teal: 4639, source: 'contracts\\BiatecClammPool.algo.ts:909', pc: [4472, 4473] },
        { teal: 4644, source: 'contracts\\BiatecClammPool.algo.ts:911', pc: [4474, 4475] },
        { teal: 4645, source: 'contracts\\BiatecClammPool.algo.ts:911', pc: [4476, 4477] },
        { teal: 4646, source: 'contracts\\BiatecClammPool.algo.ts:911', pc: [4478] },
        { teal: 4647, source: 'contracts\\BiatecClammPool.algo.ts:911', pc: [4479, 4480] },
        { teal: 4648, source: 'contracts\\BiatecClammPool.algo.ts:911', pc: [4481] },
        { teal: 4649, source: 'contracts\\BiatecClammPool.algo.ts:911', pc: [4482, 4483, 4484] },
        { teal: 4654, source: 'contracts\\BiatecClammPool.algo.ts:912', pc: [4485, 4486] },
        { teal: 4655, source: 'contracts\\BiatecClammPool.algo.ts:912', pc: [4487, 4488] },
        { teal: 4656, source: 'contracts\\BiatecClammPool.algo.ts:912', pc: [4489] },
        { teal: 4657, source: 'contracts\\BiatecClammPool.algo.ts:912', pc: [4490, 4491] },
        { teal: 4661, source: 'contracts\\BiatecClammPool.algo.ts:913', pc: [4492, 4493] },
        { teal: 4662, source: 'contracts\\BiatecClammPool.algo.ts:913', pc: [4494, 4495] },
        { teal: 4663, source: 'contracts\\BiatecClammPool.algo.ts:913', pc: [4496] },
        { teal: 4664, source: 'contracts\\BiatecClammPool.algo.ts:913', pc: [4497, 4498] },
        { teal: 4669, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4499, 4500] },
        { teal: 4670, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4501] },
        { teal: 4671, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4502] },
        { teal: 4672, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4503, 4504] },
        { teal: 4673, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4505] },
        {
          teal: 4676,
          source: 'contracts\\BiatecClammPool.algo.ts:915',
          errorMessage: 'realSwapBDecimals as uint64 overflowed 64 bits',
          pc: [4506],
        },
        { teal: 4677, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4507, 4508] },
        { teal: 4678, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4509] },
        { teal: 4679, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4510] },
        { teal: 4680, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4511] },
        { teal: 4681, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4512] },
        { teal: 4682, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4513, 4514] },
        { teal: 4683, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4515] },
        { teal: 4684, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4516] },
        { teal: 4685, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4517] },
        { teal: 4686, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4518] },
        { teal: 4687, source: 'contracts\\BiatecClammPool.algo.ts:915', pc: [4519, 4520] },
        { teal: 4691, source: 'contracts\\BiatecClammPool.algo.ts:916', pc: [4521, 4522] },
        { teal: 4692, source: 'contracts\\BiatecClammPool.algo.ts:916', pc: [4523, 4524] },
        { teal: 4697, source: 'contracts\\BiatecClammPool.algo.ts:917', pc: [4525, 4526] },
        { teal: 4698, source: 'contracts\\BiatecClammPool.algo.ts:917', pc: [4527] },
        { teal: 4699, source: 'contracts\\BiatecClammPool.algo.ts:917', pc: [4528] },
        { teal: 4700, source: 'contracts\\BiatecClammPool.algo.ts:917', pc: [4529, 4530, 4531] },
        { teal: 4705, source: 'contracts\\BiatecClammPool.algo.ts:919', pc: [4532, 4533] },
        { teal: 4706, source: 'contracts\\BiatecClammPool.algo.ts:919', pc: [4534, 4535] },
        { teal: 4707, source: 'contracts\\BiatecClammPool.algo.ts:919', pc: [4536] },
        {
          teal: 4710,
          source: 'contracts\\BiatecClammPool.algo.ts:919',
          errorMessage: 'Minimum to receive is not met',
          pc: [4537],
        },
        { teal: 4715, source: 'contracts\\BiatecClammPool.algo.ts:921', pc: [4538, 4539] },
        { teal: 4716, source: 'contracts\\BiatecClammPool.algo.ts:921', pc: [4540, 4541] },
        { teal: 4720, source: 'contracts\\BiatecClammPool.algo.ts:922', pc: [4542, 4543] },
        { teal: 4721, source: 'contracts\\BiatecClammPool.algo.ts:922', pc: [4544, 4545] },
        { teal: 4722, source: 'contracts\\BiatecClammPool.algo.ts:922', pc: [4546, 4547] },
        { teal: 4723, source: 'contracts\\BiatecClammPool.algo.ts:922', pc: [4548, 4549, 4550] },
        { teal: 4727, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4551] },
        { teal: 4728, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4552] },
        { teal: 4729, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4553] },
        { teal: 4730, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4554, 4555] },
        { teal: 4731, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4556] },
        { teal: 4732, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4557] },
        { teal: 4733, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4558] },
        { teal: 4734, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4559] },
        { teal: 4735, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4560] },
        {
          teal: 4738,
          source: 'contracts\\BiatecClammPool.algo.ts:924',
          errorMessage: 'this.assetABalance.value + inAsset overflowed 256 bits',
          pc: [4561],
        },
        { teal: 4739, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4562] },
        { teal: 4740, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4563] },
        { teal: 4741, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4564] },
        { teal: 4742, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4565] },
        { teal: 4743, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4566] },
        { teal: 4744, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4567] },
        { teal: 4745, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4568] },
        { teal: 4746, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4569] },
        { teal: 4747, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4570] },
        { teal: 4748, source: 'contracts\\BiatecClammPool.algo.ts:924', pc: [4571] },
        { teal: 4752, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4572, 4573] },
        { teal: 4753, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4574] },
        { teal: 4754, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4575] },
        { teal: 4755, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4576, 4577] },
        { teal: 4756, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4578] },
        { teal: 4757, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4579] },
        { teal: 4758, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4580] },
        { teal: 4759, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4581] },
        { teal: 4760, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4582] },
        {
          teal: 4763,
          source: 'contracts\\BiatecClammPool.algo.ts:925',
          errorMessage: 'this.assetBBalance.value - realSwapBaseDecimals overflowed 256 bits',
          pc: [4583],
        },
        { teal: 4764, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4584] },
        { teal: 4765, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4585] },
        { teal: 4766, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4586] },
        { teal: 4767, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4587] },
        { teal: 4768, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4588] },
        { teal: 4769, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4589] },
        { teal: 4770, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4590] },
        { teal: 4771, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4591] },
        { teal: 4772, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4592] },
        { teal: 4773, source: 'contracts\\BiatecClammPool.algo.ts:925', pc: [4593] },
        { teal: 4779, source: 'contracts\\BiatecClammPool.algo.ts:928', pc: [4594, 4595] },
        { teal: 4780, source: 'contracts\\BiatecClammPool.algo.ts:928', pc: [4596] },
        { teal: 4781, source: 'contracts\\BiatecClammPool.algo.ts:928', pc: [4597, 4598, 4599] },
        { teal: 4786, source: 'contracts\\BiatecClammPool.algo.ts:929', pc: [4600, 4601] },
        { teal: 4787, source: 'contracts\\BiatecClammPool.algo.ts:929', pc: [4602, 4603] },
        { teal: 4788, source: 'contracts\\BiatecClammPool.algo.ts:929', pc: [4604] },
        { teal: 4789, source: 'contracts\\BiatecClammPool.algo.ts:929', pc: [4605, 4606] },
        { teal: 4793, source: 'contracts\\BiatecClammPool.algo.ts:930', pc: [4607, 4608] },
        { teal: 4794, source: 'contracts\\BiatecClammPool.algo.ts:930', pc: [4609, 4610] },
        { teal: 4795, source: 'contracts\\BiatecClammPool.algo.ts:930', pc: [4611, 4612] },
        { teal: 4799, source: 'contracts\\BiatecClammPool.algo.ts:931', pc: [4613, 4614] },
        { teal: 4800, source: 'contracts\\BiatecClammPool.algo.ts:931', pc: [4615, 4616] },
        { teal: 4801, source: 'contracts\\BiatecClammPool.algo.ts:931', pc: [4617] },
        { teal: 4802, source: 'contracts\\BiatecClammPool.algo.ts:931', pc: [4618, 4619] },
        { teal: 4806, source: 'contracts\\BiatecClammPool.algo.ts:932', pc: [4620, 4621] },
        { teal: 4807, source: 'contracts\\BiatecClammPool.algo.ts:932', pc: [4622, 4623] },
        { teal: 4808, source: 'contracts\\BiatecClammPool.algo.ts:932', pc: [4624] },
        { teal: 4809, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [4625] },
        { teal: 4810, source: 'contracts\\BiatecClammPool.algo.ts:932', pc: [4626] },
        { teal: 4811, source: 'contracts\\BiatecClammPool.algo.ts:932', pc: [4627, 4628] },
        { teal: 4822, source: 'contracts\\BiatecClammPool.algo.ts:939', pc: [4629, 4630] },
        { teal: 4823, source: 'contracts\\BiatecClammPool.algo.ts:939', pc: [4631] },
        { teal: 4824, source: 'contracts\\BiatecClammPool.algo.ts:938', pc: [4632, 4633] },
        { teal: 4825, source: 'contracts\\BiatecClammPool.algo.ts:938', pc: [4634] },
        { teal: 4826, source: 'contracts\\BiatecClammPool.algo.ts:937', pc: [4635, 4636] },
        { teal: 4827, source: 'contracts\\BiatecClammPool.algo.ts:937', pc: [4637] },
        { teal: 4828, source: 'contracts\\BiatecClammPool.algo.ts:936', pc: [4638, 4639] },
        { teal: 4829, source: 'contracts\\BiatecClammPool.algo.ts:936', pc: [4640] },
        { teal: 4830, source: 'contracts\\BiatecClammPool.algo.ts:935', pc: [4641] },
        { teal: 4831, source: 'contracts\\BiatecClammPool.algo.ts:935', pc: [4642] },
        { teal: 4832, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4643, 4644] },
        { teal: 4833, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4645] },
        { teal: 4834, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4646] },
        { teal: 4835, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4647] },
        { teal: 4836, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4648] },
        {
          teal: 4839,
          source: 'contracts\\BiatecClammPool.algo.ts:934',
          errorMessage: 'inAssetAfterFee overflowed 256 bits',
          pc: [4649],
        },
        { teal: 4840, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4650] },
        { teal: 4841, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4651] },
        { teal: 4842, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4652] },
        { teal: 4843, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4653] },
        { teal: 4844, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4654] },
        { teal: 4845, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4655] },
        { teal: 4846, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4656] },
        { teal: 4847, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4657] },
        { teal: 4848, source: 'contracts\\BiatecClammPool.algo.ts:934', pc: [4658] },
        { teal: 4849, source: 'contracts\\BiatecClammPool.algo.ts:933', pc: [4659, 4660, 4661] },
        { teal: 4850, source: 'contracts\\BiatecClammPool.algo.ts:933', pc: [4662, 4663] },
        { teal: 4854, source: 'contracts\\BiatecClammPool.algo.ts:941', pc: [4664, 4665] },
        { teal: 4855, source: 'contracts\\BiatecClammPool.algo.ts:941', pc: [4666, 4667] },
        { teal: 4859, source: 'contracts\\BiatecClammPool.algo.ts:942', pc: [4668, 4669] },
        { teal: 4860, source: 'contracts\\BiatecClammPool.algo.ts:942', pc: [4670, 4671] },
        { teal: 4861, source: 'contracts\\BiatecClammPool.algo.ts:942', pc: [4672] },
        { teal: 4862, source: 'contracts\\BiatecClammPool.algo.ts:942', pc: [4673, 4674] },
        { teal: 4867, source: 'contracts\\BiatecClammPool.algo.ts:944', pc: [4675, 4676] },
        { teal: 4868, source: 'contracts\\BiatecClammPool.algo.ts:944', pc: [4677, 4678] },
        { teal: 4869, source: 'contracts\\BiatecClammPool.algo.ts:944', pc: [4679] },
        { teal: 4870, source: 'contracts\\BiatecClammPool.algo.ts:944', pc: [4680, 4681] },
        { teal: 4871, source: 'contracts\\BiatecClammPool.algo.ts:944', pc: [4682] },
        { teal: 4872, source: 'contracts\\BiatecClammPool.algo.ts:944', pc: [4683, 4684, 4685] },
        { teal: 4877, source: 'contracts\\BiatecClammPool.algo.ts:945', pc: [4686, 4687] },
        { teal: 4878, source: 'contracts\\BiatecClammPool.algo.ts:945', pc: [4688, 4689] },
        { teal: 4879, source: 'contracts\\BiatecClammPool.algo.ts:945', pc: [4690] },
        { teal: 4880, source: 'contracts\\BiatecClammPool.algo.ts:945', pc: [4691, 4692] },
        { teal: 4884, source: 'contracts\\BiatecClammPool.algo.ts:946', pc: [4693, 4694] },
        { teal: 4885, source: 'contracts\\BiatecClammPool.algo.ts:946', pc: [4695, 4696] },
        { teal: 4886, source: 'contracts\\BiatecClammPool.algo.ts:946', pc: [4697] },
        { teal: 4887, source: 'contracts\\BiatecClammPool.algo.ts:946', pc: [4698, 4699] },
        { teal: 4892, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4700, 4701] },
        { teal: 4893, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4702] },
        { teal: 4894, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4703] },
        { teal: 4895, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4704, 4705] },
        { teal: 4896, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4706] },
        {
          teal: 4899,
          source: 'contracts\\BiatecClammPool.algo.ts:948',
          errorMessage: 'realSwapADecimals as uint64 overflowed 64 bits',
          pc: [4707],
        },
        { teal: 4900, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4708, 4709] },
        { teal: 4901, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4710] },
        { teal: 4902, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4711] },
        { teal: 4903, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4712] },
        { teal: 4904, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4713] },
        { teal: 4905, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4714, 4715] },
        { teal: 4906, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4716] },
        { teal: 4907, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4717] },
        { teal: 4908, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4718] },
        { teal: 4909, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4719] },
        { teal: 4910, source: 'contracts\\BiatecClammPool.algo.ts:948', pc: [4720, 4721] },
        { teal: 4914, source: 'contracts\\BiatecClammPool.algo.ts:949', pc: [4722, 4723] },
        { teal: 4915, source: 'contracts\\BiatecClammPool.algo.ts:949', pc: [4724, 4725] },
        { teal: 4920, source: 'contracts\\BiatecClammPool.algo.ts:950', pc: [4726, 4727] },
        { teal: 4921, source: 'contracts\\BiatecClammPool.algo.ts:950', pc: [4728] },
        { teal: 4922, source: 'contracts\\BiatecClammPool.algo.ts:950', pc: [4729] },
        { teal: 4923, source: 'contracts\\BiatecClammPool.algo.ts:950', pc: [4730, 4731, 4732] },
        { teal: 4928, source: 'contracts\\BiatecClammPool.algo.ts:952', pc: [4733, 4734] },
        { teal: 4929, source: 'contracts\\BiatecClammPool.algo.ts:952', pc: [4735, 4736] },
        { teal: 4930, source: 'contracts\\BiatecClammPool.algo.ts:952', pc: [4737] },
        {
          teal: 4933,
          source: 'contracts\\BiatecClammPool.algo.ts:952',
          errorMessage: 'Minimum to receive is not met',
          pc: [4738],
        },
        { teal: 4938, source: 'contracts\\BiatecClammPool.algo.ts:954', pc: [4739, 4740] },
        { teal: 4939, source: 'contracts\\BiatecClammPool.algo.ts:954', pc: [4741, 4742] },
        { teal: 4943, source: 'contracts\\BiatecClammPool.algo.ts:955', pc: [4743, 4744] },
        { teal: 4944, source: 'contracts\\BiatecClammPool.algo.ts:955', pc: [4745, 4746] },
        { teal: 4945, source: 'contracts\\BiatecClammPool.algo.ts:955', pc: [4747, 4748] },
        { teal: 4946, source: 'contracts\\BiatecClammPool.algo.ts:955', pc: [4749, 4750, 4751] },
        { teal: 4950, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4752, 4753] },
        { teal: 4951, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4754] },
        { teal: 4952, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4755] },
        { teal: 4953, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4756, 4757] },
        { teal: 4954, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4758] },
        { teal: 4955, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4759] },
        { teal: 4956, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4760] },
        { teal: 4957, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4761] },
        { teal: 4958, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4762] },
        {
          teal: 4961,
          source: 'contracts\\BiatecClammPool.algo.ts:957',
          errorMessage: 'this.assetBBalance.value + inAsset overflowed 256 bits',
          pc: [4763],
        },
        { teal: 4962, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4764] },
        { teal: 4963, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4765] },
        { teal: 4964, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4766] },
        { teal: 4965, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4767] },
        { teal: 4966, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4768] },
        { teal: 4967, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4769] },
        { teal: 4968, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4770] },
        { teal: 4969, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4771] },
        { teal: 4970, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4772] },
        { teal: 4971, source: 'contracts\\BiatecClammPool.algo.ts:957', pc: [4773] },
        { teal: 4975, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4774] },
        { teal: 4976, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4775] },
        { teal: 4977, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4776] },
        { teal: 4978, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4777, 4778] },
        { teal: 4979, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4779] },
        { teal: 4980, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4780] },
        { teal: 4981, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4781] },
        { teal: 4982, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4782] },
        { teal: 4983, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4783] },
        {
          teal: 4986,
          source: 'contracts\\BiatecClammPool.algo.ts:958',
          errorMessage: 'this.assetABalance.value - realSwapBaseDecimals overflowed 256 bits',
          pc: [4784],
        },
        { teal: 4987, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4785] },
        { teal: 4988, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4786] },
        { teal: 4989, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4787] },
        { teal: 4990, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4788] },
        { teal: 4991, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4789] },
        { teal: 4992, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4790] },
        { teal: 4993, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4791] },
        { teal: 4994, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4792] },
        { teal: 4995, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4793] },
        { teal: 4996, source: 'contracts\\BiatecClammPool.algo.ts:958', pc: [4794] },
        { teal: 5001, source: 'contracts\\BiatecClammPool.algo.ts:960', pc: [4795, 4796] },
        { teal: 5002, source: 'contracts\\BiatecClammPool.algo.ts:960', pc: [4797, 4798] },
        { teal: 5007, source: 'contracts\\BiatecClammPool.algo.ts:961', pc: [4799, 4800] },
        { teal: 5008, source: 'contracts\\BiatecClammPool.algo.ts:961', pc: [4801] },
        { teal: 5009, source: 'contracts\\BiatecClammPool.algo.ts:961', pc: [4802, 4803] },
        { teal: 5010, source: 'contracts\\BiatecClammPool.algo.ts:961', pc: [4804] },
        { teal: 5011, source: 'contracts\\BiatecClammPool.algo.ts:961', pc: [4805] },
        { teal: 5012, source: 'contracts\\BiatecClammPool.algo.ts:961', pc: [4806, 4807, 4808] },
        { teal: 5021, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4809, 4810] },
        { teal: 5022, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4811] },
        { teal: 5023, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4812] },
        { teal: 5024, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4813] },
        { teal: 5025, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4814] },
        { teal: 5026, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4815] },
        { teal: 5027, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4816] },
        {
          teal: 5030,
          source: 'contracts\\BiatecClammPool.algo.ts:965',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [4817],
        },
        { teal: 5031, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4818] },
        { teal: 5032, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4819] },
        { teal: 5033, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4820] },
        { teal: 5034, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4821] },
        { teal: 5035, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4822] },
        { teal: 5036, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4823] },
        { teal: 5037, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4824] },
        { teal: 5038, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4825] },
        { teal: 5039, source: 'contracts\\BiatecClammPool.algo.ts:965', pc: [4826] },
        { teal: 5040, source: 'contracts\\BiatecClammPool.algo.ts:964', pc: [4827, 4828] },
        { teal: 5041, source: 'contracts\\BiatecClammPool.algo.ts:964', pc: [4829] },
        { teal: 5042, source: 'contracts\\BiatecClammPool.algo.ts:963', pc: [4830] },
        { teal: 5043, source: 'contracts\\BiatecClammPool.algo.ts:963', pc: [4831] },
        { teal: 5044, source: 'contracts\\BiatecClammPool.algo.ts:962', pc: [4832, 4833, 4834] },
        { teal: 5045, source: 'contracts\\BiatecClammPool.algo.ts:962', pc: [4835, 4836] },
        { teal: 5046, source: 'contracts\\BiatecClammPool.algo.ts:961', pc: [4837, 4838, 4839] },
        { teal: 5058, source: 'contracts\\BiatecClammPool.algo.ts:974', pc: [4840, 4841] },
        { teal: 5059, source: 'contracts\\BiatecClammPool.algo.ts:974', pc: [4842] },
        { teal: 5060, source: 'contracts\\BiatecClammPool.algo.ts:973', pc: [4843, 4844] },
        { teal: 5061, source: 'contracts\\BiatecClammPool.algo.ts:973', pc: [4845] },
        { teal: 5062, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4846, 4847] },
        { teal: 5063, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4848] },
        { teal: 5064, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4849] },
        { teal: 5065, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4850] },
        { teal: 5066, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4851] },
        { teal: 5067, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4852] },
        { teal: 5068, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4853] },
        {
          teal: 5071,
          source: 'contracts\\BiatecClammPool.algo.ts:972',
          errorMessage: 'this.priceMax.value as uint256 overflowed 256 bits',
          pc: [4854],
        },
        { teal: 5072, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4855] },
        { teal: 5073, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4856] },
        { teal: 5074, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4857] },
        { teal: 5075, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4858] },
        { teal: 5076, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4859] },
        { teal: 5077, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4860] },
        { teal: 5078, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4861] },
        { teal: 5079, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4862] },
        { teal: 5080, source: 'contracts\\BiatecClammPool.algo.ts:972', pc: [4863] },
        { teal: 5081, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4864, 4865] },
        { teal: 5082, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4866] },
        { teal: 5083, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4867] },
        { teal: 5084, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4868] },
        { teal: 5085, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4869] },
        { teal: 5086, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4870] },
        { teal: 5087, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4871] },
        {
          teal: 5090,
          source: 'contracts\\BiatecClammPool.algo.ts:971',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [4872],
        },
        { teal: 5091, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4873] },
        { teal: 5092, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4874] },
        { teal: 5093, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4875] },
        { teal: 5094, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4876] },
        { teal: 5095, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4877] },
        { teal: 5096, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4878] },
        { teal: 5097, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4879] },
        { teal: 5098, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4880] },
        { teal: 5099, source: 'contracts\\BiatecClammPool.algo.ts:971', pc: [4881] },
        { teal: 5100, source: 'contracts\\BiatecClammPool.algo.ts:970', pc: [4882, 4883] },
        { teal: 5101, source: 'contracts\\BiatecClammPool.algo.ts:970', pc: [4884] },
        { teal: 5102, source: 'contracts\\BiatecClammPool.algo.ts:969', pc: [4885] },
        { teal: 5103, source: 'contracts\\BiatecClammPool.algo.ts:969', pc: [4886] },
        { teal: 5104, source: 'contracts\\BiatecClammPool.algo.ts:968', pc: [4887, 4888, 4889] },
        { teal: 5105, source: 'contracts\\BiatecClammPool.algo.ts:968', pc: [4890, 4891] },
        { teal: 5115, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4892, 4893] },
        { teal: 5116, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4894] },
        { teal: 5117, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4895] },
        { teal: 5118, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4896] },
        { teal: 5119, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4897] },
        {
          teal: 5122,
          source: 'contracts\\BiatecClammPool.algo.ts:981',
          errorMessage: 'D_SQRT overflowed 256 bits',
          pc: [4898],
        },
        { teal: 5123, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4899] },
        { teal: 5124, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4900] },
        { teal: 5125, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4901] },
        { teal: 5126, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4902] },
        { teal: 5127, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4903] },
        { teal: 5128, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4904] },
        { teal: 5129, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4905] },
        { teal: 5130, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4906] },
        { teal: 5131, source: 'contracts\\BiatecClammPool.algo.ts:981', pc: [4907] },
        { teal: 5132, source: 'contracts\\BiatecClammPool.algo.ts:980', pc: [4908, 4909] },
        { teal: 5133, source: 'contracts\\BiatecClammPool.algo.ts:980', pc: [4910] },
        { teal: 5134, source: 'contracts\\BiatecClammPool.algo.ts:979', pc: [4911, 4912] },
        { teal: 5135, source: 'contracts\\BiatecClammPool.algo.ts:979', pc: [4913] },
        { teal: 5136, source: 'contracts\\BiatecClammPool.algo.ts:978', pc: [4914, 4915] },
        { teal: 5137, source: 'contracts\\BiatecClammPool.algo.ts:978', pc: [4916] },
        { teal: 5138, source: 'contracts\\BiatecClammPool.algo.ts:977', pc: [4917] },
        { teal: 5139, source: 'contracts\\BiatecClammPool.algo.ts:977', pc: [4918] },
        { teal: 5140, source: 'contracts\\BiatecClammPool.algo.ts:976', pc: [4919, 4920, 4921] },
        { teal: 5141, source: 'contracts\\BiatecClammPool.algo.ts:976', pc: [4922, 4923] },
        { teal: 5147, source: 'contracts\\BiatecClammPool.algo.ts:985', pc: [4924, 4925] },
        { teal: 5148, source: 'contracts\\BiatecClammPool.algo.ts:985', pc: [4926, 4927] },
        { teal: 5149, source: 'contracts\\BiatecClammPool.algo.ts:985', pc: [4928] },
        { teal: 5150, source: 'contracts\\BiatecClammPool.algo.ts:985', pc: [4929] },
        { teal: 5151, source: 'contracts\\BiatecClammPool.algo.ts:985', pc: [4930, 4931, 4932] },
        { teal: 5156, source: 'contracts\\BiatecClammPool.algo.ts:988', pc: [4933, 4934] },
        { teal: 5157, source: 'contracts\\BiatecClammPool.algo.ts:988', pc: [4935, 4936] },
        { teal: 5158, source: 'contracts\\BiatecClammPool.algo.ts:988', pc: [4937] },
        { teal: 5159, source: 'contracts\\BiatecClammPool.algo.ts:988', pc: [4938] },
        { teal: 5160, source: 'contracts\\BiatecClammPool.algo.ts:988', pc: [4939, 4940] },
        { teal: 5164, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4941, 4942] },
        { teal: 5165, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4943, 4944] },
        { teal: 5166, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4945] },
        { teal: 5167, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4946] },
        { teal: 5168, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4947] },
        { teal: 5169, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4948] },
        {
          teal: 5172,
          source: 'contracts\\BiatecClammPool.algo.ts:989',
          errorMessage: 'newL overflowed 256 bits',
          pc: [4949],
        },
        { teal: 5173, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4950] },
        { teal: 5174, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4951] },
        { teal: 5175, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4952] },
        { teal: 5176, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4953] },
        { teal: 5177, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4954] },
        { teal: 5178, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4955] },
        { teal: 5179, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4956] },
        { teal: 5180, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4957] },
        { teal: 5181, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4958] },
        { teal: 5182, source: 'contracts\\BiatecClammPool.algo.ts:989', pc: [4959] },
        { teal: 5187, source: 'contracts\\BiatecClammPool.algo.ts:991', pc: [4960, 4961] },
        { teal: 5188, source: 'contracts\\BiatecClammPool.algo.ts:991', pc: [4962, 4963, 4964] },
        { teal: 5193, source: 'contracts\\BiatecClammPool.algo.ts:993', pc: [4965] },
        { teal: 5194, source: 'contracts\\BiatecClammPool.algo.ts:993', pc: [4966] },
        { teal: 5195, source: 'contracts\\BiatecClammPool.algo.ts:993', pc: [4967, 4968] },
        { teal: 5196, source: 'contracts\\BiatecClammPool.algo.ts:993', pc: [4969] },
        { teal: 5197, source: 'contracts\\BiatecClammPool.algo.ts:993', pc: [4970, 4971] },
        { teal: 5198, source: 'contracts\\BiatecClammPool.algo.ts:993', pc: [4972] },
        { teal: 5199, source: 'contracts\\BiatecClammPool.algo.ts:993', pc: [4973, 4974] },
        { teal: 5203, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4975, 4976] },
        { teal: 5204, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4977] },
        { teal: 5205, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4978] },
        { teal: 5206, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4979, 4980] },
        { teal: 5207, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4981] },
        {
          teal: 5210,
          source: 'contracts\\BiatecClammPool.algo.ts:994',
          errorMessage: 'feeB256 as uint64 overflowed 64 bits',
          pc: [4982],
        },
        { teal: 5211, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4983, 4984] },
        { teal: 5212, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4985] },
        { teal: 5213, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4986] },
        { teal: 5214, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4987] },
        { teal: 5215, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4988] },
        { teal: 5216, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4989, 4990] },
        { teal: 5217, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4991] },
        { teal: 5218, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4992] },
        { teal: 5219, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4993] },
        { teal: 5220, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4994] },
        { teal: 5221, source: 'contracts\\BiatecClammPool.algo.ts:994', pc: [4995, 4996] },
        { teal: 5225, source: 'contracts\\BiatecClammPool.algo.ts:995', pc: [4997] },
        { teal: 5226, source: 'contracts\\BiatecClammPool.algo.ts:995', pc: [4998, 4999] },
        { teal: 5227, source: 'contracts\\BiatecClammPool.algo.ts:991', pc: [5000, 5001, 5002] },
        { teal: 5232, source: 'contracts\\BiatecClammPool.algo.ts:998', pc: [5003, 5004] },
        { teal: 5233, source: 'contracts\\BiatecClammPool.algo.ts:998', pc: [5005] },
        { teal: 5234, source: 'contracts\\BiatecClammPool.algo.ts:998', pc: [5006, 5007] },
        { teal: 5235, source: 'contracts\\BiatecClammPool.algo.ts:998', pc: [5008] },
        { teal: 5236, source: 'contracts\\BiatecClammPool.algo.ts:998', pc: [5009, 5010] },
        { teal: 5237, source: 'contracts\\BiatecClammPool.algo.ts:998', pc: [5011] },
        { teal: 5238, source: 'contracts\\BiatecClammPool.algo.ts:998', pc: [5012, 5013] },
        { teal: 5242, source: 'contracts\\BiatecClammPool.algo.ts:999', pc: [5014] },
        { teal: 5243, source: 'contracts\\BiatecClammPool.algo.ts:999', pc: [5015, 5016] },
        { teal: 5247, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5017, 5018] },
        { teal: 5248, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5019] },
        { teal: 5249, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5020] },
        { teal: 5250, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5021, 5022] },
        { teal: 5251, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5023] },
        {
          teal: 5254,
          source: 'contracts\\BiatecClammPool.algo.ts:1000',
          errorMessage: 'feeB256 as uint64 overflowed 64 bits',
          pc: [5024],
        },
        { teal: 5255, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5025, 5026] },
        { teal: 5256, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5027] },
        { teal: 5257, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5028] },
        { teal: 5258, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5029] },
        { teal: 5259, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5030] },
        { teal: 5260, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5031, 5032] },
        { teal: 5261, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5033] },
        { teal: 5262, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5034] },
        { teal: 5263, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5035] },
        { teal: 5264, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5036] },
        { teal: 5265, source: 'contracts\\BiatecClammPool.algo.ts:1000', pc: [5037, 5038] },
        { teal: 5270, source: 'contracts\\BiatecClammPool.algo.ts:1003', pc: [5039, 5040] },
        { teal: 5271, source: 'contracts\\BiatecClammPool.algo.ts:1003', pc: [5041] },
        { teal: 5272, source: 'contracts\\BiatecClammPool.algo.ts:1003', pc: [5042, 5043] },
        { teal: 5273, source: 'contracts\\BiatecClammPool.algo.ts:1003', pc: [5044] },
        {
          teal: 5276,
          source: 'contracts\\BiatecClammPool.algo.ts:1003',
          errorMessage: "global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')",
          pc: [5045],
        },
        { teal: 5277, source: 'contracts\\BiatecClammPool.algo.ts:1003', pc: [5046, 5047] },
        { teal: 5282, source: 'contracts\\BiatecClammPool.algo.ts:1004', pc: [5048, 5049] },
        { teal: 5283, source: 'contracts\\BiatecClammPool.algo.ts:1004', pc: [5050, 5051] },
        { teal: 5284, source: 'contracts\\BiatecClammPool.algo.ts:1004', pc: [5052] },
        { teal: 5285, source: 'contracts\\BiatecClammPool.algo.ts:1004', pc: [5053, 5054, 5055] },
        { teal: 5290, source: 'contracts\\BiatecClammPool.algo.ts:1005', pc: [5056, 5057] },
        { teal: 5291, source: 'contracts\\BiatecClammPool.algo.ts:1005', pc: [5058, 5059] },
        { teal: 5295, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5060, 5061] },
        { teal: 5296, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5062] },
        { teal: 5297, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5063] },
        { teal: 5298, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5064, 5065] },
        { teal: 5299, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5066] },
        { teal: 5300, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5067] },
        { teal: 5301, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5068] },
        { teal: 5302, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5069] },
        { teal: 5303, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5070] },
        {
          teal: 5306,
          source: 'contracts\\BiatecClammPool.algo.ts:1006',
          errorMessage: 'this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits',
          pc: [5071],
        },
        { teal: 5307, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5072] },
        { teal: 5308, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5073] },
        { teal: 5309, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5074] },
        { teal: 5310, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5075] },
        { teal: 5311, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5076] },
        { teal: 5312, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5077] },
        { teal: 5313, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5078] },
        { teal: 5314, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5079] },
        { teal: 5315, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5080] },
        { teal: 5316, source: 'contracts\\BiatecClammPool.algo.ts:1006', pc: [5081] },
        { teal: 5317, source: 'contracts\\BiatecClammPool.algo.ts:1004', pc: [5082, 5083, 5084] },
        { teal: 5322, source: 'contracts\\BiatecClammPool.algo.ts:1008', pc: [5085, 5086] },
        { teal: 5323, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [5087] },
        { teal: 5324, source: 'contracts\\BiatecClammPool.algo.ts:1008', pc: [5088, 5089] },
        { teal: 5325, source: 'contracts\\BiatecClammPool.algo.ts:1008', pc: [5090] },
        { teal: 5326, source: 'contracts\\BiatecClammPool.algo.ts:1008', pc: [5091] },
        { teal: 5327, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [5092] },
        { teal: 5328, source: 'contracts\\BiatecClammPool.algo.ts:1008', pc: [5093] },
        { teal: 5329, source: 'contracts\\BiatecClammPool.algo.ts:1008', pc: [5094, 5095] },
        { teal: 5333, source: 'contracts\\BiatecClammPool.algo.ts:1009', pc: [5096, 5097] },
        { teal: 5334, source: 'contracts\\BiatecClammPool.algo.ts:1009', pc: [5098, 5099] },
        { teal: 5335, source: 'contracts\\BiatecClammPool.algo.ts:1009', pc: [5100] },
        { teal: 5336, source: 'contracts\\BiatecClammPool.algo.ts:1009', pc: [5101, 5102] },
        { teal: 5340, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5103, 5104] },
        { teal: 5341, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5105] },
        { teal: 5342, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5106] },
        { teal: 5343, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5107, 5108] },
        { teal: 5344, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5109] },
        { teal: 5345, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5110] },
        { teal: 5346, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5111] },
        { teal: 5347, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5112] },
        { teal: 5348, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5113] },
        {
          teal: 5351,
          source: 'contracts\\BiatecClammPool.algo.ts:1010',
          errorMessage: 'this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits',
          pc: [5114],
        },
        { teal: 5352, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5115] },
        { teal: 5353, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5116] },
        { teal: 5354, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5117] },
        { teal: 5355, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5118] },
        { teal: 5356, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5119] },
        { teal: 5357, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5120] },
        { teal: 5358, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5121] },
        { teal: 5359, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5122] },
        { teal: 5360, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5123] },
        { teal: 5361, source: 'contracts\\BiatecClammPool.algo.ts:1010', pc: [5124] },
        { teal: 5365, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5125, 5126] },
        { teal: 5366, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5127] },
        { teal: 5367, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5128] },
        { teal: 5368, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5129, 5130] },
        { teal: 5369, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5131] },
        { teal: 5370, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5132] },
        { teal: 5371, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5133] },
        { teal: 5372, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5134] },
        { teal: 5373, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5135] },
        {
          teal: 5376,
          source: 'contracts\\BiatecClammPool.algo.ts:1011',
          errorMessage: 'this.LiqudityBiatecFromFees.value + biatecLiquidityFromFeeIncrement overflowed 256 bits',
          pc: [5136],
        },
        { teal: 5377, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5137] },
        { teal: 5378, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5138] },
        { teal: 5379, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5139] },
        { teal: 5380, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5140] },
        { teal: 5381, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5141] },
        { teal: 5382, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5142] },
        { teal: 5383, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5143] },
        { teal: 5384, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5144] },
        { teal: 5385, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5145] },
        { teal: 5386, source: 'contracts\\BiatecClammPool.algo.ts:1011', pc: [5146] },
        { teal: 5399, source: 'contracts\\BiatecClammPool.algo.ts:1019', pc: [5147, 5148] },
        { teal: 5400, source: 'contracts\\BiatecClammPool.algo.ts:1019', pc: [5149] },
        { teal: 5401, source: 'contracts\\BiatecClammPool.algo.ts:1018', pc: [5150, 5151] },
        { teal: 5402, source: 'contracts\\BiatecClammPool.algo.ts:1018', pc: [5152] },
        { teal: 5403, source: 'contracts\\BiatecClammPool.algo.ts:1017', pc: [5153, 5154] },
        { teal: 5404, source: 'contracts\\BiatecClammPool.algo.ts:1017', pc: [5155] },
        { teal: 5405, source: 'contracts\\BiatecClammPool.algo.ts:1016', pc: [5156, 5157] },
        { teal: 5406, source: 'contracts\\BiatecClammPool.algo.ts:1016', pc: [5158] },
        { teal: 5407, source: 'contracts\\BiatecClammPool.algo.ts:1015', pc: [5159] },
        { teal: 5408, source: 'contracts\\BiatecClammPool.algo.ts:1015', pc: [5160] },
        { teal: 5409, source: 'contracts\\BiatecClammPool.algo.ts:1014', pc: [5161, 5162, 5163] },
        { teal: 5410, source: 'contracts\\BiatecClammPool.algo.ts:1014', pc: [5164, 5165] },
        { teal: 5414, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5166, 5167] },
        { teal: 5415, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5168] },
        { teal: 5416, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5169] },
        { teal: 5417, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5170] },
        { teal: 5418, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5171, 5172, 5173] },
        { teal: 5419, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5174, 5175] },
        { teal: 5420, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5176] },
        { teal: 5421, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5177] },
        { teal: 5422, source: 'contracts\\BiatecClammPool.algo.ts:1021', pc: [5178] },
        {
          teal: 5426,
          source: 'contracts\\BiatecClammPool.algo.ts:1021',
          errorMessage: 'Stats to register must not be empty',
          pc: [5179],
        },
        { teal: 5446, source: 'contracts\\BiatecClammPool.algo.ts:1022', pc: [5180] },
        { teal: 5447, source: 'contracts\\BiatecClammPool.algo.ts:1022', pc: [5181, 5182] },
        { teal: 5448, source: 'contracts\\BiatecClammPool.algo.ts:1022', pc: [5183, 5184] },
        { teal: 5449, source: 'contracts\\BiatecClammPool.algo.ts:1023', pc: [5185, 5186, 5187, 5188, 5189, 5190] },
        { teal: 5450, source: 'contracts\\BiatecClammPool.algo.ts:1023', pc: [5191, 5192] },
        { teal: 5465, source: 'contracts\\BiatecClammPool.algo.ts:1025', pc: [5193, 5194] },
        { teal: 5466, source: 'contracts\\BiatecClammPool.algo.ts:1025', pc: [5195] },
        { teal: 5467, source: 'contracts\\BiatecClammPool.algo.ts:1025', pc: [5196, 5197] },
        { teal: 5468, source: 'contracts\\BiatecClammPool.algo.ts:1026', pc: [5198, 5199] },
        { teal: 5469, source: 'contracts\\BiatecClammPool.algo.ts:1026', pc: [5200] },
        { teal: 5470, source: 'contracts\\BiatecClammPool.algo.ts:1026', pc: [5201, 5202] },
        { teal: 5471, source: 'contracts\\BiatecClammPool.algo.ts:1027', pc: [5203, 5204] },
        { teal: 5472, source: 'contracts\\BiatecClammPool.algo.ts:1027', pc: [5205] },
        { teal: 5473, source: 'contracts\\BiatecClammPool.algo.ts:1027', pc: [5206, 5207] },
        { teal: 5474, source: 'contracts\\BiatecClammPool.algo.ts:1028', pc: [5208, 5209] },
        { teal: 5475, source: 'contracts\\BiatecClammPool.algo.ts:1028', pc: [5210] },
        { teal: 5476, source: 'contracts\\BiatecClammPool.algo.ts:1028', pc: [5211] },
        { teal: 5477, source: 'contracts\\BiatecClammPool.algo.ts:1028', pc: [5212, 5213] },
        { teal: 5478, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5214, 5215] },
        { teal: 5479, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5216] },
        { teal: 5480, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5217] },
        { teal: 5481, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5218, 5219] },
        { teal: 5482, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5220] },
        {
          teal: 5485,
          source: 'contracts\\BiatecClammPool.algo.ts:1029',
          errorMessage: 'newPrice as uint64 overflowed 64 bits',
          pc: [5221],
        },
        { teal: 5486, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5222, 5223] },
        { teal: 5487, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5224] },
        { teal: 5488, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5225] },
        { teal: 5489, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5226] },
        { teal: 5490, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5227] },
        { teal: 5491, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5228, 5229] },
        { teal: 5492, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5230] },
        { teal: 5493, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5231] },
        { teal: 5494, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5232] },
        { teal: 5495, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5233] },
        { teal: 5496, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5234] },
        { teal: 5497, source: 'contracts\\BiatecClammPool.algo.ts:1029', pc: [5235, 5236] },
        { teal: 5498, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5237, 5238] },
        { teal: 5499, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5239, 5240] },
        { teal: 5500, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5241] },
        { teal: 5501, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5242] },
        { teal: 5502, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5243, 5244] },
        { teal: 5503, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5245] },
        {
          teal: 5506,
          source: 'contracts\\BiatecClammPool.algo.ts:1030',
          errorMessage: 'assetADelicmalScale2Scale as uint64 overflowed 64 bits',
          pc: [5246],
        },
        { teal: 5507, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5247, 5248] },
        { teal: 5508, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5249] },
        { teal: 5509, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5250] },
        { teal: 5510, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5251] },
        { teal: 5511, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5252] },
        { teal: 5512, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5253, 5254] },
        { teal: 5513, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5255] },
        { teal: 5514, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5256] },
        { teal: 5515, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5257] },
        { teal: 5516, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5258] },
        { teal: 5517, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5259] },
        { teal: 5518, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5260] },
        { teal: 5519, source: 'contracts\\BiatecClammPool.algo.ts:1030', pc: [5261, 5262] },
        { teal: 5520, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5263, 5264] },
        { teal: 5521, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5265, 5266] },
        { teal: 5522, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5267] },
        { teal: 5523, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5268] },
        { teal: 5524, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5269, 5270] },
        { teal: 5525, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5271] },
        {
          teal: 5528,
          source: 'contracts\\BiatecClammPool.algo.ts:1031',
          errorMessage: 'assetBDelicmalScale2Scale as uint64 overflowed 64 bits',
          pc: [5272],
        },
        { teal: 5529, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5273, 5274] },
        { teal: 5530, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5275] },
        { teal: 5531, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5276] },
        { teal: 5532, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5277] },
        { teal: 5533, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5278] },
        { teal: 5534, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5279, 5280] },
        { teal: 5535, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5281] },
        { teal: 5536, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5282] },
        { teal: 5537, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5283] },
        { teal: 5538, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5284] },
        { teal: 5539, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5285] },
        { teal: 5540, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5286] },
        { teal: 5541, source: 'contracts\\BiatecClammPool.algo.ts:1031', pc: [5287, 5288] },
        { teal: 5542, source: 'contracts\\BiatecClammPool.algo.ts:1032', pc: [5289, 5290] },
        { teal: 5543, source: 'contracts\\BiatecClammPool.algo.ts:1032', pc: [5291] },
        { teal: 5544, source: 'contracts\\BiatecClammPool.algo.ts:1032', pc: [5292, 5293] },
        { teal: 5545, source: 'contracts\\BiatecClammPool.algo.ts:1033', pc: [5294, 5295] },
        { teal: 5546, source: 'contracts\\BiatecClammPool.algo.ts:1033', pc: [5296] },
        { teal: 5547, source: 'contracts\\BiatecClammPool.algo.ts:1033', pc: [5297, 5298] },
        { teal: 5548, source: 'contracts\\BiatecClammPool.algo.ts:1034', pc: [5299, 5300] },
        { teal: 5549, source: 'contracts\\BiatecClammPool.algo.ts:1034', pc: [5301, 5302] },
        { teal: 5553, source: 'contracts\\BiatecClammPool.algo.ts:1036', pc: [5303] },
        { teal: 5554, source: 'contracts\\BiatecClammPool.algo.ts:1036', pc: [5304, 5305] },
        { teal: 5558, source: 'contracts\\BiatecClammPool.algo.ts:1037', pc: [5306, 5307] },
        { teal: 5559, source: 'contracts\\BiatecClammPool.algo.ts:1037', pc: [5308, 5309] },
        { teal: 5562, source: 'contracts\\BiatecClammPool.algo.ts:1022', pc: [5310] },
        { teal: 5566, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5311, 5312] },
        { teal: 5567, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5313, 5314] },
        { teal: 5568, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5315] },
        { teal: 5569, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5316] },
        { teal: 5570, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5317, 5318] },
        { teal: 5571, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5319] },
        {
          teal: 5574,
          source: 'contracts\\BiatecClammPool.algo.ts:1040',
          errorMessage: 'newPrice as uint64 overflowed 64 bits',
          pc: [5320],
        },
        { teal: 5575, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5321, 5322] },
        { teal: 5576, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5323] },
        { teal: 5577, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5324] },
        { teal: 5578, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5325] },
        { teal: 5579, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5326] },
        { teal: 5580, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5327, 5328] },
        { teal: 5581, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5329] },
        { teal: 5582, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5330] },
        { teal: 5583, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5331] },
        { teal: 5584, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5332] },
        { teal: 5585, source: 'contracts\\BiatecClammPool.algo.ts:1040', pc: [5333] },
        { teal: 5589, source: 'contracts\\BiatecClammPool.algo.ts:1062', pc: [5334, 5335] },
        { teal: 5590, source: 'contracts\\BiatecClammPool.algo.ts:1062', pc: [5336] },
        { teal: 5593, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [5337, 5338] },
        { teal: 5596, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [5339, 5340] },
        { teal: 5597, source: 'contracts\\BiatecClammPool.algo.ts:824', pc: [5341] },
        { teal: 5602, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5342, 5343] },
        { teal: 5605, source: 'contracts\\BiatecClammPool.algo.ts:1084', pc: [5344, 5345, 5346] },
        { teal: 5606, source: 'contracts\\BiatecClammPool.algo.ts:1084', pc: [5347] },
        { teal: 5607, source: 'contracts\\BiatecClammPool.algo.ts:1084', pc: [5348] },
        { teal: 5608, source: 'contracts\\BiatecClammPool.algo.ts:1084', pc: [5349] },
        { teal: 5609, source: 'contracts\\BiatecClammPool.algo.ts:1084', pc: [5350] },
        {
          teal: 5612,
          source: 'contracts\\BiatecClammPool.algo.ts:1084',
          errorMessage: 'argument 0 (amountB) for distributeExcessAssets must be a uint256',
          pc: [5351],
        },
        { teal: 5615, source: 'contracts\\BiatecClammPool.algo.ts:1083', pc: [5352, 5353, 5354] },
        { teal: 5616, source: 'contracts\\BiatecClammPool.algo.ts:1083', pc: [5355] },
        { teal: 5617, source: 'contracts\\BiatecClammPool.algo.ts:1083', pc: [5356] },
        { teal: 5618, source: 'contracts\\BiatecClammPool.algo.ts:1083', pc: [5357] },
        { teal: 5619, source: 'contracts\\BiatecClammPool.algo.ts:1083', pc: [5358] },
        {
          teal: 5622,
          source: 'contracts\\BiatecClammPool.algo.ts:1083',
          errorMessage: 'argument 1 (amountA) for distributeExcessAssets must be a uint256',
          pc: [5359],
        },
        { teal: 5625, source: 'contracts\\BiatecClammPool.algo.ts:1082', pc: [5360, 5361, 5362] },
        { teal: 5626, source: 'contracts\\BiatecClammPool.algo.ts:1082', pc: [5363] },
        { teal: 5629, source: 'contracts\\BiatecClammPool.algo.ts:1081', pc: [5364, 5365, 5366] },
        { teal: 5630, source: 'contracts\\BiatecClammPool.algo.ts:1081', pc: [5367] },
        { teal: 5633, source: 'contracts\\BiatecClammPool.algo.ts:1080', pc: [5368, 5369, 5370] },
        { teal: 5634, source: 'contracts\\BiatecClammPool.algo.ts:1080', pc: [5371] },
        { teal: 5637, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5372, 5373, 5374] },
        { teal: 5638, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5375] },
        { teal: 5639, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5376] },
        { teal: 5640, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5377] },
        { teal: 5641, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5378] },
        {
          teal: 5644,
          source: 'contracts\\BiatecClammPool.algo.ts:1079',
          errorMessage: 'distributeExcessAssets return value overflowed 256 bits',
          pc: [5379],
        },
        { teal: 5645, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5380] },
        { teal: 5646, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5381] },
        { teal: 5647, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5382] },
        { teal: 5648, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5383] },
        { teal: 5649, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5384] },
        { teal: 5650, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5385] },
        { teal: 5651, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5386] },
        { teal: 5652, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5387] },
        { teal: 5653, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5388] },
        { teal: 5654, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5389] },
        { teal: 5655, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5390] },
        { teal: 5656, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5391] },
        { teal: 5657, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5392] },
        { teal: 5674, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5393, 5394, 5395] },
        { teal: 5677, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5396] },
        { teal: 5678, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5397, 5398] },
        { teal: 5682, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5399] },
        { teal: 5683, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5400, 5401] },
        { teal: 5684, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5402, 5403] },
        { teal: 5685, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5404] },
        { teal: 5686, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5405, 5406] },
        { teal: 5687, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5407, 5408] },
        { teal: 5688, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5409] },
        { teal: 5689, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5410, 5411] },
        { teal: 5690, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5412, 5413] },
        { teal: 5691, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5414, 5415] },
        { teal: 5692, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5416, 5417] },
        { teal: 5693, source: 'contracts\\BiatecClammPool.algo.ts:1086', pc: [5418] },
        { teal: 5697, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5419] },
        { teal: 5698, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5420, 5421] },
        { teal: 5699, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5422, 5423] },
        { teal: 5700, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5424] },
        { teal: 5701, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5425, 5426] },
        { teal: 5702, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5427, 5428] },
        { teal: 5703, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5429] },
        { teal: 5704, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5430, 5431] },
        { teal: 5705, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5432, 5433] },
        { teal: 5706, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5434, 5435] },
        { teal: 5707, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5436, 5437] },
        { teal: 5708, source: 'contracts\\BiatecClammPool.algo.ts:1087', pc: [5438] },
        { teal: 5712, source: 'contracts\\BiatecClammPool.algo.ts:1088', pc: [5439, 5440] },
        { teal: 5713, source: 'contracts\\BiatecClammPool.algo.ts:1088', pc: [5441, 5442] },
        { teal: 5714, source: 'contracts\\BiatecClammPool.algo.ts:1088', pc: [5443, 5444, 5445] },
        { teal: 5718, source: 'contracts\\BiatecClammPool.algo.ts:1090', pc: [5446, 5447] },
        { teal: 5719, source: 'contracts\\BiatecClammPool.algo.ts:1090', pc: [5448, 5449] },
        { teal: 5720, source: 'contracts\\BiatecClammPool.algo.ts:1090', pc: [5450] },
        { teal: 5721, source: 'contracts\\BiatecClammPool.algo.ts:1090', pc: [5451] },
        { teal: 5724, source: 'contracts\\BiatecClammPool.algo.ts:1090', errorMessage: 'E_CONFIG', pc: [5452] },
        { teal: 5728, source: 'contracts\\BiatecClammPool.algo.ts:1091', pc: [5453, 5454] },
        { teal: 5729, source: 'contracts\\BiatecClammPool.algo.ts:1091', pc: [5455, 5456] },
        { teal: 5730, source: 'contracts\\BiatecClammPool.algo.ts:1091', pc: [5457] },
        {
          teal: 5733,
          source: 'contracts\\BiatecClammPool.algo.ts:1091',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('ef')",
          pc: [5458],
        },
        { teal: 5734, source: 'contracts\\BiatecClammPool.algo.ts:1091', pc: [5459, 5460] },
        { teal: 5738, source: 'contracts\\BiatecClammPool.algo.ts:1093', pc: [5461, 5462] },
        { teal: 5739, source: 'contracts\\BiatecClammPool.algo.ts:1093', pc: [5463, 5464] },
        { teal: 5740, source: 'contracts\\BiatecClammPool.algo.ts:1093', pc: [5465] },
        {
          teal: 5743,
          source: 'contracts\\BiatecClammPool.algo.ts:1093',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('s')",
          pc: [5466],
        },
        { teal: 5744, source: 'contracts\\BiatecClammPool.algo.ts:1093', pc: [5467, 5468] },
        { teal: 5748, source: 'contracts\\BiatecClammPool.algo.ts:1094', pc: [5469, 5470] },
        { teal: 5749, source: 'contracts\\BiatecClammPool.algo.ts:1094', pc: [5471] },
        { teal: 5750, source: 'contracts\\BiatecClammPool.algo.ts:1094', pc: [5472] },
        { teal: 5753, source: 'contracts\\BiatecClammPool.algo.ts:1094', errorMessage: 'E_PAUSED', pc: [5473] },
        { teal: 5760, source: 'contracts\\BiatecClammPool.algo.ts:1097', pc: [5474, 5475] },
        { teal: 5761, source: 'contracts\\BiatecClammPool.algo.ts:1097', pc: [5476, 5477] },
        { teal: 5762, source: 'contracts\\BiatecClammPool.algo.ts:1097', pc: [5478] },
        { teal: 5765, source: 'contracts\\BiatecClammPool.algo.ts:1096', errorMessage: 'E_SENDER', pc: [5479] },
        { teal: 5769, source: 'contracts\\BiatecClammPool.algo.ts:1101', pc: [5480, 5481] },
        { teal: 5770, source: 'contracts\\BiatecClammPool.algo.ts:1101', pc: [5482, 5483] },
        { teal: 5775, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5484, 5485] },
        { teal: 5776, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5486] },
        { teal: 5777, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5487] },
        { teal: 5778, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5488, 5489, 5490] },
        { teal: 5783, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5491, 5492] },
        { teal: 5784, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5493, 5494] },
        { teal: 5785, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5495] },
        { teal: 5786, source: 'contracts\\BiatecClammPool.algo.ts:1102', pc: [5496, 5497] },
        { teal: 5791, source: 'contracts\\BiatecClammPool.algo.ts:1104', pc: [5498, 5499] },
        { teal: 5792, source: 'contracts\\BiatecClammPool.algo.ts:1104', pc: [5500, 5501] },
        { teal: 5793, source: 'contracts\\BiatecClammPool.algo.ts:1104', pc: [5502, 5503] },
        { teal: 5794, source: 'contracts\\BiatecClammPool.algo.ts:1104', pc: [5504] },
        { teal: 5795, source: 'contracts\\BiatecClammPool.algo.ts:1104', pc: [5505] },
        { teal: 5796, source: 'contracts\\BiatecClammPool.algo.ts:1104', pc: [5506] },
        { teal: 5797, source: 'contracts\\BiatecClammPool.algo.ts:1104', pc: [5507, 5508] },
        { teal: 5801, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5509, 5510] },
        { teal: 5802, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5511, 5512] },
        { teal: 5803, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5513, 5514] },
        { teal: 5804, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5515, 5516] },
        { teal: 5805, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5517] },
        { teal: 5806, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5518] },
        { teal: 5807, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5519] },
        { teal: 5808, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5520] },
        { teal: 5809, source: 'contracts\\BiatecClammPool.algo.ts:1106', pc: [5521, 5522] },
        { teal: 5813, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5523] },
        { teal: 5814, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5524] },
        { teal: 5815, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5525] },
        { teal: 5816, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5526, 5527] },
        { teal: 5817, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5528] },
        { teal: 5818, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5529] },
        { teal: 5819, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5530] },
        { teal: 5820, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5531] },
        { teal: 5821, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5532] },
        {
          teal: 5824,
          source: 'contracts\\BiatecClammPool.algo.ts:1108',
          errorMessage: 'this.assetABalance.value + amountA overflowed 256 bits',
          pc: [5533],
        },
        { teal: 5825, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5534] },
        { teal: 5826, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5535] },
        { teal: 5827, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5536] },
        { teal: 5828, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5537] },
        { teal: 5829, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5538] },
        { teal: 5830, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5539] },
        { teal: 5831, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5540] },
        { teal: 5832, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5541] },
        { teal: 5833, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5542] },
        { teal: 5834, source: 'contracts\\BiatecClammPool.algo.ts:1108', pc: [5543] },
        { teal: 5838, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5544, 5545] },
        { teal: 5839, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5546] },
        { teal: 5840, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5547] },
        { teal: 5841, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5548, 5549] },
        { teal: 5842, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5550] },
        { teal: 5843, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5551] },
        { teal: 5844, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5552] },
        { teal: 5845, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5553] },
        { teal: 5846, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5554] },
        {
          teal: 5849,
          source: 'contracts\\BiatecClammPool.algo.ts:1109',
          errorMessage: 'this.assetBBalance.value + amountB overflowed 256 bits',
          pc: [5555],
        },
        { teal: 5850, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5556] },
        { teal: 5851, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5557] },
        { teal: 5852, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5558] },
        { teal: 5853, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5559] },
        { teal: 5854, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5560] },
        { teal: 5855, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5561] },
        { teal: 5856, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5562] },
        { teal: 5857, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5563] },
        { teal: 5858, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5564] },
        { teal: 5859, source: 'contracts\\BiatecClammPool.algo.ts:1109', pc: [5565] },
        { teal: 5864, source: 'contracts\\BiatecClammPool.algo.ts:1110', pc: [5566, 5567] },
        { teal: 5865, source: 'contracts\\BiatecClammPool.algo.ts:1110', pc: [5568] },
        { teal: 5866, source: 'contracts\\BiatecClammPool.algo.ts:1110', pc: [5569] },
        { teal: 5867, source: 'contracts\\BiatecClammPool.algo.ts:1110', pc: [5570, 5571, 5572] },
        { teal: 5875, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5573, 5574] },
        { teal: 5876, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5575, 5576] },
        { teal: 5877, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5577] },
        { teal: 5878, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5578, 5579] },
        { teal: 5879, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5580] },
        { teal: 5880, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5581] },
        { teal: 5881, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5582, 5583] },
        { teal: 5882, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5584] },
        { teal: 5883, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5585] },
        { teal: 5884, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5586] },
        { teal: 5885, source: 'contracts\\BiatecClammPool.algo.ts:1112', pc: [5587] },
        { teal: 5888, source: 'contracts\\BiatecClammPool.algo.ts:1111', errorMessage: 'E_A0_B', pc: [5588] },
        { teal: 5889, source: 'contracts\\BiatecClammPool.algo.ts:1110', pc: [5589, 5590, 5591] },
        { teal: 5897, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5592, 5593] },
        { teal: 5898, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5594, 5595] },
        { teal: 5899, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5596, 5597] },
        { teal: 5900, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5598] },
        { teal: 5901, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5599] },
        { teal: 5902, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5600, 5601] },
        { teal: 5903, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5602] },
        { teal: 5904, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5603] },
        { teal: 5905, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5604] },
        { teal: 5906, source: 'contracts\\BiatecClammPool.algo.ts:1117', pc: [5605] },
        { teal: 5909, source: 'contracts\\BiatecClammPool.algo.ts:1116', errorMessage: 'E_A_B', pc: [5606] },
        { teal: 5917, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5607, 5608] },
        { teal: 5918, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5609, 5610] },
        { teal: 5919, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5611, 5612] },
        { teal: 5920, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5613] },
        { teal: 5921, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5614] },
        { teal: 5922, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5615, 5616] },
        { teal: 5923, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5617] },
        { teal: 5924, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5618, 5619] },
        { teal: 5925, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5620] },
        { teal: 5926, source: 'contracts\\BiatecClammPool.algo.ts:1122', pc: [5621] },
        { teal: 5929, source: 'contracts\\BiatecClammPool.algo.ts:1121', errorMessage: 'E_B_B', pc: [5622] },
        { teal: 5933, source: 'contracts\\BiatecClammPool.algo.ts:1125', pc: [5623, 5624] },
        { teal: 5934, source: 'contracts\\BiatecClammPool.algo.ts:1125', pc: [5625, 5626] },
        { teal: 5939, source: 'contracts\\BiatecClammPool.algo.ts:1126', pc: [5627, 5628] },
        { teal: 5940, source: 'contracts\\BiatecClammPool.algo.ts:1126', pc: [5629] },
        { teal: 5941, source: 'contracts\\BiatecClammPool.algo.ts:1126', pc: [5630, 5631] },
        { teal: 5942, source: 'contracts\\BiatecClammPool.algo.ts:1126', pc: [5632] },
        { teal: 5943, source: 'contracts\\BiatecClammPool.algo.ts:1126', pc: [5633] },
        { teal: 5944, source: 'contracts\\BiatecClammPool.algo.ts:1126', pc: [5634, 5635, 5636] },
        { teal: 5953, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5637, 5638] },
        { teal: 5954, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5639] },
        { teal: 5955, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5640] },
        { teal: 5956, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5641] },
        { teal: 5957, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5642] },
        { teal: 5958, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5643] },
        { teal: 5959, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5644] },
        {
          teal: 5962,
          source: 'contracts\\BiatecClammPool.algo.ts:1130',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [5645],
        },
        { teal: 5963, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5646] },
        { teal: 5964, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5647] },
        { teal: 5965, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5648] },
        { teal: 5966, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5649] },
        { teal: 5967, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5650] },
        { teal: 5968, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5651] },
        { teal: 5969, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5652] },
        { teal: 5970, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5653] },
        { teal: 5971, source: 'contracts\\BiatecClammPool.algo.ts:1130', pc: [5654] },
        { teal: 5972, source: 'contracts\\BiatecClammPool.algo.ts:1129', pc: [5655, 5656] },
        { teal: 5973, source: 'contracts\\BiatecClammPool.algo.ts:1129', pc: [5657] },
        { teal: 5974, source: 'contracts\\BiatecClammPool.algo.ts:1128', pc: [5658] },
        { teal: 5975, source: 'contracts\\BiatecClammPool.algo.ts:1128', pc: [5659] },
        { teal: 5976, source: 'contracts\\BiatecClammPool.algo.ts:1127', pc: [5660, 5661, 5662] },
        { teal: 5977, source: 'contracts\\BiatecClammPool.algo.ts:1127', pc: [5663, 5664] },
        { teal: 5978, source: 'contracts\\BiatecClammPool.algo.ts:1126', pc: [5665, 5666, 5667] },
        { teal: 5990, source: 'contracts\\BiatecClammPool.algo.ts:1139', pc: [5668, 5669] },
        { teal: 5991, source: 'contracts\\BiatecClammPool.algo.ts:1139', pc: [5670] },
        { teal: 5992, source: 'contracts\\BiatecClammPool.algo.ts:1138', pc: [5671, 5672] },
        { teal: 5993, source: 'contracts\\BiatecClammPool.algo.ts:1138', pc: [5673] },
        { teal: 5994, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5674, 5675] },
        { teal: 5995, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5676] },
        { teal: 5996, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5677] },
        { teal: 5997, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5678] },
        { teal: 5998, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5679] },
        { teal: 5999, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5680] },
        { teal: 6000, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5681] },
        {
          teal: 6003,
          source: 'contracts\\BiatecClammPool.algo.ts:1137',
          errorMessage: 'this.priceMax.value as uint256 overflowed 256 bits',
          pc: [5682],
        },
        { teal: 6004, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5683] },
        { teal: 6005, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5684] },
        { teal: 6006, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5685] },
        { teal: 6007, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5686] },
        { teal: 6008, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5687] },
        { teal: 6009, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5688] },
        { teal: 6010, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5689] },
        { teal: 6011, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5690] },
        { teal: 6012, source: 'contracts\\BiatecClammPool.algo.ts:1137', pc: [5691] },
        { teal: 6013, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5692, 5693] },
        { teal: 6014, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5694] },
        { teal: 6015, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5695] },
        { teal: 6016, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5696] },
        { teal: 6017, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5697] },
        { teal: 6018, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5698] },
        { teal: 6019, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5699] },
        {
          teal: 6022,
          source: 'contracts\\BiatecClammPool.algo.ts:1136',
          errorMessage: 'this.priceMin.value as uint256 overflowed 256 bits',
          pc: [5700],
        },
        { teal: 6023, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5701] },
        { teal: 6024, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5702] },
        { teal: 6025, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5703] },
        { teal: 6026, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5704] },
        { teal: 6027, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5705] },
        { teal: 6028, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5706] },
        { teal: 6029, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5707] },
        { teal: 6030, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5708] },
        { teal: 6031, source: 'contracts\\BiatecClammPool.algo.ts:1136', pc: [5709] },
        { teal: 6032, source: 'contracts\\BiatecClammPool.algo.ts:1135', pc: [5710, 5711] },
        { teal: 6033, source: 'contracts\\BiatecClammPool.algo.ts:1135', pc: [5712] },
        { teal: 6034, source: 'contracts\\BiatecClammPool.algo.ts:1134', pc: [5713] },
        { teal: 6035, source: 'contracts\\BiatecClammPool.algo.ts:1134', pc: [5714] },
        { teal: 6036, source: 'contracts\\BiatecClammPool.algo.ts:1133', pc: [5715, 5716, 5717] },
        { teal: 6037, source: 'contracts\\BiatecClammPool.algo.ts:1133', pc: [5718, 5719] },
        { teal: 6047, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5720, 5721] },
        { teal: 6048, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5722] },
        { teal: 6049, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5723] },
        { teal: 6050, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5724] },
        { teal: 6051, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5725] },
        {
          teal: 6054,
          source: 'contracts\\BiatecClammPool.algo.ts:1146',
          errorMessage: 'D_SQRT overflowed 256 bits',
          pc: [5726],
        },
        { teal: 6055, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5727] },
        { teal: 6056, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5728] },
        { teal: 6057, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5729] },
        { teal: 6058, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5730] },
        { teal: 6059, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5731] },
        { teal: 6060, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5732] },
        { teal: 6061, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5733] },
        { teal: 6062, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5734] },
        { teal: 6063, source: 'contracts\\BiatecClammPool.algo.ts:1146', pc: [5735] },
        { teal: 6064, source: 'contracts\\BiatecClammPool.algo.ts:1145', pc: [5736, 5737] },
        { teal: 6065, source: 'contracts\\BiatecClammPool.algo.ts:1145', pc: [5738] },
        { teal: 6066, source: 'contracts\\BiatecClammPool.algo.ts:1144', pc: [5739, 5740] },
        { teal: 6067, source: 'contracts\\BiatecClammPool.algo.ts:1144', pc: [5741] },
        { teal: 6068, source: 'contracts\\BiatecClammPool.algo.ts:1143', pc: [5742, 5743] },
        { teal: 6069, source: 'contracts\\BiatecClammPool.algo.ts:1143', pc: [5744] },
        { teal: 6070, source: 'contracts\\BiatecClammPool.algo.ts:1142', pc: [5745] },
        { teal: 6071, source: 'contracts\\BiatecClammPool.algo.ts:1142', pc: [5746] },
        { teal: 6072, source: 'contracts\\BiatecClammPool.algo.ts:1141', pc: [5747, 5748, 5749] },
        { teal: 6073, source: 'contracts\\BiatecClammPool.algo.ts:1141', pc: [5750, 5751] },
        { teal: 6078, source: 'contracts\\BiatecClammPool.algo.ts:1150', pc: [5752, 5753] },
        { teal: 6079, source: 'contracts\\BiatecClammPool.algo.ts:1150', pc: [5754, 5755] },
        { teal: 6080, source: 'contracts\\BiatecClammPool.algo.ts:1150', pc: [5756] },
        { teal: 6081, source: 'contracts\\BiatecClammPool.algo.ts:1150', pc: [5757] },
        { teal: 6082, source: 'contracts\\BiatecClammPool.algo.ts:1150', pc: [5758, 5759] },
        { teal: 6086, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5760, 5761] },
        { teal: 6087, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5762, 5763] },
        { teal: 6088, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5764] },
        { teal: 6089, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5765] },
        { teal: 6090, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5766] },
        { teal: 6091, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5767] },
        {
          teal: 6094,
          source: 'contracts\\BiatecClammPool.algo.ts:1151',
          errorMessage: 'newL overflowed 256 bits',
          pc: [5768],
        },
        { teal: 6095, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5769] },
        { teal: 6096, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5770] },
        { teal: 6097, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5771] },
        { teal: 6098, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5772] },
        { teal: 6099, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5773] },
        { teal: 6100, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5774] },
        { teal: 6101, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5775] },
        { teal: 6102, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5776] },
        { teal: 6103, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5777] },
        { teal: 6104, source: 'contracts\\BiatecClammPool.algo.ts:1151', pc: [5778] },
        { teal: 6108, source: 'contracts\\BiatecClammPool.algo.ts:1153', pc: [5779, 5780] },
        { teal: 6109, source: 'contracts\\BiatecClammPool.algo.ts:1153', pc: [5781] },
        { teal: 6110, source: 'contracts\\BiatecClammPool.algo.ts:1153', pc: [5782, 5783] },
        { teal: 6111, source: 'contracts\\BiatecClammPool.algo.ts:1153', pc: [5784] },
        {
          teal: 6114,
          source: 'contracts\\BiatecClammPool.algo.ts:1153',
          errorMessage: "global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')",
          pc: [5785],
        },
        { teal: 6115, source: 'contracts\\BiatecClammPool.algo.ts:1153', pc: [5786, 5787] },
        { teal: 6120, source: 'contracts\\BiatecClammPool.algo.ts:1154', pc: [5788, 5789] },
        { teal: 6121, source: 'contracts\\BiatecClammPool.algo.ts:1154', pc: [5790, 5791] },
        { teal: 6122, source: 'contracts\\BiatecClammPool.algo.ts:1154', pc: [5792] },
        { teal: 6123, source: 'contracts\\BiatecClammPool.algo.ts:1154', pc: [5793, 5794, 5795] },
        { teal: 6128, source: 'contracts\\BiatecClammPool.algo.ts:1155', pc: [5796, 5797] },
        { teal: 6129, source: 'contracts\\BiatecClammPool.algo.ts:1155', pc: [5798, 5799] },
        { teal: 6133, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5800, 5801] },
        { teal: 6134, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5802] },
        { teal: 6135, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5803] },
        { teal: 6136, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5804, 5805] },
        { teal: 6137, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5806] },
        { teal: 6138, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5807] },
        { teal: 6139, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5808] },
        { teal: 6140, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5809] },
        { teal: 6141, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5810] },
        {
          teal: 6144,
          source: 'contracts\\BiatecClammPool.algo.ts:1156',
          errorMessage: 'this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits',
          pc: [5811],
        },
        { teal: 6145, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5812] },
        { teal: 6146, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5813] },
        { teal: 6147, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5814] },
        { teal: 6148, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5815] },
        { teal: 6149, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5816] },
        { teal: 6150, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5817] },
        { teal: 6151, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5818] },
        { teal: 6152, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5819] },
        { teal: 6153, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5820] },
        { teal: 6154, source: 'contracts\\BiatecClammPool.algo.ts:1156', pc: [5821] },
        { teal: 6155, source: 'contracts\\BiatecClammPool.algo.ts:1154', pc: [5822, 5823, 5824] },
        { teal: 6160, source: 'contracts\\BiatecClammPool.algo.ts:1158', pc: [5825, 5826] },
        { teal: 6161, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [5827] },
        { teal: 6162, source: 'contracts\\BiatecClammPool.algo.ts:1158', pc: [5828, 5829] },
        { teal: 6163, source: 'contracts\\BiatecClammPool.algo.ts:1158', pc: [5830] },
        { teal: 6164, source: 'contracts\\BiatecClammPool.algo.ts:1158', pc: [5831] },
        { teal: 6165, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [5832] },
        { teal: 6166, source: 'contracts\\BiatecClammPool.algo.ts:1158', pc: [5833] },
        { teal: 6167, source: 'contracts\\BiatecClammPool.algo.ts:1158', pc: [5834, 5835] },
        { teal: 6171, source: 'contracts\\BiatecClammPool.algo.ts:1159', pc: [5836, 5837] },
        { teal: 6172, source: 'contracts\\BiatecClammPool.algo.ts:1159', pc: [5838, 5839] },
        { teal: 6173, source: 'contracts\\BiatecClammPool.algo.ts:1159', pc: [5840] },
        { teal: 6174, source: 'contracts\\BiatecClammPool.algo.ts:1159', pc: [5841, 5842] },
        { teal: 6178, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5843, 5844] },
        { teal: 6179, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5845] },
        { teal: 6180, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5846] },
        { teal: 6181, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5847, 5848] },
        { teal: 6182, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5849] },
        { teal: 6183, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5850] },
        { teal: 6184, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5851] },
        { teal: 6185, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5852] },
        { teal: 6186, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5853] },
        {
          teal: 6189,
          source: 'contracts\\BiatecClammPool.algo.ts:1160',
          errorMessage: 'this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits',
          pc: [5854],
        },
        { teal: 6190, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5855] },
        { teal: 6191, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5856] },
        { teal: 6192, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5857] },
        { teal: 6193, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5858] },
        { teal: 6194, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5859] },
        { teal: 6195, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5860] },
        { teal: 6196, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5861] },
        { teal: 6197, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5862] },
        { teal: 6198, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5863] },
        { teal: 6199, source: 'contracts\\BiatecClammPool.algo.ts:1160', pc: [5864] },
        { teal: 6203, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5865, 5866] },
        { teal: 6204, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5867] },
        { teal: 6205, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5868] },
        { teal: 6206, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5869, 5870] },
        { teal: 6207, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5871] },
        { teal: 6208, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5872] },
        { teal: 6209, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5873] },
        { teal: 6210, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5874] },
        { teal: 6211, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5875] },
        {
          teal: 6214,
          source: 'contracts\\BiatecClammPool.algo.ts:1161',
          errorMessage: 'this.LiqudityBiatecFromFees.value + biatecLiquidityFromFeeIncrement overflowed 256 bits',
          pc: [5876],
        },
        { teal: 6215, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5877] },
        { teal: 6216, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5878] },
        { teal: 6217, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5879] },
        { teal: 6218, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5880] },
        { teal: 6219, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5881] },
        { teal: 6220, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5882] },
        { teal: 6221, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5883] },
        { teal: 6222, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5884] },
        { teal: 6223, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5885] },
        { teal: 6224, source: 'contracts\\BiatecClammPool.algo.ts:1161', pc: [5886] },
        { teal: 6235, source: 'contracts\\BiatecClammPool.algo.ts:1169', pc: [5887, 5888] },
        { teal: 6236, source: 'contracts\\BiatecClammPool.algo.ts:1169', pc: [5889] },
        { teal: 6237, source: 'contracts\\BiatecClammPool.algo.ts:1168', pc: [5890, 5891] },
        { teal: 6238, source: 'contracts\\BiatecClammPool.algo.ts:1168', pc: [5892] },
        { teal: 6239, source: 'contracts\\BiatecClammPool.algo.ts:1167', pc: [5893, 5894] },
        { teal: 6240, source: 'contracts\\BiatecClammPool.algo.ts:1167', pc: [5895] },
        { teal: 6241, source: 'contracts\\BiatecClammPool.algo.ts:1166', pc: [5896, 5897] },
        { teal: 6242, source: 'contracts\\BiatecClammPool.algo.ts:1166', pc: [5898] },
        { teal: 6243, source: 'contracts\\BiatecClammPool.algo.ts:1165', pc: [5899] },
        { teal: 6244, source: 'contracts\\BiatecClammPool.algo.ts:1165', pc: [5900] },
        { teal: 6245, source: 'contracts\\BiatecClammPool.algo.ts:1164', pc: [5901, 5902, 5903] },
        { teal: 6246, source: 'contracts\\BiatecClammPool.algo.ts:1164', pc: [5904, 5905] },
        { teal: 6250, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5906, 5907] },
        { teal: 6251, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5908, 5909] },
        { teal: 6252, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5910] },
        { teal: 6253, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5911] },
        { teal: 6254, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5912, 5913] },
        { teal: 6255, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5914] },
        {
          teal: 6258,
          source: 'contracts\\BiatecClammPool.algo.ts:1171',
          errorMessage: 'newPrice as uint64 overflowed 64 bits',
          pc: [5915],
        },
        { teal: 6259, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5916, 5917] },
        { teal: 6260, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5918] },
        { teal: 6261, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5919] },
        { teal: 6262, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5920] },
        { teal: 6263, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5921] },
        { teal: 6264, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5922, 5923] },
        { teal: 6265, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5924] },
        { teal: 6266, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5925] },
        { teal: 6267, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5926] },
        { teal: 6268, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5927] },
        { teal: 6269, source: 'contracts\\BiatecClammPool.algo.ts:1171', pc: [5928] },
        { teal: 6273, source: 'contracts\\BiatecClammPool.algo.ts:1172', pc: [5929, 5930] },
        { teal: 6276, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5931, 5932] },
        { teal: 6279, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5933, 5934] },
        { teal: 6280, source: 'contracts\\BiatecClammPool.algo.ts:1079', pc: [5935] },
        { teal: 6285, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5936, 5937] },
        { teal: 6288, source: 'contracts\\BiatecClammPool.algo.ts:1194', pc: [5938, 5939, 5940] },
        { teal: 6289, source: 'contracts\\BiatecClammPool.algo.ts:1194', pc: [5941] },
        { teal: 6292, source: 'contracts\\BiatecClammPool.algo.ts:1193', pc: [5942, 5943, 5944] },
        { teal: 6293, source: 'contracts\\BiatecClammPool.algo.ts:1193', pc: [5945] },
        { teal: 6296, source: 'contracts\\BiatecClammPool.algo.ts:1192', pc: [5946, 5947, 5948] },
        { teal: 6297, source: 'contracts\\BiatecClammPool.algo.ts:1192', pc: [5949] },
        { teal: 6300, source: 'contracts\\BiatecClammPool.algo.ts:1191', pc: [5950, 5951, 5952] },
        { teal: 6301, source: 'contracts\\BiatecClammPool.algo.ts:1191', pc: [5953] },
        { teal: 6304, source: 'contracts\\BiatecClammPool.algo.ts:1190', pc: [5954, 5955, 5956] },
        { teal: 6305, source: 'contracts\\BiatecClammPool.algo.ts:1190', pc: [5957] },
        { teal: 6308, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5958, 5959, 5960] },
        { teal: 6309, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5961] },
        { teal: 6310, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5962] },
        { teal: 6311, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5963] },
        { teal: 6312, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5964] },
        { teal: 6313, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5965] },
        { teal: 6330, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5966, 5967, 5968] },
        { teal: 6333, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5969] },
        { teal: 6334, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [5970, 5971] },
        { teal: 6338, source: 'contracts\\BiatecClammPool.algo.ts:1196', pc: [5972, 5973] },
        { teal: 6339, source: 'contracts\\BiatecClammPool.algo.ts:1196', pc: [5974, 5975] },
        { teal: 6340, source: 'contracts\\BiatecClammPool.algo.ts:1196', pc: [5976, 5977, 5978] },
        { teal: 6344, source: 'contracts\\BiatecClammPool.algo.ts:1198', pc: [5979, 5980] },
        { teal: 6345, source: 'contracts\\BiatecClammPool.algo.ts:1198', pc: [5981, 5982] },
        { teal: 6346, source: 'contracts\\BiatecClammPool.algo.ts:1198', pc: [5983] },
        { teal: 6347, source: 'contracts\\BiatecClammPool.algo.ts:1198', pc: [5984] },
        { teal: 6350, source: 'contracts\\BiatecClammPool.algo.ts:1198', errorMessage: 'E_CONFIG', pc: [5985] },
        { teal: 6354, source: 'contracts\\BiatecClammPool.algo.ts:1199', pc: [5986, 5987] },
        { teal: 6355, source: 'contracts\\BiatecClammPool.algo.ts:1199', pc: [5988, 5989] },
        { teal: 6356, source: 'contracts\\BiatecClammPool.algo.ts:1199', pc: [5990] },
        {
          teal: 6359,
          source: 'contracts\\BiatecClammPool.algo.ts:1199',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('ef')",
          pc: [5991],
        },
        { teal: 6360, source: 'contracts\\BiatecClammPool.algo.ts:1199', pc: [5992, 5993] },
        { teal: 6364, source: 'contracts\\BiatecClammPool.algo.ts:1201', pc: [5994, 5995] },
        { teal: 6365, source: 'contracts\\BiatecClammPool.algo.ts:1201', pc: [5996, 5997] },
        { teal: 6366, source: 'contracts\\BiatecClammPool.algo.ts:1201', pc: [5998] },
        {
          teal: 6369,
          source: 'contracts\\BiatecClammPool.algo.ts:1201',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('s')",
          pc: [5999],
        },
        { teal: 6370, source: 'contracts\\BiatecClammPool.algo.ts:1201', pc: [6000, 6001] },
        { teal: 6374, source: 'contracts\\BiatecClammPool.algo.ts:1202', pc: [6002, 6003] },
        { teal: 6375, source: 'contracts\\BiatecClammPool.algo.ts:1202', pc: [6004] },
        { teal: 6376, source: 'contracts\\BiatecClammPool.algo.ts:1202', pc: [6005] },
        { teal: 6379, source: 'contracts\\BiatecClammPool.algo.ts:1202', errorMessage: 'E_PAUSED', pc: [6006] },
        { teal: 6386, source: 'contracts\\BiatecClammPool.algo.ts:1205', pc: [6007, 6008] },
        { teal: 6387, source: 'contracts\\BiatecClammPool.algo.ts:1205', pc: [6009, 6010] },
        { teal: 6388, source: 'contracts\\BiatecClammPool.algo.ts:1205', pc: [6011] },
        { teal: 6391, source: 'contracts\\BiatecClammPool.algo.ts:1204', errorMessage: 'E_SENDER', pc: [6012] },
        { teal: 6395, source: 'contracts\\BiatecClammPool.algo.ts:1208', pc: [6013, 6014] },
        { teal: 6396, source: 'contracts\\BiatecClammPool.algo.ts:1208', pc: [6015, 6016] },
        { teal: 6401, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6017, 6018] },
        { teal: 6402, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6019] },
        { teal: 6403, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6020] },
        { teal: 6404, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6021, 6022, 6023] },
        { teal: 6409, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6024, 6025] },
        { teal: 6410, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6026, 6027] },
        { teal: 6411, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6028] },
        { teal: 6412, source: 'contracts\\BiatecClammPool.algo.ts:1209', pc: [6029, 6030] },
        { teal: 6417, source: 'contracts\\BiatecClammPool.algo.ts:1211', pc: [6031, 6032] },
        { teal: 6418, source: 'contracts\\BiatecClammPool.algo.ts:1211', pc: [6033, 6034] },
        { teal: 6419, source: 'contracts\\BiatecClammPool.algo.ts:1211', pc: [6035, 6036] },
        { teal: 6420, source: 'contracts\\BiatecClammPool.algo.ts:1211', pc: [6037] },
        { teal: 6421, source: 'contracts\\BiatecClammPool.algo.ts:1211', pc: [6038] },
        { teal: 6422, source: 'contracts\\BiatecClammPool.algo.ts:1211', pc: [6039] },
        { teal: 6423, source: 'contracts\\BiatecClammPool.algo.ts:1211', pc: [6040, 6041] },
        { teal: 6427, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6042, 6043] },
        { teal: 6428, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6044, 6045] },
        { teal: 6429, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6046, 6047] },
        { teal: 6430, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6048, 6049] },
        { teal: 6431, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6050] },
        { teal: 6432, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6051] },
        { teal: 6433, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6052] },
        { teal: 6434, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6053] },
        { teal: 6435, source: 'contracts\\BiatecClammPool.algo.ts:1213', pc: [6054, 6055] },
        { teal: 6440, source: 'contracts\\BiatecClammPool.algo.ts:1215', pc: [6056, 6057] },
        { teal: 6441, source: 'contracts\\BiatecClammPool.algo.ts:1215', pc: [6058] },
        { teal: 6442, source: 'contracts\\BiatecClammPool.algo.ts:1215', pc: [6059] },
        { teal: 6443, source: 'contracts\\BiatecClammPool.algo.ts:1215', pc: [6060, 6061, 6062] },
        { teal: 6448, source: 'contracts\\BiatecClammPool.algo.ts:1216', pc: [6063, 6064] },
        { teal: 6449, source: 'contracts\\BiatecClammPool.algo.ts:1216', pc: [6065, 6066] },
        { teal: 6450, source: 'contracts\\BiatecClammPool.algo.ts:1216', pc: [6067, 6068] },
        { teal: 6451, source: 'contracts\\BiatecClammPool.algo.ts:1216', pc: [6069, 6070, 6071] },
        { teal: 6457, source: 'contracts\\BiatecClammPool.algo.ts:1218', pc: [6072, 6073] },
        { teal: 6458, source: 'contracts\\BiatecClammPool.algo.ts:1218', pc: [6074] },
        { teal: 6459, source: 'contracts\\BiatecClammPool.algo.ts:1218', pc: [6075] },
        { teal: 6460, source: 'contracts\\BiatecClammPool.algo.ts:1218', pc: [6076, 6077, 6078] },
        { teal: 6465, source: 'contracts\\BiatecClammPool.algo.ts:1219', pc: [6079, 6080] },
        { teal: 6466, source: 'contracts\\BiatecClammPool.algo.ts:1219', pc: [6081, 6082] },
        { teal: 6467, source: 'contracts\\BiatecClammPool.algo.ts:1219', pc: [6083, 6084] },
        { teal: 6468, source: 'contracts\\BiatecClammPool.algo.ts:1219', pc: [6085, 6086, 6087] },
        { teal: 6474, source: 'contracts\\BiatecClammPool.algo.ts:1222', pc: [6088, 6089] },
        { teal: 6475, source: 'contracts\\BiatecClammPool.algo.ts:1222', pc: [6090] },
        { teal: 6476, source: 'contracts\\BiatecClammPool.algo.ts:1222', pc: [6091] },
        { teal: 6477, source: 'contracts\\BiatecClammPool.algo.ts:1222', pc: [6092, 6093, 6094] },
        { teal: 6485, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6095, 6096] },
        { teal: 6486, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6097, 6098] },
        { teal: 6487, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6099] },
        { teal: 6488, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6100, 6101] },
        { teal: 6489, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6102] },
        { teal: 6490, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6103] },
        { teal: 6491, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6104, 6105] },
        { teal: 6492, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6106] },
        { teal: 6493, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6107] },
        { teal: 6494, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6108] },
        { teal: 6495, source: 'contracts\\BiatecClammPool.algo.ts:1224', pc: [6109] },
        { teal: 6498, source: 'contracts\\BiatecClammPool.algo.ts:1223', errorMessage: 'E_A0_B', pc: [6110] },
        { teal: 6499, source: 'contracts\\BiatecClammPool.algo.ts:1222', pc: [6111, 6112, 6113] },
        { teal: 6507, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6114, 6115] },
        { teal: 6508, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6116, 6117] },
        { teal: 6509, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6118, 6119] },
        { teal: 6510, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6120] },
        { teal: 6511, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6121] },
        { teal: 6512, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6122, 6123] },
        { teal: 6513, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6124] },
        { teal: 6514, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6125] },
        { teal: 6515, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6126] },
        { teal: 6516, source: 'contracts\\BiatecClammPool.algo.ts:1229', pc: [6127] },
        { teal: 6519, source: 'contracts\\BiatecClammPool.algo.ts:1228', errorMessage: 'E_A_B', pc: [6128] },
        { teal: 6527, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6129, 6130] },
        { teal: 6528, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6131, 6132] },
        { teal: 6529, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6133, 6134] },
        { teal: 6530, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6135] },
        { teal: 6531, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6136] },
        { teal: 6532, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6137, 6138] },
        { teal: 6533, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6139] },
        { teal: 6534, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6140, 6141] },
        { teal: 6535, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6142] },
        { teal: 6536, source: 'contracts\\BiatecClammPool.algo.ts:1234', pc: [6143] },
        { teal: 6539, source: 'contracts\\BiatecClammPool.algo.ts:1233', errorMessage: 'E_B_B', pc: [6144] },
        { teal: 6543, source: 'contracts\\BiatecClammPool.algo.ts:1238', pc: [6145, 6146] },
        { teal: 6544, source: 'contracts\\BiatecClammPool.algo.ts:1238', pc: [6147, 6148] },
        { teal: 6545, source: 'contracts\\BiatecClammPool.algo.ts:1238', pc: [6149] },
        { teal: 6548, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [6150, 6151] },
        { teal: 6551, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [6152, 6153] },
        { teal: 6552, source: 'contracts\\BiatecClammPool.algo.ts:1189', pc: [6154] },
        { teal: 6557, source: 'contracts\\BiatecClammPool.algo.ts:1253', pc: [6155, 6156, 6157] },
        { teal: 6558, source: 'contracts\\BiatecClammPool.algo.ts:1253', pc: [6158] },
        { teal: 6561, source: 'contracts\\BiatecClammPool.algo.ts:1252', pc: [6159, 6160, 6161] },
        { teal: 6562, source: 'contracts\\BiatecClammPool.algo.ts:1252', pc: [6162] },
        { teal: 6565, source: 'contracts\\BiatecClammPool.algo.ts:1251', pc: [6163, 6164, 6165] },
        { teal: 6566, source: 'contracts\\BiatecClammPool.algo.ts:1251', pc: [6166] },
        { teal: 6569, source: 'contracts\\BiatecClammPool.algo.ts:1250', pc: [6167, 6168, 6169] },
        { teal: 6570, source: 'contracts\\BiatecClammPool.algo.ts:1250', pc: [6170, 6171, 6172] },
        { teal: 6573, source: 'contracts\\BiatecClammPool.algo.ts:1249', pc: [6173, 6174, 6175] },
        { teal: 6574, source: 'contracts\\BiatecClammPool.algo.ts:1249', pc: [6176, 6177, 6178] },
        { teal: 6577, source: 'contracts\\BiatecClammPool.algo.ts:1248', pc: [6179, 6180, 6181] },
        { teal: 6578, source: 'contracts\\BiatecClammPool.algo.ts:1248', pc: [6182, 6183, 6184] },
        { teal: 6581, source: 'contracts\\BiatecClammPool.algo.ts:1247', pc: [6185, 6186, 6187] },
        { teal: 6582, source: 'contracts\\BiatecClammPool.algo.ts:1247', pc: [6188] },
        { teal: 6585, source: 'contracts\\BiatecClammPool.algo.ts:1246', pc: [6189, 6190, 6191] },
        { teal: 6586, source: 'contracts\\BiatecClammPool.algo.ts:1246', pc: [6192] },
        { teal: 6587, source: 'contracts\\BiatecClammPool.algo.ts:1246', pc: [6193] },
        { teal: 6595, source: 'contracts\\BiatecClammPool.algo.ts:1246', pc: [6194, 6195, 6196] },
        { teal: 6598, source: 'contracts\\BiatecClammPool.algo.ts:1246', pc: [6197] },
        { teal: 6602, source: 'contracts\\BiatecClammPool.algo.ts:1255', pc: [6198, 6199] },
        { teal: 6603, source: 'contracts\\BiatecClammPool.algo.ts:1255', pc: [6200, 6201] },
        { teal: 6604, source: 'contracts\\BiatecClammPool.algo.ts:1255', pc: [6202] },
        { teal: 6605, source: 'contracts\\BiatecClammPool.algo.ts:1255', pc: [6203] },
        { teal: 6608, source: 'contracts\\BiatecClammPool.algo.ts:1255', errorMessage: 'E_CONFIG', pc: [6204] },
        { teal: 6612, source: 'contracts\\BiatecClammPool.algo.ts:1256', pc: [6205, 6206] },
        { teal: 6613, source: 'contracts\\BiatecClammPool.algo.ts:1256', pc: [6207, 6208] },
        { teal: 6614, source: 'contracts\\BiatecClammPool.algo.ts:1256', pc: [6209] },
        {
          teal: 6617,
          source: 'contracts\\BiatecClammPool.algo.ts:1256',
          errorMessage: "global state value does not exist: appBiatecConfigProvider.globalState('ef')",
          pc: [6210],
        },
        { teal: 6618, source: 'contracts\\BiatecClammPool.algo.ts:1256', pc: [6211, 6212] },
        { teal: 6625, source: 'contracts\\BiatecClammPool.algo.ts:1258', pc: [6213, 6214] },
        { teal: 6626, source: 'contracts\\BiatecClammPool.algo.ts:1258', pc: [6215, 6216] },
        { teal: 6627, source: 'contracts\\BiatecClammPool.algo.ts:1258', pc: [6217] },
        { teal: 6630, source: 'contracts\\BiatecClammPool.algo.ts:1257', errorMessage: 'E_SENDER', pc: [6218] },
        { teal: 6642, source: 'contracts\\BiatecClammPool.algo.ts:1261', pc: [6219] },
        { teal: 6643, source: 'contracts\\BiatecClammPool.algo.ts:1261', pc: [6220, 6221] },
        { teal: 6644, source: 'contracts\\BiatecClammPool.algo.ts:1261', pc: [6222, 6223] },
        { teal: 6648, source: 'contracts\\BiatecClammPool.algo.ts:1262', pc: [6224, 6225] },
        { teal: 6649, source: 'contracts\\BiatecClammPool.algo.ts:1262', pc: [6226, 6227] },
        { teal: 6653, source: 'contracts\\BiatecClammPool.algo.ts:1263', pc: [6228, 6229] },
        { teal: 6654, source: 'contracts\\BiatecClammPool.algo.ts:1263', pc: [6230, 6231] },
        { teal: 6658, source: 'contracts\\BiatecClammPool.algo.ts:1264', pc: [6232, 6233] },
        { teal: 6659, source: 'contracts\\BiatecClammPool.algo.ts:1264', pc: [6234, 6235] },
        { teal: 6663, source: 'contracts\\BiatecClammPool.algo.ts:1265', pc: [6236, 6237] },
        { teal: 6664, source: 'contracts\\BiatecClammPool.algo.ts:1265', pc: [6238, 6239] },
        { teal: 6668, source: 'contracts\\BiatecClammPool.algo.ts:1266', pc: [6240, 6241] },
        { teal: 6669, source: 'contracts\\BiatecClammPool.algo.ts:1266', pc: [6242, 6243] },
        { teal: 6673, source: 'contracts\\BiatecClammPool.algo.ts:1267', pc: [6244, 6245] },
        { teal: 6674, source: 'contracts\\BiatecClammPool.algo.ts:1267', pc: [6246, 6247] },
        { teal: 6678, source: 'contracts\\BiatecClammPool.algo.ts:1268', pc: [6248] },
        { teal: 6679, source: 'contracts\\BiatecClammPool.algo.ts:1268', pc: [6249, 6250] },
        { teal: 6682, source: 'contracts\\BiatecClammPool.algo.ts:1261', pc: [6251] },
        { teal: 6683, source: 'contracts\\BiatecClammPool.algo.ts:1246', pc: [6252] },
        { teal: 6688, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6253, 6254] },
        { teal: 6691, source: 'contracts\\BiatecClammPool.algo.ts:1295', pc: [6255, 6256, 6257] },
        { teal: 6692, source: 'contracts\\BiatecClammPool.algo.ts:1295', pc: [6258] },
        { teal: 6693, source: 'contracts\\BiatecClammPool.algo.ts:1295', pc: [6259] },
        { teal: 6694, source: 'contracts\\BiatecClammPool.algo.ts:1295', pc: [6260] },
        { teal: 6695, source: 'contracts\\BiatecClammPool.algo.ts:1295', pc: [6261] },
        {
          teal: 6698,
          source: 'contracts\\BiatecClammPool.algo.ts:1295',
          errorMessage: 'argument 0 (currentDeposit) for calculateDistributedLiquidity must be a uint256',
          pc: [6262],
        },
        { teal: 6701, source: 'contracts\\BiatecClammPool.algo.ts:1295', pc: [6263, 6264, 6265] },
        { teal: 6702, source: 'contracts\\BiatecClammPool.algo.ts:1295', pc: [6266] },
        { teal: 6705, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6267, 6268, 6269] },
        { teal: 6706, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6270] },
        { teal: 6707, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6271] },
        { teal: 6708, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6272] },
        { teal: 6709, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6273] },
        {
          teal: 6712,
          source: 'contracts\\BiatecClammPool.algo.ts:1294',
          errorMessage: 'calculateDistributedLiquidity return value overflowed 256 bits',
          pc: [6274],
        },
        { teal: 6713, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6275] },
        { teal: 6714, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6276] },
        { teal: 6715, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6277] },
        { teal: 6716, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6278] },
        { teal: 6717, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6279] },
        { teal: 6718, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6280] },
        { teal: 6719, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6281] },
        { teal: 6720, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6282] },
        { teal: 6721, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6283] },
        { teal: 6722, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6284] },
        { teal: 6723, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6285] },
        { teal: 6724, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6286] },
        { teal: 6725, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6287] },
        { teal: 6736, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6288, 6289, 6290] },
        { teal: 6739, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6291] },
        { teal: 6740, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6292, 6293] },
        { teal: 6744, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6294, 6295] },
        { teal: 6745, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6296, 6297] },
        { teal: 6746, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6298, 6299] },
        { teal: 6747, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6300] },
        { teal: 6748, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6301] },
        { teal: 6749, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6302, 6303] },
        { teal: 6750, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6304] },
        { teal: 6751, source: 'contracts\\BiatecClammPool.algo.ts:1296', pc: [6305, 6306] },
        { teal: 6755, source: 'contracts\\BiatecClammPool.algo.ts:1297', pc: [6307, 6308] },
        { teal: 6756, source: 'contracts\\BiatecClammPool.algo.ts:1297', pc: [6309, 6310] },
        { teal: 6760, source: 'contracts\\BiatecClammPool.algo.ts:1298', pc: [6311, 6312] },
        { teal: 6761, source: 'contracts\\BiatecClammPool.algo.ts:1298', pc: [6313, 6314] },
        { teal: 6762, source: 'contracts\\BiatecClammPool.algo.ts:1298', pc: [6315] },
        { teal: 6763, source: 'contracts\\BiatecClammPool.algo.ts:1298', pc: [6316, 6317] },
        { teal: 6767, source: 'contracts\\BiatecClammPool.algo.ts:1300', pc: [6318, 6319] },
        { teal: 6768, source: 'contracts\\BiatecClammPool.algo.ts:1300', pc: [6320, 6321] },
        { teal: 6769, source: 'contracts\\BiatecClammPool.algo.ts:1300', pc: [6322] },
        { teal: 6770, source: 'contracts\\BiatecClammPool.algo.ts:1300', pc: [6323] },
        { teal: 6771, source: 'contracts\\BiatecClammPool.algo.ts:1300', pc: [6324, 6325] },
        { teal: 6775, source: 'contracts\\BiatecClammPool.algo.ts:1301', pc: [6326, 6327] },
        { teal: 6776, source: 'contracts\\BiatecClammPool.algo.ts:1301', pc: [6328, 6329] },
        { teal: 6777, source: 'contracts\\BiatecClammPool.algo.ts:1301', pc: [6330] },
        { teal: 6778, source: 'contracts\\BiatecClammPool.algo.ts:1301', pc: [6331, 6332] },
        { teal: 6782, source: 'contracts\\BiatecClammPool.algo.ts:1302', pc: [6333, 6334] },
        { teal: 6785, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6335, 6336] },
        { teal: 6788, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6337, 6338] },
        { teal: 6789, source: 'contracts\\BiatecClammPool.algo.ts:1294', pc: [6339] },
        { teal: 6794, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6340, 6341] },
        { teal: 6797, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6342, 6343, 6344] },
        { teal: 6798, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6345] },
        { teal: 6799, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6346] },
        { teal: 6800, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6347] },
        { teal: 6801, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6348] },
        {
          teal: 6804,
          source: 'contracts\\BiatecClammPool.algo.ts:1306',
          errorMessage: 'argument 0 (price) for calculateLiquidityFlatPrice must be a uint256',
          pc: [6349],
        },
        { teal: 6807, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6350, 6351, 6352] },
        { teal: 6808, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6353] },
        { teal: 6809, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6354] },
        { teal: 6810, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6355] },
        { teal: 6811, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6356] },
        {
          teal: 6814,
          source: 'contracts\\BiatecClammPool.algo.ts:1306',
          errorMessage: 'argument 1 (y) for calculateLiquidityFlatPrice must be a uint256',
          pc: [6357],
        },
        { teal: 6817, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6358, 6359, 6360] },
        { teal: 6818, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6361] },
        { teal: 6819, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6362] },
        { teal: 6820, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6363] },
        { teal: 6821, source: 'contracts\\BiatecClammPool.algo.ts:1306', pc: [6364] },
        {
          teal: 6824,
          source: 'contracts\\BiatecClammPool.algo.ts:1306',
          errorMessage: 'argument 2 (x) for calculateLiquidityFlatPrice must be a uint256',
          pc: [6365],
        },
        { teal: 6827, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6366, 6367, 6368] },
        { teal: 6828, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6369] },
        { teal: 6829, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6370] },
        { teal: 6830, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6371] },
        { teal: 6831, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6372] },
        {
          teal: 6834,
          source: 'contracts\\BiatecClammPool.algo.ts:1305',
          errorMessage: 'calculateLiquidityFlatPrice return value overflowed 256 bits',
          pc: [6373],
        },
        { teal: 6835, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6374] },
        { teal: 6836, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6375] },
        { teal: 6837, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6376] },
        { teal: 6838, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6377] },
        { teal: 6839, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6378] },
        { teal: 6840, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6379] },
        { teal: 6841, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6380] },
        { teal: 6842, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6381] },
        { teal: 6843, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6382] },
        { teal: 6844, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6383] },
        { teal: 6845, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6384] },
        { teal: 6846, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6385] },
        { teal: 6847, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6386] },
        { teal: 6851, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6387, 6388, 6389] },
        { teal: 6855, source: 'contracts\\BiatecClammPool.algo.ts:1321', pc: [6390, 6391] },
        { teal: 6856, source: 'contracts\\BiatecClammPool.algo.ts:1321', pc: [6392, 6393] },
        { teal: 6857, source: 'contracts\\BiatecClammPool.algo.ts:1321', pc: [6394] },
        { teal: 6858, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6395] },
        { teal: 6859, source: 'contracts\\BiatecClammPool.algo.ts:1321', pc: [6396] },
        { teal: 6860, source: 'contracts\\BiatecClammPool.algo.ts:1321', pc: [6397, 6398] },
        { teal: 6861, source: 'contracts\\BiatecClammPool.algo.ts:1321', pc: [6399] },
        { teal: 6862, source: 'contracts\\BiatecClammPool.algo.ts:1305', pc: [6400] },
        { teal: 6867, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6401, 6402] },
        { teal: 6870, source: 'contracts\\BiatecClammPool.algo.ts:1344', pc: [6403, 6404, 6405] },
        { teal: 6871, source: 'contracts\\BiatecClammPool.algo.ts:1344', pc: [6406] },
        { teal: 6872, source: 'contracts\\BiatecClammPool.algo.ts:1344', pc: [6407] },
        { teal: 6873, source: 'contracts\\BiatecClammPool.algo.ts:1344', pc: [6408] },
        { teal: 6874, source: 'contracts\\BiatecClammPool.algo.ts:1344', pc: [6409] },
        {
          teal: 6877,
          source: 'contracts\\BiatecClammPool.algo.ts:1344',
          errorMessage: 'argument 0 (priceMaxSqrt) for calculateLiquidityD must be a uint256',
          pc: [6410],
        },
        { teal: 6880, source: 'contracts\\BiatecClammPool.algo.ts:1343', pc: [6411, 6412, 6413] },
        { teal: 6881, source: 'contracts\\BiatecClammPool.algo.ts:1343', pc: [6414] },
        { teal: 6882, source: 'contracts\\BiatecClammPool.algo.ts:1343', pc: [6415] },
        { teal: 6883, source: 'contracts\\BiatecClammPool.algo.ts:1343', pc: [6416] },
        { teal: 6884, source: 'contracts\\BiatecClammPool.algo.ts:1343', pc: [6417] },
        {
          teal: 6887,
          source: 'contracts\\BiatecClammPool.algo.ts:1343',
          errorMessage: 'argument 1 (priceMinSqrt) for calculateLiquidityD must be a uint256',
          pc: [6418],
        },
        { teal: 6890, source: 'contracts\\BiatecClammPool.algo.ts:1342', pc: [6419, 6420, 6421] },
        { teal: 6891, source: 'contracts\\BiatecClammPool.algo.ts:1342', pc: [6422] },
        { teal: 6892, source: 'contracts\\BiatecClammPool.algo.ts:1342', pc: [6423] },
        { teal: 6893, source: 'contracts\\BiatecClammPool.algo.ts:1342', pc: [6424] },
        { teal: 6894, source: 'contracts\\BiatecClammPool.algo.ts:1342', pc: [6425] },
        {
          teal: 6897,
          source: 'contracts\\BiatecClammPool.algo.ts:1342',
          errorMessage: 'argument 2 (priceMax) for calculateLiquidityD must be a uint256',
          pc: [6426],
        },
        { teal: 6900, source: 'contracts\\BiatecClammPool.algo.ts:1341', pc: [6427, 6428, 6429] },
        { teal: 6901, source: 'contracts\\BiatecClammPool.algo.ts:1341', pc: [6430] },
        { teal: 6902, source: 'contracts\\BiatecClammPool.algo.ts:1341', pc: [6431] },
        { teal: 6903, source: 'contracts\\BiatecClammPool.algo.ts:1341', pc: [6432] },
        { teal: 6904, source: 'contracts\\BiatecClammPool.algo.ts:1341', pc: [6433] },
        {
          teal: 6907,
          source: 'contracts\\BiatecClammPool.algo.ts:1341',
          errorMessage: 'argument 3 (priceMin) for calculateLiquidityD must be a uint256',
          pc: [6434],
        },
        { teal: 6910, source: 'contracts\\BiatecClammPool.algo.ts:1340', pc: [6435, 6436, 6437] },
        { teal: 6911, source: 'contracts\\BiatecClammPool.algo.ts:1340', pc: [6438] },
        { teal: 6912, source: 'contracts\\BiatecClammPool.algo.ts:1340', pc: [6439] },
        { teal: 6913, source: 'contracts\\BiatecClammPool.algo.ts:1340', pc: [6440] },
        { teal: 6914, source: 'contracts\\BiatecClammPool.algo.ts:1340', pc: [6441] },
        {
          teal: 6917,
          source: 'contracts\\BiatecClammPool.algo.ts:1340',
          errorMessage: 'argument 4 (y) for calculateLiquidityD must be a uint256',
          pc: [6442],
        },
        { teal: 6920, source: 'contracts\\BiatecClammPool.algo.ts:1339', pc: [6443, 6444, 6445] },
        { teal: 6921, source: 'contracts\\BiatecClammPool.algo.ts:1339', pc: [6446] },
        { teal: 6922, source: 'contracts\\BiatecClammPool.algo.ts:1339', pc: [6447] },
        { teal: 6923, source: 'contracts\\BiatecClammPool.algo.ts:1339', pc: [6448] },
        { teal: 6924, source: 'contracts\\BiatecClammPool.algo.ts:1339', pc: [6449] },
        {
          teal: 6927,
          source: 'contracts\\BiatecClammPool.algo.ts:1339',
          errorMessage: 'argument 5 (x) for calculateLiquidityD must be a uint256',
          pc: [6450],
        },
        { teal: 6930, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6451, 6452, 6453] },
        { teal: 6931, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6454] },
        { teal: 6932, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6455] },
        { teal: 6933, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6456] },
        { teal: 6934, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6457] },
        {
          teal: 6937,
          source: 'contracts\\BiatecClammPool.algo.ts:1337',
          errorMessage: 'calculateLiquidityD return value overflowed 256 bits',
          pc: [6458],
        },
        { teal: 6938, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6459] },
        { teal: 6939, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6460] },
        { teal: 6940, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6461] },
        { teal: 6941, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6462] },
        { teal: 6942, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6463] },
        { teal: 6943, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6464] },
        { teal: 6944, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6465] },
        { teal: 6945, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6466] },
        { teal: 6946, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6467] },
        { teal: 6947, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6468] },
        { teal: 6948, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6469] },
        { teal: 6949, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6470] },
        { teal: 6950, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6471] },
        { teal: 6966, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6472, 6473, 6474] },
        { teal: 6969, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6475] },
        { teal: 6970, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6476, 6477] },
        { teal: 6974, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6478, 6479] },
        { teal: 6975, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6480, 6481] },
        { teal: 6976, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6482] },
        { teal: 6977, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6483, 6484] },
        { teal: 6978, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6485] },
        { teal: 6979, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6486] },
        { teal: 6980, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6487] },
        { teal: 6981, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6488] },
        { teal: 6982, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6489] },
        { teal: 6983, source: 'contracts\\BiatecClammPool.algo.ts:1375', pc: [6490, 6491] },
        { teal: 6987, source: 'contracts\\BiatecClammPool.algo.ts:1377', pc: [6492, 6493] },
        { teal: 6988, source: 'contracts\\BiatecClammPool.algo.ts:1377', pc: [6494, 6495] },
        { teal: 6989, source: 'contracts\\BiatecClammPool.algo.ts:1377', pc: [6496] },
        { teal: 6990, source: 'contracts\\BiatecClammPool.algo.ts:1377', pc: [6497, 6498] },
        { teal: 6991, source: 'contracts\\BiatecClammPool.algo.ts:1377', pc: [6499] },
        { teal: 6992, source: 'contracts\\BiatecClammPool.algo.ts:1377', pc: [6500, 6501] },
        { teal: 6996, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6502, 6503] },
        { teal: 6997, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6504, 6505] },
        { teal: 6998, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6506] },
        { teal: 6999, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6507, 6508] },
        { teal: 7000, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6509] },
        { teal: 7001, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6510, 6511] },
        { teal: 7002, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6512] },
        { teal: 7003, source: 'contracts\\BiatecClammPool.algo.ts:1379', pc: [6513, 6514] },
        { teal: 7007, source: 'contracts\\BiatecClammPool.algo.ts:1380', pc: [6515, 6516] },
        { teal: 7008, source: 'contracts\\BiatecClammPool.algo.ts:1380', pc: [6517, 6518] },
        { teal: 7009, source: 'contracts\\BiatecClammPool.algo.ts:1380', pc: [6519] },
        { teal: 7010, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6520] },
        { teal: 7011, source: 'contracts\\BiatecClammPool.algo.ts:1380', pc: [6521] },
        { teal: 7012, source: 'contracts\\BiatecClammPool.algo.ts:1380', pc: [6522, 6523] },
        { teal: 7016, source: 'contracts\\BiatecClammPool.algo.ts:1383', pc: [6524, 6525] },
        { teal: 7017, source: 'contracts\\BiatecClammPool.algo.ts:1383', pc: [6526, 6527] },
        { teal: 7018, source: 'contracts\\BiatecClammPool.algo.ts:1383', pc: [6528] },
        { teal: 7019, source: 'contracts\\BiatecClammPool.algo.ts:1383', pc: [6529, 6530] },
        { teal: 7020, source: 'contracts\\BiatecClammPool.algo.ts:1383', pc: [6531] },
        { teal: 7021, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6532] },
        { teal: 7022, source: 'contracts\\BiatecClammPool.algo.ts:1383', pc: [6533] },
        { teal: 7023, source: 'contracts\\BiatecClammPool.algo.ts:1383', pc: [6534, 6535] },
        { teal: 7027, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6536, 6537] },
        { teal: 7028, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6538, 6539] },
        { teal: 7029, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6540] },
        { teal: 7030, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6541, 6542] },
        { teal: 7031, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6543] },
        { teal: 7032, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6544, 6545] },
        { teal: 7033, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6546] },
        { teal: 7034, source: 'contracts\\BiatecClammPool.algo.ts:1385', pc: [6547, 6548] },
        { teal: 7038, source: 'contracts\\BiatecClammPool.algo.ts:1386', pc: [6549, 6550] },
        { teal: 7039, source: 'contracts\\BiatecClammPool.algo.ts:1386', pc: [6551, 6552] },
        { teal: 7040, source: 'contracts\\BiatecClammPool.algo.ts:1386', pc: [6553] },
        { teal: 7041, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6554] },
        { teal: 7042, source: 'contracts\\BiatecClammPool.algo.ts:1386', pc: [6555] },
        { teal: 7043, source: 'contracts\\BiatecClammPool.algo.ts:1386', pc: [6556, 6557] },
        { teal: 7047, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6558, 6559] },
        { teal: 7048, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6560, 6561] },
        { teal: 7049, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6562] },
        { teal: 7050, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6563, 6564] },
        { teal: 7051, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6565] },
        { teal: 7052, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6566, 6567] },
        { teal: 7053, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6568] },
        { teal: 7054, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6569, 6570] },
        { teal: 7055, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6571] },
        { teal: 7056, source: 'contracts\\BiatecClammPool.algo.ts:1387', pc: [6572, 6573] },
        { teal: 7060, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6574] },
        { teal: 7061, source: 'contracts\\BiatecClammPool.algo.ts:1388', pc: [6575, 6576] },
        { teal: 7062, source: 'contracts\\BiatecClammPool.algo.ts:1388', pc: [6577] },
        { teal: 7063, source: 'contracts\\BiatecClammPool.algo.ts:1388', pc: [6578] },
        { teal: 7064, source: 'contracts\\BiatecClammPool.algo.ts:1388', pc: [6579, 6580] },
        { teal: 7068, source: 'contracts\\BiatecClammPool.algo.ts:1389', pc: [6581, 6582] },
        { teal: 7071, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6583, 6584] },
        { teal: 7074, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6585, 6586] },
        { teal: 7075, source: 'contracts\\BiatecClammPool.algo.ts:1337', pc: [6587] },
        { teal: 7080, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6588, 6589] },
        { teal: 7083, source: 'contracts\\BiatecClammPool.algo.ts:1407', pc: [6590, 6591, 6592] },
        { teal: 7084, source: 'contracts\\BiatecClammPool.algo.ts:1407', pc: [6593] },
        { teal: 7085, source: 'contracts\\BiatecClammPool.algo.ts:1407', pc: [6594] },
        { teal: 7086, source: 'contracts\\BiatecClammPool.algo.ts:1407', pc: [6595] },
        { teal: 7087, source: 'contracts\\BiatecClammPool.algo.ts:1407', pc: [6596] },
        {
          teal: 7090,
          source: 'contracts\\BiatecClammPool.algo.ts:1407',
          errorMessage: 'argument 0 (dSqrt) for calculateLiquidityWithD must be a uint256',
          pc: [6597],
        },
        { teal: 7093, source: 'contracts\\BiatecClammPool.algo.ts:1406', pc: [6598, 6599, 6600] },
        { teal: 7094, source: 'contracts\\BiatecClammPool.algo.ts:1406', pc: [6601] },
        { teal: 7095, source: 'contracts\\BiatecClammPool.algo.ts:1406', pc: [6602] },
        { teal: 7096, source: 'contracts\\BiatecClammPool.algo.ts:1406', pc: [6603] },
        { teal: 7097, source: 'contracts\\BiatecClammPool.algo.ts:1406', pc: [6604] },
        {
          teal: 7100,
          source: 'contracts\\BiatecClammPool.algo.ts:1406',
          errorMessage: 'argument 1 (priceMaxSqrt) for calculateLiquidityWithD must be a uint256',
          pc: [6605],
        },
        { teal: 7103, source: 'contracts\\BiatecClammPool.algo.ts:1405', pc: [6606, 6607, 6608] },
        { teal: 7104, source: 'contracts\\BiatecClammPool.algo.ts:1405', pc: [6609] },
        { teal: 7105, source: 'contracts\\BiatecClammPool.algo.ts:1405', pc: [6610] },
        { teal: 7106, source: 'contracts\\BiatecClammPool.algo.ts:1405', pc: [6611] },
        { teal: 7107, source: 'contracts\\BiatecClammPool.algo.ts:1405', pc: [6612] },
        {
          teal: 7110,
          source: 'contracts\\BiatecClammPool.algo.ts:1405',
          errorMessage: 'argument 2 (priceMinSqrt) for calculateLiquidityWithD must be a uint256',
          pc: [6613],
        },
        { teal: 7113, source: 'contracts\\BiatecClammPool.algo.ts:1404', pc: [6614, 6615, 6616] },
        { teal: 7114, source: 'contracts\\BiatecClammPool.algo.ts:1404', pc: [6617] },
        { teal: 7115, source: 'contracts\\BiatecClammPool.algo.ts:1404', pc: [6618] },
        { teal: 7116, source: 'contracts\\BiatecClammPool.algo.ts:1404', pc: [6619] },
        { teal: 7117, source: 'contracts\\BiatecClammPool.algo.ts:1404', pc: [6620] },
        {
          teal: 7120,
          source: 'contracts\\BiatecClammPool.algo.ts:1404',
          errorMessage: 'argument 3 (y) for calculateLiquidityWithD must be a uint256',
          pc: [6621],
        },
        { teal: 7123, source: 'contracts\\BiatecClammPool.algo.ts:1403', pc: [6622, 6623, 6624] },
        { teal: 7124, source: 'contracts\\BiatecClammPool.algo.ts:1403', pc: [6625] },
        { teal: 7125, source: 'contracts\\BiatecClammPool.algo.ts:1403', pc: [6626] },
        { teal: 7126, source: 'contracts\\BiatecClammPool.algo.ts:1403', pc: [6627] },
        { teal: 7127, source: 'contracts\\BiatecClammPool.algo.ts:1403', pc: [6628] },
        {
          teal: 7130,
          source: 'contracts\\BiatecClammPool.algo.ts:1403',
          errorMessage: 'argument 4 (x) for calculateLiquidityWithD must be a uint256',
          pc: [6629],
        },
        { teal: 7133, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6630, 6631, 6632] },
        { teal: 7134, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6633] },
        { teal: 7135, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6634] },
        { teal: 7136, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6635] },
        { teal: 7137, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6636] },
        {
          teal: 7140,
          source: 'contracts\\BiatecClammPool.algo.ts:1401',
          errorMessage: 'calculateLiquidityWithD return value overflowed 256 bits',
          pc: [6637],
        },
        { teal: 7141, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6638] },
        { teal: 7142, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6639] },
        { teal: 7143, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6640] },
        { teal: 7144, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6641] },
        { teal: 7145, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6642] },
        { teal: 7146, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6643] },
        { teal: 7147, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6644] },
        { teal: 7148, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6645] },
        { teal: 7149, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6646] },
        { teal: 7150, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6647] },
        { teal: 7151, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6648] },
        { teal: 7152, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6649] },
        { teal: 7153, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6650] },
        { teal: 7165, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6651, 6652, 6653] },
        { teal: 7168, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6654] },
        { teal: 7169, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6655, 6656] },
        { teal: 7173, source: 'contracts\\BiatecClammPool.algo.ts:1439', pc: [6657, 6658] },
        { teal: 7174, source: 'contracts\\BiatecClammPool.algo.ts:1439', pc: [6659, 6660] },
        { teal: 7175, source: 'contracts\\BiatecClammPool.algo.ts:1439', pc: [6661] },
        { teal: 7176, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6662] },
        { teal: 7177, source: 'contracts\\BiatecClammPool.algo.ts:1439', pc: [6663] },
        { teal: 7178, source: 'contracts\\BiatecClammPool.algo.ts:1439', pc: [6664, 6665] },
        { teal: 7182, source: 'contracts\\BiatecClammPool.algo.ts:1442', pc: [6666, 6667] },
        { teal: 7183, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6668] },
        { teal: 7184, source: 'contracts\\BiatecClammPool.algo.ts:1442', pc: [6669] },
        { teal: 7185, source: 'contracts\\BiatecClammPool.algo.ts:1442', pc: [6670, 6671] },
        { teal: 7186, source: 'contracts\\BiatecClammPool.algo.ts:1442', pc: [6672] },
        { teal: 7187, source: 'contracts\\BiatecClammPool.algo.ts:1442', pc: [6673, 6674] },
        { teal: 7191, source: 'contracts\\BiatecClammPool.algo.ts:1447', pc: [6675, 6676] },
        { teal: 7192, source: 'contracts\\BiatecClammPool.algo.ts:1447', pc: [6677, 6678] },
        { teal: 7196, source: 'contracts\\BiatecClammPool.algo.ts:1448', pc: [6679, 6680] },
        { teal: 7197, source: 'contracts\\BiatecClammPool.algo.ts:1448', pc: [6681, 6682] },
        { teal: 7198, source: 'contracts\\BiatecClammPool.algo.ts:1448', pc: [6683] },
        { teal: 7199, source: 'contracts\\BiatecClammPool.algo.ts:1448', pc: [6684, 6685] },
        { teal: 7203, source: 'contracts\\BiatecClammPool.algo.ts:1449', pc: [6686, 6687] },
        { teal: 7204, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6688] },
        { teal: 7205, source: 'contracts\\BiatecClammPool.algo.ts:1449', pc: [6689] },
        { teal: 7206, source: 'contracts\\BiatecClammPool.algo.ts:1449', pc: [6690, 6691] },
        { teal: 7210, source: 'contracts\\BiatecClammPool.algo.ts:1450', pc: [6692, 6693] },
        { teal: 7211, source: 'contracts\\BiatecClammPool.algo.ts:1450', pc: [6694, 6695] },
        { teal: 7212, source: 'contracts\\BiatecClammPool.algo.ts:1450', pc: [6696] },
        { teal: 7213, source: 'contracts\\BiatecClammPool.algo.ts:1450', pc: [6697, 6698] },
        { teal: 7218, source: 'contracts\\BiatecClammPool.algo.ts:1451', pc: [6699, 6700] },
        { teal: 7219, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6701] },
        { teal: 7220, source: 'contracts\\BiatecClammPool.algo.ts:1451', pc: [6702] },
        { teal: 7221, source: 'contracts\\BiatecClammPool.algo.ts:1451', pc: [6703, 6704] },
        { teal: 7222, source: 'contracts\\BiatecClammPool.algo.ts:1451', pc: [6705] },
        { teal: 7223, source: 'contracts\\BiatecClammPool.algo.ts:1451', pc: [6706, 6707, 6708] },
        { teal: 7228, source: 'contracts\\BiatecClammPool.algo.ts:1452', pc: [6709, 6710] },
        { teal: 7229, source: 'contracts\\BiatecClammPool.algo.ts:1452', pc: [6711, 6712] },
        { teal: 7230, source: 'contracts\\BiatecClammPool.algo.ts:1452', pc: [6713] },
        { teal: 7231, source: 'contracts\\BiatecClammPool.algo.ts:1452', pc: [6714, 6715] },
        { teal: 7232, source: 'contracts\\BiatecClammPool.algo.ts:1452', pc: [6716] },
        { teal: 7233, source: 'contracts\\BiatecClammPool.algo.ts:1452', pc: [6717, 6718] },
        { teal: 7237, source: 'contracts\\BiatecClammPool.algo.ts:1453', pc: [6719, 6720] },
        { teal: 7238, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6721] },
        { teal: 7239, source: 'contracts\\BiatecClammPool.algo.ts:1453', pc: [6722] },
        { teal: 7240, source: 'contracts\\BiatecClammPool.algo.ts:1453', pc: [6723, 6724] },
        { teal: 7241, source: 'contracts\\BiatecClammPool.algo.ts:1453', pc: [6725] },
        { teal: 7242, source: 'contracts\\BiatecClammPool.algo.ts:1453', pc: [6726, 6727] },
        { teal: 7246, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6728] },
        { teal: 7247, source: 'contracts\\BiatecClammPool.algo.ts:1454', pc: [6729, 6730] },
        { teal: 7248, source: 'contracts\\BiatecClammPool.algo.ts:1454', pc: [6731] },
        { teal: 7249, source: 'contracts\\BiatecClammPool.algo.ts:1454', pc: [6732, 6733] },
        { teal: 7250, source: 'contracts\\BiatecClammPool.algo.ts:1454', pc: [6734] },
        { teal: 7251, source: 'contracts\\BiatecClammPool.algo.ts:1454', pc: [6735, 6736] },
        { teal: 7255, source: 'contracts\\BiatecClammPool.algo.ts:1455', pc: [6737, 6738] },
        { teal: 7256, source: 'contracts\\BiatecClammPool.algo.ts:1455', pc: [6739, 6740, 6741] },
        { teal: 7261, source: 'contracts\\BiatecClammPool.algo.ts:1457', pc: [6742, 6743] },
        { teal: 7262, source: 'contracts\\BiatecClammPool.algo.ts:1457', pc: [6744, 6745] },
        { teal: 7263, source: 'contracts\\BiatecClammPool.algo.ts:1457', pc: [6746] },
        { teal: 7264, source: 'contracts\\BiatecClammPool.algo.ts:1457', pc: [6747, 6748] },
        { teal: 7265, source: 'contracts\\BiatecClammPool.algo.ts:1457', pc: [6749] },
        { teal: 7266, source: 'contracts\\BiatecClammPool.algo.ts:1457', pc: [6750, 6751] },
        { teal: 7270, source: 'contracts\\BiatecClammPool.algo.ts:1458', pc: [6752, 6753] },
        { teal: 7271, source: 'contracts\\BiatecClammPool.algo.ts:1458', pc: [6754, 6755] },
        { teal: 7272, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6756] },
        { teal: 7273, source: 'contracts\\BiatecClammPool.algo.ts:1458', pc: [6757] },
        { teal: 7274, source: 'contracts\\BiatecClammPool.algo.ts:1458', pc: [6758] },
        { teal: 7275, source: 'contracts\\BiatecClammPool.algo.ts:1458', pc: [6759, 6760] },
        { teal: 7279, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6761] },
        { teal: 7280, source: 'contracts\\BiatecClammPool.algo.ts:1459', pc: [6762, 6763] },
        { teal: 7281, source: 'contracts\\BiatecClammPool.algo.ts:1459', pc: [6764] },
        { teal: 7282, source: 'contracts\\BiatecClammPool.algo.ts:1459', pc: [6765, 6766] },
        { teal: 7283, source: 'contracts\\BiatecClammPool.algo.ts:1459', pc: [6767] },
        { teal: 7284, source: 'contracts\\BiatecClammPool.algo.ts:1459', pc: [6768, 6769] },
        { teal: 7288, source: 'contracts\\BiatecClammPool.algo.ts:1460', pc: [6770, 6771] },
        { teal: 7292, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6772, 6773] },
        { teal: 7295, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6774, 6775] },
        { teal: 7296, source: 'contracts\\BiatecClammPool.algo.ts:1401', pc: [6776] },
        { teal: 7301, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6777, 6778] },
        { teal: 7304, source: 'contracts\\BiatecClammPool.algo.ts:1481', pc: [6779, 6780, 6781] },
        { teal: 7305, source: 'contracts\\BiatecClammPool.algo.ts:1481', pc: [6782] },
        { teal: 7306, source: 'contracts\\BiatecClammPool.algo.ts:1481', pc: [6783] },
        { teal: 7307, source: 'contracts\\BiatecClammPool.algo.ts:1481', pc: [6784] },
        { teal: 7308, source: 'contracts\\BiatecClammPool.algo.ts:1481', pc: [6785] },
        {
          teal: 7311,
          source: 'contracts\\BiatecClammPool.algo.ts:1481',
          errorMessage: 'argument 0 (liquidity) for calculatePrice must be a uint256',
          pc: [6786],
        },
        { teal: 7314, source: 'contracts\\BiatecClammPool.algo.ts:1480', pc: [6787, 6788, 6789] },
        { teal: 7315, source: 'contracts\\BiatecClammPool.algo.ts:1480', pc: [6790] },
        { teal: 7316, source: 'contracts\\BiatecClammPool.algo.ts:1480', pc: [6791] },
        { teal: 7317, source: 'contracts\\BiatecClammPool.algo.ts:1480', pc: [6792] },
        { teal: 7318, source: 'contracts\\BiatecClammPool.algo.ts:1480', pc: [6793] },
        {
          teal: 7321,
          source: 'contracts\\BiatecClammPool.algo.ts:1480',
          errorMessage: 'argument 1 (priceMaxSqrt) for calculatePrice must be a uint256',
          pc: [6794],
        },
        { teal: 7324, source: 'contracts\\BiatecClammPool.algo.ts:1479', pc: [6795, 6796, 6797] },
        { teal: 7325, source: 'contracts\\BiatecClammPool.algo.ts:1479', pc: [6798] },
        { teal: 7326, source: 'contracts\\BiatecClammPool.algo.ts:1479', pc: [6799] },
        { teal: 7327, source: 'contracts\\BiatecClammPool.algo.ts:1479', pc: [6800] },
        { teal: 7328, source: 'contracts\\BiatecClammPool.algo.ts:1479', pc: [6801] },
        {
          teal: 7331,
          source: 'contracts\\BiatecClammPool.algo.ts:1479',
          errorMessage: 'argument 2 (priceMinSqrt) for calculatePrice must be a uint256',
          pc: [6802],
        },
        { teal: 7334, source: 'contracts\\BiatecClammPool.algo.ts:1478', pc: [6803, 6804, 6805] },
        { teal: 7335, source: 'contracts\\BiatecClammPool.algo.ts:1478', pc: [6806] },
        { teal: 7336, source: 'contracts\\BiatecClammPool.algo.ts:1478', pc: [6807] },
        { teal: 7337, source: 'contracts\\BiatecClammPool.algo.ts:1478', pc: [6808] },
        { teal: 7338, source: 'contracts\\BiatecClammPool.algo.ts:1478', pc: [6809] },
        {
          teal: 7341,
          source: 'contracts\\BiatecClammPool.algo.ts:1478',
          errorMessage: 'argument 3 (assetBQuantity) for calculatePrice must be a uint256',
          pc: [6810],
        },
        { teal: 7344, source: 'contracts\\BiatecClammPool.algo.ts:1477', pc: [6811, 6812, 6813] },
        { teal: 7345, source: 'contracts\\BiatecClammPool.algo.ts:1477', pc: [6814] },
        { teal: 7346, source: 'contracts\\BiatecClammPool.algo.ts:1477', pc: [6815] },
        { teal: 7347, source: 'contracts\\BiatecClammPool.algo.ts:1477', pc: [6816] },
        { teal: 7348, source: 'contracts\\BiatecClammPool.algo.ts:1477', pc: [6817] },
        {
          teal: 7351,
          source: 'contracts\\BiatecClammPool.algo.ts:1477',
          errorMessage: 'argument 4 (assetAQuantity) for calculatePrice must be a uint256',
          pc: [6818],
        },
        { teal: 7354, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6819, 6820, 6821] },
        { teal: 7355, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6822] },
        { teal: 7356, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6823] },
        { teal: 7357, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6824] },
        { teal: 7358, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6825] },
        {
          teal: 7361,
          source: 'contracts\\BiatecClammPool.algo.ts:1475',
          errorMessage: 'calculatePrice return value overflowed 256 bits',
          pc: [6826],
        },
        { teal: 7362, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6827] },
        { teal: 7363, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6828] },
        { teal: 7364, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6829] },
        { teal: 7365, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6830] },
        { teal: 7366, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6831] },
        { teal: 7367, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6832] },
        { teal: 7368, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6833] },
        { teal: 7369, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6834] },
        { teal: 7370, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6835] },
        { teal: 7371, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6836] },
        { teal: 7372, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6837] },
        { teal: 7373, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6838] },
        { teal: 7374, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6839] },
        { teal: 7386, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6840, 6841, 6842] },
        { teal: 7389, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6843] },
        { teal: 7390, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6844, 6845] },
        { teal: 7395, source: 'contracts\\BiatecClammPool.algo.ts:1484', pc: [6846, 6847] },
        { teal: 7396, source: 'contracts\\BiatecClammPool.algo.ts:1484', pc: [6848, 6849] },
        { teal: 7397, source: 'contracts\\BiatecClammPool.algo.ts:1484', pc: [6850] },
        { teal: 7398, source: 'contracts\\BiatecClammPool.algo.ts:1484', pc: [6851, 6852, 6853] },
        { teal: 7403, source: 'contracts\\BiatecClammPool.algo.ts:1485', pc: [6854, 6855] },
        { teal: 7404, source: 'contracts\\BiatecClammPool.algo.ts:1485', pc: [6856, 6857] },
        { teal: 7405, source: 'contracts\\BiatecClammPool.algo.ts:1485', pc: [6858] },
        { teal: 7406, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6859] },
        { teal: 7407, source: 'contracts\\BiatecClammPool.algo.ts:1485', pc: [6860] },
        { teal: 7408, source: 'contracts\\BiatecClammPool.algo.ts:1485', pc: [6861, 6862] },
        { teal: 7412, source: 'contracts\\BiatecClammPool.algo.ts:1486', pc: [6863, 6864] },
        { teal: 7413, source: 'contracts\\BiatecClammPool.algo.ts:1486', pc: [6865, 6866, 6867] },
        { teal: 7418, source: 'contracts\\BiatecClammPool.algo.ts:1489', pc: [6868, 6869] },
        { teal: 7419, source: 'contracts\\BiatecClammPool.algo.ts:1489', pc: [6870, 6871] },
        { teal: 7423, source: 'contracts\\BiatecClammPool.algo.ts:1490', pc: [6872, 6873] },
        { teal: 7424, source: 'contracts\\BiatecClammPool.algo.ts:1490', pc: [6874, 6875] },
        { teal: 7428, source: 'contracts\\BiatecClammPool.algo.ts:1491', pc: [6876, 6877] },
        { teal: 7429, source: 'contracts\\BiatecClammPool.algo.ts:1491', pc: [6878, 6879] },
        { teal: 7430, source: 'contracts\\BiatecClammPool.algo.ts:1491', pc: [6880] },
        { teal: 7431, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6881] },
        { teal: 7432, source: 'contracts\\BiatecClammPool.algo.ts:1491', pc: [6882] },
        { teal: 7433, source: 'contracts\\BiatecClammPool.algo.ts:1491', pc: [6883, 6884] },
        { teal: 7437, source: 'contracts\\BiatecClammPool.algo.ts:1492', pc: [6885, 6886] },
        { teal: 7438, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6887] },
        { teal: 7439, source: 'contracts\\BiatecClammPool.algo.ts:1492', pc: [6888] },
        { teal: 7440, source: 'contracts\\BiatecClammPool.algo.ts:1492', pc: [6889, 6890] },
        { teal: 7441, source: 'contracts\\BiatecClammPool.algo.ts:1492', pc: [6891] },
        { teal: 7442, source: 'contracts\\BiatecClammPool.algo.ts:1492', pc: [6892, 6893] },
        { teal: 7446, source: 'contracts\\BiatecClammPool.algo.ts:1493', pc: [6894, 6895] },
        { teal: 7447, source: 'contracts\\BiatecClammPool.algo.ts:1493', pc: [6896, 6897] },
        { teal: 7448, source: 'contracts\\BiatecClammPool.algo.ts:1493', pc: [6898] },
        { teal: 7449, source: 'contracts\\BiatecClammPool.algo.ts:1493', pc: [6899, 6900] },
        { teal: 7453, source: 'contracts\\BiatecClammPool.algo.ts:1494', pc: [6901, 6902] },
        { teal: 7454, source: 'contracts\\BiatecClammPool.algo.ts:1494', pc: [6903, 6904] },
        { teal: 7455, source: 'contracts\\BiatecClammPool.algo.ts:1494', pc: [6905] },
        { teal: 7456, source: 'contracts\\BiatecClammPool.algo.ts:1494', pc: [6906, 6907] },
        { teal: 7460, source: 'contracts\\BiatecClammPool.algo.ts:1495', pc: [6908, 6909] },
        { teal: 7461, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [6910] },
        { teal: 7462, source: 'contracts\\BiatecClammPool.algo.ts:1495', pc: [6911] },
        { teal: 7463, source: 'contracts\\BiatecClammPool.algo.ts:1495', pc: [6912, 6913] },
        { teal: 7464, source: 'contracts\\BiatecClammPool.algo.ts:1495', pc: [6914] },
        { teal: 7465, source: 'contracts\\BiatecClammPool.algo.ts:1495', pc: [6915, 6916] },
        { teal: 7469, source: 'contracts\\BiatecClammPool.algo.ts:1496', pc: [6917, 6918] },
        { teal: 7473, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6919, 6920] },
        { teal: 7476, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6921, 6922] },
        { teal: 7477, source: 'contracts\\BiatecClammPool.algo.ts:1475', pc: [6923] },
        { teal: 7482, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6924, 6925] },
        { teal: 7485, source: 'contracts\\BiatecClammPool.algo.ts:1516', pc: [6926, 6927, 6928] },
        { teal: 7486, source: 'contracts\\BiatecClammPool.algo.ts:1516', pc: [6929] },
        { teal: 7487, source: 'contracts\\BiatecClammPool.algo.ts:1516', pc: [6930] },
        { teal: 7488, source: 'contracts\\BiatecClammPool.algo.ts:1516', pc: [6931] },
        { teal: 7489, source: 'contracts\\BiatecClammPool.algo.ts:1516', pc: [6932] },
        {
          teal: 7492,
          source: 'contracts\\BiatecClammPool.algo.ts:1516',
          errorMessage: 'argument 0 (liqudity) for calculateAssetBWithdrawOnAssetADeposit must be a uint256',
          pc: [6933],
        },
        { teal: 7495, source: 'contracts\\BiatecClammPool.algo.ts:1515', pc: [6934, 6935, 6936] },
        { teal: 7496, source: 'contracts\\BiatecClammPool.algo.ts:1515', pc: [6937] },
        { teal: 7497, source: 'contracts\\BiatecClammPool.algo.ts:1515', pc: [6938] },
        { teal: 7498, source: 'contracts\\BiatecClammPool.algo.ts:1515', pc: [6939] },
        { teal: 7499, source: 'contracts\\BiatecClammPool.algo.ts:1515', pc: [6940] },
        {
          teal: 7502,
          source: 'contracts\\BiatecClammPool.algo.ts:1515',
          errorMessage: 'argument 1 (priceMaxSqrt) for calculateAssetBWithdrawOnAssetADeposit must be a uint256',
          pc: [6941],
        },
        { teal: 7505, source: 'contracts\\BiatecClammPool.algo.ts:1514', pc: [6942, 6943, 6944] },
        { teal: 7506, source: 'contracts\\BiatecClammPool.algo.ts:1514', pc: [6945] },
        { teal: 7507, source: 'contracts\\BiatecClammPool.algo.ts:1514', pc: [6946] },
        { teal: 7508, source: 'contracts\\BiatecClammPool.algo.ts:1514', pc: [6947] },
        { teal: 7509, source: 'contracts\\BiatecClammPool.algo.ts:1514', pc: [6948] },
        {
          teal: 7512,
          source: 'contracts\\BiatecClammPool.algo.ts:1514',
          errorMessage: 'argument 2 (priceMinSqrt) for calculateAssetBWithdrawOnAssetADeposit must be a uint256',
          pc: [6949],
        },
        { teal: 7515, source: 'contracts\\BiatecClammPool.algo.ts:1513', pc: [6950, 6951, 6952] },
        { teal: 7516, source: 'contracts\\BiatecClammPool.algo.ts:1513', pc: [6953] },
        { teal: 7517, source: 'contracts\\BiatecClammPool.algo.ts:1513', pc: [6954] },
        { teal: 7518, source: 'contracts\\BiatecClammPool.algo.ts:1513', pc: [6955] },
        { teal: 7519, source: 'contracts\\BiatecClammPool.algo.ts:1513', pc: [6956] },
        {
          teal: 7522,
          source: 'contracts\\BiatecClammPool.algo.ts:1513',
          errorMessage: 'argument 3 (assetBBalance) for calculateAssetBWithdrawOnAssetADeposit must be a uint256',
          pc: [6957],
        },
        { teal: 7525, source: 'contracts\\BiatecClammPool.algo.ts:1512', pc: [6958, 6959, 6960] },
        { teal: 7526, source: 'contracts\\BiatecClammPool.algo.ts:1512', pc: [6961] },
        { teal: 7527, source: 'contracts\\BiatecClammPool.algo.ts:1512', pc: [6962] },
        { teal: 7528, source: 'contracts\\BiatecClammPool.algo.ts:1512', pc: [6963] },
        { teal: 7529, source: 'contracts\\BiatecClammPool.algo.ts:1512', pc: [6964] },
        {
          teal: 7532,
          source: 'contracts\\BiatecClammPool.algo.ts:1512',
          errorMessage: 'argument 4 (assetABalance) for calculateAssetBWithdrawOnAssetADeposit must be a uint256',
          pc: [6965],
        },
        { teal: 7535, source: 'contracts\\BiatecClammPool.algo.ts:1511', pc: [6966, 6967, 6968] },
        { teal: 7536, source: 'contracts\\BiatecClammPool.algo.ts:1511', pc: [6969] },
        { teal: 7537, source: 'contracts\\BiatecClammPool.algo.ts:1511', pc: [6970] },
        { teal: 7538, source: 'contracts\\BiatecClammPool.algo.ts:1511', pc: [6971] },
        { teal: 7539, source: 'contracts\\BiatecClammPool.algo.ts:1511', pc: [6972] },
        {
          teal: 7542,
          source: 'contracts\\BiatecClammPool.algo.ts:1511',
          errorMessage: 'argument 5 (inAmount) for calculateAssetBWithdrawOnAssetADeposit must be a uint256',
          pc: [6973],
        },
        { teal: 7545, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6974, 6975, 6976] },
        { teal: 7546, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6977] },
        { teal: 7547, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6978] },
        { teal: 7548, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6979] },
        { teal: 7549, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6980] },
        {
          teal: 7552,
          source: 'contracts\\BiatecClammPool.algo.ts:1509',
          errorMessage: 'calculateAssetBWithdrawOnAssetADeposit return value overflowed 256 bits',
          pc: [6981],
        },
        { teal: 7553, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6982] },
        { teal: 7554, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6983] },
        { teal: 7555, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6984] },
        { teal: 7556, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6985] },
        { teal: 7557, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6986] },
        { teal: 7558, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6987] },
        { teal: 7559, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6988] },
        { teal: 7560, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6989] },
        { teal: 7561, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6990] },
        { teal: 7562, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6991] },
        { teal: 7563, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6992] },
        { teal: 7564, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6993] },
        { teal: 7565, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6994] },
        { teal: 7578, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6995, 6996, 6997] },
        { teal: 7581, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6998] },
        { teal: 7582, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [6999, 7000] },
        { teal: 7587, source: 'contracts\\BiatecClammPool.algo.ts:1519', pc: [7001, 7002] },
        { teal: 7588, source: 'contracts\\BiatecClammPool.algo.ts:1519', pc: [7003, 7004] },
        { teal: 7589, source: 'contracts\\BiatecClammPool.algo.ts:1519', pc: [7005] },
        { teal: 7590, source: 'contracts\\BiatecClammPool.algo.ts:1519', pc: [7006, 7007, 7008] },
        { teal: 7595, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7009, 7010] },
        { teal: 7596, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7011, 7012] },
        { teal: 7597, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7013] },
        { teal: 7598, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7014, 7015] },
        { teal: 7599, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7016] },
        { teal: 7600, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7017] },
        { teal: 7601, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7018] },
        { teal: 7602, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7019] },
        { teal: 7603, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7020] },
        { teal: 7604, source: 'contracts\\BiatecClammPool.algo.ts:1520', pc: [7021, 7022] },
        { teal: 7608, source: 'contracts\\BiatecClammPool.algo.ts:1521', pc: [7023, 7024] },
        { teal: 7609, source: 'contracts\\BiatecClammPool.algo.ts:1521', pc: [7025, 7026, 7027] },
        { teal: 7614, source: 'contracts\\BiatecClammPool.algo.ts:1539', pc: [7028, 7029] },
        { teal: 7615, source: 'contracts\\BiatecClammPool.algo.ts:1539', pc: [7030, 7031] },
        { teal: 7619, source: 'contracts\\BiatecClammPool.algo.ts:1540', pc: [7032, 7033] },
        { teal: 7620, source: 'contracts\\BiatecClammPool.algo.ts:1540', pc: [7034, 7035] },
        { teal: 7624, source: 'contracts\\BiatecClammPool.algo.ts:1541', pc: [7036, 7037] },
        { teal: 7625, source: 'contracts\\BiatecClammPool.algo.ts:1541', pc: [7038, 7039] },
        { teal: 7629, source: 'contracts\\BiatecClammPool.algo.ts:1542', pc: [7040, 7041] },
        { teal: 7630, source: 'contracts\\BiatecClammPool.algo.ts:1542', pc: [7042, 7043] },
        { teal: 7634, source: 'contracts\\BiatecClammPool.algo.ts:1543', pc: [7044, 7045] },
        { teal: 7635, source: 'contracts\\BiatecClammPool.algo.ts:1543', pc: [7046, 7047] },
        { teal: 7639, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7048, 7049] },
        { teal: 7640, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7050, 7051] },
        { teal: 7641, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7052] },
        { teal: 7642, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7053] },
        { teal: 7643, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7054] },
        { teal: 7644, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7055, 7056] },
        { teal: 7645, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7057] },
        { teal: 7646, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7058] },
        { teal: 7647, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7059] },
        { teal: 7648, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7060, 7061] },
        { teal: 7649, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7062] },
        { teal: 7650, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7063] },
        { teal: 7651, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7064] },
        { teal: 7652, source: 'contracts\\BiatecClammPool.algo.ts:1545', pc: [7065, 7066] },
        { teal: 7656, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7067, 7068] },
        { teal: 7657, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7069, 7070] },
        { teal: 7658, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7071] },
        { teal: 7659, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7072] },
        { teal: 7660, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7073] },
        { teal: 7661, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7074, 7075] },
        { teal: 7662, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7076] },
        { teal: 7663, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7077] },
        { teal: 7664, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7078] },
        { teal: 7665, source: 'contracts\\BiatecClammPool.algo.ts:1547', pc: [7079, 7080] },
        { teal: 7669, source: 'contracts\\BiatecClammPool.algo.ts:1549', pc: [7081, 7082] },
        { teal: 7670, source: 'contracts\\BiatecClammPool.algo.ts:1549', pc: [7083, 7084] },
        { teal: 7671, source: 'contracts\\BiatecClammPool.algo.ts:1549', pc: [7085] },
        { teal: 7672, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7086] },
        { teal: 7673, source: 'contracts\\BiatecClammPool.algo.ts:1549', pc: [7087] },
        { teal: 7674, source: 'contracts\\BiatecClammPool.algo.ts:1549', pc: [7088, 7089] },
        { teal: 7678, source: 'contracts\\BiatecClammPool.algo.ts:1551', pc: [7090, 7091] },
        { teal: 7679, source: 'contracts\\BiatecClammPool.algo.ts:1551', pc: [7092, 7093] },
        { teal: 7680, source: 'contracts\\BiatecClammPool.algo.ts:1551', pc: [7094] },
        { teal: 7681, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7095] },
        { teal: 7682, source: 'contracts\\BiatecClammPool.algo.ts:1551', pc: [7096] },
        { teal: 7683, source: 'contracts\\BiatecClammPool.algo.ts:1551', pc: [7097, 7098] },
        { teal: 7687, source: 'contracts\\BiatecClammPool.algo.ts:1553', pc: [7099, 7100] },
        { teal: 7688, source: 'contracts\\BiatecClammPool.algo.ts:1553', pc: [7101, 7102] },
        { teal: 7689, source: 'contracts\\BiatecClammPool.algo.ts:1553', pc: [7103] },
        { teal: 7690, source: 'contracts\\BiatecClammPool.algo.ts:1553', pc: [7104, 7105] },
        { teal: 7694, source: 'contracts\\BiatecClammPool.algo.ts:1555', pc: [7106, 7107] },
        { teal: 7695, source: 'contracts\\BiatecClammPool.algo.ts:1555', pc: [7108, 7109] },
        { teal: 7696, source: 'contracts\\BiatecClammPool.algo.ts:1555', pc: [7110] },
        { teal: 7697, source: 'contracts\\BiatecClammPool.algo.ts:1555', pc: [7111, 7112] },
        { teal: 7698, source: 'contracts\\BiatecClammPool.algo.ts:1555', pc: [7113] },
        { teal: 7699, source: 'contracts\\BiatecClammPool.algo.ts:1555', pc: [7114, 7115] },
        { teal: 7703, source: 'contracts\\BiatecClammPool.algo.ts:1557', pc: [7116, 7117] },
        { teal: 7704, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7118] },
        { teal: 7705, source: 'contracts\\BiatecClammPool.algo.ts:1557', pc: [7119] },
        { teal: 7706, source: 'contracts\\BiatecClammPool.algo.ts:1557', pc: [7120, 7121] },
        { teal: 7707, source: 'contracts\\BiatecClammPool.algo.ts:1557', pc: [7122] },
        { teal: 7708, source: 'contracts\\BiatecClammPool.algo.ts:1557', pc: [7123, 7124] },
        { teal: 7712, source: 'contracts\\BiatecClammPool.algo.ts:1558', pc: [7125, 7126] },
        { teal: 7716, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [7127, 7128] },
        { teal: 7719, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [7129, 7130] },
        { teal: 7720, source: 'contracts\\BiatecClammPool.algo.ts:1509', pc: [7131] },
        { teal: 7725, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7132, 7133] },
        { teal: 7728, source: 'contracts\\BiatecClammPool.algo.ts:1579', pc: [7134, 7135, 7136] },
        { teal: 7729, source: 'contracts\\BiatecClammPool.algo.ts:1579', pc: [7137] },
        { teal: 7730, source: 'contracts\\BiatecClammPool.algo.ts:1579', pc: [7138] },
        { teal: 7731, source: 'contracts\\BiatecClammPool.algo.ts:1579', pc: [7139] },
        { teal: 7732, source: 'contracts\\BiatecClammPool.algo.ts:1579', pc: [7140] },
        {
          teal: 7735,
          source: 'contracts\\BiatecClammPool.algo.ts:1579',
          errorMessage: 'argument 0 (liqudity) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256',
          pc: [7141],
        },
        { teal: 7738, source: 'contracts\\BiatecClammPool.algo.ts:1578', pc: [7142, 7143, 7144] },
        { teal: 7739, source: 'contracts\\BiatecClammPool.algo.ts:1578', pc: [7145] },
        { teal: 7740, source: 'contracts\\BiatecClammPool.algo.ts:1578', pc: [7146] },
        { teal: 7741, source: 'contracts\\BiatecClammPool.algo.ts:1578', pc: [7147] },
        { teal: 7742, source: 'contracts\\BiatecClammPool.algo.ts:1578', pc: [7148] },
        {
          teal: 7745,
          source: 'contracts\\BiatecClammPool.algo.ts:1578',
          errorMessage: 'argument 1 (priceMaxSqrt) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256',
          pc: [7149],
        },
        { teal: 7748, source: 'contracts\\BiatecClammPool.algo.ts:1577', pc: [7150, 7151, 7152] },
        { teal: 7749, source: 'contracts\\BiatecClammPool.algo.ts:1577', pc: [7153] },
        { teal: 7750, source: 'contracts\\BiatecClammPool.algo.ts:1577', pc: [7154] },
        { teal: 7751, source: 'contracts\\BiatecClammPool.algo.ts:1577', pc: [7155] },
        { teal: 7752, source: 'contracts\\BiatecClammPool.algo.ts:1577', pc: [7156] },
        {
          teal: 7755,
          source: 'contracts\\BiatecClammPool.algo.ts:1577',
          errorMessage: 'argument 2 (priceMinSqrt) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256',
          pc: [7157],
        },
        { teal: 7758, source: 'contracts\\BiatecClammPool.algo.ts:1576', pc: [7158, 7159, 7160] },
        { teal: 7759, source: 'contracts\\BiatecClammPool.algo.ts:1576', pc: [7161] },
        { teal: 7760, source: 'contracts\\BiatecClammPool.algo.ts:1576', pc: [7162] },
        { teal: 7761, source: 'contracts\\BiatecClammPool.algo.ts:1576', pc: [7163] },
        { teal: 7762, source: 'contracts\\BiatecClammPool.algo.ts:1576', pc: [7164] },
        {
          teal: 7765,
          source: 'contracts\\BiatecClammPool.algo.ts:1576',
          errorMessage: 'argument 3 (assetBBalance) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256',
          pc: [7165],
        },
        { teal: 7768, source: 'contracts\\BiatecClammPool.algo.ts:1575', pc: [7166, 7167, 7168] },
        { teal: 7769, source: 'contracts\\BiatecClammPool.algo.ts:1575', pc: [7169] },
        { teal: 7770, source: 'contracts\\BiatecClammPool.algo.ts:1575', pc: [7170] },
        { teal: 7771, source: 'contracts\\BiatecClammPool.algo.ts:1575', pc: [7171] },
        { teal: 7772, source: 'contracts\\BiatecClammPool.algo.ts:1575', pc: [7172] },
        {
          teal: 7775,
          source: 'contracts\\BiatecClammPool.algo.ts:1575',
          errorMessage: 'argument 4 (assetABalance) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256',
          pc: [7173],
        },
        { teal: 7778, source: 'contracts\\BiatecClammPool.algo.ts:1574', pc: [7174, 7175, 7176] },
        { teal: 7779, source: 'contracts\\BiatecClammPool.algo.ts:1574', pc: [7177] },
        { teal: 7780, source: 'contracts\\BiatecClammPool.algo.ts:1574', pc: [7178] },
        { teal: 7781, source: 'contracts\\BiatecClammPool.algo.ts:1574', pc: [7179] },
        { teal: 7782, source: 'contracts\\BiatecClammPool.algo.ts:1574', pc: [7180] },
        {
          teal: 7785,
          source: 'contracts\\BiatecClammPool.algo.ts:1574',
          errorMessage: 'argument 5 (inAmount) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256',
          pc: [7181],
        },
        { teal: 7788, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7182, 7183, 7184] },
        { teal: 7789, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7185] },
        { teal: 7790, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7186] },
        { teal: 7791, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7187] },
        { teal: 7792, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7188] },
        {
          teal: 7795,
          source: 'contracts\\BiatecClammPool.algo.ts:1572',
          errorMessage: 'calculateAssetAWithdrawOnAssetBDeposit return value overflowed 256 bits',
          pc: [7189],
        },
        { teal: 7796, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7190] },
        { teal: 7797, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7191] },
        { teal: 7798, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7192] },
        { teal: 7799, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7193] },
        { teal: 7800, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7194] },
        { teal: 7801, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7195] },
        { teal: 7802, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7196] },
        { teal: 7803, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7197] },
        { teal: 7804, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7198] },
        { teal: 7805, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7199] },
        { teal: 7806, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7200] },
        { teal: 7807, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7201] },
        { teal: 7808, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7202] },
        { teal: 7822, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7203, 7204, 7205] },
        { teal: 7825, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7206] },
        { teal: 7826, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7207, 7208] },
        { teal: 7831, source: 'contracts\\BiatecClammPool.algo.ts:1581', pc: [7209, 7210] },
        { teal: 7832, source: 'contracts\\BiatecClammPool.algo.ts:1581', pc: [7211, 7212] },
        { teal: 7833, source: 'contracts\\BiatecClammPool.algo.ts:1581', pc: [7213] },
        { teal: 7834, source: 'contracts\\BiatecClammPool.algo.ts:1581', pc: [7214, 7215, 7216] },
        { teal: 7839, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7217, 7218] },
        { teal: 7840, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7219] },
        { teal: 7841, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7220] },
        { teal: 7842, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7221] },
        { teal: 7843, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7222] },
        { teal: 7844, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7223, 7224] },
        { teal: 7845, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7225] },
        { teal: 7846, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7226, 7227] },
        { teal: 7847, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7228] },
        { teal: 7848, source: 'contracts\\BiatecClammPool.algo.ts:1582', pc: [7229, 7230] },
        { teal: 7852, source: 'contracts\\BiatecClammPool.algo.ts:1583', pc: [7231, 7232] },
        { teal: 7853, source: 'contracts\\BiatecClammPool.algo.ts:1583', pc: [7233, 7234, 7235] },
        { teal: 7858, source: 'contracts\\BiatecClammPool.algo.ts:1598', pc: [7236, 7237] },
        { teal: 7859, source: 'contracts\\BiatecClammPool.algo.ts:1598', pc: [7238, 7239] },
        { teal: 7863, source: 'contracts\\BiatecClammPool.algo.ts:1599', pc: [7240, 7241] },
        { teal: 7864, source: 'contracts\\BiatecClammPool.algo.ts:1599', pc: [7242, 7243] },
        { teal: 7868, source: 'contracts\\BiatecClammPool.algo.ts:1600', pc: [7244, 7245] },
        { teal: 7869, source: 'contracts\\BiatecClammPool.algo.ts:1600', pc: [7246, 7247] },
        { teal: 7873, source: 'contracts\\BiatecClammPool.algo.ts:1601', pc: [7248, 7249] },
        { teal: 7874, source: 'contracts\\BiatecClammPool.algo.ts:1601', pc: [7250, 7251] },
        { teal: 7878, source: 'contracts\\BiatecClammPool.algo.ts:1602', pc: [7252, 7253] },
        { teal: 7879, source: 'contracts\\BiatecClammPool.algo.ts:1602', pc: [7254, 7255] },
        { teal: 7883, source: 'contracts\\BiatecClammPool.algo.ts:1605', pc: [7256, 7257] },
        { teal: 7884, source: 'contracts\\BiatecClammPool.algo.ts:1605', pc: [7258, 7259] },
        { teal: 7885, source: 'contracts\\BiatecClammPool.algo.ts:1605', pc: [7260] },
        { teal: 7886, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7261] },
        { teal: 7887, source: 'contracts\\BiatecClammPool.algo.ts:1605', pc: [7262] },
        { teal: 7888, source: 'contracts\\BiatecClammPool.algo.ts:1605', pc: [7263, 7264] },
        { teal: 7892, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7265, 7266] },
        { teal: 7893, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7267, 7268] },
        { teal: 7894, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7269] },
        { teal: 7895, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7270] },
        { teal: 7896, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7271] },
        { teal: 7897, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7272, 7273] },
        { teal: 7898, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7274] },
        { teal: 7899, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7275] },
        { teal: 7900, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7276] },
        { teal: 7901, source: 'contracts\\BiatecClammPool.algo.ts:1607', pc: [7277, 7278] },
        { teal: 7905, source: 'contracts\\BiatecClammPool.algo.ts:1609', pc: [7279, 7280] },
        { teal: 7906, source: 'contracts\\BiatecClammPool.algo.ts:1609', pc: [7281, 7282] },
        { teal: 7907, source: 'contracts\\BiatecClammPool.algo.ts:1609', pc: [7283] },
        { teal: 7908, source: 'contracts\\BiatecClammPool.algo.ts:1609', pc: [7284, 7285] },
        { teal: 7912, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7286, 7287] },
        { teal: 7913, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7288, 7289] },
        { teal: 7914, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7290] },
        { teal: 7915, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7291] },
        { teal: 7916, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7292] },
        { teal: 7917, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7293, 7294] },
        { teal: 7918, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7295] },
        { teal: 7919, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7296] },
        { teal: 7920, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7297] },
        { teal: 7921, source: 'contracts\\BiatecClammPool.algo.ts:1611', pc: [7298, 7299] },
        { teal: 7925, source: 'contracts\\BiatecClammPool.algo.ts:1613', pc: [7300, 7301] },
        { teal: 7926, source: 'contracts\\BiatecClammPool.algo.ts:1613', pc: [7302, 7303] },
        { teal: 7927, source: 'contracts\\BiatecClammPool.algo.ts:1613', pc: [7304] },
        { teal: 7928, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7305] },
        { teal: 7929, source: 'contracts\\BiatecClammPool.algo.ts:1613', pc: [7306] },
        { teal: 7930, source: 'contracts\\BiatecClammPool.algo.ts:1613', pc: [7307, 7308] },
        { teal: 7934, source: 'contracts\\BiatecClammPool.algo.ts:1615', pc: [7309, 7310] },
        { teal: 7935, source: 'contracts\\BiatecClammPool.algo.ts:1615', pc: [7311, 7312] },
        { teal: 7936, source: 'contracts\\BiatecClammPool.algo.ts:1615', pc: [7313] },
        { teal: 7937, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7314] },
        { teal: 7938, source: 'contracts\\BiatecClammPool.algo.ts:1615', pc: [7315] },
        { teal: 7939, source: 'contracts\\BiatecClammPool.algo.ts:1615', pc: [7316, 7317] },
        { teal: 7943, source: 'contracts\\BiatecClammPool.algo.ts:1617', pc: [7318, 7319] },
        { teal: 7944, source: 'contracts\\BiatecClammPool.algo.ts:1617', pc: [7320, 7321] },
        { teal: 7945, source: 'contracts\\BiatecClammPool.algo.ts:1617', pc: [7322] },
        { teal: 7946, source: 'contracts\\BiatecClammPool.algo.ts:1617', pc: [7323, 7324] },
        { teal: 7947, source: 'contracts\\BiatecClammPool.algo.ts:1617', pc: [7325] },
        { teal: 7948, source: 'contracts\\BiatecClammPool.algo.ts:1617', pc: [7326, 7327] },
        { teal: 7952, source: 'contracts\\BiatecClammPool.algo.ts:1619', pc: [7328, 7329] },
        { teal: 7953, source: 'contracts\\BiatecClammPool.algo.ts:10', pc: [7330] },
        { teal: 7954, source: 'contracts\\BiatecClammPool.algo.ts:1619', pc: [7331] },
        { teal: 7955, source: 'contracts\\BiatecClammPool.algo.ts:1619', pc: [7332, 7333] },
        { teal: 7956, source: 'contracts\\BiatecClammPool.algo.ts:1619', pc: [7334] },
        { teal: 7957, source: 'contracts\\BiatecClammPool.algo.ts:1619', pc: [7335, 7336] },
        { teal: 7961, source: 'contracts\\BiatecClammPool.algo.ts:1620', pc: [7337, 7338] },
        { teal: 7965, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7339, 7340] },
        { teal: 7968, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7341, 7342] },
        { teal: 7969, source: 'contracts\\BiatecClammPool.algo.ts:1572', pc: [7343] },
        { teal: 7974, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7344, 7345] },
        { teal: 7977, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7346, 7347, 7348] },
        { teal: 7978, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7349] },
        { teal: 7979, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7350] },
        { teal: 7980, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7351] },
        { teal: 7981, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7352] },
        {
          teal: 7984,
          source: 'contracts\\BiatecClammPool.algo.ts:1632',
          errorMessage: 'argument 0 (liqudity) for calculateAssetAWithdrawOnLpDeposit must be a uint256',
          pc: [7353],
        },
        { teal: 7987, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7354, 7355, 7356] },
        { teal: 7988, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7357] },
        { teal: 7989, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7358] },
        { teal: 7990, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7359] },
        { teal: 7991, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7360] },
        {
          teal: 7994,
          source: 'contracts\\BiatecClammPool.algo.ts:1632',
          errorMessage: 'argument 1 (assetABalance) for calculateAssetAWithdrawOnLpDeposit must be a uint256',
          pc: [7361],
        },
        { teal: 7997, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7362, 7363, 7364] },
        { teal: 7998, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7365] },
        { teal: 7999, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7366] },
        { teal: 8000, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7367] },
        { teal: 8001, source: 'contracts\\BiatecClammPool.algo.ts:1632', pc: [7368] },
        {
          teal: 8004,
          source: 'contracts\\BiatecClammPool.algo.ts:1632',
          errorMessage: 'argument 2 (inAmount) for calculateAssetAWithdrawOnLpDeposit must be a uint256',
          pc: [7369],
        },
        { teal: 8007, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7370, 7371, 7372] },
        { teal: 8008, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7373] },
        { teal: 8009, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7374] },
        { teal: 8010, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7375] },
        { teal: 8011, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7376] },
        {
          teal: 8014,
          source: 'contracts\\BiatecClammPool.algo.ts:1631',
          errorMessage: 'calculateAssetAWithdrawOnLpDeposit return value overflowed 256 bits',
          pc: [7377],
        },
        { teal: 8015, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7378] },
        { teal: 8016, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7379] },
        { teal: 8017, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7380] },
        { teal: 8018, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7381] },
        { teal: 8019, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7382] },
        { teal: 8020, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7383] },
        { teal: 8021, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7384] },
        { teal: 8022, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7385] },
        { teal: 8023, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7386] },
        { teal: 8024, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7387] },
        { teal: 8025, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7388] },
        { teal: 8026, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7389] },
        { teal: 8027, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7390] },
        { teal: 8038, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7391, 7392, 7393] },
        { teal: 8041, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7394] },
        { teal: 8045, source: 'contracts\\BiatecClammPool.algo.ts:1636', pc: [7395, 7396] },
        { teal: 8046, source: 'contracts\\BiatecClammPool.algo.ts:1636', pc: [7397, 7398] },
        { teal: 8047, source: 'contracts\\BiatecClammPool.algo.ts:1636', pc: [7399] },
        { teal: 8048, source: 'contracts\\BiatecClammPool.algo.ts:1636', pc: [7400, 7401] },
        { teal: 8049, source: 'contracts\\BiatecClammPool.algo.ts:1636', pc: [7402] },
        { teal: 8050, source: 'contracts\\BiatecClammPool.algo.ts:1636', pc: [7403, 7404] },
        { teal: 8054, source: 'contracts\\BiatecClammPool.algo.ts:1637', pc: [7405, 7406] },
        { teal: 8057, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7407, 7408] },
        { teal: 8058, source: 'contracts\\BiatecClammPool.algo.ts:1631', pc: [7409] },
        { teal: 8063, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7410, 7411] },
        { teal: 8066, source: 'contracts\\BiatecClammPool.algo.ts:1657', pc: [7412, 7413, 7414] },
        { teal: 8067, source: 'contracts\\BiatecClammPool.algo.ts:1657', pc: [7415] },
        { teal: 8068, source: 'contracts\\BiatecClammPool.algo.ts:1657', pc: [7416] },
        { teal: 8069, source: 'contracts\\BiatecClammPool.algo.ts:1657', pc: [7417] },
        { teal: 8070, source: 'contracts\\BiatecClammPool.algo.ts:1657', pc: [7418] },
        {
          teal: 8073,
          source: 'contracts\\BiatecClammPool.algo.ts:1657',
          errorMessage: 'argument 0 (assetBBalance) for calculateAssetBDepositOnAssetADeposit must be a uint256',
          pc: [7419],
        },
        { teal: 8076, source: 'contracts\\BiatecClammPool.algo.ts:1656', pc: [7420, 7421, 7422] },
        { teal: 8077, source: 'contracts\\BiatecClammPool.algo.ts:1656', pc: [7423] },
        { teal: 8078, source: 'contracts\\BiatecClammPool.algo.ts:1656', pc: [7424] },
        { teal: 8079, source: 'contracts\\BiatecClammPool.algo.ts:1656', pc: [7425] },
        { teal: 8080, source: 'contracts\\BiatecClammPool.algo.ts:1656', pc: [7426] },
        {
          teal: 8083,
          source: 'contracts\\BiatecClammPool.algo.ts:1656',
          errorMessage: 'argument 1 (assetABalance) for calculateAssetBDepositOnAssetADeposit must be a uint256',
          pc: [7427],
        },
        { teal: 8086, source: 'contracts\\BiatecClammPool.algo.ts:1655', pc: [7428, 7429, 7430] },
        { teal: 8087, source: 'contracts\\BiatecClammPool.algo.ts:1655', pc: [7431] },
        { teal: 8088, source: 'contracts\\BiatecClammPool.algo.ts:1655', pc: [7432] },
        { teal: 8089, source: 'contracts\\BiatecClammPool.algo.ts:1655', pc: [7433] },
        { teal: 8090, source: 'contracts\\BiatecClammPool.algo.ts:1655', pc: [7434] },
        {
          teal: 8093,
          source: 'contracts\\BiatecClammPool.algo.ts:1655',
          errorMessage: 'argument 2 (inAmountB) for calculateAssetBDepositOnAssetADeposit must be a uint256',
          pc: [7435],
        },
        { teal: 8096, source: 'contracts\\BiatecClammPool.algo.ts:1654', pc: [7436, 7437, 7438] },
        { teal: 8097, source: 'contracts\\BiatecClammPool.algo.ts:1654', pc: [7439] },
        { teal: 8098, source: 'contracts\\BiatecClammPool.algo.ts:1654', pc: [7440] },
        { teal: 8099, source: 'contracts\\BiatecClammPool.algo.ts:1654', pc: [7441] },
        { teal: 8100, source: 'contracts\\BiatecClammPool.algo.ts:1654', pc: [7442] },
        {
          teal: 8103,
          source: 'contracts\\BiatecClammPool.algo.ts:1654',
          errorMessage: 'argument 3 (inAmountA) for calculateAssetBDepositOnAssetADeposit must be a uint256',
          pc: [7443],
        },
        { teal: 8106, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7444, 7445, 7446] },
        { teal: 8107, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7447] },
        { teal: 8108, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7448] },
        { teal: 8109, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7449] },
        { teal: 8110, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7450] },
        {
          teal: 8113,
          source: 'contracts\\BiatecClammPool.algo.ts:1652',
          errorMessage: 'calculateAssetBDepositOnAssetADeposit return value overflowed 256 bits',
          pc: [7451],
        },
        { teal: 8114, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7452] },
        { teal: 8115, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7453] },
        { teal: 8116, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7454] },
        { teal: 8117, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7455] },
        { teal: 8118, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7456] },
        { teal: 8119, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7457] },
        { teal: 8120, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7458] },
        { teal: 8121, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7459] },
        { teal: 8122, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7460] },
        { teal: 8123, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7461] },
        { teal: 8124, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7462] },
        { teal: 8125, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7463] },
        { teal: 8126, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7464] },
        { teal: 8141, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7465, 7466, 7467] },
        { teal: 8146, source: 'contracts\\BiatecClammPool.algo.ts:1659', pc: [7468, 7469] },
        { teal: 8147, source: 'contracts\\BiatecClammPool.algo.ts:1659', pc: [7470, 7471] },
        { teal: 8148, source: 'contracts\\BiatecClammPool.algo.ts:1659', pc: [7472] },
        { teal: 8149, source: 'contracts\\BiatecClammPool.algo.ts:1659', pc: [7473, 7474, 7475] },
        { teal: 8154, source: 'contracts\\BiatecClammPool.algo.ts:1660', pc: [7476, 7477] },
        { teal: 8155, source: 'contracts\\BiatecClammPool.algo.ts:1660', pc: [7478, 7479] },
        { teal: 8156, source: 'contracts\\BiatecClammPool.algo.ts:1660', pc: [7480] },
        { teal: 8157, source: 'contracts\\BiatecClammPool.algo.ts:1660', pc: [7481, 7482] },
        { teal: 8158, source: 'contracts\\BiatecClammPool.algo.ts:1660', pc: [7483] },
        { teal: 8159, source: 'contracts\\BiatecClammPool.algo.ts:1660', pc: [7484] },
        { teal: 8164, source: 'contracts\\BiatecClammPool.algo.ts:1663', pc: [7485, 7486] },
        { teal: 8165, source: 'contracts\\BiatecClammPool.algo.ts:1652', pc: [7487] },
        { teal: 8170, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7488, 7489] },
        { teal: 8173, source: 'contracts\\BiatecClammPool.algo.ts:1683', pc: [7490, 7491, 7492] },
        { teal: 8174, source: 'contracts\\BiatecClammPool.algo.ts:1683', pc: [7493] },
        { teal: 8175, source: 'contracts\\BiatecClammPool.algo.ts:1683', pc: [7494] },
        { teal: 8176, source: 'contracts\\BiatecClammPool.algo.ts:1683', pc: [7495] },
        { teal: 8177, source: 'contracts\\BiatecClammPool.algo.ts:1683', pc: [7496] },
        {
          teal: 8180,
          source: 'contracts\\BiatecClammPool.algo.ts:1683',
          errorMessage: 'argument 0 (assetBBalance) for calculateAssetADepositOnAssetBDeposit must be a uint256',
          pc: [7497],
        },
        { teal: 8183, source: 'contracts\\BiatecClammPool.algo.ts:1682', pc: [7498, 7499, 7500] },
        { teal: 8184, source: 'contracts\\BiatecClammPool.algo.ts:1682', pc: [7501] },
        { teal: 8185, source: 'contracts\\BiatecClammPool.algo.ts:1682', pc: [7502] },
        { teal: 8186, source: 'contracts\\BiatecClammPool.algo.ts:1682', pc: [7503] },
        { teal: 8187, source: 'contracts\\BiatecClammPool.algo.ts:1682', pc: [7504] },
        {
          teal: 8190,
          source: 'contracts\\BiatecClammPool.algo.ts:1682',
          errorMessage: 'argument 1 (assetABalance) for calculateAssetADepositOnAssetBDeposit must be a uint256',
          pc: [7505],
        },
        { teal: 8193, source: 'contracts\\BiatecClammPool.algo.ts:1681', pc: [7506, 7507, 7508] },
        { teal: 8194, source: 'contracts\\BiatecClammPool.algo.ts:1681', pc: [7509] },
        { teal: 8195, source: 'contracts\\BiatecClammPool.algo.ts:1681', pc: [7510] },
        { teal: 8196, source: 'contracts\\BiatecClammPool.algo.ts:1681', pc: [7511] },
        { teal: 8197, source: 'contracts\\BiatecClammPool.algo.ts:1681', pc: [7512] },
        {
          teal: 8200,
          source: 'contracts\\BiatecClammPool.algo.ts:1681',
          errorMessage: 'argument 2 (inAmountB) for calculateAssetADepositOnAssetBDeposit must be a uint256',
          pc: [7513],
        },
        { teal: 8203, source: 'contracts\\BiatecClammPool.algo.ts:1680', pc: [7514, 7515, 7516] },
        { teal: 8204, source: 'contracts\\BiatecClammPool.algo.ts:1680', pc: [7517] },
        { teal: 8205, source: 'contracts\\BiatecClammPool.algo.ts:1680', pc: [7518] },
        { teal: 8206, source: 'contracts\\BiatecClammPool.algo.ts:1680', pc: [7519] },
        { teal: 8207, source: 'contracts\\BiatecClammPool.algo.ts:1680', pc: [7520] },
        {
          teal: 8210,
          source: 'contracts\\BiatecClammPool.algo.ts:1680',
          errorMessage: 'argument 3 (inAmountA) for calculateAssetADepositOnAssetBDeposit must be a uint256',
          pc: [7521],
        },
        { teal: 8213, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7522, 7523, 7524] },
        { teal: 8214, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7525] },
        { teal: 8215, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7526] },
        { teal: 8216, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7527] },
        { teal: 8217, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7528] },
        {
          teal: 8220,
          source: 'contracts\\BiatecClammPool.algo.ts:1678',
          errorMessage: 'calculateAssetADepositOnAssetBDeposit return value overflowed 256 bits',
          pc: [7529],
        },
        { teal: 8221, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7530] },
        { teal: 8222, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7531] },
        { teal: 8223, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7532] },
        { teal: 8224, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7533] },
        { teal: 8225, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7534] },
        { teal: 8226, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7535] },
        { teal: 8227, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7536] },
        { teal: 8228, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7537] },
        { teal: 8229, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7538] },
        { teal: 8230, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7539] },
        { teal: 8231, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7540] },
        { teal: 8232, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7541] },
        { teal: 8233, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7542] },
        { teal: 8248, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7543, 7544, 7545] },
        { teal: 8253, source: 'contracts\\BiatecClammPool.algo.ts:1685', pc: [7546, 7547] },
        { teal: 8254, source: 'contracts\\BiatecClammPool.algo.ts:1685', pc: [7548, 7549] },
        { teal: 8255, source: 'contracts\\BiatecClammPool.algo.ts:1685', pc: [7550] },
        { teal: 8256, source: 'contracts\\BiatecClammPool.algo.ts:1685', pc: [7551, 7552, 7553] },
        { teal: 8261, source: 'contracts\\BiatecClammPool.algo.ts:1686', pc: [7554, 7555] },
        { teal: 8262, source: 'contracts\\BiatecClammPool.algo.ts:1686', pc: [7556, 7557] },
        { teal: 8263, source: 'contracts\\BiatecClammPool.algo.ts:1686', pc: [7558] },
        { teal: 8264, source: 'contracts\\BiatecClammPool.algo.ts:1686', pc: [7559, 7560] },
        { teal: 8265, source: 'contracts\\BiatecClammPool.algo.ts:1686', pc: [7561] },
        { teal: 8266, source: 'contracts\\BiatecClammPool.algo.ts:1686', pc: [7562] },
        { teal: 8271, source: 'contracts\\BiatecClammPool.algo.ts:1689', pc: [7563, 7564] },
        { teal: 8272, source: 'contracts\\BiatecClammPool.algo.ts:1678', pc: [7565] },
        { teal: 8277, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7566, 7567] },
        { teal: 8280, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7568, 7569, 7570] },
        { teal: 8281, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7571] },
        { teal: 8284, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7572, 7573, 7574] },
        { teal: 8285, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7575] },
        { teal: 8288, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7576, 7577, 7578] },
        { teal: 8289, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7579] },
        { teal: 8292, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7580, 7581, 7582] },
        { teal: 8293, source: 'contracts\\BiatecClammPool.algo.ts:1693', pc: [7583] },
        { teal: 8296, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7584, 7585, 7586] },
        { teal: 8297, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7587] },
        { teal: 8298, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7588] },
        { teal: 8299, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7589] },
        { teal: 8300, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7590] },
        { teal: 8304, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7591, 7592, 7593] },
        { teal: 8307, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7594] },
        { teal: 8308, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7595, 7596] },
        { teal: 8315, source: 'contracts\\BiatecClammPool.algo.ts:1695', pc: [7597, 7598] },
        { teal: 8316, source: 'contracts\\BiatecClammPool.algo.ts:1695', pc: [7599, 7600] },
        { teal: 8317, source: 'contracts\\BiatecClammPool.algo.ts:1695', pc: [7601] },
        { teal: 8318, source: 'contracts\\BiatecClammPool.algo.ts:1695', pc: [7602] },
        { teal: 8321, source: 'contracts\\BiatecClammPool.algo.ts:1694', errorMessage: 'E_CONFIG', pc: [7603] },
        { teal: 8325, source: 'contracts\\BiatecClammPool.algo.ts:1698', pc: [7604, 7605] },
        { teal: 8326, source: 'contracts\\BiatecClammPool.algo.ts:1698', pc: [7606, 7607] },
        { teal: 8327, source: 'contracts\\BiatecClammPool.algo.ts:1698', pc: [7608] },
        { teal: 8328, source: 'contracts\\BiatecClammPool.algo.ts:1698', pc: [7609] },
        { teal: 8329, source: 'contracts\\BiatecClammPool.algo.ts:1698', pc: [7610] },
        { teal: 8333, source: 'contracts\\BiatecClammPool.algo.ts:1699', pc: [7611, 7612] },
        { teal: 8334, source: 'contracts\\BiatecClammPool.algo.ts:1699', pc: [7613, 7614] },
        { teal: 8335, source: 'contracts\\BiatecClammPool.algo.ts:1699', pc: [7615] },
        { teal: 8336, source: 'contracts\\BiatecClammPool.algo.ts:1699', pc: [7616] },
        { teal: 8337, source: 'contracts\\BiatecClammPool.algo.ts:1699', pc: [7617] },
        { teal: 8341, source: 'contracts\\BiatecClammPool.algo.ts:1700', pc: [7618, 7619] },
        { teal: 8342, source: 'contracts\\BiatecClammPool.algo.ts:1700', pc: [7620] },
        { teal: 8343, source: 'contracts\\BiatecClammPool.algo.ts:1700', pc: [7621, 7622] },
        { teal: 8344, source: 'contracts\\BiatecClammPool.algo.ts:1700', pc: [7623] },
        { teal: 8347, source: 'contracts\\BiatecClammPool.algo.ts:1700', errorMessage: 'E_LP', pc: [7624] },
        { teal: 8351, source: 'contracts\\BiatecClammPool.algo.ts:1701', pc: [7625, 7626] },
        { teal: 8352, source: 'contracts\\BiatecClammPool.algo.ts:1701', pc: [7627] },
        { teal: 8353, source: 'contracts\\BiatecClammPool.algo.ts:1701', pc: [7628, 7629] },
        { teal: 8354, source: 'contracts\\BiatecClammPool.algo.ts:1701', pc: [7630] },
        {
          teal: 8357,
          source: 'contracts\\BiatecClammPool.algo.ts:1701',
          errorMessage: "global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')",
          pc: [7631],
        },
        { teal: 8358, source: 'contracts\\BiatecClammPool.algo.ts:1701', pc: [7632, 7633] },
        { teal: 8365, source: 'contracts\\BiatecClammPool.algo.ts:1703', pc: [7634, 7635] },
        { teal: 8366, source: 'contracts\\BiatecClammPool.algo.ts:1703', pc: [7636] },
        { teal: 8367, source: 'contracts\\BiatecClammPool.algo.ts:1703', pc: [7637] },
        { teal: 8368, source: 'contracts\\BiatecClammPool.algo.ts:1703', pc: [7638, 7639, 7640] },
        { teal: 8369, source: 'contracts\\BiatecClammPool.algo.ts:1704', pc: [7641, 7642] },
        { teal: 8370, source: 'contracts\\BiatecClammPool.algo.ts:1704', pc: [7643, 7644] },
        { teal: 8371, source: 'contracts\\BiatecClammPool.algo.ts:1704', pc: [7645] },
        { teal: 8372, source: 'contracts\\BiatecClammPool.algo.ts:1703', pc: [7646, 7647, 7648] },
        { teal: 8375, source: 'contracts\\BiatecClammPool.algo.ts:1705', pc: [7649, 7650] },
        { teal: 8376, source: 'contracts\\BiatecClammPool.algo.ts:1705', pc: [7651, 7652] },
        { teal: 8377, source: 'contracts\\BiatecClammPool.algo.ts:1705', pc: [7653, 7654] },
        { teal: 8378, source: 'contracts\\BiatecClammPool.algo.ts:1705', pc: [7655] },
        { teal: 8381, source: 'contracts\\BiatecClammPool.algo.ts:1702', pc: [7656, 7657] },
        { teal: 8385, source: 'contracts\\BiatecClammPool.algo.ts:1706', pc: [7658, 7659] },
        { teal: 8386, source: 'contracts\\BiatecClammPool.algo.ts:1706', pc: [7660, 7661] },
        { teal: 8387, source: 'contracts\\BiatecClammPool.algo.ts:1706', pc: [7662, 7663] },
        { teal: 8388, source: 'contracts\\BiatecClammPool.algo.ts:1706', pc: [7664] },
        { teal: 8389, source: 'contracts\\BiatecClammPool.algo.ts:1706', pc: [7665, 7666] },
        { teal: 8412, source: 'contracts\\BiatecClammPool.algo.ts:1724', pc: [7667, 7668] },
        { teal: 8413, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7669] },
        { teal: 8414, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7670] },
        { teal: 8415, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7671] },
        { teal: 8416, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7672] },
        { teal: 8417, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7673, 7674] },
        { teal: 8418, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7675] },
        {
          teal: 8421,
          source: 'contracts\\BiatecClammPool.algo.ts:1711',
          errorMessage: 'this.assetABalance.value as uint64 overflowed 64 bits',
          pc: [7676],
        },
        { teal: 8422, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7677, 7678, 7679] },
        { teal: 8423, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7680] },
        { teal: 8424, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7681] },
        { teal: 8425, source: 'contracts\\BiatecClammPool.algo.ts:1711', pc: [7682] },
        { teal: 8426, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7683, 7684] },
        { teal: 8427, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7685] },
        { teal: 8428, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7686] },
        { teal: 8429, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7687] },
        { teal: 8430, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7688, 7689] },
        { teal: 8431, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7690] },
        {
          teal: 8434,
          source: 'contracts\\BiatecClammPool.algo.ts:1712',
          errorMessage: 'this.assetBBalance.value as uint64 overflowed 64 bits',
          pc: [7691],
        },
        { teal: 8435, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7692, 7693, 7694] },
        { teal: 8436, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7695] },
        { teal: 8437, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7696] },
        { teal: 8438, source: 'contracts\\BiatecClammPool.algo.ts:1712', pc: [7697] },
        { teal: 8439, source: 'contracts\\BiatecClammPool.algo.ts:1713', pc: [7698, 7699] },
        { teal: 8440, source: 'contracts\\BiatecClammPool.algo.ts:1713', pc: [7700] },
        { teal: 8441, source: 'contracts\\BiatecClammPool.algo.ts:1713', pc: [7701] },
        { teal: 8442, source: 'contracts\\BiatecClammPool.algo.ts:1714', pc: [7702, 7703] },
        { teal: 8443, source: 'contracts\\BiatecClammPool.algo.ts:1714', pc: [7704] },
        { teal: 8444, source: 'contracts\\BiatecClammPool.algo.ts:1714', pc: [7705] },
        { teal: 8445, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7706, 7707] },
        { teal: 8446, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7708] },
        { teal: 8447, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7709] },
        { teal: 8448, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7710] },
        { teal: 8449, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7711, 7712] },
        { teal: 8450, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7713] },
        {
          teal: 8453,
          source: 'contracts\\BiatecClammPool.algo.ts:1722',
          errorMessage: 'this.priceMinSqrt.value as uint64 overflowed 64 bits',
          pc: [7714],
        },
        { teal: 8454, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7715, 7716, 7717] },
        { teal: 8455, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7718] },
        { teal: 8456, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7719] },
        { teal: 8457, source: 'contracts\\BiatecClammPool.algo.ts:1722', pc: [7720] },
        { teal: 8458, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7721, 7722] },
        { teal: 8459, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7723] },
        { teal: 8460, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7724] },
        { teal: 8461, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7725] },
        { teal: 8462, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7726, 7727] },
        { teal: 8463, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7728] },
        {
          teal: 8466,
          source: 'contracts\\BiatecClammPool.algo.ts:1721',
          errorMessage: 'this.priceMaxSqrt.value as uint64 overflowed 64 bits',
          pc: [7729],
        },
        { teal: 8467, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7730, 7731, 7732] },
        { teal: 8468, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7733] },
        { teal: 8469, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7734] },
        { teal: 8470, source: 'contracts\\BiatecClammPool.algo.ts:1721', pc: [7735] },
        { teal: 8471, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7736, 7737] },
        { teal: 8472, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7738] },
        { teal: 8473, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7739] },
        { teal: 8474, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7740] },
        { teal: 8475, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7741, 7742] },
        { teal: 8476, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7743] },
        {
          teal: 8479,
          source: 'contracts\\BiatecClammPool.algo.ts:1717',
          errorMessage: 'this.Liqudity.value as uint64 overflowed 64 bits',
          pc: [7744],
        },
        { teal: 8480, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7745, 7746, 7747] },
        { teal: 8481, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7748] },
        { teal: 8482, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7749] },
        { teal: 8483, source: 'contracts\\BiatecClammPool.algo.ts:1717', pc: [7750] },
        { teal: 8484, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7751, 7752] },
        { teal: 8485, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7753, 7754] },
        { teal: 8486, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7755, 7756, 7757] },
        { teal: 8487, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7758] },
        { teal: 8488, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7759] },
        { teal: 8489, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7760, 7761] },
        { teal: 8490, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7762] },
        {
          teal: 8493,
          source: 'contracts\\BiatecClammPool.algo.ts:1723',
          errorMessage: 'this.calculateDistributedLiquidity(assetLp, <uint256>0) as uint64 overflowed 64 bits',
          pc: [7763],
        },
        { teal: 8494, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7764, 7765] },
        { teal: 8495, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7766] },
        { teal: 8496, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7767] },
        { teal: 8497, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7768] },
        { teal: 8498, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7769] },
        { teal: 8499, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7770, 7771] },
        { teal: 8500, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7772] },
        { teal: 8501, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7773] },
        { teal: 8502, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7774] },
        { teal: 8503, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7775] },
        { teal: 8504, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7776] },
        { teal: 8505, source: 'contracts\\BiatecClammPool.algo.ts:1723', pc: [7777] },
        { teal: 8506, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7778, 7779] },
        { teal: 8507, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7780] },
        { teal: 8508, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7781] },
        { teal: 8509, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7782] },
        { teal: 8510, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7783, 7784] },
        { teal: 8511, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7785] },
        {
          teal: 8514,
          source: 'contracts\\BiatecClammPool.algo.ts:1719',
          errorMessage: 'this.LiqudityUsersFromFees.value as uint64 overflowed 64 bits',
          pc: [7786],
        },
        { teal: 8515, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7787, 7788, 7789] },
        { teal: 8516, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7790] },
        { teal: 8517, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7791] },
        { teal: 8518, source: 'contracts\\BiatecClammPool.algo.ts:1719', pc: [7792] },
        { teal: 8519, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7793, 7794] },
        { teal: 8520, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7795] },
        { teal: 8521, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7796] },
        { teal: 8522, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7797] },
        { teal: 8523, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7798, 7799] },
        { teal: 8524, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7800] },
        {
          teal: 8527,
          source: 'contracts\\BiatecClammPool.algo.ts:1718',
          errorMessage: 'this.LiqudityBiatecFromFees.value as uint64 overflowed 64 bits',
          pc: [7801],
        },
        { teal: 8528, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7802, 7803, 7804] },
        { teal: 8529, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7805] },
        { teal: 8530, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7806] },
        { teal: 8531, source: 'contracts\\BiatecClammPool.algo.ts:1718', pc: [7807] },
        { teal: 8532, source: 'contracts\\BiatecClammPool.algo.ts:1708', pc: [7808, 7809] },
        { teal: 8533, source: 'contracts\\BiatecClammPool.algo.ts:1708', pc: [7810] },
        { teal: 8534, source: 'contracts\\BiatecClammPool.algo.ts:1708', pc: [7811] },
        { teal: 8535, source: 'contracts\\BiatecClammPool.algo.ts:1708', pc: [7812] },
        { teal: 8536, source: 'contracts\\BiatecClammPool.algo.ts:1709', pc: [7813, 7814] },
        { teal: 8537, source: 'contracts\\BiatecClammPool.algo.ts:1709', pc: [7815] },
        { teal: 8538, source: 'contracts\\BiatecClammPool.algo.ts:1709', pc: [7816] },
        { teal: 8539, source: 'contracts\\BiatecClammPool.algo.ts:1709', pc: [7817] },
        { teal: 8540, source: 'contracts\\BiatecClammPool.algo.ts:1710', pc: [7818, 7819] },
        { teal: 8541, source: 'contracts\\BiatecClammPool.algo.ts:1710', pc: [7820] },
        { teal: 8542, source: 'contracts\\BiatecClammPool.algo.ts:1710', pc: [7821] },
        { teal: 8543, source: 'contracts\\BiatecClammPool.algo.ts:1710', pc: [7822] },
        { teal: 8544, source: 'contracts\\BiatecClammPool.algo.ts:1720', pc: [7823, 7824] },
        { teal: 8545, source: 'contracts\\BiatecClammPool.algo.ts:1720', pc: [7825] },
        { teal: 8546, source: 'contracts\\BiatecClammPool.algo.ts:1720', pc: [7826] },
        { teal: 8547, source: 'contracts\\BiatecClammPool.algo.ts:1720', pc: [7827] },
        { teal: 8548, source: 'contracts\\BiatecClammPool.algo.ts:1715', pc: [7828, 7829] },
        { teal: 8549, source: 'contracts\\BiatecClammPool.algo.ts:1715', pc: [7830] },
        { teal: 8550, source: 'contracts\\BiatecClammPool.algo.ts:1715', pc: [7831] },
        { teal: 8551, source: 'contracts\\BiatecClammPool.algo.ts:1715', pc: [7832] },
        { teal: 8552, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7833, 7834] },
        { teal: 8553, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7835] },
        { teal: 8554, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7836] },
        { teal: 8555, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7837, 7838] },
        { teal: 8556, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7839] },
        {
          teal: 8559,
          source: 'contracts\\BiatecClammPool.algo.ts:1716',
          errorMessage: 'biatecFee as uint64 overflowed 64 bits',
          pc: [7840],
        },
        { teal: 8560, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7841, 7842, 7843] },
        { teal: 8561, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7844] },
        { teal: 8562, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7845] },
        { teal: 8563, source: 'contracts\\BiatecClammPool.algo.ts:1716', pc: [7846] },
        { teal: 8564, source: 'contracts\\BiatecClammPool.algo.ts:1725', pc: [7847, 7848] },
        { teal: 8565, source: 'contracts\\BiatecClammPool.algo.ts:1725', pc: [7849] },
        { teal: 8566, source: 'contracts\\BiatecClammPool.algo.ts:1725', pc: [7850] },
        { teal: 8567, source: 'contracts\\BiatecClammPool.algo.ts:1725', pc: [7851] },
        { teal: 8570, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7852, 7853] },
        { teal: 8573, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7854, 7855] },
        { teal: 8574, source: 'contracts\\BiatecClammPool.algo.ts:1692', pc: [7856] },
        { teal: 8577, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7857, 7858, 7859, 7860, 7861, 7862] },
        { teal: 8578, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7863, 7864, 7865] },
        { teal: 8579, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7866, 7867, 7868, 7869] },
        {
          teal: 8582,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          errorMessage: 'this contract does not implement the given ABI method for create NoOp',
          pc: [7870],
        },
        { teal: 8585, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7871, 7872, 7873, 7874, 7875, 7876] },
        { teal: 8586, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7877, 7878, 7879, 7880, 7881, 7882] },
        { teal: 8587, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7883, 7884, 7885, 7886, 7887, 7888] },
        { teal: 8588, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7889, 7890, 7891, 7892, 7893, 7894] },
        { teal: 8589, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7895, 7896, 7897, 7898, 7899, 7900] },
        { teal: 8590, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7901, 7902, 7903, 7904, 7905, 7906] },
        { teal: 8591, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7907, 7908, 7909, 7910, 7911, 7912] },
        { teal: 8592, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7913, 7914, 7915, 7916, 7917, 7918] },
        { teal: 8593, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7919, 7920, 7921, 7922, 7923, 7924] },
        { teal: 8594, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7925, 7926, 7927, 7928, 7929, 7930] },
        { teal: 8595, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7931, 7932, 7933, 7934, 7935, 7936] },
        { teal: 8596, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7937, 7938, 7939, 7940, 7941, 7942] },
        { teal: 8597, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7943, 7944, 7945, 7946, 7947, 7948] },
        { teal: 8598, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7949, 7950, 7951, 7952, 7953, 7954] },
        { teal: 8599, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7955, 7956, 7957, 7958, 7959, 7960] },
        { teal: 8600, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7961, 7962, 7963, 7964, 7965, 7966] },
        { teal: 8601, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7967, 7968, 7969, 7970, 7971, 7972] },
        { teal: 8602, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7973, 7974, 7975, 7976, 7977, 7978] },
        { teal: 8603, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7979, 7980, 7981, 7982, 7983, 7984] },
        { teal: 8604, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7985, 7986, 7987, 7988, 7989, 7990] },
        { teal: 8605, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7991, 7992, 7993, 7994, 7995, 7996] },
        { teal: 8606, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [7997, 7998, 7999, 8000, 8001, 8002] },
        { teal: 8607, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [8003, 8004, 8005, 8006, 8007, 8008] },
        { teal: 8608, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [8009, 8010, 8011] },
        {
          teal: 8609,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          pc: [
            8012, 8013, 8014, 8015, 8016, 8017, 8018, 8019, 8020, 8021, 8022, 8023, 8024, 8025, 8026, 8027, 8028, 8029,
            8030, 8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040, 8041, 8042, 8043, 8044, 8045, 8046, 8047,
            8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058, 8059,
          ],
        },
        {
          teal: 8612,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          errorMessage: 'this contract does not implement the given ABI method for call NoOp',
          pc: [8060],
        },
        { teal: 8615, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [8061, 8062, 8063, 8064, 8065, 8066] },
        { teal: 8616, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [8067, 8068, 8069] },
        { teal: 8617, source: 'contracts\\BiatecClammPool.algo.ts:36', pc: [8070, 8071, 8072, 8073] },
        {
          teal: 8620,
          source: 'contracts\\BiatecClammPool.algo.ts:36',
          errorMessage: 'this contract does not implement the given ABI method for call UpdateApplication',
          pc: [8074],
        },
      ],
      pcOffsetMethod: 'none',
    },
    clear: { sourceInfo: [], pcOffsetMethod: 'none' },
  },
  source: {
    approval:
      '',
    clear: 'I3ByYWdtYSB2ZXJzaW9uIDEw',
  },
  byteCode: {
    approval:
      '',
    clear: 'Cg==',
  },
  compilerInfo: { compiler: 'algod', compilerVersion: { major: 4, minor: 1, patch: 2, commitHash: '088f89dd' } },
} as unknown as Arc56Contract;

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined;
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined;
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value;
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined;
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never;

// Type definitions for ARC-56 structs

export type AmmStatus = {
  scale: bigint;
  assetABalance: bigint;
  assetBBalance: bigint;
  realABalance: bigint;
  realBBalance: bigint;
  priceMinSqrt: bigint;
  priceMaxSqrt: bigint;
  currentLiqudity: bigint;
  releasedLiqudity: bigint;
  liqudityUsersFromFees: bigint;
  liqudityBiatecFromFees: bigint;
  assetA: bigint;
  assetB: bigint;
  poolToken: bigint;
  price: bigint;
  fee: bigint;
  biatecFee: bigint;
  verificationClass: bigint;
};

/**
 * Converts the ABI tuple representation of a AmmStatus to the struct representation
 */
export function AmmStatusFromTuple(
  abiTuple: [
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
  ]
) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AmmStatus, APP_SPEC.structs) as AmmStatus;
}

/**
 * The argument types for the BiatecClammPool contract
 */
export type BiatecClammPoolArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>;
    'updateApplication(uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number;
      newVersion: Uint8Array;
    };
    'getCurrentPrice()uint64': Record<string, never>;
    'getPriceDivider()uint64': Record<string, never>;
    'getLPTokenId()uint64': Record<string, never>;
    'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': {
      /**
       * Asset A ID must be lower then Asset B ID
       */
      assetA: bigint | number;
      /**
       * Asset B
       */
      assetB: bigint | number;
      /**
       * Biatec amm provider
       */
      appBiatecConfigProvider: bigint | number;
      /**
       * Pool provider
       */
      appBiatecPoolProvider: bigint | number;
      /**
       * Seed transaction so that smart contract can opt in to the assets
       */
      txSeed: AppMethodCallTransactionArgument;
      /**
       * Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%
       */
      fee: bigint | number;
      /**
       * Min price range. At this point all assets are in asset A.
       */
      priceMin: bigint | number;
      /**
       * Max price range. At this point all assets are in asset B.
       */
      priceMax: bigint | number;
      /**
       * Deployer can specify the current price for easier deployemnt.
       */
      currentPrice: bigint | number;
      /**
       * Minimum verification level from the biatec identity. Level 0 means no kyc.
       */
      verificationClass: bigint | number;
    };
    'bootstrapStep2()void': Record<string, never>;
    'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64': {
      /**
       * Configuration reference
       */
      appBiatecConfigProvider: bigint | number;
      /**
       * Identity service reference
       */
      appBiatecIdentityProvider: bigint | number;
      /**
       * Transfer of asset A to the LP pool
       */
      txAssetADeposit?: AppMethodCallTransactionArgument;
      /**
       * Transfer of asset B to the LP pool
       */
      txAssetBDeposit: AppMethodCallTransactionArgument;
      /**
       * Asset A
       */
      assetA: bigint | number;
      /**
       * Asset B
       */
      assetB: bigint | number;
      /**
       * Liquidity pool asset
       */
      assetLp: bigint | number;
    };
    'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256': {
      /**
       * Configuration reference
       */
      appBiatecConfigProvider: bigint | number;
      /**
       * Identity service reference
       */
      appBiatecIdentityProvider: bigint | number;
      /**
       * Transfer of the LP token
       */
      txLpXfer: AppMethodCallTransactionArgument;
      /**
       * Asset A
       */
      assetA: bigint | number;
      /**
       * Asset B
       */
      assetB: bigint | number;
      /**
       * LP pool asset
       */
      assetLp: bigint | number;
    };
    'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number;
      /**
       * Asset A
       */
      assetA: bigint | number;
      /**
       * Asset B
       */
      assetB: bigint | number;
      assetLp: bigint | number;
      /**
       * Amount to withdraw. If zero, removes all available lps from fees.
       */
      amount: bigint | number;
    };
    'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256': {
      appBiatecConfigProvider: bigint | number;
      appBiatecIdentityProvider: bigint | number;
      appBiatecPoolProvider: bigint | number;
      /**
       * Transfer of the token to be deposited to the pool. To the owner the other asset will be sent.
       */
      txSwap: AppMethodCallTransactionArgument;
      /**
       * Asset A
       */
      assetA: bigint | number;
      /**
       * Asset B
       */
      assetB: bigint | number;
      /**
       * If number greater then zero, the check is performed for the output of the other asset
       */
      minimumToReceive: bigint | number;
    };
    'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number;
      /**
       * Asset A
       */
      assetA: bigint | number;
      /**
       * Asset B
       */
      assetB: bigint | number;
      /**
       * Amount of asset A to be deposited to the liquidity. In base decimals (9)
       */
      amountA: bigint | number;
      /**
       * Amount of asset B to be deposited to the liquidity. In base decimals (9)
       */
      amountB: bigint | number;
    };
    'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number;
      /**
       * Asset A
       */
      assetA: bigint | number;
      /**
       * Asset B
       */
      assetB: bigint | number;
      /**
       * Amount of asset A to be deposited to the liquidity. In asset a decimals
       */
      amountA: bigint | number;
      /**
       * Amount of asset B to be deposited to the liquidity. In asset b decimals
       */
      amountB: bigint | number;
    };
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': {
      appBiatecConfigProvider: bigint | number;
      votePk: Uint8Array;
      selectionPk: Uint8Array;
      stateProofPk: Uint8Array;
      voteFirst: bigint | number;
      voteLast: bigint | number;
      voteKeyDilution: bigint | number;
    };
    'calculateDistributedLiquidity(uint64,uint256)uint256': {
      assetLp: bigint | number;
      currentDeposit: bigint | number;
    };
    'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256': {
      x: bigint | number;
      y: bigint | number;
      price: bigint | number;
    };
    'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A position balanced on the curve
       */
      x: bigint | number;
      /**
       * Asset B position balanced on the curve
       */
      y: bigint | number;
      /**
       * Minimum price variable in base scale decimals (pa)
       */
      priceMin: bigint | number;
      /**
       * Maximum price variable in base scale decimals (pb)
       */
      priceMax: bigint | number;
      /**
       * sqrt(priceMin) in base scale decimals Variable pas
       */
      priceMinSqrt: bigint | number;
      /**
       * sqrt(priceMax) in base scale decimals Variable pbs
       */
      priceMaxSqrt: bigint | number;
    };
    'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A position balanced on the curve
       */
      x: bigint | number;
      /**
       * Asset B position balanced on the curve
       */
      y: bigint | number;
      /**
       * sqrt(priceMin) in base scale decimals Variable pas
       */
      priceMinSqrt: bigint | number;
      /**
       * sqrt(priceMax) in base scale decimals Variable pbs
       */
      priceMaxSqrt: bigint | number;
      dSqrt: bigint | number;
    };
    'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * x
       */
      assetAQuantity: bigint | number;
      /**
       * y
       */
      assetBQuantity: bigint | number;
      /**
       * sqrt(priceMin)
       */
      priceMinSqrt: bigint | number;
      /**
       * sqrt(priceMax)
       */
      priceMaxSqrt: bigint | number;
      /**
       * Current pool liquidity - L variable
       */
      liquidity: bigint | number;
    };
    'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
       */
      inAmount: bigint | number;
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number;
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number;
      /**
       * sqrt(Min price). Variable pMinS, in base scale
       */
      priceMinSqrt: bigint | number;
      /**
       * sqrt(Max price). Variable pMaxS, in base scale
       */
      priceMaxSqrt: bigint | number;
      /**
       * sqrt(Max price). Variable L, in base scale
       */
      liqudity: bigint | number;
    };
    'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
       */
      inAmount: bigint | number;
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number;
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number;
      /**
       * sqrt(Min price). Variable pMinS, in base scale
       */
      priceMinSqrt: bigint | number;
      /**
       * sqrt(Max price). Variable pMaxS, in base scale
       */
      priceMaxSqrt: bigint | number;
      /**
       * sqrt(Max price). Variable L, in base scale
       */
      liqudity: bigint | number;
    };
    'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': {
      /**
       * LP Asset amount in Base decimal representation..
       */
      inAmount: bigint | number;
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number;
      /**
       * Current liqudity. Variable L, in base scale
       */
      liqudity: bigint | number;
    };
    'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A amount in Base decimal representation
       */
      inAmountA: bigint | number;
      /**
       * Asset B amount in Base decimal representation
       */
      inAmountB: bigint | number;
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number;
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number;
    };
    'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A amount in Base decimal representation
       */
      inAmountA: bigint | number;
      /**
       * Asset B amount in Base decimal representation
       */
      inAmountB: bigint | number;
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number;
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number;
    };
    'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      appBiatecConfigProvider: bigint | number;
      assetA: bigint | number;
      assetB: bigint | number;
      assetLp: bigint | number;
    };
  };
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': [];
    'updateApplication(uint64,byte[])void': [appBiatecConfigProvider: bigint | number, newVersion: Uint8Array];
    'getCurrentPrice()uint64': [];
    'getPriceDivider()uint64': [];
    'getLPTokenId()uint64': [];
    'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': [
      assetA: bigint | number,
      assetB: bigint | number,
      appBiatecConfigProvider: bigint | number,
      appBiatecPoolProvider: bigint | number,
      txSeed: AppMethodCallTransactionArgument,
      fee: bigint | number,
      priceMin: bigint | number,
      priceMax: bigint | number,
      currentPrice: bigint | number,
      verificationClass: bigint | number,
    ];
    'bootstrapStep2()void': [];
    'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64': [
      appBiatecConfigProvider: bigint | number,
      appBiatecIdentityProvider: bigint | number,
      txAssetADeposit: AppMethodCallTransactionArgument | undefined,
      txAssetBDeposit: AppMethodCallTransactionArgument,
      assetA: bigint | number,
      assetB: bigint | number,
      assetLp: bigint | number,
    ];
    'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256': [
      appBiatecConfigProvider: bigint | number,
      appBiatecIdentityProvider: bigint | number,
      txLpXfer: AppMethodCallTransactionArgument,
      assetA: bigint | number,
      assetB: bigint | number,
      assetLp: bigint | number,
    ];
    'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256': [
      appBiatecConfigProvider: bigint | number,
      assetA: bigint | number,
      assetB: bigint | number,
      assetLp: bigint | number,
      amount: bigint | number,
    ];
    'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256': [
      appBiatecConfigProvider: bigint | number,
      appBiatecIdentityProvider: bigint | number,
      appBiatecPoolProvider: bigint | number,
      txSwap: AppMethodCallTransactionArgument,
      assetA: bigint | number,
      assetB: bigint | number,
      minimumToReceive: bigint | number,
    ];
    'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256': [
      appBiatecConfigProvider: bigint | number,
      assetA: bigint | number,
      assetB: bigint | number,
      amountA: bigint | number,
      amountB: bigint | number,
    ];
    'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64': [
      appBiatecConfigProvider: bigint | number,
      assetA: bigint | number,
      assetB: bigint | number,
      amountA: bigint | number,
      amountB: bigint | number,
    ];
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': [
      appBiatecConfigProvider: bigint | number,
      votePk: Uint8Array,
      selectionPk: Uint8Array,
      stateProofPk: Uint8Array,
      voteFirst: bigint | number,
      voteLast: bigint | number,
      voteKeyDilution: bigint | number,
    ];
    'calculateDistributedLiquidity(uint64,uint256)uint256': [assetLp: bigint | number, currentDeposit: bigint | number];
    'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256': [
      x: bigint | number,
      y: bigint | number,
      price: bigint | number,
    ];
    'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256': [
      x: bigint | number,
      y: bigint | number,
      priceMin: bigint | number,
      priceMax: bigint | number,
      priceMinSqrt: bigint | number,
      priceMaxSqrt: bigint | number,
    ];
    'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256': [
      x: bigint | number,
      y: bigint | number,
      priceMinSqrt: bigint | number,
      priceMaxSqrt: bigint | number,
      dSqrt: bigint | number,
    ];
    'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256': [
      assetAQuantity: bigint | number,
      assetBQuantity: bigint | number,
      priceMinSqrt: bigint | number,
      priceMaxSqrt: bigint | number,
      liquidity: bigint | number,
    ];
    'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': [
      inAmount: bigint | number,
      assetABalance: bigint | number,
      assetBBalance: bigint | number,
      priceMinSqrt: bigint | number,
      priceMaxSqrt: bigint | number,
      liqudity: bigint | number,
    ];
    'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': [
      inAmount: bigint | number,
      assetABalance: bigint | number,
      assetBBalance: bigint | number,
      priceMinSqrt: bigint | number,
      priceMaxSqrt: bigint | number,
      liqudity: bigint | number,
    ];
    'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': [
      inAmount: bigint | number,
      assetABalance: bigint | number,
      liqudity: bigint | number,
    ];
    'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256': [
      inAmountA: bigint | number,
      inAmountB: bigint | number,
      assetABalance: bigint | number,
      assetBBalance: bigint | number,
    ];
    'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256': [
      inAmountA: bigint | number,
      inAmountB: bigint | number,
      assetABalance: bigint | number,
      assetBBalance: bigint | number,
    ];
    'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [
      appBiatecConfigProvider: bigint | number,
      assetA: bigint | number,
      assetB: bigint | number,
      assetLp: bigint | number,
    ];
  };
};

/**
 * The return type for each method
 */
export type BiatecClammPoolReturns = {
  'createApplication()void': void;
  'updateApplication(uint64,byte[])void': void;
  'getCurrentPrice()uint64': bigint;
  'getPriceDivider()uint64': bigint;
  'getLPTokenId()uint64': bigint;
  'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': bigint;
  'bootstrapStep2()void': void;
  'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64': bigint;
  'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256': bigint;
  'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256': bigint;
  'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256': bigint;
  'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256': bigint;
  'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64': bigint;
  'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void': void;
  'calculateDistributedLiquidity(uint64,uint256)uint256': bigint;
  'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256': bigint;
  'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256': bigint;
  'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256': bigint;
  'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256': bigint;
  'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': bigint;
  'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': bigint;
  'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': bigint;
  'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256': bigint;
  'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256': bigint;
  'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': AmmStatus;
};

/**
 * Defines the types of available calls and state of the BiatecClammPool smart contract.
 */
export type BiatecClammPoolTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    'createApplication()void' | 'createApplication',
    {
      argsObj: BiatecClammPoolArgs['obj']['createApplication()void'];
      argsTuple: BiatecClammPoolArgs['tuple']['createApplication()void'];
      returns: BiatecClammPoolReturns['createApplication()void'];
    }
  > &
    Record<
      'updateApplication(uint64,byte[])void' | 'updateApplication',
      {
        argsObj: BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'];
        argsTuple: BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void'];
        returns: BiatecClammPoolReturns['updateApplication(uint64,byte[])void'];
      }
    > &
    Record<
      'getCurrentPrice()uint64' | 'getCurrentPrice',
      {
        argsObj: BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'];
        argsTuple: BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64'];
        returns: BiatecClammPoolReturns['getCurrentPrice()uint64'];
      }
    > &
    Record<
      'getPriceDivider()uint64' | 'getPriceDivider',
      {
        argsObj: BiatecClammPoolArgs['obj']['getPriceDivider()uint64'];
        argsTuple: BiatecClammPoolArgs['tuple']['getPriceDivider()uint64'];
        returns: BiatecClammPoolReturns['getPriceDivider()uint64'];
      }
    > &
    Record<
      'getLPTokenId()uint64' | 'getLPTokenId',
      {
        argsObj: BiatecClammPoolArgs['obj']['getLPTokenId()uint64'];
        argsTuple: BiatecClammPoolArgs['tuple']['getLPTokenId()uint64'];
        returns: BiatecClammPoolReturns['getLPTokenId()uint64'];
      }
    > &
    Record<
      'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64' | 'bootstrap',
      {
        argsObj: BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'];
        argsTuple: BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'];
        /**
         * LP token ID
         */
        returns: BiatecClammPoolReturns['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'];
      }
    > &
    Record<
      'bootstrapStep2()void' | 'bootstrapStep2',
      {
        argsObj: BiatecClammPoolArgs['obj']['bootstrapStep2()void'];
        argsTuple: BiatecClammPoolArgs['tuple']['bootstrapStep2()void'];
        returns: BiatecClammPoolReturns['bootstrapStep2()void'];
      }
    > &
    Record<
      'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64' | 'addLiquidity',
      {
        argsObj: BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'];
        argsTuple: BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'];
        /**
         * LP Token quantity distributed
         */
        returns: BiatecClammPoolReturns['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'];
      }
    > &
    Record<
      'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256' | 'removeLiquidity',
      {
        argsObj: BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'];
        /**
         * LP position reduced
         */
        returns: BiatecClammPoolReturns['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'];
      }
    > &
    Record<
      'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256' | 'removeLiquidityAdmin',
      {
        argsObj: BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'];
        /**
         * LP position reduced
         */
        returns: BiatecClammPoolReturns['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'];
      }
    > &
    Record<
      'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256' | 'swap',
      {
        argsObj: BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'];
        returns: BiatecClammPoolReturns['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'];
      }
    > &
    Record<
      'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256' | 'distributeExcessAssets',
      {
        argsObj: BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'];
        returns: BiatecClammPoolReturns['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'];
      }
    > &
    Record<
      'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64' | 'withdrawExcessAssets',
      {
        argsObj: BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'];
        argsTuple: BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'];
        returns: BiatecClammPoolReturns['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'];
      }
    > &
    Record<
      'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration',
      {
        argsObj: BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'];
        argsTuple: BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'];
        returns: BiatecClammPoolReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'];
      }
    > &
    Record<
      'calculateDistributedLiquidity(uint64,uint256)uint256' | 'calculateDistributedLiquidity',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256'];
        returns: BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256'];
      }
    > &
    Record<
      'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256' | 'calculateLiquidityFlatPrice',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'];
        returns: BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateLiquidityD',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
        /**
         * Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
         */
        returns: BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateLiquidityWithD',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'];
        /**
         * Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
         */
        returns: BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256' | 'calculatePrice',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'];
        /**
         * the price with specified quantity with the price range set in the contract
         */
        returns: BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      | 'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'
      | 'calculateAssetBWithdrawOnAssetADeposit',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
        /**
         * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
         */
        returns: BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      | 'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'
      | 'calculateAssetAWithdrawOnAssetBDeposit',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
        /**
         * Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
         */
        returns: BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' | 'calculateAssetAWithdrawOnLpDeposit',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'];
        /**
         * Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
         */
        returns: BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      | 'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'
      | 'calculateAssetBDepositOnAssetADeposit',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'];
        /**
         * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
         */
        returns: BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      | 'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'
      | 'calculateAssetADepositOnAssetBDeposit',
      {
        argsObj: BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'];
        argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'];
        /**
         * Amount of asset A to be deposited. The result is in Base decimals (9)
         */
        returns: BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'];
      }
    > &
    Record<
      | 'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'
      | 'status',
      {
        argsObj: BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'];
        argsTuple: BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'];
        returns: BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'];
      }
    >;
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        setupFinished: boolean;
        assetA: bigint;
        assetB: bigint;
        assetLp: bigint;
        assetABalance: bigint;
        assetBBalance: bigint;
        priceMin: bigint;
        priceMax: bigint;
        priceMinSqrt: bigint;
        priceMaxSqrt: bigint;
        liqudity: bigint;
        liqudityUsersFromFees: bigint;
        liqudityBiatecFromFees: bigint;
        fee: bigint;
        currentPrice: bigint;
        scale: bigint;
        appBiatecConfigProvider: bigint;
        verificationClass: bigint;
        version: BinaryState;
      };
      maps: {};
    };
  };
};

/**
 * Defines the possible abi call signatures.
 */
export type BiatecClammPoolSignatures = keyof BiatecClammPoolTypes['methods'];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecClammPoolNonVoidMethodSignatures = keyof BiatecClammPoolTypes['methods'] extends infer T
  ? T extends keyof BiatecClammPoolTypes['methods']
    ? MethodReturn<T> extends void
      ? never
      : T
    : never
  : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
  }
>;
/**
 * Maps a method signature from the BiatecClammPool smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecClammPoolSignatures> = BiatecClammPoolTypes['methods'][TSignature][
  | 'argsObj'
  | 'argsTuple'];
/**
 * Maps a method signature from the BiatecClammPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecClammPoolSignatures> =
  BiatecClammPoolTypes['methods'][TSignature]['returns'];

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecClammPoolTypes['state']['global']['keys'];

/**
 * Defines supported create method params for this smart contract
 */
export type BiatecClammPoolCreateCallParams =
  | Expand<
      CallParams<
        BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']
      > & { method: 'createApplication' } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >
  | Expand<
      CallParams<
        BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']
      > & { method: 'createApplication()void' } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >;
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecClammPoolUpdateCallParams =
  | Expand<
      CallParams<
        | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
        | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
      > & { method: 'updateApplication' }
    >
  | Expand<
      CallParams<
        | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
        | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
      > & { method: 'updateApplication(uint64,byte[])void' }
    >;
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecClammPoolDeployParams = Expand<
  Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: BiatecClammPoolCreateCallParams;
    /**
     * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    updateParams?: BiatecClammPoolUpdateCallParams;
  }
>;

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecClammPool smart contract
 */
export abstract class BiatecClammPoolParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecClammPoolCreateCallParams & { method: string }>(params: TParams) {
        switch (params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecClammPoolParamsFactory.create.createApplication(params);
        }
      },

      /**
       * Constructs create ABI call params for the BiatecClammPool smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['createApplication()void']
          | BiatecClammPoolArgs['tuple']['createApplication()void']
        > &
          AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC }
      ): AppClientMethodCallParams & AppClientCompilationParams & { onComplete?: OnApplicationComplete.NoOpOC } {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        };
      },
    };
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecClammPoolUpdateCallParams & { method: string }>(params: TParams) {
        switch (params.method) {
          case 'updateApplication':
          case 'updateApplication(uint64,byte[])void':
            return BiatecClammPoolParamsFactory.update.updateApplication(params);
        }
      },

      /**
       * Constructs update ABI call params for the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
          | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
        > &
          AppClientCompilationParams
      ): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(uint64,byte[])void' as const,
          args: Array.isArray(params.args)
            ? params.args
            : [params.args.appBiatecConfigProvider, params.args.newVersion],
        };
      },
    };
  }

  /**
   * Constructs a no op call for the getCurrentPrice()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentPrice(
    params: CallParams<
      BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentPrice()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the getPriceDivider()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPriceDivider(
    params: CallParams<
      BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPriceDivider()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the getLPTokenId()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLpTokenId(
    params: CallParams<
      BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLPTokenId()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * Only Biatec Pool Provider can deploy and bootsrap this smart contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.assetA,
            params.args.assetB,
            params.args.appBiatecConfigProvider,
            params.args.appBiatecPoolProvider,
            params.args.txSeed,
            params.args.fee,
            params.args.priceMin,
            params.args.priceMax,
            params.args.currentPrice,
            params.args.verificationClass,
          ],
    };
  }
  /**
   * Constructs a no op call for the bootstrapStep2()void ABI method
   *
   * When we know the app id of this pool, we can register it properly at the pool provider
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrapStep2(
    params: CallParams<
      BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrapStep2()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 ABI method
   *
   * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
      | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.appBiatecConfigProvider,
            params.args.appBiatecIdentityProvider,
            params.args.txAssetADeposit,
            params.args.txAssetBDeposit,
            params.args.assetA,
            params.args.assetB,
            params.args.assetLp,
          ],
    };
  }
  /**
   * Constructs a no op call for the removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 ABI method
   *
   * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
      | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.appBiatecConfigProvider,
            params.args.appBiatecIdentityProvider,
            params.args.txLpXfer,
            params.args.assetA,
            params.args.assetB,
            params.args.assetLp,
          ],
    };
  }
  /**
   * Constructs a no op call for the removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 ABI method
   *
  * This method allows biatec admin to reduce the lp position created by lp fees allocation.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidityAdmin(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.appBiatecConfigProvider,
            params.args.assetA,
            params.args.assetB,
            params.args.assetLp,
            params.args.amount,
          ],
    };
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 ABI method
   *
   * Swap Asset A to Asset B or Asset B to Asst A
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
      | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.appBiatecConfigProvider,
            params.args.appBiatecIdentityProvider,
            params.args.appBiatecPoolProvider,
            params.args.txSwap,
            params.args.assetA,
            params.args.assetB,
            params.args.minimumToReceive,
          ],
    };
  }
  /**
   * Constructs a no op call for the distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 ABI method
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


  This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeExcessAssets(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.appBiatecConfigProvider,
            params.args.assetA,
            params.args.assetB,
            params.args.amountA,
            params.args.amountB,
          ],
    };
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


  This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
      | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.appBiatecConfigProvider,
            params.args.assetA,
            params.args.assetB,
            params.args.amountA,
            params.args.amountB,
          ],
    };
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.appBiatecConfigProvider,
            params.args.votePk,
            params.args.selectionPk,
            params.args.stateProofPk,
            params.args.voteFirst,
            params.args.voteLast,
            params.args.voteKeyDilution,
          ],
    };
  }
  /**
   * Constructs a no op call for the calculateDistributedLiquidity(uint64,uint256)uint256 ABI method
   *
  * addressExecutiveFee can perfom key unregistration for this LP pool


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateDistributedLiquidity(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateDistributedLiquidity(uint64,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetLp, params.args.currentDeposit],
    };
  }
  /**
   * Constructs a no op call for the calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateLiquidityFlatPrice(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.x, params.args.y, params.args.price],
    };
  }
  /**
   * Constructs a no op call for the calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
  * Calculates the liquidity  from the x - Asset A position and y - Asset B position
  This method calculates discriminant - first part of the calculation.
  It is divided so that the readonly method does not need to charge fees

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateLiquidityD(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.x,
            params.args.y,
            params.args.priceMin,
            params.args.priceMax,
            params.args.priceMinSqrt,
            params.args.priceMaxSqrt,
          ],
    };
  }
  /**
   * Constructs a no op call for the calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateLiquidityWithD(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.x, params.args.y, params.args.priceMinSqrt, params.args.priceMaxSqrt, params.args.dSqrt],
    };
  }
  /**
   * Constructs a no op call for the calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Get the current price when asset a has x
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculatePrice(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.assetAQuantity,
            params.args.assetBQuantity,
            params.args.priceMinSqrt,
            params.args.priceMaxSqrt,
            params.args.liquidity,
          ],
    };
  }
  /**
   * Constructs a no op call for the calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetBWithdrawOnAssetADeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.inAmount,
            params.args.assetABalance,
            params.args.assetBBalance,
            params.args.priceMinSqrt,
            params.args.priceMaxSqrt,
            params.args.liqudity,
          ],
    };
  }
  /**
   * Constructs a no op call for the calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetAWithdrawOnAssetBDeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.inAmount,
            params.args.assetABalance,
            params.args.assetBBalance,
            params.args.priceMinSqrt,
            params.args.priceMaxSqrt,
            params.args.liqudity,
          ],
    };
  }
  /**
   * Constructs a no op call for the calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetAWithdrawOnLpDeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.inAmount, params.args.assetABalance, params.args.liqudity],
    };
  }
  /**
   * Constructs a no op call for the calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 ABI method
   *
  * Calculates how much asset B should be deposited when user deposit asset a and b.


  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetBDepositOnAssetADeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.inAmountA, params.args.inAmountB, params.args.assetABalance, params.args.assetBBalance],
    };
  }
  /**
   * Constructs a no op call for the calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 ABI method
   *
  * Calculates how much asset A should be deposited when user deposit asset a and b


  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetADepositOnAssetBDeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.inAmountA, params.args.inAmountB, params.args.assetABalance, params.args.assetBBalance],
    };
  }
  /**
   * Constructs a no op call for the status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static status(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method:
        'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.appBiatecConfigProvider, params.args.assetA, params.args.assetB, params.args.assetLp],
    };
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecClammPool smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecClammPoolFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory;

  /**
   * Creates a new instance of `BiatecClammPoolFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    });
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName;
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC;
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand;
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecClammPoolClient(this.appFactory.getAppClientById(params));
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(params: AppFactoryResolveAppClientByCreatorAndNameParams) {
    return new BiatecClammPoolClient(await this.appFactory.getAppClientByCreatorAndName(params));
  }

  /**
   * Idempotently deploys the BiatecClammPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecClammPoolDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method
        ? BiatecClammPoolParamsFactory.create._resolveByMethod(params.createParams)
        : params.createParams
          ? (params.createParams as BiatecClammPoolCreateCallParams & { args: Uint8Array[] })
          : undefined,
      updateParams: params.updateParams?.method
        ? BiatecClammPoolParamsFactory.update._resolveByMethod(params.updateParams)
        : params.updateParams
          ? (params.updateParams as BiatecClammPoolUpdateCallParams & { args: Uint8Array[] })
          : undefined,
    });
    return { result: result.result, appClient: new BiatecClammPoolClient(result.appClient) };
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecClammPool smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (
        params: CallParams<
          | BiatecClammPoolArgs['obj']['createApplication()void']
          | BiatecClammPoolArgs['tuple']['createApplication()void']
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
      ) => {
        return this.appFactory.params.create(BiatecClammPoolParamsFactory.create.createApplication(params));
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (
        params: CallParams<
          | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
          | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
        > &
          AppClientCompilationParams
      ) => {
        return this.appFactory.params.deployUpdate(BiatecClammPoolParamsFactory.update.updateApplication(params));
      },
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecClammPool smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (
        params: CallParams<
          | BiatecClammPoolArgs['obj']['createApplication()void']
          | BiatecClammPoolArgs['tuple']['createApplication()void']
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
      ) => {
        return this.appFactory.createTransaction.create(BiatecClammPoolParamsFactory.create.createApplication(params));
      },
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecClammPool smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (
        params: CallParams<
          | BiatecClammPoolArgs['obj']['createApplication()void']
          | BiatecClammPoolArgs['tuple']['createApplication()void']
        > &
          AppClientCompilationParams &
          CreateSchema &
          SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
      ) => {
        const result = await this.appFactory.send.create(BiatecClammPoolParamsFactory.create.createApplication(params));
        return {
          result: {
            ...result.result,
            return: result.result.return as unknown as undefined | BiatecClammPoolReturns['createApplication()void'],
          },
          appClient: new BiatecClammPoolClient(result.appClient),
        };
      },
    },
  };
}
/**
 * A client to make calls to the BiatecClammPool smart contract
 */
export class BiatecClammPoolClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient;

  /**
   * Creates a new instance of `BiatecClammPoolClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecClammPool app spec
   */
  constructor(appClient: _AppClient);
  /**
   * Creates a new instance of `BiatecClammPoolClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>);
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          });
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecClammPoolNonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs
        )
      : undefined;
  }

  /**
   * Returns a new `BiatecClammPoolClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>
  ): Promise<BiatecClammPoolClient> {
    return new BiatecClammPoolClient(await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC }));
  }

  /**
   * Returns an `BiatecClammPoolClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(params: Omit<ResolveAppClientByNetwork, 'appSpec'>): Promise<BiatecClammPoolClient> {
    return new BiatecClammPoolClient(await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC }));
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId;
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress;
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName;
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec;
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand;
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (
        params: CallParams<
          | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
          | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
        > &
          AppClientCompilationParams
      ) => {
        return this.appClient.params.update(BiatecClammPoolParamsFactory.update.updateApplication(params));
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params);
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentPrice: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.getCurrentPrice(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPriceDivider: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.getPriceDivider(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLpTokenId: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.getLpTokenId(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Only Biatec Pool Provider can deploy and bootsrap this smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call params: LP token ID
     */
    bootstrap: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.bootstrap(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrapStep2()void` ABI method.
     *
     * When we know the app id of this pool, we can register it properly at the pool provider
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrapStep2: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.bootstrapStep2(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64` ABI method.
     *
     * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
     *
     * @param params The params for the smart contract call
     * @returns The call params: LP Token quantity distributed
     */
    addLiquidity: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.addLiquidity(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256` ABI method.
     *
     * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
     *
     * @param params The params for the smart contract call
     * @returns The call params: LP position reduced
     */
    removeLiquidity: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
        | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.removeLiquidity(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256` ABI method.
     *
    * This method allows biatec admin to reduce the lp position created by lp fees allocation.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params: LP position reduced
     */
    removeLiquidityAdmin: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.removeLiquidityAdmin(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256` ABI method.
     *
     * Swap Asset A to Asset B or Asset B to Asst A
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
        | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.swap(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


    This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeExcessAssets: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.distributeExcessAssets(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


    This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.withdrawExcessAssets(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
        | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.sendOnlineKeyRegistration(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * addressExecutiveFee can perfom key unregistration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateDistributedLiquidity: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateLiquidityFlatPrice: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the liquidity  from the x - Asset A position and y - Asset B position
    This method calculates discriminant - first part of the calculation.
    It is divided so that the readonly method does not need to charge fees

     *
     * @param params The params for the smart contract call
     * @returns The call params: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityD: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the liquidity  from the x - Asset A position and y - Asset B position
     *
     * @param params The params for the smart contract call
     * @returns The call params: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityWithD: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the current price when asset a has x
     *
     * @param params The params for the smart contract call
     * @returns The call params: the price with specified quantity with the price range set in the contract
     */
    calculatePrice: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculatePrice(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on asset A deposit
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnAssetADeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on asset B deposit
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnAssetBDeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnLpDeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset B should be deposited when user deposit asset a and b.


    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBDepositOnAssetADeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset A should be deposited when user deposit asset a and b


    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset A to be deposited. The result is in Base decimals (9)
     */
    calculateAssetADepositOnAssetBDeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    status: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
        | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.status(params));
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (
        params: CallParams<
          | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
          | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
        > &
          AppClientCompilationParams
      ) => {
        return this.appClient.createTransaction.update(BiatecClammPoolParamsFactory.update.updateApplication(params));
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params);
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentPrice: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.getCurrentPrice(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPriceDivider: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.getPriceDivider(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLpTokenId: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.getLpTokenId(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Only Biatec Pool Provider can deploy and bootsrap this smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP token ID
     */
    bootstrap: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.bootstrap(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrapStep2()void` ABI method.
     *
     * When we know the app id of this pool, we can register it properly at the pool provider
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrapStep2: (
      params: CallParams<
        BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.bootstrapStep2(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64` ABI method.
     *
     * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP Token quantity distributed
     */
    addLiquidity: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.addLiquidity(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256` ABI method.
     *
     * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP position reduced
     */
    removeLiquidity: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
        | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.removeLiquidity(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256` ABI method.
     *
    * This method allows biatec admin to reduce the lp position created by lp fees allocation.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP position reduced
     */
    removeLiquidityAdmin: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.removeLiquidityAdmin(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256` ABI method.
     *
     * Swap Asset A to Asset B or Asset B to Asst A
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
        | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.swap(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


    This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeExcessAssets: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.distributeExcessAssets(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


    This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.withdrawExcessAssets(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
        | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.sendOnlineKeyRegistration(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * addressExecutiveFee can perfom key unregistration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateDistributedLiquidity: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateLiquidityFlatPrice: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the liquidity  from the x - Asset A position and y - Asset B position
    This method calculates discriminant - first part of the calculation.
    It is divided so that the readonly method does not need to charge fees

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityD: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the liquidity  from the x - Asset A position and y - Asset B position
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityWithD: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the current price when asset a has x
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: the price with specified quantity with the price range set in the contract
     */
    calculatePrice: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculatePrice(params));
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on asset A deposit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnAssetADeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params)
      );
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on asset B deposit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnAssetBDeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params)
      );
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnLpDeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params)
      );
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset B should be deposited when user deposit asset a and b.


    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBDepositOnAssetADeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params)
      );
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset A should be deposited when user deposit asset a and b


    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset A to be deposited. The result is in Base decimals (9)
     */
    calculateAssetADepositOnAssetBDeposit: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params)
      );
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    status: (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
        | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.status(params));
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (
        params: CallParams<
          | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
          | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
        > &
          AppClientCompilationParams &
          SendParams
      ) => {
        const result = await this.appClient.send.update(BiatecClammPoolParamsFactory.update.updateApplication(params));
        return {
          ...result,
          return: result.return as unknown as
            | undefined
            | BiatecClammPoolReturns['updateApplication(uint64,byte[])void'],
        };
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params);
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentPrice: async (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getCurrentPrice(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BiatecClammPoolReturns['getCurrentPrice()uint64'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPriceDivider: async (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getPriceDivider(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BiatecClammPoolReturns['getPriceDivider()uint64'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLpTokenId: async (
      params: CallParams<
        BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getLpTokenId(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BiatecClammPoolReturns['getLPTokenId()uint64'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Only Biatec Pool Provider can deploy and bootsrap this smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call result: LP token ID
     */
    bootstrap: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.bootstrap(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrapStep2()void` ABI method.
     *
     * When we know the app id of this pool, we can register it properly at the pool provider
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrapStep2: async (
      params: CallParams<
        BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.bootstrapStep2(params));
      return {
        ...result,
        return: result.return as unknown as undefined | BiatecClammPoolReturns['bootstrapStep2()void'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64` ABI method.
     *
     * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
     *
     * @param params The params for the smart contract call
     * @returns The call result: LP Token quantity distributed
     */
    addLiquidity: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.addLiquidity(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256` ABI method.
     *
     * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
     *
     * @param params The params for the smart contract call
     * @returns The call result: LP position reduced
     */
    removeLiquidity: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
        | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.removeLiquidity(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256` ABI method.
     *
    * This method allows biatec admin to reduce the lp position created by lp fees allocation.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result: LP position reduced
     */
    removeLiquidityAdmin: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.removeLiquidityAdmin(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256` ABI method.
     *
     * Swap Asset A to Asset B or Asset B to Asst A
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
        | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.swap(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


    This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeExcessAssets: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.distributeExcessAssets(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


    This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
        | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.withdrawExcessAssets(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
        | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.sendOnlineKeyRegistration(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * addressExecutiveFee can perfom key unregistration for this LP pool


    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateDistributedLiquidity: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateLiquidityFlatPrice: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the liquidity  from the x - Asset A position and y - Asset B position
    This method calculates discriminant - first part of the calculation.
    It is divided so that the readonly method does not need to charge fees

     *
     * @param params The params for the smart contract call
     * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityD: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the liquidity  from the x - Asset A position and y - Asset B position
     *
     * @param params The params for the smart contract call
     * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityWithD: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the current price when asset a has x
     *
     * @param params The params for the smart contract call
     * @returns The call result: the price with specified quantity with the price range set in the contract
     */
    calculatePrice: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculatePrice(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on asset A deposit
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnAssetADeposit: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on asset B deposit
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnAssetBDeposit: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnLpDeposit: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset B should be deposited when user deposit asset a and b.


    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBDepositOnAssetADeposit: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset A should be deposited when user deposit asset a and b


    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset A to be deposited. The result is in Base decimals (9)
     */
    calculateAssetADepositOnAssetBDeposit: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
        | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'],
      };
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    status: async (
      params: CallParams<
        | BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
        | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.status(params));
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'],
      };
    },
  };

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecClammPoolClient(this.appClient.clone(params));
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCurrentPrice(
    params: CallParams<
      BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getCurrentPrice(params));
    return result.return as unknown as BiatecClammPoolReturns['getCurrentPrice()uint64'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPriceDivider(
    params: CallParams<
      BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getPriceDivider(params));
    return result.return as unknown as BiatecClammPoolReturns['getPriceDivider()uint64'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getLpTokenId(
    params: CallParams<
      BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getLpTokenId(params));
    return result.return as unknown as BiatecClammPoolReturns['getLPTokenId()uint64'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * addressExecutiveFee can perfom key unregistration for this LP pool


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateDistributedLiquidity(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params));
    return result.return as unknown as BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateLiquidityFlatPrice(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params));
    return result.return as unknown as BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculates the liquidity  from the x - Asset A position and y - Asset B position
  This method calculates discriminant - first part of the calculation.
  It is divided so that the readonly method does not need to charge fees

   *
   * @param params The params for the smart contract call
   * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
   */
  async calculateLiquidityD(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params));
    return result.return as unknown as BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param params The params for the smart contract call
   * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
   */
  async calculateLiquidityWithD(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params));
    return result.return as unknown as BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get the current price when asset a has x
   *
   * @param params The params for the smart contract call
   * @returns The call result: the price with specified quantity with the price range set in the contract
   */
  async calculatePrice(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculatePrice(params));
    return result.return as unknown as BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetBWithdrawOnAssetADeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(
      BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params)
    );
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetAWithdrawOnAssetBDeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(
      BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params)
    );
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetAWithdrawOnLpDeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(
      BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params)
    );
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculates how much asset B should be deposited when user deposit asset a and b.


  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetBDepositOnAssetADeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(
      BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params)
    );
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculates how much asset A should be deposited when user deposit asset a and b


  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset A to be deposited. The result is in Base decimals (9)
   */
  async calculateAssetADepositOnAssetBDeposit(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
    >
  ) {
    const result = await this.appClient.send.call(
      BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params)
    );
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'];
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async status(
    params: CallParams<
      | BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    >
  ) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.status(params));
    return result.return as unknown as BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'];
  }

  /**
   * Methods to access state for the current BiatecClammPool app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecClammPool app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll();
        return {
          setupFinished: result.setupFinished,
          assetA: result.assetA,
          assetB: result.assetB,
          assetLp: result.assetLp,
          assetABalance: result.assetABalance,
          assetBBalance: result.assetBBalance,
          priceMin: result.priceMin,
          priceMax: result.priceMax,
          priceMinSqrt: result.priceMinSqrt,
          priceMaxSqrt: result.priceMaxSqrt,
          liqudity: result.Liqudity,
          liqudityUsersFromFees: result.LiqudityUsersFromFees,
          liqudityBiatecFromFees: result.LiqudityBiatecFromFees,
          fee: result.fee,
          currentPrice: result.currentPrice,
          scale: result.scale,
          appBiatecConfigProvider: result.appBiatecConfigProvider,
          verificationClass: result.verificationClass,
          version: new BinaryStateValue(result.version),
        };
      },
      /**
       * Get the current value of the setupFinished key in global state
       */
      setupFinished: async (): Promise<boolean | undefined> => {
        return (await this.appClient.state.global.getValue('setupFinished')) as boolean | undefined;
      },
      /**
       * Get the current value of the assetA key in global state
       */
      assetA: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('assetA')) as bigint | undefined;
      },
      /**
       * Get the current value of the assetB key in global state
       */
      assetB: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('assetB')) as bigint | undefined;
      },
      /**
       * Get the current value of the assetLp key in global state
       */
      assetLp: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('assetLp')) as bigint | undefined;
      },
      /**
       * Get the current value of the assetABalance key in global state
       */
      assetABalance: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('assetABalance')) as bigint | undefined;
      },
      /**
       * Get the current value of the assetBBalance key in global state
       */
      assetBBalance: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('assetBBalance')) as bigint | undefined;
      },
      /**
       * Get the current value of the priceMin key in global state
       */
      priceMin: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('priceMin')) as bigint | undefined;
      },
      /**
       * Get the current value of the priceMax key in global state
       */
      priceMax: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('priceMax')) as bigint | undefined;
      },
      /**
       * Get the current value of the priceMinSqrt key in global state
       */
      priceMinSqrt: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('priceMinSqrt')) as bigint | undefined;
      },
      /**
       * Get the current value of the priceMaxSqrt key in global state
       */
      priceMaxSqrt: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('priceMaxSqrt')) as bigint | undefined;
      },
      /**
       * Get the current value of the Liqudity key in global state
       */
      liqudity: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('Liqudity')) as bigint | undefined;
      },
      /**
       * Get the current value of the LiqudityUsersFromFees key in global state
       */
      liqudityUsersFromFees: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('LiqudityUsersFromFees')) as bigint | undefined;
      },
      /**
       * Get the current value of the LiqudityBiatecFromFees key in global state
       */
      liqudityBiatecFromFees: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('LiqudityBiatecFromFees')) as bigint | undefined;
      },
      /**
       * Get the current value of the fee key in global state
       */
      fee: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('fee')) as bigint | undefined;
      },
      /**
       * Get the current value of the currentPrice key in global state
       */
      currentPrice: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('currentPrice')) as bigint | undefined;
      },
      /**
       * Get the current value of the scale key in global state
       */
      scale: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('scale')) as bigint | undefined;
      },
      /**
       * Get the current value of the appBiatecConfigProvider key in global state
       */
      appBiatecConfigProvider: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('appBiatecConfigProvider')) as bigint | undefined;
      },
      /**
       * Get the current value of the verificationClass key in global state
       */
      verificationClass: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue('verificationClass')) as bigint | undefined;
      },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => {
        return new BinaryStateValue((await this.appClient.state.global.getValue('version')) as Uint8Array | undefined);
      },
    },
  };

  public newGroup(): BiatecClammPoolComposer {
    const client = this;
    const composer = this.algorand.newGroup();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = [];
    return {
      /**
       * Add a getCurrentPrice()uint64 method call against the BiatecClammPool contract
       */
      getCurrentPrice(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['getCurrentPrice()uint64']
          | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getCurrentPrice(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('getCurrentPrice()uint64', v));
        return this;
      },
      /**
       * Add a getPriceDivider()uint64 method call against the BiatecClammPool contract
       */
      getPriceDivider(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['getPriceDivider()uint64']
          | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getPriceDivider(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('getPriceDivider()uint64', v));
        return this;
      },
      /**
       * Add a getLPTokenId()uint64 method call against the BiatecClammPool contract
       */
      getLpTokenId(
        params: CallParams<
          BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getLpTokenId(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('getLPTokenId()uint64', v));
        return this;
      },
      /**
       * Add a bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 method call against the BiatecClammPool contract
       */
      bootstrap(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
          | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.bootstrap(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue(
            'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64',
            v
          )
        );
        return this;
      },
      /**
       * Add a bootstrapStep2()void method call against the BiatecClammPool contract
       */
      bootstrapStep2(
        params: CallParams<
          BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.bootstrapStep2(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 method call against the BiatecClammPool contract
       */
      addLiquidity(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
          | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.addLiquidity(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64', v)
        );
        return this;
      },
      /**
       * Add a removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 method call against the BiatecClammPool contract
       */
      removeLiquidity(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
          | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.removeLiquidity(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256', v)
        );
        return this;
      },
      /**
       * Add a removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 method call against the BiatecClammPool contract
       */
      removeLiquidityAdmin(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.removeLiquidityAdmin(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 method call against the BiatecClammPool contract
       */
      swap(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
          | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)));
        resultMappers.push((v) =>
          client.decodeReturnValue('swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256', v)
        );
        return this;
      },
      /**
       * Add a distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      distributeExcessAssets(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.distributeExcessAssets(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 method call against the BiatecClammPool contract
       */
      withdrawExcessAssets(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
          | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64', v)
        );
        return this;
      },
      /**
       * Add a sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void method call against the BiatecClammPool contract
       */
      sendOnlineKeyRegistration(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
          | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params))
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a calculateDistributedLiquidity(uint64,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateDistributedLiquidity(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateDistributedLiquidity(params))
        );
        resultMappers.push((v) => client.decodeReturnValue('calculateDistributedLiquidity(uint64,uint256)uint256', v));
        return this;
      },
      /**
       * Add a calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateLiquidityFlatPrice(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateLiquidityFlatPrice(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateLiquidityD(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateLiquidityD(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateLiquidityWithD(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateLiquidityWithD(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculatePrice(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculatePrice(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetBWithdrawOnAssetADeposit(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateAssetBWithdrawOnAssetADeposit(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue(
            'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256',
            v
          )
        );
        return this;
      },
      /**
       * Add a calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetAWithdrawOnAssetBDeposit(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateAssetAWithdrawOnAssetBDeposit(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue(
            'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256',
            v
          )
        );
        return this;
      },
      /**
       * Add a calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetAWithdrawOnLpDeposit(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateAssetAWithdrawOnLpDeposit(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetBDepositOnAssetADeposit(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateAssetBDepositOnAssetADeposit(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetADepositOnAssetBDeposit(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
          | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.calculateAssetADepositOnAssetBDeposit(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue('calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256', v)
        );
        return this;
      },
      /**
       * Add a status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the BiatecClammPool contract
       */
      status(
        params: CallParams<
          | BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
          | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.status(params)));
        resultMappers.push((v) =>
          client.decodeReturnValue(
            'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)',
            v
          )
        );
        return this;
      },
      get update() {
        return {
          updateApplication: (
            params: CallParams<
              | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
              | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
            > &
              AppClientCompilationParams
          ) => {
            promiseChain = promiseChain.then(async () =>
              composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params))
            );
            resultMappers.push(undefined);
            return this;
          },
        };
      },
      /**
       * Add a clear state call to the BiatecClammPool contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)));
        return this;
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer));
        return this;
      },
      async composer() {
        await promiseChain;
        return composer;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await (!options ? composer.simulate() : composer.simulate(options));
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
      async send(params?: SendParams) {
        await promiseChain;
        const result = await composer.send(params);
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue
          ),
        };
      },
    } as unknown as BiatecClammPoolComposer;
  }
}
export type BiatecClammPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getCurrentPrice()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentPrice(
    params?: CallParams<
      BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
    >
  ): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['getCurrentPrice()uint64'] | undefined]>;

  /**
   * Calls the getPriceDivider()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPriceDivider(
    params?: CallParams<
      BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
    >
  ): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['getPriceDivider()uint64'] | undefined]>;

  /**
   * Calls the getLPTokenId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLpTokenId(
    params?: CallParams<
      BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
    >
  ): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['getLPTokenId()uint64'] | undefined]>;

  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * Only Biatec Pool Provider can deploy and bootsrap this smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      (
        | BiatecClammPoolReturns['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
        | undefined
      ),
    ]
  >;

  /**
   * Calls the bootstrapStep2()void ABI method.
   *
   * When we know the app id of this pool, we can register it properly at the pool provider
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrapStep2(
    params?: CallParams<
      BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']
    >
  ): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['bootstrapStep2()void'] | undefined]>;

  /**
   * Calls the addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 ABI method.
   *
   * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
      | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
    >
  ): BiatecClammPoolComposer<
    [...TReturns, BiatecClammPoolReturns['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | undefined]
  >;

  /**
   * Calls the removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 ABI method.
   *
   * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
      | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      BiatecClammPoolReturns['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | undefined,
    ]
  >;

  /**
   * Calls the removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 ABI method.
   *
  * This method allows biatec admin to reduce the lp position created by lp fees allocation.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidityAdmin(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      BiatecClammPoolReturns['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | undefined,
    ]
  >;

  /**
   * Calls the swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 ABI method.
   *
   * Swap Asset A to Asset B or Asset B to Asst A
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
      | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
    >
  ): BiatecClammPoolComposer<
    [...TReturns, BiatecClammPoolReturns['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | undefined]
  >;

  /**
   * Calls the distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 ABI method.
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


  This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeExcessAssets(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      BiatecClammPoolReturns['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | undefined,
    ]
  >;

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.


  This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
      | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
    >
  ): BiatecClammPoolComposer<
    [...TReturns, BiatecClammPoolReturns['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]
  >;

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
      | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      (
        | BiatecClammPoolReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void']
        | undefined
      ),
    ]
  >;

  /**
   * Calls the calculateDistributedLiquidity(uint64,uint256)uint256 ABI method.
   *
  * addressExecutiveFee can perfom key unregistration for this LP pool


  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateDistributedLiquidity(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [...TReturns, BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256'] | undefined]
  >;

  /**
   * Calls the calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityFlatPrice(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [...TReturns, BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | undefined]
  >;

  /**
   * Calls the calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
  * Calculates the liquidity  from the x - Asset A position and y - Asset B position
  This method calculates discriminant - first part of the calculation.
  It is divided so that the readonly method does not need to charge fees

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityD(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | undefined,
    ]
  >;

  /**
   * Calls the calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityWithD(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | undefined,
    ]
  >;

  /**
   * Calls the calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Get the current price when asset a has x
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePrice(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [...TReturns, BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | undefined]
  >;

  /**
   * Calls the calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBWithdrawOnAssetADeposit(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      (
        | BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | undefined
      ),
    ]
  >;

  /**
   * Calls the calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetAWithdrawOnAssetBDeposit(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      (
        | BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
        | undefined
      ),
    ]
  >;

  /**
   * Calls the calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetAWithdrawOnLpDeposit(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | undefined,
    ]
  >;

  /**
   * Calls the calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
  * Calculates how much asset B should be deposited when user deposit asset a and b.


  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBDepositOnAssetADeposit(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      (
        | BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
        | undefined
      ),
    ]
  >;

  /**
   * Calls the calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
  * Calculates how much asset A should be deposited when user deposit asset a and b


  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetADepositOnAssetBDeposit(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      (
        | BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
        | undefined
      ),
    ]
  >;

  /**
   * Calls the status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  status(
    params?: CallParams<
      | BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    >
  ): BiatecClammPoolComposer<
    [
      ...TReturns,
      (
        | BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
        | undefined
      ),
    ]
  >;

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(
      params?: CallParams<
        | BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
        | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
      >
    ): BiatecClammPoolComposer<
      [...TReturns, BiatecClammPoolReturns['updateApplication(uint64,byte[])void'] | undefined]
    >;
  };

  /**
   * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecClammPoolComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecClammPoolComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecClammPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: SkipSignaturesSimulateOptions
  ): Promise<BiatecClammPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  simulate(
    options: RawSimulateOptions
  ): Promise<BiatecClammPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>;
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecClammPoolComposerResults<TReturns>>;
};
export type BiatecClammPoolComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns;
  }
>;
