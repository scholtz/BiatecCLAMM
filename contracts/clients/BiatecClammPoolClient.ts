/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"BiatecClammPool","desc":"","methods":[{"name":"createApplication","desc":"Initial setup","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","desc":"addressUdpater from global biatec configuration is allowed to update application","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"newVersion","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"getCurrentPrice","readonly":true,"args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getPriceDivider","readonly":true,"args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getLPTokenId","readonly":true,"args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"bootstrap","desc":"Only Biatec Pool Provider can deploy and bootsrap this smart contract","args":[{"name":"assetA","type":"uint64","desc":"Asset A ID must be lower then Asset B ID, or can be equal to Asset B ID for staking pools"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec amm provider"},{"name":"appBiatecPoolProvider","type":"uint64","desc":"Pool provider"},{"name":"txSeed","type":"pay","desc":"Seed transaction so that smart contract can opt in to the assets"},{"name":"fee","type":"uint64","desc":"Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%"},{"name":"priceMin","type":"uint64","desc":"Min price range. At this point all assets are in asset A."},{"name":"priceMax","type":"uint64","desc":"Max price range. At this point all assets are in asset B."},{"name":"currentPrice","type":"uint64","desc":"Deployer can specify the current price for easier deployemnt."},{"name":"verificationClass","type":"uint64","desc":"Minimum verification level from the biatec identity. Level 0 means no kyc."}],"returns":{"type":"uint64","desc":"LP token ID"},"actions":{"create":[],"call":["NoOp"]}},{"name":"bootstrapStep2","desc":"When we know the app id of this pool, we can register it properly at the pool provider","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLiquidity","desc":"This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liquidity token","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Configuration reference"},{"name":"appBiatecIdentityProvider","type":"uint64","desc":"Identity service reference"},{"name":"txAssetADeposit","type":"txn","desc":"Transfer of asset A to the LP pool"},{"name":"txAssetBDeposit","type":"txn","desc":"Transfer of asset B to the LP pool"},{"name":"assetA","type":"uint64","desc":"Asset A"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"assetLp","type":"uint64","desc":"Liquidity pool asset"}],"returns":{"type":"uint64","desc":"LP Token quantity distributed"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeLiquidity","desc":"This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Configuration reference"},{"name":"appBiatecIdentityProvider","type":"uint64","desc":"Identity service reference"},{"name":"txLpXfer","type":"axfer","desc":"Transfer of the LP token"},{"name":"assetA","type":"uint64","desc":"Asset A"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"assetLp","type":"uint64","desc":"LP pool asset"}],"returns":{"type":"uint256","desc":"LP position reduced"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeLiquidityAdmin","desc":"This method allows biatec admin to reduce the lp position created by lp fees allocation.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec config app. Only addressExecutiveFee is allowed to execute this method."},{"name":"assetA","type":"uint64","desc":"Asset A"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"assetLp","type":"uint64"},{"name":"amount","type":"uint256","desc":"Amount to withdraw. If zero, removes all available lps from fees."}],"returns":{"type":"uint256","desc":"LP position reduced"},"actions":{"create":[],"call":["NoOp"]}},{"name":"swap","desc":"Swap Asset A to Asset B or Asset B to Asst A","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"appBiatecIdentityProvider","type":"uint64"},{"name":"appBiatecPoolProvider","type":"uint64"},{"name":"txSwap","type":"txn","desc":"Transfer of the token to be deposited to the pool. To the owner the other asset will be sent."},{"name":"assetA","type":"uint64","desc":"Asset A"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"minimumToReceive","type":"uint64","desc":"If number greater then zero, the check is performed for the output of the other asset"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]}},{"name":"distributeExcessAssets","desc":"If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.\nIf someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.\n\n\nThis method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec config app. Only addressExecutiveFee is allowed to execute this method."},{"name":"assetA","type":"uint64","desc":"Asset A"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"amountA","type":"uint256","desc":"Amount of asset A to be deposited to the liquidity. In base decimals (9)"},{"name":"amountB","type":"uint256","desc":"Amount of asset B to be deposited to the liquidity. In base decimals (9)"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawExcessAssets","desc":"If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.\nIf someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.\n\n\nThis method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64","desc":"Biatec config app. Only addressExecutiveFee is allowed to execute this method."},{"name":"assetA","type":"uint64","desc":"Asset A"},{"name":"assetB","type":"uint64","desc":"Asset B"},{"name":"amountA","type":"uint64","desc":"Amount of asset A to be deposited to the liquidity. In asset a decimals"},{"name":"amountB","type":"uint64","desc":"Amount of asset B to be deposited to the liquidity. In asset b decimals"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"sendOnlineKeyRegistration","desc":"addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"votePk","type":"byte[]"},{"name":"selectionPk","type":"byte[]"},{"name":"stateProofPk","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"},{"name":"fee","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateDistributedLiquidity","desc":"addressExecutiveFee can perfom key unregistration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.","readonly":true,"args":[{"name":"assetLp","type":"uint64"},{"name":"currentDeposit","type":"uint256"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateLiquidityFlatPrice","readonly":true,"args":[{"name":"x","type":"uint256"},{"name":"y","type":"uint256"},{"name":"price","type":"uint256"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateLiquidityD","desc":"Calculates the liquidity  from the x - Asset A position and y - Asset B position\nThis method calculates discriminant - first part of the calculation.\nIt is divided so that the readonly method does not need to charge fees","readonly":true,"args":[{"name":"x","type":"uint256","desc":"Asset A position balanced on the curve"},{"name":"y","type":"uint256","desc":"Asset B position balanced on the curve"},{"name":"priceMin","type":"uint256","desc":"Minimum price variable in base scale decimals (pa)"},{"name":"priceMax","type":"uint256","desc":"Maximum price variable in base scale decimals (pb)"},{"name":"priceMinSqrt","type":"uint256","desc":"sqrt(priceMin) in base scale decimals Variable pas"},{"name":"priceMaxSqrt","type":"uint256","desc":"sqrt(priceMax) in base scale decimals Variable pbs"}],"returns":{"type":"uint256","desc":"Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user."},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateLiquidityWithD","desc":"Calculates the liquidity  from the x - Asset A position and y - Asset B position","readonly":true,"args":[{"name":"x","type":"uint256","desc":"Asset A position balanced on the curve"},{"name":"y","type":"uint256","desc":"Asset B position balanced on the curve"},{"name":"priceMinSqrt","type":"uint256","desc":"sqrt(priceMin) in base scale decimals Variable pas"},{"name":"priceMaxSqrt","type":"uint256","desc":"sqrt(priceMax) in base scale decimals Variable pbs"},{"name":"dSqrt","type":"uint256"}],"returns":{"type":"uint256","desc":"Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user."},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculatePrice","desc":"Get the current price when asset a has x","readonly":true,"args":[{"name":"assetAQuantity","type":"uint256","desc":"x"},{"name":"assetBQuantity","type":"uint256","desc":"y"},{"name":"priceMinSqrt","type":"uint256","desc":"sqrt(priceMin)"},{"name":"priceMaxSqrt","type":"uint256","desc":"sqrt(priceMax)"},{"name":"liquidity","type":"uint256","desc":"Current pool liquidity - L variable"}],"returns":{"type":"uint256","desc":"the price with specified quantity with the price range set in the contract"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateAssetBWithdrawOnAssetADeposit","desc":"Calculates how much asset B will be taken from the smart contract on asset A deposit","readonly":true,"args":[{"name":"inAmount","type":"uint256","desc":"Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"},{"name":"assetABalance","type":"uint256","desc":"Asset A balance. Variable ab, in base scale"},{"name":"assetBBalance","type":"uint256","desc":"Asset B balance. Variable bb, in base scale"},{"name":"priceMinSqrt","type":"uint256","desc":"sqrt(Min price). Variable pMinS, in base scale"},{"name":"priceMaxSqrt","type":"uint256","desc":"sqrt(Max price). Variable pMaxS, in base scale"},{"name":"liquidity","type":"uint256","desc":"sqrt(Max price). Variable L, in base scale"}],"returns":{"type":"uint256","desc":"Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateAssetAWithdrawOnAssetBDeposit","desc":"Calculates how much asset A will be taken from the smart contract on asset B deposit","readonly":true,"args":[{"name":"inAmount","type":"uint256","desc":"Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"},{"name":"assetABalance","type":"uint256","desc":"Asset A balance. Variable ab, in base scale"},{"name":"assetBBalance","type":"uint256","desc":"Asset B balance. Variable bb, in base scale"},{"name":"priceMinSqrt","type":"uint256","desc":"sqrt(Min price). Variable pMinS, in base scale"},{"name":"priceMaxSqrt","type":"uint256","desc":"sqrt(Max price). Variable pMaxS, in base scale"},{"name":"liquidity","type":"uint256","desc":"sqrt(Max price). Variable L, in base scale"}],"returns":{"type":"uint256","desc":"Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateAssetAWithdrawOnLpDeposit","desc":"Calculates how much asset A will be taken from the smart contract on LP asset deposit","readonly":true,"args":[{"name":"inAmount","type":"uint256","desc":"LP Asset amount in Base decimal representation.."},{"name":"assetABalance","type":"uint256","desc":"Asset A balance. Variable ab, in base scale"},{"name":"liquidity","type":"uint256","desc":"Current liquidity. Variable L, in base scale"}],"returns":{"type":"uint256","desc":"Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateAssetBDepositOnAssetADeposit","desc":"Calculates how much asset B should be deposited when user deposit asset a and b.\n\n\nOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user","readonly":true,"args":[{"name":"inAmountA","type":"uint256","desc":"Asset A amount in Base decimal representation"},{"name":"inAmountB","type":"uint256","desc":"Asset B amount in Base decimal representation"},{"name":"assetABalance","type":"uint256","desc":"Asset A balance. Variable ab, in base scale"},{"name":"assetBBalance","type":"uint256","desc":"Asset B balance. Variable bb, in base scale"}],"returns":{"type":"uint256","desc":"Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"calculateAssetADepositOnAssetBDeposit","desc":"Calculates how much asset A should be deposited when user deposit asset a and b\n\n\nOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user","readonly":true,"args":[{"name":"inAmountA","type":"uint256","desc":"Asset A amount in Base decimal representation"},{"name":"inAmountB","type":"uint256","desc":"Asset B amount in Base decimal representation"},{"name":"assetABalance","type":"uint256","desc":"Asset A balance. Variable ab, in base scale"},{"name":"assetBBalance","type":"uint256","desc":"Asset B balance. Variable bb, in base scale"}],"returns":{"type":"uint256","desc":"Amount of asset A to be deposited. The result is in Base decimals (9)"},"actions":{"create":[],"call":["NoOp"]}},{"name":"status","readonly":true,"args":[{"name":"appBiatecConfigProvider","type":"uint64"},{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"},{"name":"assetLp","type":"uint64"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"AmmStatus"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"AmmStatus":[{"name":"scale","type":"uint64"},{"name":"assetABalance","type":"uint64"},{"name":"assetBBalance","type":"uint64"},{"name":"realABalance","type":"uint64"},{"name":"realBBalance","type":"uint64"},{"name":"priceMinSqrt","type":"uint64"},{"name":"priceMaxSqrt","type":"uint64"},{"name":"currentLiquidity","type":"uint64"},{"name":"releasedLiquidity","type":"uint64"},{"name":"liquidityUsersFromFees","type":"uint64"},{"name":"liquidityBiatecFromFees","type":"uint64"},{"name":"assetA","type":"uint64"},{"name":"assetB","type":"uint64"},{"name":"poolToken","type":"uint64"},{"name":"price","type":"uint64"},{"name":"fee","type":"uint64"},{"name":"biatecFee","type":"uint64"},{"name":"verificationClass","type":"uint64"}]},"state":{"schema":{"global":{"bytes":11,"ints":10},"local":{"bytes":0,"ints":0}},"keys":{"global":{"setupFinished":{"key":"cw==","keyType":"AVMBytes","valueType":"bool"},"assetA":{"key":"YQ==","keyType":"AVMBytes","valueType":"uint64"},"assetADecimalsScaleFromBase":{"key":"YWQ=","keyType":"AVMBytes","valueType":"uint256"},"assetB":{"key":"Yg==","keyType":"AVMBytes","valueType":"uint64"},"assetBDecimalsScaleFromBase":{"key":"YmQ=","keyType":"AVMBytes","valueType":"uint256"},"assetLp":{"key":"bHA=","keyType":"AVMBytes","valueType":"uint64"},"assetABalanceBaseScale":{"key":"YWI=","keyType":"AVMBytes","valueType":"uint256"},"assetBBalanceBaseScale":{"key":"YmI=","keyType":"AVMBytes","valueType":"uint256"},"priceMin":{"key":"cE1pbg==","keyType":"AVMBytes","valueType":"uint64"},"priceMax":{"key":"cE1heA==","keyType":"AVMBytes","valueType":"uint64"},"priceMinSqrt":{"key":"cE1pblM=","keyType":"AVMBytes","valueType":"uint256"},"priceMaxSqrt":{"key":"cE1heFM=","keyType":"AVMBytes","valueType":"uint256"},"Liquidity":{"key":"TA==","keyType":"AVMBytes","valueType":"uint256"},"LiquidityUsersFromFees":{"key":"THU=","keyType":"AVMBytes","valueType":"uint256"},"LiquidityBiatecFromFees":{"key":"TGI=","keyType":"AVMBytes","valueType":"uint256"},"fee":{"key":"Zg==","keyType":"AVMBytes","valueType":"uint64"},"currentPrice":{"key":"cHJpY2U=","keyType":"AVMBytes","valueType":"uint64"},"scale":{"key":"c2NhbGU=","keyType":"AVMBytes","valueType":"uint64"},"appBiatecConfigProvider":{"key":"YmM=","keyType":"AVMBytes","valueType":"uint64"},"verificationClass":{"key":"Yw==","keyType":"AVMBytes","valueType":"uint64"},"version":{"key":"c2N2ZXI=","keyType":"AVMBytes","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[426],"errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","teal":25},{"pc":[508],"errorMessage":"E_CONFIG","teal":130},{"pc":[515],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('u')","teal":139},{"pc":[523],"errorMessage":"E_UPDATER","teal":149},{"pc":[618],"errorMessage":"argument 5 (txSeed) for bootstrap must be a pay transaction","teal":272},{"pc":[654],"errorMessage":"Only the pool provider can init this contract","teal":326},{"pc":[662],"errorMessage":"transaction verification failed: {\"txn\":\"txSeed\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":337},{"pc":[672],"errorMessage":"transaction verification failed: {\"txn\":\"txSeed\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=400_000\"}","teal":346},{"pc":[678],"errorMessage":"E_PRICE_MAX","teal":356},{"pc":[688],"errorMessage":"E_SENDER","teal":367},{"pc":[693],"errorMessage":"E_PRICE","teal":376},{"pc":[750],"errorMessage":"E_FEE","teal":441},{"pc":[756],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('p')","teal":450},{"pc":[764],"errorMessage":"E_CONFIG","teal":463},{"pc":[770],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":472},{"pc":[777],"errorMessage":"E_PAUSED","teal":482},{"pc":[805],"errorMessage":"sqrt((priceMin as uint256) * s) overflowed 256 bits","teal":516},{"pc":[828],"errorMessage":"sqrt((priceMax as uint256) * s) overflowed 256 bits","teal":542},{"pc":[869],"errorMessage":"global state value does not exist: appBiatecPoolProvider.globalState('nt')","teal":591},{"pc":[1022],"errorMessage":"assetADelicmalScale2Scale overflowed 256 bits","teal":754},{"pc":[1041],"errorMessage":"assetBDelicmalScale2Scale overflowed 256 bits","teal":776},{"pc":[1087],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('p')","teal":839},{"pc":[1411],"errorMessage":"assetA does not match","teal":1228},{"pc":[1418],"errorMessage":"assetB does not match","teal":1238},{"pc":[1436],"errorMessage":"assetLp does not match","teal":1259},{"pc":[1621],"errorMessage":"failed to cast txAssetADeposit to axfer","teal":1457},{"pc":[1631],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"typeEnum\",\"expected\":\"axfer\"}","teal":1473},{"pc":[1639],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","teal":1482},{"pc":[1647],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"xferAsset\",\"expected\":\"assetA\"}","teal":1491},{"pc":[1654],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetAmount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}","teal":1500},{"pc":[1674],"errorMessage":"failed to cast txAssetADeposit to pay","teal":1522},{"pc":[1683],"errorMessage":"transaction verification failed: {\"txn\":\"payTx\",\"field\":\"typeEnum\",\"expected\":\"pay\"}","teal":1537},{"pc":[1691],"errorMessage":"transaction verification failed: {\"txn\":\"payTx\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":1546},{"pc":[1698],"errorMessage":"transaction verification failed: {\"txn\":\"payTx\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}","teal":1555},{"pc":[1703],"errorMessage":"Unsupported tx type of the asset A","teal":1564},{"pc":[1769],"errorMessage":"failed to cast txAssetBDeposit to axfer","teal":1634},{"pc":[1779],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"typeEnum\",\"expected\":\"axfer\"}","teal":1650},{"pc":[1787],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","teal":1659},{"pc":[1795],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"xferAsset\",\"expected\":\"assetB\"}","teal":1668},{"pc":[1802],"errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetAmount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}","teal":1677},{"pc":[1822],"errorMessage":"failed to cast txAssetBDeposit to pay","teal":1699},{"pc":[1831],"errorMessage":"transaction verification failed: {\"txn\":\"payTx\",\"field\":\"typeEnum\",\"expected\":\"pay\"}","teal":1714},{"pc":[1839],"errorMessage":"transaction verification failed: {\"txn\":\"payTx\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":1723},{"pc":[1846],"errorMessage":"transaction verification failed: {\"txn\":\"payTx\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}","teal":1732},{"pc":[1851],"errorMessage":"Unsupported tx type of the asset B","teal":1741},{"pc":[1861],"errorMessage":"assetLpDelicmalScale2Scale overflowed 256 bits","teal":1755},{"pc":[1895],"errorMessage":"assetLpDelicmalScale2Scale overflowed 256 bits","teal":1797},{"pc":[1911],"errorMessage":"bDepositInBaseScale overflowed 256 bits","teal":1814},{"pc":[1927],"errorMessage":"aDepositInBaseScale overflowed 256 bits","teal":1831},{"pc":[1952],"errorMessage":"assetLpDelicmalScale2Scale overflowed 256 bits","teal":1862},{"pc":[1968],"errorMessage":"bDepositInBaseScale overflowed 256 bits","teal":1879},{"pc":[1984],"errorMessage":"aDepositInBaseScale overflowed 256 bits","teal":1896},{"pc":[2028],"errorMessage":"newPrice as uint64 overflowed 64 bits","teal":1940},{"pc":[2091],"errorMessage":"this.assetABalanceBaseScale.value + realAssetADeposit overflowed 256 bits","teal":2014},{"pc":[2113],"errorMessage":"this.assetBBalanceBaseScale.value + realAssetBDeposit overflowed 256 bits","teal":2039},{"pc":[2354],"errorMessage":"(lpDeltaBase / assetLpDelicmalScale2Scale) as uint64 overflowed 64 bits","teal":2299},{"pc":[2392],"errorMessage":"LP-ZERO-ERR","teal":2342},{"pc":[2468],"errorMessage":"priceMin overflowed 256 bits","teal":2438},{"pc":[2500],"errorMessage":"priceMax overflowed 256 bits","teal":2466},{"pc":[2516],"errorMessage":"priceMin overflowed 256 bits","teal":2483},{"pc":[2541],"errorMessage":"D_SQRT overflowed 256 bits","teal":2507},{"pc":[2583],"errorMessage":"this.calculateCurrentLiquidity() overflowed 256 bits","teal":2550},{"pc":[2622],"errorMessage":"projectedLiquidity overflowed 256 bits","teal":2595},{"pc":[2655],"errorMessage":"ERR-LIQ-DROP","teal":2632},{"pc":[2723],"errorMessage":"argument 3 (txLpXfer) for removeLiquidity must be a axfer transaction","teal":2716},{"pc":[2739],"errorMessage":"removeLiquidity return value overflowed 256 bits","teal":2734},{"pc":[2775],"errorMessage":"transaction verification failed: {\"txn\":\"txLpXfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","teal":2787},{"pc":[2783],"errorMessage":"transaction verification failed: {\"txn\":\"txLpXfer\",\"field\":\"xferAsset\",\"expected\":\"assetLp\"}","teal":2796},{"pc":[2790],"errorMessage":"transaction verification failed: {\"txn\":\"txLpXfer\",\"field\":\"assetAmount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}","teal":2805},{"pc":[2870],"errorMessage":"lpDelta overflowed 256 bits","teal":2879},{"pc":[2923],"errorMessage":"this.LiquidityUsersFromFees.value - myPortionOfFeesCollected overflowed 256 bits","teal":2932},{"pc":[2946],"errorMessage":"lpDeltaWithFees overflowed 256 bits","teal":2962},{"pc":[2972],"errorMessage":"(aToSend / this.assetADecimalsScaleFromBase.value) as uint64 overflowed 64 bits","teal":2987},{"pc":[3015],"errorMessage":"lpDeltaWithFees overflowed 256 bits","teal":3034},{"pc":[3041],"errorMessage":"(bToSend / this.assetBDecimalsScaleFromBase.value) as uint64 overflowed 64 bits","teal":3059},{"pc":[3085],"errorMessage":"ERR-REM-ZERO","teal":3103},{"pc":[3110],"errorMessage":"newAssetA overflowed 256 bits","teal":3131},{"pc":[3129],"errorMessage":"newAssetB overflowed 256 bits","teal":3153},{"pc":[3162],"errorMessage":"argument 0 (amount) for removeLiquidityAdmin must be a uint256","teal":3195},{"pc":[3186],"errorMessage":"removeLiquidityAdmin return value overflowed 256 bits","teal":3221},{"pc":[3227],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":3278},{"pc":[3235],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":3288},{"pc":[3242],"errorMessage":"E_PAUSED","teal":3298},{"pc":[3248],"errorMessage":"ERR-EXEC-ONLY","teal":3307},{"pc":[3319],"errorMessage":"ERR-TOO-MUCH","teal":3379},{"pc":[3331],"errorMessage":"this.LiquidityBiatecFromFees.value - lpDeltaWithFees overflowed 256 bits","teal":3394},{"pc":[3354],"errorMessage":"lpDeltaWithFees overflowed 256 bits","teal":3423},{"pc":[3380],"errorMessage":"(aToSend / this.assetADecimalsScaleFromBase.value) as uint64 overflowed 64 bits","teal":3448},{"pc":[3423],"errorMessage":"lpDeltaWithFees overflowed 256 bits","teal":3495},{"pc":[3449],"errorMessage":"(bToSend / this.assetBDecimalsScaleFromBase.value) as uint64 overflowed 64 bits","teal":3520},{"pc":[3504],"errorMessage":"newAssetA overflowed 256 bits","teal":3576},{"pc":[3523],"errorMessage":"newAssetB overflowed 256 bits","teal":3598},{"pc":[3559],"errorMessage":"ERR-INVALID-CONFIG","teal":3654},{"pc":[3566],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('i')","teal":3663},{"pc":[3574],"errorMessage":"ERR-WRONG-IDENT","teal":3676},{"pc":[3627],"errorMessage":"ERR-USER-LOCKED","teal":3730},{"pc":[3642],"errorMessage":"ERR-LOW-VER","teal":3747},{"pc":[3648],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":3756},{"pc":[3655],"errorMessage":"E_PAUSED","teal":3766},{"pc":[3700],"errorMessage":"swap return value overflowed 256 bits","teal":3821},{"pc":[3792],"errorMessage":"Swaps not allowed in staking pools","teal":3909},{"pc":[3815],"errorMessage":"Payment can be done only when one of the pool assets is native token","teal":3938},{"pc":[3822],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"typeEnum\",\"expected\":\"pay\"}","teal":3953},{"pc":[3829],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"amount\",\"condition\":\"greaterThan\",\"expected\":\">0\"}","teal":3962},{"pc":[3837],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":3971},{"pc":[3845],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","teal":3980},{"pc":[3864],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"typeEnum\",\"expected\":\"axfer\"}","teal":4006},{"pc":[3871],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"assetAmount\",\"condition\":\"greaterThan\",\"expected\":\">0\"}","teal":4015},{"pc":[3879],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","teal":4024},{"pc":[3887],"errorMessage":"transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","teal":4033},{"pc":[3903],"errorMessage":"transaction verification failed: {\"txn\":{\"txnText\":\"txSwap\"},\"field\":\"xferAsset\",\"condition\":\"includedIn\",\"expected\":\"[assetA, assetB]\"}","teal":4047},{"pc":[3909],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('p')","teal":4057},{"pc":[3917],"errorMessage":"ERR-INVALID-PP","teal":4070},{"pc":[4094],"errorMessage":"inAssetAfterFee overflowed 256 bits","teal":4265},{"pc":[4155],"errorMessage":"realSwapBDecimals as uint64 overflowed 64 bits","teal":4328},{"pc":[4186],"errorMessage":"Minimum to receive is not met","teal":4362},{"pc":[4211],"errorMessage":"this.assetABalanceBaseScale.value + inAssetInBaseScale overflowed 256 bits","teal":4390},{"pc":[4233],"errorMessage":"this.assetBBalanceBaseScale.value - realSwapBaseDecimals overflowed 256 bits","teal":4415},{"pc":[4329],"errorMessage":"inAssetAfterFee overflowed 256 bits","teal":4523},{"pc":[4390],"errorMessage":"realSwapADecimals as uint64 overflowed 64 bits","teal":4586},{"pc":[4421],"errorMessage":"Minimum to receive is not met","teal":4620},{"pc":[4446],"errorMessage":"this.assetBBalanceBaseScale.value + inAssetInBaseScale overflowed 256 bits","teal":4648},{"pc":[4468],"errorMessage":"this.assetABalanceBaseScale.value - realSwapBaseDecimals overflowed 256 bits","teal":4673},{"pc":[4521],"errorMessage":"feeB256 as uint64 overflowed 64 bits","teal":4731},{"pc":[4563],"errorMessage":"feeB256 as uint64 overflowed 64 bits","teal":4775},{"pc":[4584],"errorMessage":"global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')","teal":4797},{"pc":[4609],"errorMessage":"this.LiquidityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits","teal":4827},{"pc":[4652],"errorMessage":"this.LiquidityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits","teal":4872},{"pc":[4674],"errorMessage":"this.LiquidityBiatecFromFees.value + biatecLiquidityFromFeeIncrement overflowed 256 bits","teal":4897},{"pc":[4718],"errorMessage":"Stats to register must not be empty","teal":4948},{"pc":[4727],"errorMessage":"this.assetADecimalsScaleFromBase.value as uint64 overflowed 64 bits","teal":4960},{"pc":[4742],"errorMessage":"this.assetBDecimalsScaleFromBase.value as uint64 overflowed 64 bits","teal":4975},{"pc":[4790],"errorMessage":"newPrice as uint64 overflowed 64 bits","teal":5037},{"pc":[4853],"errorMessage":"newPrice as uint64 overflowed 64 bits","teal":5092},{"pc":[4884],"errorMessage":"argument 0 (amountB) for distributeExcessAssets must be a uint256","teal":5130},{"pc":[4892],"errorMessage":"argument 1 (amountA) for distributeExcessAssets must be a uint256","teal":5140},{"pc":[4912],"errorMessage":"distributeExcessAssets return value overflowed 256 bits","teal":5162},{"pc":[4985],"errorMessage":"E_CONFIG","teal":5242},{"pc":[4991],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":5251},{"pc":[4999],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":5261},{"pc":[5006],"errorMessage":"E_PAUSED","teal":5271},{"pc":[5012],"errorMessage":"E_SENDER","teal":5283},{"pc":[5024],"errorMessage":"this.assetABalanceBaseScale.value + amountA overflowed 256 bits","teal":5298},{"pc":[5046],"errorMessage":"this.assetBBalanceBaseScale.value + amountB overflowed 256 bits","teal":5323},{"pc":[5081],"errorMessage":"E_A0_B","teal":5364},{"pc":[5101],"errorMessage":"E_A_B","teal":5387},{"pc":[5126],"errorMessage":"E_B0_B","teal":5419},{"pc":[5146],"errorMessage":"E_B_B","teal":5442},{"pc":[5172],"errorMessage":"global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')","teal":5472},{"pc":[5197],"errorMessage":"this.LiquidityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits","teal":5502},{"pc":[5240],"errorMessage":"this.LiquidityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits","teal":5547},{"pc":[5262],"errorMessage":"this.LiquidityBiatecFromFees.value + biatecLiquidityFromFeeIncrement overflowed 256 bits","teal":5572},{"pc":[5302],"errorMessage":"newPrice as uint64 overflowed 64 bits","teal":5616},{"pc":[5371],"errorMessage":"E_CONFIG","teal":5708},{"pc":[5377],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":5717},{"pc":[5385],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('s')","teal":5727},{"pc":[5392],"errorMessage":"E_PAUSED","teal":5737},{"pc":[5398],"errorMessage":"E_SENDER","teal":5749},{"pc":[5455],"errorMessage":"E_A0_B","teal":5814},{"pc":[5475],"errorMessage":"E_A_B","teal":5837},{"pc":[5500],"errorMessage":"E_B0_B","teal":5869},{"pc":[5520],"errorMessage":"E_B_B","teal":5892},{"pc":[5584],"errorMessage":"E_CONFIG","teal":5966},{"pc":[5590],"errorMessage":"global state value does not exist: appBiatecConfigProvider.globalState('ef')","teal":5975},{"pc":[5598],"errorMessage":"E_SENDER","teal":5988},{"pc":[5643],"errorMessage":"argument 0 (currentDeposit) for calculateDistributedLiquidity must be a uint256","teal":6056},{"pc":[5655],"errorMessage":"calculateDistributedLiquidity return value overflowed 256 bits","teal":6070},{"pc":[5730],"errorMessage":"argument 0 (price) for calculateLiquidityFlatPrice must be a uint256","teal":6162},{"pc":[5738],"errorMessage":"argument 1 (y) for calculateLiquidityFlatPrice must be a uint256","teal":6172},{"pc":[5746],"errorMessage":"argument 2 (x) for calculateLiquidityFlatPrice must be a uint256","teal":6182},{"pc":[5754],"errorMessage":"calculateLiquidityFlatPrice return value overflowed 256 bits","teal":6192},{"pc":[5791],"errorMessage":"argument 0 (priceMaxSqrt) for calculateLiquidityD must be a uint256","teal":6235},{"pc":[5799],"errorMessage":"argument 1 (priceMinSqrt) for calculateLiquidityD must be a uint256","teal":6245},{"pc":[5807],"errorMessage":"argument 2 (priceMax) for calculateLiquidityD must be a uint256","teal":6255},{"pc":[5815],"errorMessage":"argument 3 (priceMin) for calculateLiquidityD must be a uint256","teal":6265},{"pc":[5823],"errorMessage":"argument 4 (y) for calculateLiquidityD must be a uint256","teal":6275},{"pc":[5831],"errorMessage":"argument 5 (x) for calculateLiquidityD must be a uint256","teal":6285},{"pc":[5839],"errorMessage":"calculateLiquidityD return value overflowed 256 bits","teal":6295},{"pc":[5978],"errorMessage":"argument 0 (dSqrt) for calculateLiquidityWithD must be a uint256","teal":6448},{"pc":[5986],"errorMessage":"argument 1 (priceMaxSqrt) for calculateLiquidityWithD must be a uint256","teal":6458},{"pc":[5994],"errorMessage":"argument 2 (priceMinSqrt) for calculateLiquidityWithD must be a uint256","teal":6468},{"pc":[6002],"errorMessage":"argument 3 (y) for calculateLiquidityWithD must be a uint256","teal":6478},{"pc":[6010],"errorMessage":"argument 4 (x) for calculateLiquidityWithD must be a uint256","teal":6488},{"pc":[6018],"errorMessage":"calculateLiquidityWithD return value overflowed 256 bits","teal":6498},{"pc":[6167],"errorMessage":"argument 0 (liquidity) for calculatePrice must be a uint256","teal":6669},{"pc":[6175],"errorMessage":"argument 1 (priceMaxSqrt) for calculatePrice must be a uint256","teal":6679},{"pc":[6183],"errorMessage":"argument 2 (priceMinSqrt) for calculatePrice must be a uint256","teal":6689},{"pc":[6191],"errorMessage":"argument 3 (assetBQuantity) for calculatePrice must be a uint256","teal":6699},{"pc":[6199],"errorMessage":"argument 4 (assetAQuantity) for calculatePrice must be a uint256","teal":6709},{"pc":[6207],"errorMessage":"calculatePrice return value overflowed 256 bits","teal":6719},{"pc":[6314],"errorMessage":"argument 0 (liquidity) for calculateAssetBWithdrawOnAssetADeposit must be a uint256","teal":6850},{"pc":[6322],"errorMessage":"argument 1 (priceMaxSqrt) for calculateAssetBWithdrawOnAssetADeposit must be a uint256","teal":6860},{"pc":[6330],"errorMessage":"argument 2 (priceMinSqrt) for calculateAssetBWithdrawOnAssetADeposit must be a uint256","teal":6870},{"pc":[6338],"errorMessage":"argument 3 (assetBBalance) for calculateAssetBWithdrawOnAssetADeposit must be a uint256","teal":6880},{"pc":[6346],"errorMessage":"argument 4 (assetABalance) for calculateAssetBWithdrawOnAssetADeposit must be a uint256","teal":6890},{"pc":[6354],"errorMessage":"argument 5 (inAmount) for calculateAssetBWithdrawOnAssetADeposit must be a uint256","teal":6900},{"pc":[6362],"errorMessage":"calculateAssetBWithdrawOnAssetADeposit return value overflowed 256 bits","teal":6910},{"pc":[6502],"errorMessage":"argument 0 (liquidity) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256","teal":7069},{"pc":[6510],"errorMessage":"argument 1 (priceMaxSqrt) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256","teal":7079},{"pc":[6518],"errorMessage":"argument 2 (priceMinSqrt) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256","teal":7089},{"pc":[6526],"errorMessage":"argument 3 (assetBBalance) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256","teal":7099},{"pc":[6534],"errorMessage":"argument 4 (assetABalance) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256","teal":7109},{"pc":[6542],"errorMessage":"argument 5 (inAmount) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256","teal":7119},{"pc":[6550],"errorMessage":"calculateAssetAWithdrawOnAssetBDeposit return value overflowed 256 bits","teal":7129},{"pc":[6714],"errorMessage":"argument 0 (liquidity) for calculateAssetAWithdrawOnLpDeposit must be a uint256","teal":7318},{"pc":[6722],"errorMessage":"argument 1 (assetABalance) for calculateAssetAWithdrawOnLpDeposit must be a uint256","teal":7328},{"pc":[6730],"errorMessage":"argument 2 (inAmount) for calculateAssetAWithdrawOnLpDeposit must be a uint256","teal":7338},{"pc":[6738],"errorMessage":"calculateAssetAWithdrawOnLpDeposit return value overflowed 256 bits","teal":7348},{"pc":[6780],"errorMessage":"argument 0 (assetBBalance) for calculateAssetBDepositOnAssetADeposit must be a uint256","teal":7407},{"pc":[6788],"errorMessage":"argument 1 (assetABalance) for calculateAssetBDepositOnAssetADeposit must be a uint256","teal":7417},{"pc":[6796],"errorMessage":"argument 2 (inAmountB) for calculateAssetBDepositOnAssetADeposit must be a uint256","teal":7427},{"pc":[6804],"errorMessage":"argument 3 (inAmountA) for calculateAssetBDepositOnAssetADeposit must be a uint256","teal":7437},{"pc":[6812],"errorMessage":"calculateAssetBDepositOnAssetADeposit return value overflowed 256 bits","teal":7447},{"pc":[6857],"errorMessage":"argument 0 (assetBBalance) for calculateAssetADepositOnAssetBDeposit must be a uint256","teal":7514},{"pc":[6865],"errorMessage":"argument 1 (assetABalance) for calculateAssetADepositOnAssetBDeposit must be a uint256","teal":7524},{"pc":[6873],"errorMessage":"argument 2 (inAmountB) for calculateAssetADepositOnAssetBDeposit must be a uint256","teal":7534},{"pc":[6881],"errorMessage":"argument 3 (inAmountA) for calculateAssetADepositOnAssetBDeposit must be a uint256","teal":7544},{"pc":[6889],"errorMessage":"calculateAssetADepositOnAssetBDeposit return value overflowed 256 bits","teal":7554},{"pc":[6962],"errorMessage":"E_CONFIG","teal":7655},{"pc":[6983],"errorMessage":"E_LP","teal":7681},{"pc":[6990],"errorMessage":"global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')","teal":7691},{"pc":[7063],"errorMessage":"this.assetABalanceBaseScale.value as uint64 overflowed 64 bits","teal":7778},{"pc":[7078],"errorMessage":"this.assetBBalanceBaseScale.value as uint64 overflowed 64 bits","teal":7791},{"pc":[7101],"errorMessage":"this.priceMinSqrt.value as uint64 overflowed 64 bits","teal":7810},{"pc":[7116],"errorMessage":"this.priceMaxSqrt.value as uint64 overflowed 64 bits","teal":7823},{"pc":[7131],"errorMessage":"this.Liquidity.value as uint64 overflowed 64 bits","teal":7836},{"pc":[7149],"errorMessage":"this.calculateDistributedLiquidity(assetLp, <uint256>0) as uint64 overflowed 64 bits","teal":7850},{"pc":[7172],"errorMessage":"this.LiquidityUsersFromFees.value as uint64 overflowed 64 bits","teal":7871},{"pc":[7187],"errorMessage":"this.LiquidityBiatecFromFees.value as uint64 overflowed 64 bits","teal":7884},{"pc":[7226],"errorMessage":"biatecFee as uint64 overflowed 64 bits","teal":7916},{"pc":[7256],"errorMessage":"this contract does not implement the given ABI method for create NoOp","teal":7939},{"pc":[7446],"errorMessage":"this contract does not implement the given ABI method for call NoOp","teal":7969},{"pc":[7460],"errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","teal":7977}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAOIACAAgFABggEBQoDwIQ9AgkmJgAg//////////////////////////////////////////8gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuaygAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYWICYmIDCoEBBBUffHUBTAJhZAJiZAj//////////wJMdQJiYwJMYgVwTWluUwVwTWF4UwVwcmljZQFmAXMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICbHABYhVCSUFURUMtQ0xBTU0tMDEtMDUtMDUEcE1heAJlZgFhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPnM2KHFCAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAQABcAFjIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCAAAAAA7msoABXNjYWxlBXNjdmVyBHBNaW4EQUxHTzEYFCEFCzEZCI0MGq8AAAAAAAAbbQAAGqEAAAAAAAAAAAAAAIgAAiVDigAAJxewJyKBgJTr3ANnJxIjZycIK2cnDitnJwwrZycYI2cnIycXZycTIycdI08CVGeJNhoCVwIANhoBF4gAAiVDigIAKIv/Jw1kEkSL/4ABdWVEjAAxAIsAEkQnF7CL/rAnIycXZ4knB4gABRZQsCVDigABJxFkiScHiAAFFlCwJUOKAAEnImSJJweIAAUWULAlQ4oAAScVZIknBzYaCRc2GggXNhoHFzYaBhc2GgUXMRYlCUk4ECUSRDYaBBc2GgMXNhoCFzYaAReIAAUWULAlQ4oKAShHBjINi/wSRIv7OAcyChJEi/s4CIGAtRgPRCcYZCMSRDEANjIAcgdIEkSL+CMNRIv6gYDC1y8ORDYyACcRZUxIFESL/yMNQQAJi/9xAUghDQ5Ei/4jDUEACYv+cQFIIQ0ORCcSZCMORIv9Jx5lRIwAi/yLABJEi/0nE2VEjAGLASMSRCcNi/1nJySL+WcnGIv4ZycPi/kWKqOWSZMkDkQprEkVSSIJTFJnJxCL+BYqo5ZJkyQORCmsSRVJIglMUmcnBCtnJwUrZycRi/dnJxqL/2cnFov+Z4v8gAJudGVEjAKLAhUhDA9JQQAJiwJRAAEnHRIQQQAKiwIhDIsCFVKMAosCFSMSQQAEJyWMAicViwKL/ov/iAEJZycSi/pni/+IAOuL/4v+E0EABYv+iADeJx+L9mchBYwDi/8jDUEAB4v/cQFIjAMhBYwEi/4jDUEAB4v+cQFIjAQhCSENiwMJlBaMBSEJIQ2LBAmUFowGJwmLBUmTJA5EKaxJFUkiCUxSZycKiwZJkyQORCmsSRVJIglMUmcnFWSMAEYGiYgAAiVDigAAKEknE2QjUxREJw1kjACLACceZUSMAbEhBbIQgARAVA7mshojsgGLAbIYsycTJScdI08CVGeJigMAi/4jEkEAE7ElshCL/7IHi/2yCCOyAbNCABWxIQeyEIv/shSL/rIRi/2yEiOyAbOJigEAi/8jDUEACCOL/zIKiP+7iYoDAShHBov9jACLABUjEkEABCcljACL/yMNQQAIi/9xA0hCAAKLAIwBi/4jDUEACIv+cQNIQgACiwCMAiiMA4ADQkxQjASL/yMSSUEABYv+IxIQjAWL/4v+EowGiwVBAA4nFosAUIwDiwCMBEIAMosGQQAdJxaLAVCMA4v/Iw1BAAiL/3EDSEIAAosAjARCABCAAkItiwFQgAEtUIsCUIwDsSEKshCLA7ImiwSyJYGAgKConJS25vkBsiIhBbIjMgqyKTIKsiojsgGztDyMAEYGiYoCAIv/JxpkEkSL/icWZBJEiYoDAIv+i/+I/+SL/ScVZBJEiScHNhoFFzYaBBc2GgMXMRYlCTEWIQwJNhoCFzYaAReIAAUWULAlQ4oHAShHCbEhBbIQI7IBJwZJsh6yHyEIshmzsSEFshAjsgEnBkmyHrIfIQiyGbOL+Yv6i/uI/5CL/ov/iAfYIQkhCpQWjAArjAErjAIrjAOL+yMNQQAWi/04ECEHEkSL/TgSFicJZKOMAkIAEov9OBAlEkSL/TgIFicJZKOMAov9OBAhBxJBAC2L/Uk4ECEHEkSMBIsEOBAhBxJEiwQ4FDIKEkSLBDgRi/sSRIsEOBIjD0RCAC6L/TgQJRJBACOL/Uk4ECUSRIwFiwU4ECUSRIsFOAcyChJEiwU4CCMPREIAAiNEi/ojDUEAFov8OBAhBxJEi/w4EhYnCmSjjANCABKL/DgQJRJEi/w4CBYnCmSjjAOL/DgQIQcSQQAti/xJOBAhBxJEjAaLBjgQIQcSRIsGOBQyChJEiwY4EYv6EkSLBjgSIw9EQgAui/w4ECUSQQAji/xJOBAlEkSMB4sHOBAlEkSLBzgHMgoSRIsHOAgjD0RCAAIjRCOL+YsASZMkDkQprEkVSSIJTFIrSYgArScPZCcQZKhBADkli/mLAEmTJA5EKaxJFUkiCUxSiwNJkyQORCmsSRVJIglMUosCSZMkDkQprEkVSSIJTFKIAG1CAGUli/mLAEmTJA5EKaxJFUkiCUxSiwNJkyQORCmsSRVJIglMUosCSZMkDkQprEkVSSIJTFKIADSMCCcIZCcQZCcPZCcFZCcEZIgQbIwJJxGLCUmTIQQORCcLrEkVSSEGCUxSF2eLCIwARgmJigUBKEcNsSEFshAjsgEnBkmyHrIfIQiyGbMnCGSMACcESWSL/6BJkyQORCmsSRVJIglMUmcnBUlki/6gSZMkDkQprEkVSSIJTFJniwCIAdKMAYv7QQEPiwGLAKGMAosCjAOLAyulQQC+JxsyCov8cABIFqGL/aOMBIsEK6VBAKcrjAWL/yulQQAOi/+LAaMnBGSijAVCABKL/iulQQALi/6LAaMnBWSijAWLBSulQQB2JwxkjAaLBIsGoIwHiweLBadBAAiLB4sFoUIABYsFiwehjAiLCIsIoycciwWjiwSjoIwJiwmWjAorjAuLBYsHp0EADYsKiwWLB6GgjAtCAAqLCosHiwWhoYwLiwsnFKKMDIsMK6VJQQAGiwyLA6QQQQAEiwyMA4sDi/2iSZMhBA5EJwusSRVJIQYJTFIXjA2LDSMSSUEABYsDK6UQQQADJYwNiw0jDUSLDYv8MQCI+wCLDUIAASOMAEYNiYoAAShHBycEZIwAJwVkjAEnJGQWjAInGGQWjAMnD2SMBCcQZIwFK4wGiwKLA6hBAByLAkmTJA5EKaxJFUkiCUxSiwGLAIgM04wGQgBKiwWLBIsDSZMkDkQprEkVSSIJTFKLAkmTJA5EKaxJFUkiCUxSiwGLAIgM+IwHiwdJkyQORCmsSRVJIglMUosFiwSLAYsAiA2OjAaLBowARgeJigAAJwiI/1pJkyQORCmsSRVJIglMUmeJigEBKEcCiP9BjACLAIv/p0EAGCcIiwBJkyQORCmsSRVJIglMUmeLAEIAGYv/iwChjAGIABSMAosBiwKmRCcIi/9ni/+MAEYCiYoAAShJJwlkjAAnCmSMAYsAiwGjiwCgiwGgjABGAYknBzYaBRc2GgQXNhoDFzEWJQlJOBAhBxJENhoCFzYaAReIABJJkyQORCmsSRVJIglMUlCwJUOKBgEoRwuL+ov7i/yI+ryL/TgUMgoSRIv9OBGL+hJEi/04EiMPRIv+i/+IAu2xIQWyECOyAScGSbIesh8hCLIZs7EhBbIQI7IBJwZJsh6yHyEIshmzIQkhCpQWjACL/TgSFowBiwGLAKOMAosCjAOLAUmTJA5EKaxJFUkiCUxSi/qICuCMBIsEK6VBACgnDGSLAqOLBKKMBYsCiwWgjAMnDElkiwWhSZMkDkQprEkVSSIJTFJnJwhkJwRkiwNJkyQORCmsSRVJIglMUogO0YwGiwYnCWSiSZMhBA5EJwusSRVJIQYJTFIXjAeLByMNQQAJiweL/DEAiPinJwhkJwVkiwNJkyQORCmsSRVJIglMUogOjIwIiwgnCmSiSZMhBA5EJwusSRVJIQYJTFIXjAmLCSMNQQAJiwmL+zEAiPhiiwcjDUlAAAWLCSMNEUQnBGSLBqGMCicFZIsIoYwLJwSLCkmTJA5EKaxJFUkiCUxSZycFiwtJkyQORCmsSRVJIglMUmeI/cSLA4sAoowARguJJwc2GgVJFSISRDYaBBc2GgMXNhoCFzYaAReIABJJkyQORCmsSRVJIglMUlCwJUOKBQEoRwmL/Iv9i/6I+P2L/ycNZBJEi/8nGWVEjACL/ycTZUSMAYsBIxJEMQCLABJEsSEFshAjsgEnBkmyHrIfIQiyGbOxIQWyECOyAScGSbIesh8hCLIZsyEJIQqUFowCi/uMA4sDK6hBAAUnDmSMA4sDJw5kpkQnDklkiwOhSZMkDkQprEkVSSIJTFJnJwhkJwRkiwNJkyQORCmsSRVJIglMUogNOYwEiwQnCWSiSZMhBA5EJwusSRVJIQYJTFIXjAWLBSMNQQAJiwWL/jEAiPcPJwhkJwVkiwNJkyQORCmsSRVJIglMUogM9IwGiwYnCmSiSZMhBA5EJwusSRVJIQYJTFIXjAeLByMNQQAJiweL/TEAiPbKJwRkiwShjAgnBWSLBqGMCScEiwhJkyQORCmsSRVJIglMUmcnBYsJSZMkDkQprEkVSSIJTFJniPw6iwOLAqKMAEYJiYoCAShHAov/Jw1kEkSL/4ABaWVEjACL/osAEkSxIQWyEIAEEn/7e7IaMQCyGoABAbIaI7IBi/6yGLO0OyUJxTpXBACMAYsBNf80/4HIAVMURIsBNf80/1cBCBcnH2QPRIv/JxNlRIwCiwIjEkSLAYwARgKJJwc2GgYXNhoFFzYaBBcxFiUJNhoDFzYaAhc2GgEXiAASSZMkDkQprEkVSSIJTFJQsCVDigcBKEcgsSEFshAjsgEnBkmyHrIfIQiyGbOxIQWyECOyAScGSbIesh8hCLIZs7EhBbIQI7IBJwZJsh6yHyEIshmzi/qL+4j2r4v7i/oTRIv8OBAlEkEAL4v7IxJJQAAFi/ojEhFEi/w4ECUSRIv8OAgjDUSL/DgHMgoSRIv8OAAxABJEQgA3i/w4ECEHEkSL/DgQIQcSRIv8OBIjDUSL/DgUMgoSRIv8OAAxABJEi/w4EYv7Eov8OBGL+hIRRIv/Jx5lRIwAi/2LABJEi/6L/4j+howBKicSZBaLATX/NP9XCQgXFqOLATX/NP9XEQgXFqKhjAIjjAMjjAQjjAUjjAYjjAcjjAiL/DgQJRJBAAmL+yMSjAhCAAmL/DgRi/sSjAgrjAkrjAqLCEEA5SuMC4v8OBAlEkEAEIv8OAgWjAuL/DgIjARCAA2L/DgSFowLi/w4EowEiwsnCWSjjAqLCosCoyqijAwnCGQnEGQnD2QnBWQnBGSLDEmTJA5EKaxJFUkiCUxSiAjdjA2LDYwJiw0nCmSijA6LDicKZKOLDalBAA+LDicgoYwOiw4nCmSjjAmLDkmTIQQORCcLrEkVSSEGCUxSF4wPiw+MA4v5Iw1BAAaLD4v5D0SLD4wFiw+L+jEAiPP6JwRJZIsKoEmTJA5EKaxJFUkiCUxSZycFSWSLCaFJkyQORCmsSRVJIglMUmeLCBRBAOUrjBCL/DgQJRJBABCL/DgIFowQi/w4CIwFQgANi/w4EhaMEIv8OBKMBYsQJwpko4wKiwqLAqMqoowRJwhkJxBkJw9kJwVkJwRkixFJkyQORCmsSRVJIglMUogIrowSixKMCYsSJwlkoowTixMnCWSjixKpQQAPixMnIKGME4sTJwlko4wJixNJkyEEDkQnC6xJFUkhBglMUheMFIsUjAOL+SMNQQAGixSL+Q9EixSMBIsUi/sxAIjzDycFSWSLCqBJkyQORCmsSRVJIglMUmcnBElkiwmhSZMkDkQprEkVSSIJTFJnJwhkjBWLFYj4mowWixaLFaGMF4sIQQAnJwRkixejixaijBiLGEmTIQQORCcLrEkVSSEGCUxSF4wGI4wHQgAkJwVkixejixaijBkjjAaLGUmTIQQORCcLrEkVSSEGCUxSF4wHJw1kJxJlRIwaixorqEEAHYsXjBsnDElkixugSZMkDkQprEkVSSIJTFJnQgA+ixcqixqhoyqijByLF4scoYwdJwxJZIscoEmTJA5EKaxJFUkiCUxSZycOSWSLHaBJkyQORCmsSRVJIglMUmcnCGQnEGQnD2QnBWQnBGSIBe6MHosEIw1JQQAFiwUjDRBEJwlkSZMhBA5EVxgIF4wfJwpkSZMhBA5EVxgIF4wgsSEFshCABOE+T1qyGjIIFrIai/sWshqL+hayGicRZBayGoseSZMhBA5EJwusSRVJIQYJTFIXFrIaiwSLHwsWshqLBYsgCxayGosGFrIaiwcWshonIbIaI7IBi/2yGLMnEYseSZMhBA5EJwusSRVJIQYJTFIXZ4sDFowARiCJJwc2GgVJFSISRDYaBEkVIhJENhoDFzYaAhc2GgEXiAASSZMkDkQprEkVSSIJTFJQsCVDigUBKEcJsSEFshAjsgEnBkmyHrIfIQiyGbOxIQWyECOyAScGSbIesh8hCLIZs4v9i/6I8geL/ycNZBJEi/8nGWVEjACL/ycTZUSMAYsBIxJEMQCLABJEJwRJZIv8oEmTJA5EKaxJFUkiCUxSZycFSWSL+6BJkyQORCmsSRVJIglMUmeL/iMSQQAVMgpzAEghCwkWJwlkoycEZKdEQgARMgqL/nAASBYnCWSjJwRkp0SL/SMSQQAVMgpzAEghCwkWJwpkoycFZKdEQgARMgqL/XAASBYnCmSjJwVkp0QnCGSMAosCiPX+jAOLA4sCoYwEJw1kJxJlRIwFiwUrqEEAHYsEjAYnDElkiwagSZMkDkQprEkVSSIJTFJnQgA+iwQqiwWhoyqijAeLBIsHoYwIJwxJZIsHoEmTJA5EKaxJFUkiCUxSZycOSWSLCKBJkyQORCmsSRVJIglMUmcnCGQnEGQnD2QnBWQnBGSIA6KMCScRiwlJkyEEDkQnC6xJFUkhBglMUhdniwSMAEYJiScHNhoFFzYaBBc2GgMXNhoCFzYaAReIAAUWULAlQ4oFAShJi/2L/ojwhYv/Jw1kEkSL/ycZZUSMAIv/JxNlRIwBiwEjEkQxAIsAEkSL/CMNQQAJi/yL/jEAiO87i/sjDUEACYv7i/0xAIjvK4v+IxJBABUyCnMASCELCRYnCWSjJwRkp0RCABEyCov+cABIFicJZKMnBGSnRIv9IxJBABUyCnMASCELCRYnCmSjJwVkp0RCABEyCov9cABIFicKZKMnBWSnRIv8i/sIjABGAYk2GggXNhoHFzYaBhc2GgUXNhoEVwIANhoDVwIANhoCVwIANhoBF4gAAiVDiggAKIv/Jw1kEkSL/ycZZUSMADEAiwASRLEhDLIQi/2yC4v8sj+L+7IMi/myDov6sg2L/rIKi/iyAbOJJwc2GgJJFSISRDYaAReIABJJkyQORCmsSRVJIglMUlCwJUOKAgEoRwQyCov/cABIFov+oYwAJxuMAScbiwChjAIhCSEKlBaMA4sCiwOjjASLBIwARgSJJwc2GgNJFSISRDYaAkkVIhJENhoBSRUiEkSIABJJkyQORCmsSRVJIglMUlCwJUOKAwGL/4v9oyqii/6giScHNhoGSRUiEkQ2GgVJFSISRDYaBEkVIhJENhoDSRUiEkQ2GgJJFSISRDYaAUkVIhJEiAASSZMkDkQprEkVSSIJTFJQsCVDigYBKEcIi/+L/6OL/aMqoiqijACL/ov+o4v8oowBJxSL/6OL/qOL+6OMAosCi/qiKqKMAycci/+ji/6jKqKMBCcci/+ji/6ji/ujjAWLBYv6oiqijAaLAIsBoIsDoIsEoIsGoYwHKosHo5aMCIsIjABGCIknBzYaBUkVIhJENhoESRUiEkQ2GgNJFSISRDYaAkkVIhJENhoBSRUiEkSIABJJkyQORCmsSRVJIglMUlCwJUOKBQEoRwuL/4v9oyqijACL/iqji/yijAEnFIwCJxSL/aOMA4sDKqOMBIsEi/yijAUnFCqjiwWlQQAhiwCLAaCL+6CMBicUKqOLBaGMByqLBqOLB6KMCIsIQgAeiwCLAaCL+6GMCYsFJxQqo6GMCiqLCaOLCqKMC4sLjABGC4knBzYaBUkVIhJENhoESRUiEkQ2GgNJFSISRDYaAkkVIhJENhoBSRUiEkSIABJJkyQORCmsSRVJIglMUlCwJUOKBQEoRweL/Yv8qEEADov9i/2jKqKMAIsAQgAzi/2MAYv8jAKL+4sBoyqijAOL+yqjiwKijASL/osDoIwFi/+LBKCMBosFKqOLBqKMB4sHjABGB4knBzYaBkkVIhJENhoFSRUiEkQ2GgRJFSISRDYaA0kVIhJENhoCSRUiEkQ2GgFJFSISRIgAEkmTJA5EKaxJFUkiCUxSULAlQ4oGAShHB4v8i/uoQQATi/+L/KOL/KMqoiqijACLAEIAT4v8i/ujKqKL/6Mqoov6oyqijAGL+4v/oyqii/2jKqKMAov7i/+jKqKMA4v7i/6jKqKMBIsBiwKgjAWLA4sEoIv6oIwGiwUqo4sGoowHiweMAEYHiScHNhoGSRUiEkQ2GgVJFSISRDYaBEkVIhJENhoDSRUiEkQ2GgJJFSISRDYaAUkVIhJEiAASSZMkDkQprEkVSSIJTFJQsCVDigYBKEcNi/yL+6hBABOL/yqjKqOL/KKL/KKMAIsAQgBni/6MAYv9jAKL/IwDi/uMBIv6jAWL/4sFoyqijAaLBIv/oyqiiwGjKqKMB4sGiwegjAiLA4sEoyqiiwWjKqKMCYsEi/+jKqKMCosEiwKjKqKMC4sJiwqgiwugjAyLCCqjiwyijA2LDYwARg2JJwc2GgNJFSISRDYaAkkVIhJENhoBSRUiEkSIABJJkyQORCmsSRVJIglMUlCwJUOKAwEoi/6L/6OL/aKMAIsAjACJJwc2GgRJFSISRDYaA0kVIhJENhoCSRUiEkQ2GgFJFSISRIgAEkmTJA5EKaxJFUkiCUxSULAlQ4oEAYv9K6VBAAmL/4v8o4v9oomL/oknBzYaBEkVIhJENhoDSRUiEkQ2GgJJFSISRDYaAUkVIhJEiAASSZMkDkQprEkVSSIJTFJQsCVDigQBi/wrpUEACYv+i/2ji/yiiYv/iScHNhoEFzYaAxc2GgIXNhoBF4gABFCwJUOKBAEoRwKL/ycNZBJEi/4nGmQSRIv9JxZkEkQnFWSL/BJEJw1kJxJlRIwAi/4jEkEADjIKcwBIMgpzAUgJQgAHMgqL/nAASIwBi/0jEkEADjIKcwBIMgpzAUgJQgAHMgqL/XAASIwCJyEnBGRJkyEEDkRXGAgXFlAnBWRJkyEEDkRXGAgXFlCLARZQiwIWUCcPZEmTIQQORFcYCBcWUCcQZEmTIQQORFcYCBcWUCcIZEmTIQQORFcYCBcWUCuL/Ij6PUmTIQQORCcLrEkVSSEGCUxSFxZQJwxkSZMhBA5EVxgIFxZQJw5kSZMhBA5EVxgIFxZQJxpkFlAnFmQWUCcVZBZQJxFkFlAnEmQWUIsASZMhBA5EVxgIFxZQJx9kFlCMAEYCiYAEuER7NjYaAI4B5VMAgATRcX/lgATjpDpKgAQddkqegAQr//p1gATVyJuvgAQEQPqPgARUmpCkgASJSpNPgAQgEzSegATOVkQSgAQit0bIgARnkUJkgAQ57KhUgAT/aVgWgATco9TWgARp1iOxgAQ8LH5KgARL9XG2gARS95I/gARsJbPzgATmTd2CgARJ9oNwgARP7KNZNhoAjhflAuUT5STlNecO6Ijtde878Tn19fe1+IX47PlD+YD6O/r4+4v8R/0b/V39qv33AIAEX8iFoDYaAI4B5L8A","clear":"Cg=="}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AmmStatus = {
  scale: bigint,
  assetABalance: bigint,
  assetBBalance: bigint,
  realABalance: bigint,
  realBBalance: bigint,
  priceMinSqrt: bigint,
  priceMaxSqrt: bigint,
  currentLiquidity: bigint,
  releasedLiquidity: bigint,
  liquidityUsersFromFees: bigint,
  liquidityBiatecFromFees: bigint,
  assetA: bigint,
  assetB: bigint,
  poolToken: bigint,
  price: bigint,
  fee: bigint,
  biatecFee: bigint,
  verificationClass: bigint
}


/**
 * Converts the ABI tuple representation of a AmmStatus to the struct representation
 */
export function AmmStatusFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AmmStatus, APP_SPEC.structs) as AmmStatus
}

/**
 * The argument types for the BiatecClammPool contract
 */
export type BiatecClammPoolArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'updateApplication(uint64,byte[])void': {
      appBiatecConfigProvider: bigint | number
      newVersion: Uint8Array
    }
    'getCurrentPrice()uint64': Record<string, never>
    'getPriceDivider()uint64': Record<string, never>
    'getLPTokenId()uint64': Record<string, never>
    'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': {
      /**
       * Asset A ID must be lower then Asset B ID, or can be equal to Asset B ID for staking pools
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * Biatec amm provider
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Pool provider
       */
      appBiatecPoolProvider: bigint | number
      /**
       * Seed transaction so that smart contract can opt in to the assets
       */
      txSeed: AppMethodCallTransactionArgument
      /**
       * Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%
       */
      fee: bigint | number
      /**
       * Min price range. At this point all assets are in asset A.
       */
      priceMin: bigint | number
      /**
       * Max price range. At this point all assets are in asset B.
       */
      priceMax: bigint | number
      /**
       * Deployer can specify the current price for easier deployemnt.
       */
      currentPrice: bigint | number
      /**
       * Minimum verification level from the biatec identity. Level 0 means no kyc.
       */
      verificationClass: bigint | number
    }
    'bootstrapStep2()void': Record<string, never>
    'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64': {
      /**
       * Configuration reference
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Identity service reference
       */
      appBiatecIdentityProvider: bigint | number
      /**
       * Transfer of asset A to the LP pool
       */
      txAssetADeposit?: AppMethodCallTransactionArgument
      /**
       * Transfer of asset B to the LP pool
       */
      txAssetBDeposit: AppMethodCallTransactionArgument
      /**
       * Asset A
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * Liquidity pool asset
       */
      assetLp: bigint | number
    }
    'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256': {
      /**
       * Configuration reference
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Identity service reference
       */
      appBiatecIdentityProvider: bigint | number
      /**
       * Transfer of the LP token
       */
      txLpXfer: AppMethodCallTransactionArgument
      /**
       * Asset A
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * LP pool asset
       */
      assetLp: bigint | number
    }
    'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Asset A
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      assetLp: bigint | number
      /**
       * Amount to withdraw. If zero, removes all available lps from fees.
       */
      amount: bigint | number
    }
    'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256': {
      appBiatecConfigProvider: bigint | number
      appBiatecIdentityProvider: bigint | number
      appBiatecPoolProvider: bigint | number
      /**
       * Transfer of the token to be deposited to the pool. To the owner the other asset will be sent.
       */
      txSwap: AppMethodCallTransactionArgument
      /**
       * Asset A
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * If number greater then zero, the check is performed for the output of the other asset
       */
      minimumToReceive: bigint | number
    }
    'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Asset A
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * Amount of asset A to be deposited to the liquidity. In base decimals (9)
       */
      amountA: bigint | number
      /**
       * Amount of asset B to be deposited to the liquidity. In base decimals (9)
       */
      amountB: bigint | number
    }
    'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64': {
      /**
       * Biatec config app. Only addressExecutiveFee is allowed to execute this method.
       */
      appBiatecConfigProvider: bigint | number
      /**
       * Asset A
       */
      assetA: bigint | number
      /**
       * Asset B
       */
      assetB: bigint | number
      /**
       * Amount of asset A to be deposited to the liquidity. In asset a decimals
       */
      amountA: bigint | number
      /**
       * Amount of asset B to be deposited to the liquidity. In asset b decimals
       */
      amountB: bigint | number
    }
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': {
      appBiatecConfigProvider: bigint | number
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
      fee: bigint | number
    }
    'calculateDistributedLiquidity(uint64,uint256)uint256': {
      assetLp: bigint | number
      currentDeposit: bigint | number
    }
    'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256': {
      x: bigint | number
      y: bigint | number
      price: bigint | number
    }
    'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A position balanced on the curve
       */
      x: bigint | number
      /**
       * Asset B position balanced on the curve
       */
      y: bigint | number
      /**
       * Minimum price variable in base scale decimals (pa)
       */
      priceMin: bigint | number
      /**
       * Maximum price variable in base scale decimals (pb)
       */
      priceMax: bigint | number
      /**
       * sqrt(priceMin) in base scale decimals Variable pas
       */
      priceMinSqrt: bigint | number
      /**
       * sqrt(priceMax) in base scale decimals Variable pbs
       */
      priceMaxSqrt: bigint | number
    }
    'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A position balanced on the curve
       */
      x: bigint | number
      /**
       * Asset B position balanced on the curve
       */
      y: bigint | number
      /**
       * sqrt(priceMin) in base scale decimals Variable pas
       */
      priceMinSqrt: bigint | number
      /**
       * sqrt(priceMax) in base scale decimals Variable pbs
       */
      priceMaxSqrt: bigint | number
      dSqrt: bigint | number
    }
    'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * x
       */
      assetAQuantity: bigint | number
      /**
       * y
       */
      assetBQuantity: bigint | number
      /**
       * sqrt(priceMin)
       */
      priceMinSqrt: bigint | number
      /**
       * sqrt(priceMax)
       */
      priceMaxSqrt: bigint | number
      /**
       * Current pool liquidity - L variable
       */
      liquidity: bigint | number
    }
    'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
       */
      inAmount: bigint | number
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number
      /**
       * sqrt(Min price). Variable pMinS, in base scale
       */
      priceMinSqrt: bigint | number
      /**
       * sqrt(Max price). Variable pMaxS, in base scale
       */
      priceMaxSqrt: bigint | number
      /**
       * sqrt(Max price). Variable L, in base scale
       */
      liquidity: bigint | number
    }
    'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
       */
      inAmount: bigint | number
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number
      /**
       * sqrt(Min price). Variable pMinS, in base scale
       */
      priceMinSqrt: bigint | number
      /**
       * sqrt(Max price). Variable pMaxS, in base scale
       */
      priceMaxSqrt: bigint | number
      /**
       * sqrt(Max price). Variable L, in base scale
       */
      liquidity: bigint | number
    }
    'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': {
      /**
       * LP Asset amount in Base decimal representation..
       */
      inAmount: bigint | number
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number
      /**
       * Current liquidity. Variable L, in base scale
       */
      liquidity: bigint | number
    }
    'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A amount in Base decimal representation
       */
      inAmountA: bigint | number
      /**
       * Asset B amount in Base decimal representation
       */
      inAmountB: bigint | number
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number
    }
    'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256': {
      /**
       * Asset A amount in Base decimal representation
       */
      inAmountA: bigint | number
      /**
       * Asset B amount in Base decimal representation
       */
      inAmountB: bigint | number
      /**
       * Asset A balance. Variable ab, in base scale
       */
      assetABalance: bigint | number
      /**
       * Asset B balance. Variable bb, in base scale
       */
      assetBBalance: bigint | number
    }
    'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      appBiatecConfigProvider: bigint | number
      assetA: bigint | number
      assetB: bigint | number
      assetLp: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'updateApplication(uint64,byte[])void': [appBiatecConfigProvider: bigint | number, newVersion: Uint8Array]
    'getCurrentPrice()uint64': []
    'getPriceDivider()uint64': []
    'getLPTokenId()uint64': []
    'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': [assetA: bigint | number, assetB: bigint | number, appBiatecConfigProvider: bigint | number, appBiatecPoolProvider: bigint | number, txSeed: AppMethodCallTransactionArgument, fee: bigint | number, priceMin: bigint | number, priceMax: bigint | number, currentPrice: bigint | number, verificationClass: bigint | number]
    'bootstrapStep2()void': []
    'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64': [appBiatecConfigProvider: bigint | number, appBiatecIdentityProvider: bigint | number, txAssetADeposit: AppMethodCallTransactionArgument | undefined, txAssetBDeposit: AppMethodCallTransactionArgument, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number]
    'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256': [appBiatecConfigProvider: bigint | number, appBiatecIdentityProvider: bigint | number, txLpXfer: AppMethodCallTransactionArgument, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number]
    'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256': [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number, amount: bigint | number]
    'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256': [appBiatecConfigProvider: bigint | number, appBiatecIdentityProvider: bigint | number, appBiatecPoolProvider: bigint | number, txSwap: AppMethodCallTransactionArgument, assetA: bigint | number, assetB: bigint | number, minimumToReceive: bigint | number]
    'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256': [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, amountA: bigint | number, amountB: bigint | number]
    'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64': [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, amountA: bigint | number, amountB: bigint | number]
    'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': [appBiatecConfigProvider: bigint | number, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number, fee: bigint | number]
    'calculateDistributedLiquidity(uint64,uint256)uint256': [assetLp: bigint | number, currentDeposit: bigint | number]
    'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256': [x: bigint | number, y: bigint | number, price: bigint | number]
    'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256': [x: bigint | number, y: bigint | number, priceMin: bigint | number, priceMax: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number]
    'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256': [x: bigint | number, y: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, dSqrt: bigint | number]
    'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256': [assetAQuantity: bigint | number, assetBQuantity: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, liquidity: bigint | number]
    'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': [inAmount: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, liquidity: bigint | number]
    'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': [inAmount: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number, priceMinSqrt: bigint | number, priceMaxSqrt: bigint | number, liquidity: bigint | number]
    'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': [inAmount: bigint | number, assetABalance: bigint | number, liquidity: bigint | number]
    'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256': [inAmountA: bigint | number, inAmountB: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number]
    'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256': [inAmountA: bigint | number, inAmountB: bigint | number, assetABalance: bigint | number, assetBBalance: bigint | number]
    'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [appBiatecConfigProvider: bigint | number, assetA: bigint | number, assetB: bigint | number, assetLp: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BiatecClammPoolReturns = {
  'createApplication()void': void
  'updateApplication(uint64,byte[])void': void
  'getCurrentPrice()uint64': bigint
  'getPriceDivider()uint64': bigint
  'getLPTokenId()uint64': bigint
  'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'bootstrapStep2()void': void
  'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64': bigint
  'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256': bigint
  'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256': bigint
  'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256': bigint
  'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256': bigint
  'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void': void
  'calculateDistributedLiquidity(uint64,uint256)uint256': bigint
  'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256': bigint
  'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256': bigint
  'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256': bigint
  'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256': bigint
  'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': bigint
  'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256': bigint
  'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256': bigint
  'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256': bigint
  'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256': bigint
  'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': AmmStatus
}

/**
 * Defines the types of available calls and state of the BiatecClammPool smart contract.
 */
export type BiatecClammPoolTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: BiatecClammPoolArgs['obj']['createApplication()void']
      argsTuple: BiatecClammPoolArgs['tuple']['createApplication()void']
      returns: BiatecClammPoolReturns['createApplication()void']
    }>
    & Record<'updateApplication(uint64,byte[])void' | 'updateApplication', {
      argsObj: BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void']
      argsTuple: BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']
      returns: BiatecClammPoolReturns['updateApplication(uint64,byte[])void']
    }>
    & Record<'getCurrentPrice()uint64' | 'getCurrentPrice', {
      argsObj: BiatecClammPoolArgs['obj']['getCurrentPrice()uint64']
      argsTuple: BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']
      returns: BiatecClammPoolReturns['getCurrentPrice()uint64']
    }>
    & Record<'getPriceDivider()uint64' | 'getPriceDivider', {
      argsObj: BiatecClammPoolArgs['obj']['getPriceDivider()uint64']
      argsTuple: BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']
      returns: BiatecClammPoolReturns['getPriceDivider()uint64']
    }>
    & Record<'getLPTokenId()uint64' | 'getLPTokenId', {
      argsObj: BiatecClammPoolArgs['obj']['getLPTokenId()uint64']
      argsTuple: BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']
      returns: BiatecClammPoolReturns['getLPTokenId()uint64']
    }>
    & Record<'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64' | 'bootstrap', {
      argsObj: BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
      /**
       * LP token ID
       */
      returns: BiatecClammPoolReturns['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'bootstrapStep2()void' | 'bootstrapStep2', {
      argsObj: BiatecClammPoolArgs['obj']['bootstrapStep2()void']
      argsTuple: BiatecClammPoolArgs['tuple']['bootstrapStep2()void']
      returns: BiatecClammPoolReturns['bootstrapStep2()void']
    }>
    & Record<'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64' | 'addLiquidity', {
      argsObj: BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
      argsTuple: BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
      /**
       * LP Token quantity distributed
       */
      returns: BiatecClammPoolReturns['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']
    }>
    & Record<'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256' | 'removeLiquidity', {
      argsObj: BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
      /**
       * LP position reduced
       */
      returns: BiatecClammPoolReturns['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']
    }>
    & Record<'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256' | 'removeLiquidityAdmin', {
      argsObj: BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
      /**
       * LP position reduced
       */
      returns: BiatecClammPoolReturns['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']
    }>
    & Record<'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256' | 'swap', {
      argsObj: BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
      returns: BiatecClammPoolReturns['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']
    }>
    & Record<'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256' | 'distributeExcessAssets', {
      argsObj: BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
      returns: BiatecClammPoolReturns['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']
    }>
    & Record<'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64' | 'withdrawExcessAssets', {
      argsObj: BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
      returns: BiatecClammPoolReturns['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' | 'sendOnlineKeyRegistration', {
      argsObj: BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      argsTuple: BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
      returns: BiatecClammPoolReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']
    }>
    & Record<'calculateDistributedLiquidity(uint64,uint256)uint256' | 'calculateDistributedLiquidity', {
      argsObj: BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']
      returns: BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256']
    }>
    & Record<'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256' | 'calculateLiquidityFlatPrice', {
      argsObj: BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
      returns: BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
    }>
    & Record<'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateLiquidityD', {
      argsObj: BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      /**
       * Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
       */
      returns: BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    }>
    & Record<'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateLiquidityWithD', {
      argsObj: BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
      /**
       * Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
       */
      returns: BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
    }>
    & Record<'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256' | 'calculatePrice', {
      argsObj: BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
      /**
       * the price with specified quantity with the price range set in the contract
       */
      returns: BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
    }>
    & Record<'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateAssetBWithdrawOnAssetADeposit', {
      argsObj: BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      /**
       * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    }>
    & Record<'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' | 'calculateAssetAWithdrawOnAssetBDeposit', {
      argsObj: BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
      /**
       * Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
    }>
    & Record<'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' | 'calculateAssetAWithdrawOnLpDeposit', {
      argsObj: BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
      /**
       * Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
    }>
    & Record<'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256' | 'calculateAssetBDepositOnAssetADeposit', {
      argsObj: BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
      /**
       * Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
       */
      returns: BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
    }>
    & Record<'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256' | 'calculateAssetADepositOnAssetBDeposit', {
      argsObj: BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      argsTuple: BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
      /**
       * Amount of asset A to be deposited. The result is in Base decimals (9)
       */
      returns: BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
    }>
    & Record<'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'status', {
      argsObj: BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        setupFinished: boolean
        assetA: bigint
        assetADecimalsScaleFromBase: bigint
        assetB: bigint
        assetBDecimalsScaleFromBase: bigint
        assetLp: bigint
        assetABalanceBaseScale: bigint
        assetBBalanceBaseScale: bigint
        priceMin: bigint
        priceMax: bigint
        priceMinSqrt: bigint
        priceMaxSqrt: bigint
        liquidity: bigint
        liquidityUsersFromFees: bigint
        liquidityBiatecFromFees: bigint
        fee: bigint
        currentPrice: bigint
        scale: bigint
        appBiatecConfigProvider: bigint
        verificationClass: bigint
        version: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BiatecClammPoolSignatures = keyof BiatecClammPoolTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BiatecClammPoolNonVoidMethodSignatures = keyof BiatecClammPoolTypes['methods'] extends infer T ? T extends keyof BiatecClammPoolTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BiatecClammPool smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BiatecClammPoolSignatures> = BiatecClammPoolTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BiatecClammPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BiatecClammPoolSignatures> = BiatecClammPoolTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BiatecClammPoolTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BiatecClammPoolCreateCallParams =
  | Expand<CallParams<BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type BiatecClammPoolUpdateCallParams =
  | Expand<CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication'}>
  | Expand<CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & {method: 'updateApplication(uint64,byte[])void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type BiatecClammPoolDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BiatecClammPoolCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: BiatecClammPoolUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BiatecClammPool smart contract
 */
export abstract class BiatecClammPoolParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BiatecClammPoolCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return BiatecClammPoolParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BiatecClammPool smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends BiatecClammPoolUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication(uint64,byte[])void':
            return BiatecClammPoolParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication(uint64,byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.newVersion],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the getCurrentPrice()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentPrice(params: CallParams<BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentPrice()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPriceDivider()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPriceDivider(params: CallParams<BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPriceDivider()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getLPTokenId()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLpTokenId(params: CallParams<BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLPTokenId()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * Only Biatec Pool Provider can deploy and bootsrap this smart contract
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetA, params.args.assetB, params.args.appBiatecConfigProvider, params.args.appBiatecPoolProvider, params.args.txSeed, params.args.fee, params.args.priceMin, params.args.priceMax, params.args.currentPrice, params.args.verificationClass],
    }
  }
  /**
   * Constructs a no op call for the bootstrapStep2()void ABI method
   *
   * When we know the app id of this pool, we can register it properly at the pool provider
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrapStep2(params: CallParams<BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrapStep2()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 ABI method
   *
   * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liquidity token
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.appBiatecIdentityProvider, params.args.txAssetADeposit, params.args.txAssetBDeposit, params.args.assetA, params.args.assetB, params.args.assetLp],
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 ABI method
   *
   * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.appBiatecIdentityProvider, params.args.txLpXfer, params.args.assetA, params.args.assetB, params.args.assetLp],
    }
  }
  /**
   * Constructs a no op call for the removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 ABI method
   *
  * This method allows biatec admin to reduce the lp position created by lp fees allocation.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidityAdmin(params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.assetA, params.args.assetB, params.args.assetLp, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 ABI method
   *
   * Swap Asset A to Asset B or Asset B to Asst A
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.appBiatecIdentityProvider, params.args.appBiatecPoolProvider, params.args.txSwap, params.args.assetA, params.args.assetB, params.args.minimumToReceive],
    }
  }
  /**
   * Constructs a no op call for the distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 ABI method
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
  
  
  This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeExcessAssets(params: CallParams<BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.assetA, params.args.assetB, params.args.amountA, params.args.amountB],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
  
  
  This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessAssets(params: CallParams<BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.assetA, params.args.assetB, params.args.amountA, params.args.amountB],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution, params.args.fee],
    }
  }
  /**
   * Constructs a no op call for the calculateDistributedLiquidity(uint64,uint256)uint256 ABI method
   *
  * addressExecutiveFee can perfom key unregistration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateDistributedLiquidity(params: CallParams<BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateDistributedLiquidity(uint64,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetLp, params.args.currentDeposit],
    }
  }
  /**
   * Constructs a no op call for the calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateLiquidityFlatPrice(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.x, params.args.y, params.args.price],
    }
  }
  /**
   * Constructs a no op call for the calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
  * Calculates the liquidity  from the x - Asset A position and y - Asset B position
  This method calculates discriminant - first part of the calculation.
  It is divided so that the readonly method does not need to charge fees

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateLiquidityD(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.x, params.args.y, params.args.priceMin, params.args.priceMax, params.args.priceMinSqrt, params.args.priceMaxSqrt],
    }
  }
  /**
   * Constructs a no op call for the calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateLiquidityWithD(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.x, params.args.y, params.args.priceMinSqrt, params.args.priceMaxSqrt, params.args.dSqrt],
    }
  }
  /**
   * Constructs a no op call for the calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Get the current price when asset a has x
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculatePrice(params: CallParams<BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetAQuantity, params.args.assetBQuantity, params.args.priceMinSqrt, params.args.priceMaxSqrt, params.args.liquidity],
    }
  }
  /**
   * Constructs a no op call for the calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetBWithdrawOnAssetADeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inAmount, params.args.assetABalance, params.args.assetBBalance, params.args.priceMinSqrt, params.args.priceMaxSqrt, params.args.liquidity],
    }
  }
  /**
   * Constructs a no op call for the calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetAWithdrawOnAssetBDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inAmount, params.args.assetABalance, params.args.assetBBalance, params.args.priceMinSqrt, params.args.priceMaxSqrt, params.args.liquidity],
    }
  }
  /**
   * Constructs a no op call for the calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetAWithdrawOnLpDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inAmount, params.args.assetABalance, params.args.liquidity],
    }
  }
  /**
   * Constructs a no op call for the calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 ABI method
   *
  * Calculates how much asset B should be deposited when user deposit asset a and b.
  
  
  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetBDepositOnAssetADeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inAmountA, params.args.inAmountB, params.args.assetABalance, params.args.assetBBalance],
    }
  }
  /**
   * Constructs a no op call for the calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 ABI method
   *
  * Calculates how much asset A should be deposited when user deposit asset a and b
  
  
  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateAssetADepositOnAssetBDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.inAmountA, params.args.inAmountB, params.args.assetABalance, params.args.assetBBalance],
    }
  }
  /**
   * Constructs a no op call for the status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static status(params: CallParams<BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appBiatecConfigProvider, params.args.assetA, params.args.assetB, params.args.assetLp],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BiatecClammPool smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BiatecClammPoolFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BiatecClammPoolFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BiatecClammPoolClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BiatecClammPoolClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BiatecClammPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BiatecClammPoolDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BiatecClammPoolParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BiatecClammPoolCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? BiatecClammPoolParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (BiatecClammPoolUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BiatecClammPoolClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecClammPool smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(BiatecClammPoolParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appFactory.params.deployUpdate(BiatecClammPoolParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecClammPool smart contract using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(BiatecClammPoolParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BiatecClammPool smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Initial setup
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BiatecClammPoolArgs['obj']['createApplication()void'] | BiatecClammPoolArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(BiatecClammPoolParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BiatecClammPoolReturns['createApplication()void']) }, appClient: new BiatecClammPoolClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BiatecClammPool smart contract
 */
export class BiatecClammPoolClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BiatecClammPoolClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BiatecClammPool app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BiatecClammPoolClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BiatecClammPoolNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BiatecClammPoolClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BiatecClammPoolClient> {
    return new BiatecClammPoolClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BiatecClammPoolClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BiatecClammPoolClient> {
    return new BiatecClammPoolClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.params.update(BiatecClammPoolParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentPrice: (params: CallParams<BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.getCurrentPrice(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPriceDivider: (params: CallParams<BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.getPriceDivider(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLpTokenId: (params: CallParams<BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.getLpTokenId(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Only Biatec Pool Provider can deploy and bootsrap this smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call params: LP token ID
     */
    bootstrap: (params: CallParams<BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrapStep2()void` ABI method.
     *
     * When we know the app id of this pool, we can register it properly at the pool provider
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrapStep2: (params: CallParams<BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.bootstrapStep2(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64` ABI method.
     *
     * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liquidity token
     *
     * @param params The params for the smart contract call
     * @returns The call params: LP Token quantity distributed
     */
    addLiquidity: (params: CallParams<BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256` ABI method.
     *
     * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
     *
     * @param params The params for the smart contract call
     * @returns The call params: LP position reduced
     */
    removeLiquidity: (params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256` ABI method.
     *
    * This method allows biatec admin to reduce the lp position created by lp fees allocation.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params: LP position reduced
     */
    removeLiquidityAdmin: (params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.removeLiquidityAdmin(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256` ABI method.
     *
     * Swap Asset A to Asset B or Asset B to Asst A
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.swap(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
    
    
    This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeExcessAssets: (params: CallParams<BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.distributeExcessAssets(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
    
    
    This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessAssets: (params: CallParams<BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.withdrawExcessAssets(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * addressExecutiveFee can perfom key unregistration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateDistributedLiquidity: (params: CallParams<BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateLiquidityFlatPrice: (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the liquidity  from the x - Asset A position and y - Asset B position
    This method calculates discriminant - first part of the calculation.
    It is divided so that the readonly method does not need to charge fees

     *
     * @param params The params for the smart contract call
     * @returns The call params: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityD: (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the liquidity  from the x - Asset A position and y - Asset B position
     *
     * @param params The params for the smart contract call
     * @returns The call params: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityWithD: (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the current price when asset a has x
     *
     * @param params The params for the smart contract call
     * @returns The call params: the price with specified quantity with the price range set in the contract
     */
    calculatePrice: (params: CallParams<BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculatePrice(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on asset A deposit
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnAssetADeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on asset B deposit
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnAssetBDeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnLpDeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset B should be deposited when user deposit asset a and b.
    
    
    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBDepositOnAssetADeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset A should be deposited when user deposit asset a and b
    
    
    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call params: Amount of asset A to be deposited. The result is in Base decimals (9)
     */
    calculateAssetADepositOnAssetBDeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    status: (params: CallParams<BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BiatecClammPoolParamsFactory.status(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
        return this.appClient.createTransaction.update(BiatecClammPoolParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentPrice: (params: CallParams<BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.getCurrentPrice(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPriceDivider: (params: CallParams<BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.getPriceDivider(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLpTokenId: (params: CallParams<BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.getLpTokenId(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Only Biatec Pool Provider can deploy and bootsrap this smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP token ID
     */
    bootstrap: (params: CallParams<BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrapStep2()void` ABI method.
     *
     * When we know the app id of this pool, we can register it properly at the pool provider
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrapStep2: (params: CallParams<BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.bootstrapStep2(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64` ABI method.
     *
     * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liquidity token
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP Token quantity distributed
     */
    addLiquidity: (params: CallParams<BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256` ABI method.
     *
     * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP position reduced
     */
    removeLiquidity: (params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256` ABI method.
     *
    * This method allows biatec admin to reduce the lp position created by lp fees allocation.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: LP position reduced
     */
    removeLiquidityAdmin: (params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.removeLiquidityAdmin(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256` ABI method.
     *
     * Swap Asset A to Asset B or Asset B to Asst A
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.swap(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
    
    
    This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeExcessAssets: (params: CallParams<BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.distributeExcessAssets(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
    
    
    This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessAssets: (params: CallParams<BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.withdrawExcessAssets(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.sendOnlineKeyRegistration(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * addressExecutiveFee can perfom key unregistration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateDistributedLiquidity: (params: CallParams<BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateLiquidityFlatPrice: (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the liquidity  from the x - Asset A position and y - Asset B position
    This method calculates discriminant - first part of the calculation.
    It is divided so that the readonly method does not need to charge fees

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityD: (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the liquidity  from the x - Asset A position and y - Asset B position
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityWithD: (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the current price when asset a has x
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: the price with specified quantity with the price range set in the contract
     */
    calculatePrice: (params: CallParams<BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculatePrice(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on asset A deposit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnAssetADeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on asset B deposit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnAssetBDeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnLpDeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset B should be deposited when user deposit asset a and b.
    
    
    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBDepositOnAssetADeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset A should be deposited when user deposit asset a and b
    
    
    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Amount of asset A to be deposited. The result is in Base decimals (9)
     */
    calculateAssetADepositOnAssetBDeposit: (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params))
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    status: (params: CallParams<BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BiatecClammPoolParamsFactory.status(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the BiatecClammPool smart contract using the `updateApplication(uint64,byte[])void` ABI method.
       *
       * addressUdpater from global biatec configuration is allowed to update application
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams & SendParams) => {
        const result = await this.appClient.send.update(BiatecClammPoolParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['updateApplication(uint64,byte[])void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentPrice: async (params: CallParams<BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getCurrentPrice(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['getCurrentPrice()uint64'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPriceDivider: async (params: CallParams<BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getPriceDivider(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['getPriceDivider()uint64'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLpTokenId: async (params: CallParams<BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getLpTokenId(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['getLPTokenId()uint64'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * Only Biatec Pool Provider can deploy and bootsrap this smart contract
     *
     * @param params The params for the smart contract call
     * @returns The call result: LP token ID
     */
    bootstrap: async (params: CallParams<BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `bootstrapStep2()void` ABI method.
     *
     * When we know the app id of this pool, we can register it properly at the pool provider
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrapStep2: async (params: CallParams<BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.bootstrapStep2(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['bootstrapStep2()void'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64` ABI method.
     *
     * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liquidity token
     *
     * @param params The params for the smart contract call
     * @returns The call result: LP Token quantity distributed
     */
    addLiquidity: async (params: CallParams<BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256` ABI method.
     *
     * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
     *
     * @param params The params for the smart contract call
     * @returns The call result: LP position reduced
     */
    removeLiquidity: async (params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.removeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256` ABI method.
     *
    * This method allows biatec admin to reduce the lp position created by lp fees allocation.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result: LP position reduced
     */
    removeLiquidityAdmin: async (params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.removeLiquidityAdmin(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256` ABI method.
     *
     * Swap Asset A to Asset B or Asset B to Asst A
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
    
    
    This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeExcessAssets: async (params: CallParams<BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.distributeExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
    * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
    If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
    
    
    This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessAssets: async (params: CallParams<BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.withdrawExcessAssets(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void` ABI method.
     *
    * addressExecutiveFee can perfom key registration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * addressExecutiveFee can perfom key unregistration for this LP pool
    
    
    Only addressExecutiveFee is allowed to execute this method.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateDistributedLiquidity: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateLiquidityFlatPrice: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates the liquidity  from the x - Asset A position and y - Asset B position
    This method calculates discriminant - first part of the calculation.
    It is divided so that the readonly method does not need to charge fees

     *
     * @param params The params for the smart contract call
     * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityD: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the liquidity  from the x - Asset A position and y - Asset B position
     *
     * @param params The params for the smart contract call
     * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
     */
    calculateLiquidityWithD: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get the current price when asset a has x
     *
     * @param params The params for the smart contract call
     * @returns The call result: the price with specified quantity with the price range set in the contract
     */
    calculatePrice: async (params: CallParams<BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculatePrice(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset B will be taken from the smart contract on asset A deposit
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBWithdrawOnAssetADeposit: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on asset B deposit
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnAssetBDeposit: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates how much asset A will be taken from the smart contract on LP asset deposit
     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetAWithdrawOnLpDeposit: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset B should be deposited when user deposit asset a and b.
    
    
    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
     */
    calculateAssetBDepositOnAssetADeposit: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculates how much asset A should be deposited when user deposit asset a and b
    
    
    On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

     *
     * @param params The params for the smart contract call
     * @returns The call result: Amount of asset A to be deposited. The result is in Base decimals (9)
     */
    calculateAssetADepositOnAssetBDeposit: async (params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'])}
    },

    /**
     * Makes a call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    status: async (params: CallParams<BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.status(params))
      return {...result, return: result.return as unknown as (undefined | BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BiatecClammPoolClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `getCurrentPrice()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCurrentPrice(params: CallParams<BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getCurrentPrice(params))
    return result.return as unknown as BiatecClammPoolReturns['getCurrentPrice()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `getPriceDivider()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPriceDivider(params: CallParams<BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getPriceDivider(params))
    return result.return as unknown as BiatecClammPoolReturns['getPriceDivider()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `getLPTokenId()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getLpTokenId(params: CallParams<BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.getLpTokenId(params))
    return result.return as unknown as BiatecClammPoolReturns['getLPTokenId()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateDistributedLiquidity(uint64,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * addressExecutiveFee can perfom key unregistration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateDistributedLiquidity(params: CallParams<BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateDistributedLiquidity(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateLiquidityFlatPrice(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityFlatPrice(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculates the liquidity  from the x - Asset A position and y - Asset B position
  This method calculates discriminant - first part of the calculation.
  It is divided so that the readonly method does not need to charge fees

   *
   * @param params The params for the smart contract call
   * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
   */
  async calculateLiquidityD(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityD(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param params The params for the smart contract call
   * @returns The call result: Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
   */
  async calculateLiquidityWithD(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateLiquidityWithD(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get the current price when asset a has x
   *
   * @param params The params for the smart contract call
   * @returns The call result: the price with specified quantity with the price range set in the contract
   */
  async calculatePrice(params: CallParams<BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculatePrice(params))
    return result.return as unknown as BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetBWithdrawOnAssetADeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetBWithdrawOnAssetADeposit(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetAWithdrawOnAssetBDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnAssetBDeposit(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetAWithdrawOnLpDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetAWithdrawOnLpDeposit(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculates how much asset B should be deposited when user deposit asset a and b.
  
  
  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
   */
  async calculateAssetBDepositOnAssetADeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetBDepositOnAssetADeposit(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculates how much asset A should be deposited when user deposit asset a and b
  
  
  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param params The params for the smart contract call
   * @returns The call result: Amount of asset A to be deposited. The result is in Base decimals (9)
   */
  async calculateAssetADepositOnAssetBDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.calculateAssetADepositOnAssetBDeposit(params))
    return result.return as unknown as BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']
  }

  /**
   * Makes a readonly (simulated) call to the BiatecClammPool smart contract using the `status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async status(params: CallParams<BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(BiatecClammPoolParamsFactory.status(params))
    return result.return as unknown as BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current BiatecClammPool app
   */
  state = {
    /**
     * Methods to access global state for the current BiatecClammPool app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          setupFinished: result.setupFinished,
          assetA: result.assetA,
          assetADecimalsScaleFromBase: result.assetADecimalsScaleFromBase,
          assetB: result.assetB,
          assetBDecimalsScaleFromBase: result.assetBDecimalsScaleFromBase,
          assetLp: result.assetLp,
          assetABalanceBaseScale: result.assetABalanceBaseScale,
          assetBBalanceBaseScale: result.assetBBalanceBaseScale,
          priceMin: result.priceMin,
          priceMax: result.priceMax,
          priceMinSqrt: result.priceMinSqrt,
          priceMaxSqrt: result.priceMaxSqrt,
          liquidity: result.Liquidity,
          liquidityUsersFromFees: result.LiquidityUsersFromFees,
          liquidityBiatecFromFees: result.LiquidityBiatecFromFees,
          fee: result.fee,
          currentPrice: result.currentPrice,
          scale: result.scale,
          appBiatecConfigProvider: result.appBiatecConfigProvider,
          verificationClass: result.verificationClass,
          version: new BinaryStateValue(result.version),
        }
      },
      /**
       * Get the current value of the setupFinished key in global state
       */
      setupFinished: async (): Promise<boolean | undefined> => { return (await this.appClient.state.global.getValue("setupFinished")) as boolean | undefined },
      /**
       * Get the current value of the assetA key in global state
       */
      assetA: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetA")) as bigint | undefined },
      /**
       * Get the current value of the assetADecimalsScaleFromBase key in global state
       */
      assetADecimalsScaleFromBase: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetADecimalsScaleFromBase")) as bigint | undefined },
      /**
       * Get the current value of the assetB key in global state
       */
      assetB: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetB")) as bigint | undefined },
      /**
       * Get the current value of the assetBDecimalsScaleFromBase key in global state
       */
      assetBDecimalsScaleFromBase: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetBDecimalsScaleFromBase")) as bigint | undefined },
      /**
       * Get the current value of the assetLp key in global state
       */
      assetLp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetLp")) as bigint | undefined },
      /**
       * Get the current value of the assetABalanceBaseScale key in global state
       */
      assetABalanceBaseScale: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetABalanceBaseScale")) as bigint | undefined },
      /**
       * Get the current value of the assetBBalanceBaseScale key in global state
       */
      assetBBalanceBaseScale: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetBBalanceBaseScale")) as bigint | undefined },
      /**
       * Get the current value of the priceMin key in global state
       */
      priceMin: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("priceMin")) as bigint | undefined },
      /**
       * Get the current value of the priceMax key in global state
       */
      priceMax: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("priceMax")) as bigint | undefined },
      /**
       * Get the current value of the priceMinSqrt key in global state
       */
      priceMinSqrt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("priceMinSqrt")) as bigint | undefined },
      /**
       * Get the current value of the priceMaxSqrt key in global state
       */
      priceMaxSqrt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("priceMaxSqrt")) as bigint | undefined },
      /**
       * Get the current value of the Liquidity key in global state
       */
      liquidity: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("Liquidity")) as bigint | undefined },
      /**
       * Get the current value of the LiquidityUsersFromFees key in global state
       */
      liquidityUsersFromFees: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("LiquidityUsersFromFees")) as bigint | undefined },
      /**
       * Get the current value of the LiquidityBiatecFromFees key in global state
       */
      liquidityBiatecFromFees: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("LiquidityBiatecFromFees")) as bigint | undefined },
      /**
       * Get the current value of the fee key in global state
       */
      fee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee")) as bigint | undefined },
      /**
       * Get the current value of the currentPrice key in global state
       */
      currentPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("currentPrice")) as bigint | undefined },
      /**
       * Get the current value of the scale key in global state
       */
      scale: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("scale")) as bigint | undefined },
      /**
       * Get the current value of the appBiatecConfigProvider key in global state
       */
      appBiatecConfigProvider: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("appBiatecConfigProvider")) as bigint | undefined },
      /**
       * Get the current value of the verificationClass key in global state
       */
      verificationClass: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("verificationClass")) as bigint | undefined },
      /**
       * Get the current value of the version key in global state
       */
      version: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("version")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): BiatecClammPoolComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a getCurrentPrice()uint64 method call against the BiatecClammPool contract
       */
      getCurrentPrice(params: CallParams<BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentPrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentPrice()uint64', v))
        return this
      },
      /**
       * Add a getPriceDivider()uint64 method call against the BiatecClammPool contract
       */
      getPriceDivider(params: CallParams<BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPriceDivider(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPriceDivider()uint64', v))
        return this
      },
      /**
       * Add a getLPTokenId()uint64 method call against the BiatecClammPool contract
       */
      getLpTokenId(params: CallParams<BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLpTokenId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLPTokenId()uint64', v))
        return this
      },
      /**
       * Add a bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 method call against the BiatecClammPool contract
       */
      bootstrap(params: CallParams<BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push((v) => client.decodeReturnValue('bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a bootstrapStep2()void method call against the BiatecClammPool contract
       */
      bootstrapStep2(params: CallParams<BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrapStep2(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 method call against the BiatecClammPool contract
       */
      addLiquidity(params: CallParams<BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 method call against the BiatecClammPool contract
       */
      removeLiquidity(params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256', v))
        return this
      },
      /**
       * Add a removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 method call against the BiatecClammPool contract
       */
      removeLiquidityAdmin(params: CallParams<BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidityAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256', v))
        return this
      },
      /**
       * Add a swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 method call against the BiatecClammPool contract
       */
      swap(params: CallParams<BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256', v))
        return this
      },
      /**
       * Add a distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      distributeExcessAssets(params: CallParams<BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 method call against the BiatecClammPool contract
       */
      withdrawExcessAssets(params: CallParams<BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessAssets(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void method call against the BiatecClammPool contract
       */
      sendOnlineKeyRegistration(params: CallParams<BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a calculateDistributedLiquidity(uint64,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateDistributedLiquidity(params: CallParams<BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateDistributedLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateDistributedLiquidity(uint64,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateLiquidityFlatPrice(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateLiquidityFlatPrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateLiquidityD(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateLiquidityD(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateLiquidityWithD(params: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateLiquidityWithD(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculatePrice(params: CallParams<BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculatePrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetBWithdrawOnAssetADeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateAssetBWithdrawOnAssetADeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetAWithdrawOnAssetBDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateAssetAWithdrawOnAssetBDeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetAWithdrawOnLpDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateAssetAWithdrawOnLpDeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetBDepositOnAssetADeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateAssetBDepositOnAssetADeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 method call against the BiatecClammPool contract
       */
      calculateAssetADepositOnAssetBDeposit(params: CallParams<BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateAssetADepositOnAssetBDeposit(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256', v))
        return this
      },
      /**
       * Add a status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the BiatecClammPool contract
       */
      status(params: CallParams<BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.status(params)))
        resultMappers.push((v) => client.decodeReturnValue('status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the BiatecClammPool contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BiatecClammPoolComposer
  }
}
export type BiatecClammPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getCurrentPrice()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentPrice(params?: CallParams<BiatecClammPoolArgs['obj']['getCurrentPrice()uint64'] | BiatecClammPoolArgs['tuple']['getCurrentPrice()uint64']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['getCurrentPrice()uint64'] | undefined]>

  /**
   * Calls the getPriceDivider()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPriceDivider(params?: CallParams<BiatecClammPoolArgs['obj']['getPriceDivider()uint64'] | BiatecClammPoolArgs['tuple']['getPriceDivider()uint64']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['getPriceDivider()uint64'] | undefined]>

  /**
   * Calls the getLPTokenId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLpTokenId(params?: CallParams<BiatecClammPoolArgs['obj']['getLPTokenId()uint64'] | BiatecClammPoolArgs['tuple']['getLPTokenId()uint64']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['getLPTokenId()uint64'] | undefined]>

  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * Only Biatec Pool Provider can deploy and bootsrap this smart contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<BiatecClammPoolArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the bootstrapStep2()void ABI method.
   *
   * When we know the app id of this pool, we can register it properly at the pool provider
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrapStep2(params?: CallParams<BiatecClammPoolArgs['obj']['bootstrapStep2()void'] | BiatecClammPoolArgs['tuple']['bootstrapStep2()void']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['bootstrapStep2()void'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64 ABI method.
   *
   * This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liquidity token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<BiatecClammPoolArgs['obj']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256 ABI method.
   *
   * This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(params?: CallParams<BiatecClammPoolArgs['obj']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256'] | undefined]>

  /**
   * Calls the removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256 ABI method.
   *
  * This method allows biatec admin to reduce the lp position created by lp fees allocation.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidityAdmin(params?: CallParams<BiatecClammPoolArgs['obj']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256'] | undefined]>

  /**
   * Calls the swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256 ABI method.
   *
   * Swap Asset A to Asset B or Asset B to Asst A
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<BiatecClammPoolArgs['obj']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | BiatecClammPoolArgs['tuple']['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256'] | undefined]>

  /**
   * Calls the distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256 ABI method.
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
  
  
  This method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeExcessAssets(params?: CallParams<BiatecClammPoolArgs['obj']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
  * If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.
  If someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.
  
  
  This method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessAssets(params?: CallParams<BiatecClammPoolArgs['obj']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | BiatecClammPoolArgs['tuple']['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void ABI method.
   *
  * addressExecutiveFee can perfom key registration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<BiatecClammPoolArgs['obj']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | BiatecClammPoolArgs['tuple']['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the calculateDistributedLiquidity(uint64,uint256)uint256 ABI method.
   *
  * addressExecutiveFee can perfom key unregistration for this LP pool
  
  
  Only addressExecutiveFee is allowed to execute this method.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateDistributedLiquidity(params?: CallParams<BiatecClammPoolArgs['obj']['calculateDistributedLiquidity(uint64,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateDistributedLiquidity(uint64,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateDistributedLiquidity(uint64,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityFlatPrice(params?: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
  * Calculates the liquidity  from the x - Asset A position and y - Asset B position
  This method calculates discriminant - first part of the calculation.
  It is divided so that the readonly method does not need to charge fees

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityD(params?: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates the liquidity  from the x - Asset A position and y - Asset B position
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateLiquidityWithD(params?: CallParams<BiatecClammPoolArgs['obj']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Get the current price when asset a has x
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePrice(params?: CallParams<BiatecClammPoolArgs['obj']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset B will be taken from the smart contract on asset A deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBWithdrawOnAssetADeposit(params?: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on asset B deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetAWithdrawOnAssetBDeposit(params?: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256 ABI method.
   *
   * Calculates how much asset A will be taken from the smart contract on LP asset deposit
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetAWithdrawOnLpDeposit(params?: CallParams<BiatecClammPoolArgs['obj']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
  * Calculates how much asset B should be deposited when user deposit asset a and b.
  
  
  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetBDepositOnAssetADeposit(params?: CallParams<BiatecClammPoolArgs['obj']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256 ABI method.
   *
  * Calculates how much asset A should be deposited when user deposit asset a and b
  
  
  On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateAssetADepositOnAssetBDeposit(params?: CallParams<BiatecClammPoolArgs['obj']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | BiatecClammPoolArgs['tuple']['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256'] | undefined]>

  /**
   * Calls the status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  status(params?: CallParams<BiatecClammPoolArgs['obj']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | BiatecClammPoolArgs['tuple']['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BiatecClammPool smart contract using the updateApplication(uint64,byte[])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<BiatecClammPoolArgs['obj']['updateApplication(uint64,byte[])void'] | BiatecClammPoolArgs['tuple']['updateApplication(uint64,byte[])void']>): BiatecClammPoolComposer<[...TReturns, BiatecClammPoolReturns['updateApplication(uint64,byte[])void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BiatecClammPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BiatecClammPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BiatecClammPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BiatecClammPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BiatecClammPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BiatecClammPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BiatecClammPoolComposerResults<TReturns>>
}
export type BiatecClammPoolComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

