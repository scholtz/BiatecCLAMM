{
  "name": "BiatecPoolProvider",
  "desc": "",
  "methods": [
    {
      "name": "bootstrap",
      "desc": "Biatec deploys single pool provider smart contract",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64",
          "desc": "Biatec amm provider"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "getCurrentStatus",
      "desc": "Returns current status",
      "readonly": true,
      "args": [
        {
          "name": "appPoolId",
          "type": "uint64",
          "desc": "Pool id to retrieve the stats"
        }
      ],
      "returns": {
        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
        "desc": "Pool info statistics"
      }
    },
    {
      "name": "createApplication",
      "desc": "Initial setup",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "updateApplication",
      "desc": "addressUdpater from global biatec configuration is allowed to update application",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "newVersion",
          "type": "byte[]"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "loadCLAMMContractData",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "approvalProgramSize",
          "type": "uint64"
        },
        {
          "name": "offset",
          "type": "uint64"
        },
        {
          "name": "data",
          "type": "byte[]"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "noop",
      "desc": "No op tx to increase the app call and box size limits",
      "args": [
        {
          "name": "i",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "deployPool",
      "desc": "Anybody can call this method to bootstrap new clamm pool",
      "args": [
        {
          "name": "assetA",
          "type": "uint64",
          "desc": "Asset A ID must be lower then Asset B ID"
        },
        {
          "name": "assetB",
          "type": "uint64",
          "desc": "Asset B"
        },
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64",
          "desc": "Biatec amm provider"
        },
        {
          "name": "appBiatecPoolProvider",
          "type": "uint64",
          "desc": "Pool provider"
        },
        {
          "name": "txSeed",
          "type": "pay",
          "desc": "Seed transaction so that smart contract can opt in to the assets"
        },
        {
          "name": "fee",
          "type": "uint64",
          "desc": "Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%"
        },
        {
          "name": "priceMin",
          "type": "uint64",
          "desc": "Min price range. At this point all assets are in asset A."
        },
        {
          "name": "priceMax",
          "type": "uint64",
          "desc": "Max price range. At this point all assets are in asset B."
        },
        {
          "name": "currentPrice",
          "type": "uint64",
          "desc": "Deployer can specify the current price for easier deployemnt."
        },
        {
          "name": "verificationClass",
          "type": "uint64",
          "desc": "Minimum verification level from the biatec identity. Level 0 means no kyc."
        }
      ],
      "returns": {
        "type": "uint64",
        "desc": "LP token ID"
      }
    },
    {
      "name": "registerPool",
      "desc": "This method is called by constructor of the luquidity pool",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "registerTrade",
      "desc": "This metod registers the trade and calculates and store the trade statistics",
      "args": [
        {
          "name": "appPoolId",
          "type": "uint64",
          "desc": "Liqudity pool smart contract"
        },
        {
          "name": "assetA",
          "type": "uint64",
          "desc": "Asset A"
        },
        {
          "name": "assetB",
          "type": "uint64",
          "desc": "Asset B"
        },
        {
          "name": "priceFrom",
          "type": "uint64",
          "desc": "The original price"
        },
        {
          "name": "priceTo",
          "type": "uint64",
          "desc": "The new price"
        },
        {
          "name": "amountA",
          "type": "uint64",
          "desc": "Asset A amount spent or received"
        },
        {
          "name": "amountB",
          "type": "uint64",
          "desc": "Asset B amount spent or received"
        },
        {
          "name": "feeAmountA",
          "type": "uint64",
          "desc": "Fees paid in asset A if any"
        },
        {
          "name": "feeAmountB",
          "type": "uint64",
          "desc": "Fees paid in asset B if any"
        },
        {
          "name": "s",
          "type": "uint64",
          "desc": "Scale multiplier"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "sendOnlineKeyRegistration",
      "desc": "addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "votePK",
          "type": "byte[]"
        },
        {
          "name": "selectionPK",
          "type": "byte[]"
        },
        {
          "name": "stateProofPK",
          "type": "byte[]"
        },
        {
          "name": "voteFirst",
          "type": "uint64"
        },
        {
          "name": "voteLast",
          "type": "uint64"
        },
        {
          "name": "voteKeyDilution",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "withdrawExcessAssets",
      "desc": "If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64",
          "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
        },
        {
          "name": "asset",
          "type": "uint64",
          "desc": "Asset to withdraw. If native token, then zero"
        },
        {
          "name": "amount",
          "type": "uint64",
          "desc": "Amount of the asset to be withdrawn"
        }
      ],
      "returns": {
        "type": "uint64"
      }
    }
  ]
}