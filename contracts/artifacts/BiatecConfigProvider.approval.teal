#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\BiatecConfigProvider.algo.ts:39
	// log(version)
	byte "BIATEC-CONFIG-01-01-01"
	log

	// contracts\BiatecConfigProvider.algo.ts:40
	// this.addressExecutive.value = this.txn.sender
	byte 0x65 // "e"
	txn Sender
	app_global_put

	// contracts\BiatecConfigProvider.algo.ts:41
	// this.addressGov.value = this.txn.sender
	byte 0x67 // "g"
	txn Sender
	app_global_put

	// contracts\BiatecConfigProvider.algo.ts:42
	// this.addressUdpater.value = this.txn.sender
	byte 0x75 // "u"
	txn Sender
	app_global_put
	retsub

// bootstrap(uint64,uint64)void
*abi_route_bootstrap:
	// appIdentityProvider: uint64
	txna ApplicationArgs 2
	btoi

	// biatecFee: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64,uint64)void
	callsub bootstrap
	int 1
	return

// bootstrap(biatecFee: uint64, appIdentityProvider: AppID): void
//
// Setup the contract
// @param biatecFee Biatec fees
bootstrap:
	proto 2 0

	// contracts\BiatecConfigProvider.algo.ts:50
	// assert(this.txn.sender === this.addressUdpater.value, 'Only updater can call bootstrap method')
	txn Sender
	byte 0x75 // "u"
	app_global_get
	==

	// Only updater can call bootstrap method
	assert

	// contracts\BiatecConfigProvider.algo.ts:51
	// this.biatecFee.value = biatecFee
	byte 0x66 // "f"
	frame_dig -1 // biatecFee: uint64
	app_global_put

	// contracts\BiatecConfigProvider.algo.ts:52
	// this.appIdentityProvider.value = appIdentityProvider
	byte 0x69 // "i"
	frame_dig -2 // appIdentityProvider: AppID
	app_global_put
	retsub

// setAddressUdpater(address)void
*abi_route_setAddressUdpater:
	// a: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setAddressUdpater(address)void
	callsub setAddressUdpater
	int 1
	return

// setAddressUdpater(a: Address): void
//
// Top secret account with which it is possible update contracts or identity provider
//
// @param a Address
setAddressUdpater:
	proto 1 0

	// contracts\BiatecConfigProvider.algo.ts:61
	// assert(this.txn.sender === this.addressUdpater.value, 'Only updater can change updater address')
	txn Sender
	byte 0x75 // "u"
	app_global_get
	==

	// Only updater can change updater address
	assert

	// contracts\BiatecConfigProvider.algo.ts:62
	// this.addressUdpater.value = a
	byte 0x75 // "u"
	frame_dig -1 // a: Address
	app_global_put
	retsub

// setAddressGov(address)void
*abi_route_setAddressGov:
	// a: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setAddressGov(address)void
	callsub setAddressGov
	int 1
	return

// setAddressGov(a: Address): void
//
// Execution address with which it is possible to opt in for governance
//
// @param a Address
setAddressGov:
	proto 1 0

	// contracts\BiatecConfigProvider.algo.ts:71
	// assert(this.txn.sender === this.addressUdpater.value, 'Only updater can change gov address')
	txn Sender
	byte 0x75 // "u"
	app_global_get
	==

	// Only updater can change gov address
	assert

	// contracts\BiatecConfigProvider.algo.ts:72
	// this.addressGov.value = a
	byte 0x67 // "g"
	frame_dig -1 // a: Address
	app_global_put
	retsub

// setAddressExecutive(address)void
*abi_route_setAddressExecutive:
	// a: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setAddressExecutive(address)void
	callsub setAddressExecutive
	int 1
	return

// setAddressExecutive(a: Address): void
//
// Execution address with which it is possible to change global biatec fees
//
// @param a Address
setAddressExecutive:
	proto 1 0

	// contracts\BiatecConfigProvider.algo.ts:81
	// assert(this.txn.sender === this.addressUdpater.value, 'Only updater can change gov address')
	txn Sender
	byte 0x75 // "u"
	app_global_get
	==

	// Only updater can change gov address
	assert

	// contracts\BiatecConfigProvider.algo.ts:82
	// this.addressExecutive.value = a
	byte 0x65 // "e"
	frame_dig -1 // a: Address
	app_global_put
	retsub

// setBiatecIdentity(uint64)void
*abi_route_setBiatecIdentity:
	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute setBiatecIdentity(uint64)void
	callsub setBiatecIdentity
	int 1
	return

// setBiatecIdentity(a: AppID): void
//
// App identity setter
//
// @param a Address
setBiatecIdentity:
	proto 1 0

	// contracts\BiatecConfigProvider.algo.ts:91
	// assert(this.txn.sender === this.addressUdpater.value, 'Only updater can change gov address')
	txn Sender
	byte 0x75 // "u"
	app_global_get
	==

	// Only updater can change gov address
	assert

	// contracts\BiatecConfigProvider.algo.ts:92
	// this.appIdentityProvider.value = a
	byte 0x69 // "i"
	frame_dig -1 // a: AppID
	app_global_put
	retsub

// setBiatecFee(uint64)void
*abi_route_setBiatecFee:
	// biatecFee: uint64
	txna ApplicationArgs 1
	btoi

	// execute setBiatecFee(uint64)void
	callsub setBiatecFee
	int 1
	return

// setBiatecFee(biatecFee: uint64): void
//
// Fees in 9 decimals. 1_000_000_000 = 100%
// Fees in 9 decimals. 10_000_000 = 1%
// Fees in 9 decimals. 100_000 = 0,01%
//
// Fees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee
//
// @param biatecFee Fee
setBiatecFee:
	proto 1 0

	// contracts\BiatecConfigProvider.algo.ts:105
	// assert(this.txn.sender === this.addressExecutive.value, 'Only executive address can change fees')
	txn Sender
	byte 0x65 // "e"
	app_global_get
	==

	// Only executive address can change fees
	assert

	// contracts\BiatecConfigProvider.algo.ts:106
	// this.biatecFee.value = biatecFee
	byte 0x66 // "f"
	frame_dig -1 // biatecFee: uint64
	app_global_put
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "bootstrap(uint64,uint64)void"
	method "setAddressUdpater(address)void"
	method "setAddressGov(address)void"
	method "setAddressExecutive(address)void"
	method "setBiatecIdentity(uint64)void"
	method "setBiatecFee(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_setAddressUdpater *abi_route_setAddressGov *abi_route_setAddressExecutive *abi_route_setBiatecIdentity *abi_route_setBiatecFee
	err