{
  "name": "BiatecClammPool",
  "desc": "",
  "methods": [
    {
      "name": "createApplication",
      "desc": "Initial setup",
      "args": [],
      "returns": {
        "type": "void"
      }
    },
    {
      "name": "getCurrentPrice",
      "readonly": true,
      "args": [],
      "returns": {
        "type": "uint64"
      }
    },
    {
      "name": "getPriceDivider",
      "readonly": true,
      "args": [],
      "returns": {
        "type": "uint64"
      }
    },
    {
      "name": "getLPTokenId",
      "readonly": true,
      "args": [],
      "returns": {
        "type": "uint64"
      }
    },
    {
      "name": "bootstrap",
      "desc": "Anybody can deploy the clamm smart contract",
      "args": [
        {
          "name": "assetA",
          "type": "uint64",
          "desc": "Asset A ID must be lower then Asset B ID"
        },
        {
          "name": "assetB",
          "type": "uint64",
          "desc": "Asset B"
        },
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64",
          "desc": "Biatec amm provider"
        },
        {
          "name": "appBiatecPoolProvider",
          "type": "uint64",
          "desc": "Pool provider"
        },
        {
          "name": "txSeed",
          "type": "pay",
          "desc": "Seed transaction so that smart contract can opt in to the assets"
        },
        {
          "name": "fee",
          "type": "uint64",
          "desc": "Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%"
        },
        {
          "name": "priceMin",
          "type": "uint64",
          "desc": "Min price range. At this point all assets are in asset A."
        },
        {
          "name": "priceMax",
          "type": "uint64",
          "desc": "Max price range. At this point all assets are in asset B."
        },
        {
          "name": "currentPrice",
          "type": "uint64",
          "desc": "Deployer can specify the current price for easier deployemnt."
        },
        {
          "name": "verificationClass",
          "type": "uint8",
          "desc": "Minimum verification level from the biatec identity. Level 0 means no kyc."
        }
      ],
      "returns": {
        "type": "uint64",
        "desc": "LP token ID"
      }
    },
    {
      "name": "addLiquidity",
      "desc": "This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "appBiatecIdentityProvider",
          "type": "uint64"
        },
        {
          "name": "txAssetADeposit",
          "type": "txn",
          "desc": "Transfer of asset A to the LP pool"
        },
        {
          "name": "txAssetBDeposit",
          "type": "txn",
          "desc": "Transfer of asset B to the LP pool"
        },
        {
          "name": "assetLP",
          "type": "uint64",
          "desc": "Liquidity pool asset"
        },
        {
          "name": "assetA",
          "type": "uint64",
          "desc": "Asset A"
        },
        {
          "name": "assetB",
          "type": "uint64",
          "desc": "Asset B"
        }
      ],
      "returns": {
        "type": "uint64",
        "desc": "LP Token quantity distributed"
      }
    },
    {
      "name": "removeLiquidity",
      "desc": "This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool",
      "args": [
        {
          "name": "txLPXfer",
          "type": "axfer",
          "desc": "Transfer of the LP token"
        },
        {
          "name": "assetLP",
          "type": "uint64",
          "desc": "LP pool asset"
        },
        {
          "name": "assetA",
          "type": "uint64",
          "desc": "Asset A"
        },
        {
          "name": "assetB",
          "type": "uint64",
          "desc": "Asset B"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "LP position reduced"
      }
    },
    {
      "name": "swap",
      "desc": "Swap Asset A to Asset B or Asset B to Asst A",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "appBiatecIdentityProvider",
          "type": "uint64"
        },
        {
          "name": "txSwap",
          "type": "txn",
          "desc": "Transfer of the token to be deposited to the pool. To the owner the other asset will be sent."
        },
        {
          "name": "assetA",
          "type": "uint64",
          "desc": "Asset A"
        },
        {
          "name": "assetB",
          "type": "uint64",
          "desc": "Asset B"
        },
        {
          "name": "minimumToReceive",
          "type": "uint64",
          "desc": "If number greater then zero, the check is performed for the output of the other asset"
        }
      ],
      "returns": {
        "type": "uint256"
      }
    },
    {
      "name": "calculateDistributedLiquidity",
      "desc": "Calculates the number of LP tokens issued to users",
      "readonly": true,
      "args": [
        {
          "name": "assetLP",
          "type": "uint64"
        },
        {
          "name": "currentDeposit",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      }
    },
    {
      "name": "calculateLiquidity",
      "desc": "Calculates the liquidity  from the x - Asset A position and y - Asset B position",
      "readonly": true,
      "args": [
        {
          "name": "x",
          "type": "uint256",
          "desc": "Asset A position balanced on the curve"
        },
        {
          "name": "y",
          "type": "uint256",
          "desc": "Asset B position balanced on the curve"
        },
        {
          "name": "priceMin",
          "type": "uint256",
          "desc": "Minimum price variable in base scale decimals (pa)"
        },
        {
          "name": "priceMax",
          "type": "uint256",
          "desc": "Maximum price variable in base scale decimals (pb)"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256",
          "desc": "sqrt(priceMin) in base scale decimals Variable pas"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256",
          "desc": "sqrt(priceMax) in base scale decimals Variable pbs"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user."
      }
    },
    {
      "name": "calculatePrice",
      "desc": "Get the current price when asset a has x",
      "readonly": true,
      "args": [
        {
          "name": "assetAQuantity",
          "type": "uint256",
          "desc": "x"
        },
        {
          "name": "assetBQuantity",
          "type": "uint256",
          "desc": "y"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256",
          "desc": "sqrt(priceMin)"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256",
          "desc": "sqrt(priceMax)"
        },
        {
          "name": "liquidity",
          "type": "uint256",
          "desc": "Current pool liquidity - L variable"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "the price with specified quantity with the price range set in the contract"
      }
    },
    {
      "name": "calculateAssetBWithdrawOnAssetADeposit",
      "desc": "Calculates how much asset B will be taken from the smart contract on asset A deposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256",
          "desc": "Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"
        },
        {
          "name": "assetABalance",
          "type": "uint256",
          "desc": "Asset A balance. Variable ab, in base scale"
        },
        {
          "name": "assetBBalance",
          "type": "uint256",
          "desc": "Asset B balance. Variable bb, in base scale"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256",
          "desc": "sqrt(Min price). Variable pMinS, in base scale"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256",
          "desc": "sqrt(Max price). Variable pMaxS, in base scale"
        },
        {
          "name": "liqudity",
          "type": "uint256",
          "desc": "sqrt(Max price). Variable L, in base scale"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
      }
    },
    {
      "name": "calculateAssetAWithdrawOnAssetBDeposit",
      "desc": "Calculates how much asset A will be taken from the smart contract on asset B deposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256",
          "desc": "Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"
        },
        {
          "name": "assetABalance",
          "type": "uint256",
          "desc": "Asset A balance. Variable ab, in base scale"
        },
        {
          "name": "assetBBalance",
          "type": "uint256",
          "desc": "Asset B balance. Variable bb, in base scale"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256",
          "desc": "sqrt(Min price). Variable pMinS, in base scale"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256",
          "desc": "sqrt(Max price). Variable pMaxS, in base scale"
        },
        {
          "name": "liqudity",
          "type": "uint256",
          "desc": "sqrt(Max price). Variable L, in base scale"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"
      }
    },
    {
      "name": "calculateAssetAWithdrawOnLpDeposit",
      "desc": "Calculates how much asset A will be taken from the smart contract on LP asset deposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256",
          "desc": "LP Asset amount in Base decimal representation.."
        },
        {
          "name": "assetABalance",
          "type": "uint256",
          "desc": "Asset A balance. Variable ab, in base scale"
        },
        {
          "name": "liqudity",
          "type": "uint256",
          "desc": "Current liqudity. Variable L, in base scale"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"
      }
    },
    {
      "name": "calculateAssetBWithdrawOnLpDeposit",
      "desc": "Calculates how much asset B will be taken from the smart contract on LP asset deposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256",
          "desc": "LP Asset amount in Base decimal representation.."
        },
        {
          "name": "assetBBalance",
          "type": "uint256",
          "desc": "Asset B balance. Variable ab, in base scale"
        },
        {
          "name": "liqudity",
          "type": "uint256",
          "desc": "Current liqudity. Variable L, in base scale"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
      }
    },
    {
      "name": "calculateAssetBDepositOnAssetADeposit",
      "desc": "Calculates how much asset B should be deposited when user deposit asset a and b.On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user",
      "readonly": true,
      "args": [
        {
          "name": "inAmountA",
          "type": "uint256",
          "desc": "Asset A amount in Base decimal representation"
        },
        {
          "name": "inAmountB",
          "type": "uint256",
          "desc": "Asset B amount in Base decimal representation"
        },
        {
          "name": "assetABalance",
          "type": "uint256",
          "desc": "Asset A balance. Variable ab, in base scale"
        },
        {
          "name": "assetBBalance",
          "type": "uint256",
          "desc": "Asset B balance. Variable bb, in base scale"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
      }
    },
    {
      "name": "calculateAssetADepositOnAssetBDeposit",
      "desc": "Calculates how much asset A should be deposited when user deposit asset a and bOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user",
      "readonly": true,
      "args": [
        {
          "name": "inAmountA",
          "type": "uint256",
          "desc": "Asset A amount in Base decimal representation"
        },
        {
          "name": "inAmountB",
          "type": "uint256",
          "desc": "Asset B amount in Base decimal representation"
        },
        {
          "name": "assetABalance",
          "type": "uint256",
          "desc": "Asset A balance. Variable ab, in base scale"
        },
        {
          "name": "assetBBalance",
          "type": "uint256",
          "desc": "Asset B balance. Variable bb, in base scale"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "Amount of asset A to be deposited. The result is in Base decimals (9)"
      }
    },
    {
      "name": "status",
      "readonly": true,
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "assetLP",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
      }
    }
  ]
}