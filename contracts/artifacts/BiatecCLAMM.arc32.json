{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "getCurrentPrice()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPriceDivider()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLPTokenId()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(pay,uint64,uint64,uint32,uint64,uint64,uint64,uint8,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(txn,txn,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidity(axfer,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "assetA": {
          "type": "uint64",
          "key": "a"
        },
        "assetB": {
          "type": "uint64",
          "key": "b"
        },
        "priceMaxA": {
          "type": "uint64",
          "key": "pa"
        },
        "priceMaxB": {
          "type": "uint64",
          "key": "pb"
        },
        "poolToken": {
          "type": "uint64",
          "key": "p"
        },
        "feeB100000": {
          "type": "bytes",
          "key": "f"
        },
        "ratio": {
          "type": "uint64",
          "key": "r"
        },
        "scale": {
          "type": "uint64",
          "key": "scale"
        },
        "identityProvider": {
          "type": "uint64",
          "key": "i"
        },
        "poolProvider": {
          "type": "uint64",
          "key": "pp"
        },
        "verificationClass": {
          "type": "bytes",
          "key": "c"
        },
        "engagementClass": {
          "type": "bytes",
          "key": "e"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 9
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecCLAMM",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getCurrentPrice",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getPriceDivider",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getLPTokenId",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Anybody can deploy the clamm smart contract",
        "args": [
          {
            "name": "txSeed",
            "type": "pay",
            "desc": "Seed transaction so that smart contract can opt in to the assets"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A ID must be lower then Asset B ID"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "feeB100000",
            "type": "uint32",
            "desc": "Fee in 100000 base level. value 10000 = 10000/100000 = 0,1 = 10% fee. 1000 = 1%. 100 = 0,1%. 10 = 0,01% = 1 base point"
          },
          {
            "name": "priceMaxA",
            "type": "uint64"
          },
          {
            "name": "priceMaxB",
            "type": "uint64"
          },
          {
            "name": "currentPrice",
            "type": "uint64"
          },
          {
            "name": "verificationClass",
            "type": "uint8",
            "desc": "Asset B"
          },
          {
            "name": "identityProvider",
            "type": "uint64"
          },
          {
            "name": "poolProvider",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "LP token ID"
        }
      },
      {
        "name": "addLiquidity",
        "desc": "This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token",
        "args": [
          {
            "name": "txAssetADeposit",
            "type": "txn",
            "desc": "Transfer of asset A to the LP pool"
          },
          {
            "name": "txAssetBDeposit",
            "type": "txn",
            "desc": "Transfer of asset B to the LP pool"
          },
          {
            "name": "poolAsset",
            "type": "uint64",
            "desc": "LP pool asset"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "LP Token quantity distributed"
        }
      },
      {
        "name": "removeLiquidity",
        "desc": "This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool",
        "args": [
          {
            "name": "txLPXfer",
            "type": "axfer",
            "desc": "Transfer of the LP token"
          },
          {
            "name": "poolAsset",
            "type": "uint64",
            "desc": "LP pool asset"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "args": [
          {
            "name": "swapXfer",
            "type": "axfer"
          },
          {
            "name": "assetA",
            "type": "uint64"
          },
          {
            "name": "assetB",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}