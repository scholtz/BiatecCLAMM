{
  "name": "BiatecClammPool",
  "desc": "",
  "methods": [
    {
      "name": "createApplication",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [
          "NoOp"
        ],
        "call": []
      }
    },
    {
      "name": "updateApplication",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "newVersion",
          "type": "byte[]"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "UpdateApplication"
        ]
      }
    },
    {
      "name": "getCurrentPrice",
      "readonly": true,
      "args": [],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "getPriceDivider",
      "readonly": true,
      "args": [],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "getLPTokenId",
      "readonly": true,
      "args": [],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "bootstrap",
      "args": [
        {
          "name": "assetA",
          "type": "uint64"
        },
        {
          "name": "assetB",
          "type": "uint64"
        },
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "appBiatecPoolProvider",
          "type": "uint64"
        },
        {
          "name": "txSeed",
          "type": "pay"
        },
        {
          "name": "fee",
          "type": "uint64"
        },
        {
          "name": "priceMin",
          "type": "uint64"
        },
        {
          "name": "priceMax",
          "type": "uint64"
        },
        {
          "name": "currentPrice",
          "type": "uint64"
        },
        {
          "name": "verificationClass",
          "type": "uint8"
        }
      ],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "addLiquidity",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "appBiatecIdentityProvider",
          "type": "uint64"
        },
        {
          "name": "txAssetADeposit",
          "type": "txn"
        },
        {
          "name": "txAssetBDeposit",
          "type": "txn"
        },
        {
          "name": "assetA",
          "type": "uint64"
        },
        {
          "name": "assetB",
          "type": "uint64"
        },
        {
          "name": "assetLp",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "removeLiquidity",
      "desc": "This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64",
          "desc": "Configuration reference"
        },
        {
          "name": "appBiatecIdentityProvider",
          "type": "uint64",
          "desc": "Identity service reference"
        },
        {
          "name": "txLpXfer",
          "type": "axfer",
          "desc": "Transfer of the LP token"
        },
        {
          "name": "assetA",
          "type": "uint64",
          "desc": "Asset A"
        },
        {
          "name": "assetB",
          "type": "uint64",
          "desc": "Asset B"
        },
        {
          "name": "assetLp",
          "type": "uint64",
          "desc": "LP pool asset"
        }
      ],
      "returns": {
        "type": "uint256",
        "desc": "LP position reduced"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "removeLiquidityAdmin",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "assetA",
          "type": "uint64"
        },
        {
          "name": "assetB",
          "type": "uint64"
        },
        {
          "name": "assetLp",
          "type": "uint64"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "swap",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "appBiatecIdentityProvider",
          "type": "uint64"
        },
        {
          "name": "appBiatecPoolProvider",
          "type": "uint64"
        },
        {
          "name": "txSwap",
          "type": "txn"
        },
        {
          "name": "assetA",
          "type": "uint64"
        },
        {
          "name": "assetB",
          "type": "uint64"
        },
        {
          "name": "minimumToReceive",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "distributeExcessAssets",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "assetA",
          "type": "uint64"
        },
        {
          "name": "assetB",
          "type": "uint64"
        },
        {
          "name": "amountA",
          "type": "uint256"
        },
        {
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "withdrawExcessAssets",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "assetA",
          "type": "uint64"
        },
        {
          "name": "assetB",
          "type": "uint64"
        },
        {
          "name": "amountA",
          "type": "uint64"
        },
        {
          "name": "amountB",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "sendOnlineKeyRegistration",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "votePk",
          "type": "byte[]"
        },
        {
          "name": "selectionPk",
          "type": "byte[]"
        },
        {
          "name": "stateProofPk",
          "type": "byte[]"
        },
        {
          "name": "voteFirst",
          "type": "uint64"
        },
        {
          "name": "voteLast",
          "type": "uint64"
        },
        {
          "name": "voteKeyDilution",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "sendOfflineKeyRegistration",
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateDistributedLiquidity",
      "readonly": true,
      "args": [
        {
          "name": "assetLp",
          "type": "uint64"
        },
        {
          "name": "currentDeposit",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateLiquidityFlatPrice",
      "readonly": true,
      "args": [
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateLiquidityD",
      "readonly": true,
      "args": [
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "priceMin",
          "type": "uint256"
        },
        {
          "name": "priceMax",
          "type": "uint256"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateLiquidityWithD",
      "readonly": true,
      "args": [
        {
          "name": "x",
          "type": "uint256"
        },
        {
          "name": "y",
          "type": "uint256"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256"
        },
        {
          "name": "dSqrt",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculatePrice",
      "readonly": true,
      "args": [
        {
          "name": "assetAQuantity",
          "type": "uint256"
        },
        {
          "name": "assetBQuantity",
          "type": "uint256"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256"
        },
        {
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateAssetBWithdrawOnAssetADeposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "name": "assetABalance",
          "type": "uint256"
        },
        {
          "name": "assetBBalance",
          "type": "uint256"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256"
        },
        {
          "name": "liqudity",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateAssetAWithdrawOnAssetBDeposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "name": "assetABalance",
          "type": "uint256"
        },
        {
          "name": "assetBBalance",
          "type": "uint256"
        },
        {
          "name": "priceMinSqrt",
          "type": "uint256"
        },
        {
          "name": "priceMaxSqrt",
          "type": "uint256"
        },
        {
          "name": "liqudity",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateAssetAWithdrawOnLpDeposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "name": "assetABalance",
          "type": "uint256"
        },
        {
          "name": "liqudity",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateAssetBWithdrawOnLpDeposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "name": "assetBBalance",
          "type": "uint256"
        },
        {
          "name": "liqudity",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateAssetBDepositOnAssetADeposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmountA",
          "type": "uint256"
        },
        {
          "name": "inAmountB",
          "type": "uint256"
        },
        {
          "name": "assetABalance",
          "type": "uint256"
        },
        {
          "name": "assetBBalance",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "calculateAssetADepositOnAssetBDeposit",
      "readonly": true,
      "args": [
        {
          "name": "inAmountA",
          "type": "uint256"
        },
        {
          "name": "inAmountB",
          "type": "uint256"
        },
        {
          "name": "assetABalance",
          "type": "uint256"
        },
        {
          "name": "assetBBalance",
          "type": "uint256"
        }
      ],
      "returns": {
        "type": "uint256"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "status",
      "readonly": true,
      "args": [
        {
          "name": "appBiatecConfigProvider",
          "type": "uint64"
        },
        {
          "name": "assetA",
          "type": "uint64"
        },
        {
          "name": "assetB",
          "type": "uint64"
        },
        {
          "name": "assetLp",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
        "struct": "AmmStatus"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    }
  ],
  "arcs": [
    4,
    56
  ],
  "structs": {
    "AmmStatus": [
      {
        "name": "scale",
        "type": "uint64"
      },
      {
        "name": "assetABalance",
        "type": "uint64"
      },
      {
        "name": "assetBBalance",
        "type": "uint64"
      },
      {
        "name": "realABalance",
        "type": "uint64"
      },
      {
        "name": "realBBalance",
        "type": "uint64"
      },
      {
        "name": "priceMinSqrt",
        "type": "uint64"
      },
      {
        "name": "priceMaxSqrt",
        "type": "uint64"
      },
      {
        "name": "currentLiqudity",
        "type": "uint64"
      },
      {
        "name": "releasedLiqudity",
        "type": "uint64"
      },
      {
        "name": "liqudityUsersFromFees",
        "type": "uint64"
      },
      {
        "name": "liqudityBiatecFromFees",
        "type": "uint64"
      },
      {
        "name": "assetA",
        "type": "uint64"
      },
      {
        "name": "assetB",
        "type": "uint64"
      },
      {
        "name": "poolToken",
        "type": "uint64"
      },
      {
        "name": "price",
        "type": "uint64"
      },
      {
        "name": "fee",
        "type": "uint64"
      },
      {
        "name": "biatecFee",
        "type": "uint64"
      },
      {
        "name": "verificationClass",
        "type": "uint64"
      }
    ]
  },
  "state": {
    "schema": {
      "global": {
        "bytes": 8,
        "ints": 10
      },
      "local": {
        "bytes": 0,
        "ints": 0
      }
    },
    "keys": {
      "global": {
        "assetA": {
          "key": "YQ==",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "assetB": {
          "key": "Yg==",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "assetLp": {
          "key": "bHA=",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "assetABalance": {
          "key": "YWI=",
          "keyType": "AVMBytes",
          "valueType": "uint256"
        },
        "assetBBalance": {
          "key": "YmI=",
          "keyType": "AVMBytes",
          "valueType": "uint256"
        },
        "priceMin": {
          "key": "cE1pbg==",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "priceMax": {
          "key": "cE1heA==",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "priceMinSqrt": {
          "key": "cE1pblM=",
          "keyType": "AVMBytes",
          "valueType": "uint256"
        },
        "priceMaxSqrt": {
          "key": "cE1heFM=",
          "keyType": "AVMBytes",
          "valueType": "uint256"
        },
        "Liqudity": {
          "key": "TA==",
          "keyType": "AVMBytes",
          "valueType": "uint256"
        },
        "LiqudityUsersFromFees": {
          "key": "THU=",
          "keyType": "AVMBytes",
          "valueType": "uint256"
        },
        "LiqudityBiatecFromFees": {
          "key": "TGI=",
          "keyType": "AVMBytes",
          "valueType": "uint256"
        },
        "fee": {
          "key": "Zg==",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "currentPrice": {
          "key": "cHJpY2U=",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "scale": {
          "key": "c2NhbGU=",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "appBiatecConfigProvider": {
          "key": "YmM=",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "verificationClass": {
          "key": "Yw==",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "version": {
          "key": "c2N2ZXI=",
          "keyType": "AVMBytes",
          "valueType": "AVMBytes"
        }
      },
      "local": {},
      "box": {}
    },
    "maps": {
      "global": {},
      "local": {},
      "box": {}
    }
  },
  "bareActions": {
    "create": [],
    "call": []
  },
  "sourceInfo": {
    "approval": {
      "sourceInfo": [
        {
          "pc": [
            420
          ],
          "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
        },
        {
          "pc": [
            660
          ],
          "errorMessage": "ERR_CONFIG"
        },
        {
          "pc": [
            667
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('u')"
        },
        {
          "pc": [
            675
          ],
          "errorMessage": "ERR_UPDATER"
        },
        {
          "pc": [
            779
          ],
          "errorMessage": "argument 0 (verificationClass) for bootstrap must be a uint8"
        },
        {
          "pc": [
            808
          ],
          "errorMessage": "argument 5 (txSeed) for bootstrap must be a pay transaction"
        },
        {
          "pc": [
            847
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSeed\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            857
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSeed\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=300_000\"}"
        },
        {
          "pc": [
            868
          ],
          "errorMessage": "ERR_PRICE_MAX"
        },
        {
          "pc": [
            878
          ],
          "errorMessage": "ERR_SENDER"
        },
        {
          "pc": [
            884
          ],
          "errorMessage": "ERR_PRICE"
        },
        {
          "pc": [
            954
          ],
          "errorMessage": "ERR_FEE"
        },
        {
          "pc": [
            961
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('p')"
        },
        {
          "pc": [
            969
          ],
          "errorMessage": "ERR_CONFIG"
        },
        {
          "pc": [
            976
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('s')"
        },
        {
          "pc": [
            984
          ],
          "errorMessage": "ERR_PAUSED"
        },
        {
          "pc": [
            1062
          ],
          "errorMessage": "sqrt((priceMin as uint256) * s) overflowed 256 bits"
        },
        {
          "pc": [
            1159
          ],
          "errorMessage": "sqrt((priceMax as uint256) * s) overflowed 256 bits"
        },
        {
          "pc": [
            1594
          ],
          "errorMessage": "assetA does not match"
        },
        {
          "pc": [
            1602
          ],
          "errorMessage": "assetB does not match"
        },
        {
          "pc": [
            1622
          ],
          "errorMessage": "assetLp does not match"
        },
        {
          "pc": [
            1857
          ],
          "errorMessage": "failed to cast txAssetADeposit to axfer"
        },
        {
          "pc": [
            1867
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"typeEnum\",\"expected\":\"axfer\"}"
        },
        {
          "pc": [
            1875
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            1883
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"xferAsset\",\"expected\":\"assetA\"}"
        },
        {
          "pc": [
            1891
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetAmount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}"
        },
        {
          "pc": [
            1913
          ],
          "errorMessage": "failed to cast txAssetADeposit to pay"
        },
        {
          "pc": [
            1923
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"payTx\",\"field\":\"typeEnum\",\"expected\":\"pay\"}"
        },
        {
          "pc": [
            1931
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"payTx\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            1939
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"payTx\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}"
        },
        {
          "pc": [
            1945
          ],
          "errorMessage": "Unsupported tx type of the asset A"
        },
        {
          "pc": [
            1964
          ],
          "errorMessage": "failed to cast txAssetBDeposit to axfer"
        },
        {
          "pc": [
            1974
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"typeEnum\",\"expected\":\"axfer\"}"
        },
        {
          "pc": [
            1982
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            1990
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"xferAsset\",\"expected\":\"assetB\"}"
        },
        {
          "pc": [
            1998
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetAmount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}"
        },
        {
          "pc": [
            2020
          ],
          "errorMessage": "failed to cast txAssetBDeposit to pay"
        },
        {
          "pc": [
            2030
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"payTx\",\"field\":\"typeEnum\",\"expected\":\"pay\"}"
        },
        {
          "pc": [
            2038
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"payTx\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            2046
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"payTx\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}"
        },
        {
          "pc": [
            2052
          ],
          "errorMessage": "Unsupported tx type of the asset B"
        },
        {
          "pc": [
            2083
          ],
          "errorMessage": "assetLpDelicmalScale2Scale overflowed 256 bits"
        },
        {
          "pc": [
            2135
          ],
          "errorMessage": "bDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2187
          ],
          "errorMessage": "aDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2335
          ],
          "errorMessage": "assetLpDelicmalScale2Scale overflowed 256 bits"
        },
        {
          "pc": [
            2387
          ],
          "errorMessage": "bDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2439
          ],
          "errorMessage": "aDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2537
          ],
          "errorMessage": "newPrice as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            2582
          ],
          "errorMessage": "bDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2634
          ],
          "errorMessage": "aDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2701
          ],
          "errorMessage": "bDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2753
          ],
          "errorMessage": "aDepositInBaseScale overflowed 256 bits"
        },
        {
          "pc": [
            2812
          ],
          "errorMessage": "(a / assetADelicmalScale2Scale) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            2845
          ],
          "errorMessage": "(b / assetBDelicmalScale2Scale) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            2890
          ],
          "errorMessage": "Dominant is asset B"
        },
        {
          "pc": [
            2940
          ],
          "errorMessage": "assetLpDelicmalScale2Scale overflowed 256 bits"
        },
        {
          "pc": [
            2992
          ],
          "errorMessage": "realAssetBDeposit overflowed 256 bits"
        },
        {
          "pc": [
            3044
          ],
          "errorMessage": "realAssetADeposit overflowed 256 bits"
        },
        {
          "pc": [
            3116
          ],
          "errorMessage": "Dominant is asset A"
        },
        {
          "pc": [
            3166
          ],
          "errorMessage": "assetLpDelicmalScale2Scale overflowed 256 bits"
        },
        {
          "pc": [
            3218
          ],
          "errorMessage": "realAssetBDeposit overflowed 256 bits"
        },
        {
          "pc": [
            3270
          ],
          "errorMessage": "realAssetADeposit overflowed 256 bits"
        },
        {
          "pc": [
            3360
          ],
          "errorMessage": "assetLpDelicmalScale2Scale overflowed 256 bits"
        },
        {
          "pc": [
            3412
          ],
          "errorMessage": "realAssetBDeposit overflowed 256 bits"
        },
        {
          "pc": [
            3464
          ],
          "errorMessage": "realAssetADeposit overflowed 256 bits"
        },
        {
          "pc": [
            3554
          ],
          "errorMessage": "assetLpDelicmalScale2Scale overflowed 256 bits"
        },
        {
          "pc": [
            3606
          ],
          "errorMessage": "realAssetBDeposit overflowed 256 bits"
        },
        {
          "pc": [
            3658
          ],
          "errorMessage": "realAssetADeposit overflowed 256 bits"
        },
        {
          "pc": [
            3775
          ],
          "errorMessage": "failed to calculate exact liqudidity"
        },
        {
          "pc": [
            3829
          ],
          "errorMessage": "this.assetABalance.value + realAssetADeposit overflowed 256 bits"
        },
        {
          "pc": [
            3889
          ],
          "errorMessage": "this.assetBBalance.value + realAssetBDeposit overflowed 256 bits"
        },
        {
          "pc": [
            4040
          ],
          "errorMessage": "priceMin overflowed 256 bits"
        },
        {
          "pc": [
            4108
          ],
          "errorMessage": "priceMax overflowed 256 bits"
        },
        {
          "pc": [
            4160
          ],
          "errorMessage": "priceMin overflowed 256 bits"
        },
        {
          "pc": [
            4221
          ],
          "errorMessage": "D_SQRT overflowed 256 bits"
        },
        {
          "pc": [
            4293
          ],
          "errorMessage": "((newLiqudity - this.Liqudity.value) / assetLpDelicmalScale2Scale) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            4327
          ],
          "errorMessage": "newLiqudity overflowed 256 bits"
        },
        {
          "pc": [
            4386
          ],
          "errorMessage": "LP-ZERO-ERR"
        },
        {
          "pc": [
            4423
          ],
          "errorMessage": "argument 3 (txLpXfer) for removeLiquidity must be a axfer transaction"
        },
        {
          "pc": [
            4441
          ],
          "errorMessage": "removeLiquidity return value overflowed 256 bits"
        },
        {
          "pc": [
            4513
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txLpXfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            4521
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txLpXfer\",\"field\":\"xferAsset\",\"expected\":\"assetLp\"}"
        },
        {
          "pc": [
            4529
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txLpXfer\",\"field\":\"assetAmount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=0\"}"
        },
        {
          "pc": [
            4663
          ],
          "errorMessage": "lpDelta overflowed 256 bits"
        },
        {
          "pc": [
            4863
          ],
          "errorMessage": "this.LiqudityUsersFromFees.value - myPortionOfFeesCollected overflowed 256 bits"
        },
        {
          "pc": [
            4925
          ],
          "errorMessage": "lpDeltaWithFees overflowed 256 bits"
        },
        {
          "pc": [
            4984
          ],
          "errorMessage": "(aToSend / assetADelicmalScale2Scale) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            5041
          ],
          "errorMessage": "lpDeltaWithFees overflowed 256 bits"
        },
        {
          "pc": [
            5100
          ],
          "errorMessage": "(bToSend / assetBDelicmalScale2Scale) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            5155
          ],
          "errorMessage": "ERR-REM-ZERO"
        },
        {
          "pc": [
            5188
          ],
          "errorMessage": "newAssetA overflowed 256 bits"
        },
        {
          "pc": [
            5245
          ],
          "errorMessage": "newAssetB overflowed 256 bits"
        },
        {
          "pc": [
            5358
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            5450
          ],
          "errorMessage": "this.priceMax.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            5508
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            5575
          ],
          "errorMessage": "D_SQRT overflowed 256 bits"
        },
        {
          "pc": [
            5661
          ],
          "errorMessage": "lAfter overflowed 256 bits"
        },
        {
          "pc": [
            5730
          ],
          "errorMessage": "argument 0 (amount) for removeLiquidityAdmin must be a uint256"
        },
        {
          "pc": [
            5756
          ],
          "errorMessage": "removeLiquidityAdmin return value overflowed 256 bits"
        },
        {
          "pc": [
            5837
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('ef')"
        },
        {
          "pc": [
            5846
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('s')"
        },
        {
          "pc": [
            5854
          ],
          "errorMessage": "ERR_PAUSED"
        },
        {
          "pc": [
            5860
          ],
          "errorMessage": "ERR-EXEC-ONLY"
        },
        {
          "pc": [
            6020
          ],
          "errorMessage": "ERR-TOO-MUCH"
        },
        {
          "pc": [
            6036
          ],
          "errorMessage": "this.LiqudityBiatecFromFees.value - lpDeltaWithFees overflowed 256 bits"
        },
        {
          "pc": [
            6098
          ],
          "errorMessage": "lpDeltaWithFees overflowed 256 bits"
        },
        {
          "pc": [
            6157
          ],
          "errorMessage": "(aToSend / assetADelicmalScale2Scale) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            6214
          ],
          "errorMessage": "lpDeltaWithFees overflowed 256 bits"
        },
        {
          "pc": [
            6273
          ],
          "errorMessage": "(bToSend / assetBDelicmalScale2Scale) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            6345
          ],
          "errorMessage": "newAssetA overflowed 256 bits"
        },
        {
          "pc": [
            6402
          ],
          "errorMessage": "newAssetB overflowed 256 bits"
        },
        {
          "pc": [
            6515
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            6607
          ],
          "errorMessage": "this.priceMax.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            6665
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            6732
          ],
          "errorMessage": "D_SQRT overflowed 256 bits"
        },
        {
          "pc": [
            6818
          ],
          "errorMessage": "lAfter overflowed 256 bits"
        },
        {
          "pc": [
            6888
          ],
          "errorMessage": "ERR-INVALID-CONFIG"
        },
        {
          "pc": [
            6895
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('i')"
        },
        {
          "pc": [
            6903
          ],
          "errorMessage": "ERR-WRONG-IDENT"
        },
        {
          "pc": [
            6958
          ],
          "errorMessage": "ERR-USER-LOCKED"
        },
        {
          "pc": [
            6974
          ],
          "errorMessage": "ERR-LOW-VER"
        },
        {
          "pc": [
            6981
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('s')"
        },
        {
          "pc": [
            6989
          ],
          "errorMessage": "ERR_PAUSED"
        },
        {
          "pc": [
            7041
          ],
          "errorMessage": "swap return value overflowed 256 bits"
        },
        {
          "pc": [
            7199
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"typeEnum\",\"expected\":\"pay\"}"
        },
        {
          "pc": [
            7207
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"amount\",\"condition\":\"greaterThan\",\"expected\":\">0\"}"
        },
        {
          "pc": [
            7215
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            7223
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}"
        },
        {
          "pc": [
            7242
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"typeEnum\",\"expected\":\"axfer\"}"
        },
        {
          "pc": [
            7250
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"assetAmount\",\"condition\":\"greaterThan\",\"expected\":\">0\"}"
        },
        {
          "pc": [
            7258
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}"
        },
        {
          "pc": [
            7266
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"txSwap\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}"
        },
        {
          "pc": [
            7282
          ],
          "errorMessage": "transaction verification failed: {\"txn\":{\"txnText\":\"txSwap\"},\"field\":\"xferAsset\",\"condition\":\"includedIn\",\"expected\":\"[assetA, assetB]\"}"
        },
        {
          "pc": [
            7289
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('p')"
        },
        {
          "pc": [
            7297
          ],
          "errorMessage": "ERR-INVALID-PP"
        },
        {
          "pc": [
            7702
          ],
          "errorMessage": "inAssetAfterFee overflowed 256 bits"
        },
        {
          "pc": [
            7826
          ],
          "errorMessage": "realSwapBDecimals as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            7895
          ],
          "errorMessage": "this.assetABalance.value + inAsset overflowed 256 bits"
        },
        {
          "pc": [
            7955
          ],
          "errorMessage": "this.assetBBalance.value - realSwapBaseDecimals overflowed 256 bits"
        },
        {
          "pc": [
            8106
          ],
          "errorMessage": "inAssetAfterFee overflowed 256 bits"
        },
        {
          "pc": [
            8230
          ],
          "errorMessage": "realSwapADecimals as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            8299
          ],
          "errorMessage": "this.assetBBalance.value + inAsset overflowed 256 bits"
        },
        {
          "pc": [
            8359
          ],
          "errorMessage": "this.assetABalance.value - realSwapBaseDecimals overflowed 256 bits"
        },
        {
          "pc": [
            8472
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            8564
          ],
          "errorMessage": "this.priceMax.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            8622
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            8689
          ],
          "errorMessage": "D_SQRT overflowed 256 bits"
        },
        {
          "pc": [
            8794
          ],
          "errorMessage": "newL overflowed 256 bits"
        },
        {
          "pc": [
            8864
          ],
          "errorMessage": "feeB256 as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            8918
          ],
          "errorMessage": "feeB256 as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            8950
          ],
          "errorMessage": "global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')"
        },
        {
          "pc": [
            9012
          ],
          "errorMessage": "this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits"
        },
        {
          "pc": [
            9159
          ],
          "errorMessage": "this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits"
        },
        {
          "pc": [
            9219
          ],
          "errorMessage": "this.LiqudityBiatecFromFees.value + biatecLiquidityFromFeeIncrement overflowed 256 bits"
        },
        {
          "pc": [
            9314
          ],
          "errorMessage": "Stats to register must not be empty"
        },
        {
          "pc": [
            9361
          ],
          "errorMessage": "newPrice as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            9394
          ],
          "errorMessage": "assetADelicmalScale2Scale as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            9428
          ],
          "errorMessage": "assetBDelicmalScale2Scale as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            9498
          ],
          "errorMessage": "newPrice as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            9542
          ],
          "errorMessage": "argument 0 (amountB) for distributeExcessAssets must be a uint256"
        },
        {
          "pc": [
            9551
          ],
          "errorMessage": "argument 1 (amountA) for distributeExcessAssets must be a uint256"
        },
        {
          "pc": [
            9573
          ],
          "errorMessage": "distributeExcessAssets return value overflowed 256 bits"
        },
        {
          "pc": [
            9692
          ],
          "errorMessage": "ERR_CONFIG"
        },
        {
          "pc": [
            9700
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('ef')"
        },
        {
          "pc": [
            9709
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('s')"
        },
        {
          "pc": [
            9717
          ],
          "errorMessage": "ERR_PAUSED"
        },
        {
          "pc": [
            9723
          ],
          "errorMessage": "ERR_SENDER"
        },
        {
          "pc": [
            9783
          ],
          "errorMessage": "this.assetABalance.value + amountA overflowed 256 bits"
        },
        {
          "pc": [
            9843
          ],
          "errorMessage": "this.assetBBalance.value + amountB overflowed 256 bits"
        },
        {
          "pc": [
            9916
          ],
          "errorMessage": "ERR_A0_B"
        },
        {
          "pc": [
            9937
          ],
          "errorMessage": "ERR_A_B"
        },
        {
          "pc": [
            9955
          ],
          "errorMessage": "ERR_B_B"
        },
        {
          "pc": [
            10024
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            10116
          ],
          "errorMessage": "this.priceMax.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            10174
          ],
          "errorMessage": "this.priceMin.value as uint256 overflowed 256 bits"
        },
        {
          "pc": [
            10241
          ],
          "errorMessage": "D_SQRT overflowed 256 bits"
        },
        {
          "pc": [
            10336
          ],
          "errorMessage": "newL overflowed 256 bits"
        },
        {
          "pc": [
            10390
          ],
          "errorMessage": "global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')"
        },
        {
          "pc": [
            10452
          ],
          "errorMessage": "this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits"
        },
        {
          "pc": [
            10599
          ],
          "errorMessage": "this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement overflowed 256 bits"
        },
        {
          "pc": [
            10659
          ],
          "errorMessage": "this.LiqudityBiatecFromFees.value + biatecLiquidityFromFeeIncrement overflowed 256 bits"
        },
        {
          "pc": [
            10753
          ],
          "errorMessage": "newPrice as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            10839
          ],
          "errorMessage": "ERR_CONFIG"
        },
        {
          "pc": [
            10847
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('ef')"
        },
        {
          "pc": [
            10856
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('s')"
        },
        {
          "pc": [
            10864
          ],
          "errorMessage": "ERR_PAUSED"
        },
        {
          "pc": [
            10870
          ],
          "errorMessage": "ERR_SENDER"
        },
        {
          "pc": [
            10977
          ],
          "errorMessage": "ERR_A0_B"
        },
        {
          "pc": [
            10998
          ],
          "errorMessage": "ERR_A_B"
        },
        {
          "pc": [
            11016
          ],
          "errorMessage": "ERR_B_B"
        },
        {
          "pc": [
            11080
          ],
          "errorMessage": "ERR_CONFIG"
        },
        {
          "pc": [
            11088
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('ef')"
        },
        {
          "pc": [
            11096
          ],
          "errorMessage": "ERR_SENDER"
        },
        {
          "pc": [
            11156
          ],
          "errorMessage": "ERR_CONFIG"
        },
        {
          "pc": [
            11164
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('ef')"
        },
        {
          "pc": [
            11173
          ],
          "errorMessage": "global state value does not exist: appBiatecConfigProvider.globalState('s')"
        },
        {
          "pc": [
            11181
          ],
          "errorMessage": "ERR_PAUSED"
        },
        {
          "pc": [
            11187
          ],
          "errorMessage": "ERR_SENDER"
        },
        {
          "pc": [
            11213
          ],
          "errorMessage": "argument 0 (currentDeposit) for calculateDistributedLiquidity must be a uint256"
        },
        {
          "pc": [
            11227
          ],
          "errorMessage": "calculateDistributedLiquidity return value overflowed 256 bits"
        },
        {
          "pc": [
            11407
          ],
          "errorMessage": "argument 0 (price) for calculateLiquidityFlatPrice must be a uint256"
        },
        {
          "pc": [
            11416
          ],
          "errorMessage": "argument 1 (y) for calculateLiquidityFlatPrice must be a uint256"
        },
        {
          "pc": [
            11425
          ],
          "errorMessage": "argument 2 (x) for calculateLiquidityFlatPrice must be a uint256"
        },
        {
          "pc": [
            11435
          ],
          "errorMessage": "calculateLiquidityFlatPrice return value overflowed 256 bits"
        },
        {
          "pc": [
            11545
          ],
          "errorMessage": "argument 0 (priceMaxSqrt) for calculateLiquidityD must be a uint256"
        },
        {
          "pc": [
            11554
          ],
          "errorMessage": "argument 1 (priceMinSqrt) for calculateLiquidityD must be a uint256"
        },
        {
          "pc": [
            11563
          ],
          "errorMessage": "argument 2 (priceMax) for calculateLiquidityD must be a uint256"
        },
        {
          "pc": [
            11572
          ],
          "errorMessage": "argument 3 (priceMin) for calculateLiquidityD must be a uint256"
        },
        {
          "pc": [
            11581
          ],
          "errorMessage": "argument 4 (y) for calculateLiquidityD must be a uint256"
        },
        {
          "pc": [
            11590
          ],
          "errorMessage": "argument 5 (x) for calculateLiquidityD must be a uint256"
        },
        {
          "pc": [
            11600
          ],
          "errorMessage": "calculateLiquidityD return value overflowed 256 bits"
        },
        {
          "pc": [
            12074
          ],
          "errorMessage": "argument 0 (dSqrt) for calculateLiquidityWithD must be a uint256"
        },
        {
          "pc": [
            12083
          ],
          "errorMessage": "argument 1 (priceMaxSqrt) for calculateLiquidityWithD must be a uint256"
        },
        {
          "pc": [
            12092
          ],
          "errorMessage": "argument 2 (priceMinSqrt) for calculateLiquidityWithD must be a uint256"
        },
        {
          "pc": [
            12101
          ],
          "errorMessage": "argument 3 (y) for calculateLiquidityWithD must be a uint256"
        },
        {
          "pc": [
            12110
          ],
          "errorMessage": "argument 4 (x) for calculateLiquidityWithD must be a uint256"
        },
        {
          "pc": [
            12120
          ],
          "errorMessage": "calculateLiquidityWithD return value overflowed 256 bits"
        },
        {
          "pc": [
            12734
          ],
          "errorMessage": "argument 0 (liquidity) for calculatePrice must be a uint256"
        },
        {
          "pc": [
            12743
          ],
          "errorMessage": "argument 1 (priceMaxSqrt) for calculatePrice must be a uint256"
        },
        {
          "pc": [
            12752
          ],
          "errorMessage": "argument 2 (priceMinSqrt) for calculatePrice must be a uint256"
        },
        {
          "pc": [
            12761
          ],
          "errorMessage": "argument 3 (assetBQuantity) for calculatePrice must be a uint256"
        },
        {
          "pc": [
            12770
          ],
          "errorMessage": "argument 4 (assetAQuantity) for calculatePrice must be a uint256"
        },
        {
          "pc": [
            12780
          ],
          "errorMessage": "calculatePrice return value overflowed 256 bits"
        },
        {
          "pc": [
            13060
          ],
          "errorMessage": "argument 0 (liqudity) for calculateAssetBWithdrawOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            13069
          ],
          "errorMessage": "argument 1 (priceMaxSqrt) for calculateAssetBWithdrawOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            13078
          ],
          "errorMessage": "argument 2 (priceMinSqrt) for calculateAssetBWithdrawOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            13087
          ],
          "errorMessage": "argument 3 (assetBBalance) for calculateAssetBWithdrawOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            13096
          ],
          "errorMessage": "argument 4 (assetABalance) for calculateAssetBWithdrawOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            13105
          ],
          "errorMessage": "argument 5 (inAmount) for calculateAssetBWithdrawOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            13115
          ],
          "errorMessage": "calculateAssetBWithdrawOnAssetADeposit return value overflowed 256 bits"
        },
        {
          "pc": [
            13646
          ],
          "errorMessage": "argument 0 (liqudity) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            13655
          ],
          "errorMessage": "argument 1 (priceMaxSqrt) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            13664
          ],
          "errorMessage": "argument 2 (priceMinSqrt) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            13673
          ],
          "errorMessage": "argument 3 (assetBBalance) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            13682
          ],
          "errorMessage": "argument 4 (assetABalance) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            13691
          ],
          "errorMessage": "argument 5 (inAmount) for calculateAssetAWithdrawOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            13701
          ],
          "errorMessage": "calculateAssetAWithdrawOnAssetBDeposit return value overflowed 256 bits"
        },
        {
          "pc": [
            14236
          ],
          "errorMessage": "argument 0 (liqudity) for calculateAssetAWithdrawOnLpDeposit must be a uint256"
        },
        {
          "pc": [
            14245
          ],
          "errorMessage": "argument 1 (assetABalance) for calculateAssetAWithdrawOnLpDeposit must be a uint256"
        },
        {
          "pc": [
            14254
          ],
          "errorMessage": "argument 2 (inAmount) for calculateAssetAWithdrawOnLpDeposit must be a uint256"
        },
        {
          "pc": [
            14264
          ],
          "errorMessage": "calculateAssetAWithdrawOnLpDeposit return value overflowed 256 bits"
        },
        {
          "pc": [
            14347
          ],
          "errorMessage": "argument 0 (liqudity) for calculateAssetBWithdrawOnLpDeposit must be a uint256"
        },
        {
          "pc": [
            14356
          ],
          "errorMessage": "argument 1 (assetBBalance) for calculateAssetBWithdrawOnLpDeposit must be a uint256"
        },
        {
          "pc": [
            14365
          ],
          "errorMessage": "argument 2 (inAmount) for calculateAssetBWithdrawOnLpDeposit must be a uint256"
        },
        {
          "pc": [
            14375
          ],
          "errorMessage": "calculateAssetBWithdrawOnLpDeposit return value overflowed 256 bits"
        },
        {
          "pc": [
            14458
          ],
          "errorMessage": "argument 0 (assetBBalance) for calculateAssetBDepositOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            14467
          ],
          "errorMessage": "argument 1 (assetABalance) for calculateAssetBDepositOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            14476
          ],
          "errorMessage": "argument 2 (inAmountB) for calculateAssetBDepositOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            14485
          ],
          "errorMessage": "argument 3 (inAmountA) for calculateAssetBDepositOnAssetADeposit must be a uint256"
        },
        {
          "pc": [
            14495
          ],
          "errorMessage": "calculateAssetBDepositOnAssetADeposit return value overflowed 256 bits"
        },
        {
          "pc": [
            14613
          ],
          "errorMessage": "argument 0 (assetBBalance) for calculateAssetADepositOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            14622
          ],
          "errorMessage": "argument 1 (assetABalance) for calculateAssetADepositOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            14631
          ],
          "errorMessage": "argument 2 (inAmountB) for calculateAssetADepositOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            14640
          ],
          "errorMessage": "argument 3 (inAmountA) for calculateAssetADepositOnAssetBDeposit must be a uint256"
        },
        {
          "pc": [
            14650
          ],
          "errorMessage": "calculateAssetADepositOnAssetBDeposit return value overflowed 256 bits"
        },
        {
          "pc": [
            14799
          ],
          "errorMessage": "ERR_CONFIG"
        },
        {
          "pc": [
            14824
          ],
          "errorMessage": "ERR_LP"
        },
        {
          "pc": [
            14834
          ],
          "errorMessage": "global state value does not exist: this.appBiatecConfigProvider.value.globalState('f')"
        },
        {
          "pc": [
            14891
          ],
          "errorMessage": "this.assetABalance.value as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            14908
          ],
          "errorMessage": "this.assetBBalance.value as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            14936
          ],
          "errorMessage": "this.priceMinSqrt.value as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            14956
          ],
          "errorMessage": "this.priceMaxSqrt.value as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            14972
          ],
          "errorMessage": "this.Liqudity.value as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            15023
          ],
          "errorMessage": "this.calculateDistributedLiquidity(assetLp, <uint256>0) as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            15056
          ],
          "errorMessage": "this.LiqudityUsersFromFees.value as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            15073
          ],
          "errorMessage": "this.LiqudityBiatecFromFees.value as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            15122
          ],
          "errorMessage": "biatecFee as uint64 overflowed 64 bits"
        },
        {
          "pc": [
            15153
          ],
          "errorMessage": "this contract does not implement the given ABI method for create NoOp"
        },
        {
          "pc": [
            15351
          ],
          "errorMessage": "this contract does not implement the given ABI method for call NoOp"
        },
        {
          "pc": [
            15365
          ],
          "errorMessage": "this contract does not implement the given ABI method for call UpdateApplication"
        }
      ],
      "pcOffsetMethod": "none"
    },
    "clear": {
      "sourceInfo": [],
      "pcOffsetMethod": "none"
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "byteCode": {
    "approval": "",
    "clear": "Cg=="
  },
  "compilerInfo": {
    "compiler": "algod",
    "compilerVersion": {
      "major": 3,
      "minor": 25,
      "patch": 0,
      "commitHash": "9855f57c"
    }
  }
}