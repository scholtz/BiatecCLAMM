{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(byte[])void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "bootstrap(uint256,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressUdpater(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPaused(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressGov(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressExecutive(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddressExecutiveFee(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setBiatecIdentity(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setBiatecPool(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setBiatecFee(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawExcessAssets(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "addressUdpater": {
          "type": "bytes",
          "key": "u"
        },
        "addressGov": {
          "type": "bytes",
          "key": "g"
        },
        "addressExecutive": {
          "type": "bytes",
          "key": "e"
        },
        "addressExecutiveFee": {
          "type": "bytes",
          "key": "ef"
        },
        "appBiatecIdentityProvider": {
          "type": "uint64",
          "key": "i"
        },
        "appBiatecPoolProvider": {
          "type": "uint64",
          "key": "p"
        },
        "suspended": {
          "type": "uint64",
          "key": "s"
        },
        "biatecFee": {
          "type": "bytes",
          "key": "f"
        },
        "version": {
          "type": "bytes",
          "key": "scver"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecConfigProvider",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "addressUdpater from global biatec configuration is allowed to update application",
        "args": [
          {
            "name": "newVersion",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Setup the contract",
        "args": [
          {
            "name": "biatecFee",
            "type": "uint256",
            "desc": "Biatec fees"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64"
          },
          {
            "name": "appBiatecPoolProvider",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressUdpater",
        "desc": "Top secret account with which it is possible update contracts or identity provider",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPaused",
        "desc": "Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.",
        "args": [
          {
            "name": "a",
            "type": "uint64",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressGov",
        "desc": "Execution address with which it is possible to opt in for governance",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressExecutive",
        "desc": "Execution address with which it is possible to change global biatec fees",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddressExecutiveFee",
        "desc": "Execution fee address is address which can take fees from pools.",
        "args": [
          {
            "name": "a",
            "type": "address",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setBiatecIdentity",
        "desc": "App identity setter",
        "args": [
          {
            "name": "a",
            "type": "uint64",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setBiatecPool",
        "desc": "App identity setter",
        "args": [
          {
            "name": "a",
            "type": "uint64",
            "desc": "Address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setBiatecFee",
        "desc": "Fees in 9 decimals. 1_000_000_000 = 100%\nFees in 9 decimals. 10_000_000 = 1%\nFees in 9 decimals. 100_000 = 0,01%\n\n\nFees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee",
        "args": [
          {
            "name": "biatecFee",
            "type": "uint256",
            "desc": "Fee"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendOnlineKeyRegistration",
        "desc": "addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "votePK",
            "type": "byte[]"
          },
          {
            "name": "selectionPK",
            "type": "byte[]"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdrawExcessAssets",
        "desc": "If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw. If native token, then zero"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of the asset to be withdrawn"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}