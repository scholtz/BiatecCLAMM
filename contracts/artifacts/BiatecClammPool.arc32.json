{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(uint64,byte[])void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "getCurrentPrice()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPriceDivider()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getLPTokenId()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrapStep2()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidity(uint64,uint64,axfer,uint64,uint64,uint64)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLiquidityAdmin(uint64,uint64,uint64,uint64,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(uint64,uint64,uint64,txn,uint64,uint64,uint64)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "distributeExcessAssets(uint64,uint64,uint64,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawExcessAssets(uint64,uint64,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateDistributedLiquidity(uint64,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLiquidityFlatPrice(uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLiquidityD(uint256,uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateLiquidityWithD(uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "status(uint64,uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "setupFinished": {
          "type": "bytes",
          "key": "s"
        },
        "assetA": {
          "type": "uint64",
          "key": "a"
        },
        "assetADecimalsScaleFromBase": {
          "type": "bytes",
          "key": "ad"
        },
        "assetB": {
          "type": "uint64",
          "key": "b"
        },
        "assetBDecimalsScaleFromBase": {
          "type": "bytes",
          "key": "bd"
        },
        "assetLp": {
          "type": "uint64",
          "key": "lp"
        },
        "assetABalanceBaseScale": {
          "type": "bytes",
          "key": "ab"
        },
        "assetBBalanceBaseScale": {
          "type": "bytes",
          "key": "bb"
        },
        "priceMin": {
          "type": "uint64",
          "key": "pMin"
        },
        "priceMax": {
          "type": "uint64",
          "key": "pMax"
        },
        "priceMinSqrt": {
          "type": "bytes",
          "key": "pMinS"
        },
        "priceMaxSqrt": {
          "type": "bytes",
          "key": "pMaxS"
        },
        "Liquidity": {
          "type": "bytes",
          "key": "L"
        },
        "LiquidityUsersFromFees": {
          "type": "bytes",
          "key": "Lu"
        },
        "LiquidityBiatecFromFees": {
          "type": "bytes",
          "key": "Lb"
        },
        "fee": {
          "type": "uint64",
          "key": "f"
        },
        "currentPrice": {
          "type": "uint64",
          "key": "price"
        },
        "scale": {
          "type": "uint64",
          "key": "scale"
        },
        "appBiatecConfigProvider": {
          "type": "uint64",
          "key": "bc"
        },
        "verificationClass": {
          "type": "uint64",
          "key": "c"
        },
        "version": {
          "type": "bytes",
          "key": "scver"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 11,
      "num_uints": 10
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecClammPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "addressUdpater from global biatec configuration is allowed to update application",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "newVersion",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getCurrentPrice",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getPriceDivider",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getLPTokenId",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "bootstrap",
        "desc": "Only Biatec Pool Provider can deploy and bootsrap this smart contract",
        "args": [
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A ID must be lower then Asset B ID"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec amm provider"
          },
          {
            "name": "appBiatecPoolProvider",
            "type": "uint64",
            "desc": "Pool provider"
          },
          {
            "name": "txSeed",
            "type": "pay",
            "desc": "Seed transaction so that smart contract can opt in to the assets"
          },
          {
            "name": "fee",
            "type": "uint64",
            "desc": "Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%"
          },
          {
            "name": "priceMin",
            "type": "uint64",
            "desc": "Min price range. At this point all assets are in asset A."
          },
          {
            "name": "priceMax",
            "type": "uint64",
            "desc": "Max price range. At this point all assets are in asset B."
          },
          {
            "name": "currentPrice",
            "type": "uint64",
            "desc": "Deployer can specify the current price for easier deployemnt."
          },
          {
            "name": "verificationClass",
            "type": "uint64",
            "desc": "Minimum verification level from the biatec identity. Level 0 means no kyc."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "LP token ID"
        }
      },
      {
        "name": "bootstrapStep2",
        "desc": "When we know the app id of this pool, we can register it properly at the pool provider",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addLiquidity",
        "desc": "This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liquidity token",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Configuration reference"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64",
            "desc": "Identity service reference"
          },
          {
            "name": "txAssetADeposit",
            "type": "txn",
            "desc": "Transfer of asset A to the LP pool"
          },
          {
            "name": "txAssetBDeposit",
            "type": "txn",
            "desc": "Transfer of asset B to the LP pool"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "assetLp",
            "type": "uint64",
            "desc": "Liquidity pool asset"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "LP Token quantity distributed"
        }
      },
      {
        "name": "removeLiquidity",
        "desc": "This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Configuration reference"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64",
            "desc": "Identity service reference"
          },
          {
            "name": "txLpXfer",
            "type": "axfer",
            "desc": "Transfer of the LP token"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "assetLp",
            "type": "uint64",
            "desc": "LP pool asset"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "LP position reduced"
        }
      },
      {
        "name": "removeLiquidityAdmin",
        "desc": "This method allows biatec admin to reduce the lp position created by lp fees allocation.\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "assetLp",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint256",
            "desc": "Amount to withdraw. If zero, removes all available lps from fees."
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "LP position reduced"
        }
      },
      {
        "name": "swap",
        "desc": "Swap Asset A to Asset B or Asset B to Asst A",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "appBiatecIdentityProvider",
            "type": "uint64"
          },
          {
            "name": "appBiatecPoolProvider",
            "type": "uint64"
          },
          {
            "name": "txSwap",
            "type": "txn",
            "desc": "Transfer of the token to be deposited to the pool. To the owner the other asset will be sent."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "minimumToReceive",
            "type": "uint64",
            "desc": "If number greater then zero, the check is performed for the output of the other asset"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "distributeExcessAssets",
        "desc": "If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.\nIf someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.\n\n\nThis method is used to distribute amount a and amount b of asset a and asset b to holders as the fee income.\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "amountA",
            "type": "uint256",
            "desc": "Amount of asset A to be deposited to the liquidity. In base decimals (9)"
          },
          {
            "name": "amountB",
            "type": "uint256",
            "desc": "Amount of asset B to be deposited to the liquidity. In base decimals (9)"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "withdrawExcessAssets",
        "desc": "If someone deposits excess assets to the LP pool, addressExecutiveFee can either distribute them to the lp tokens or withdraw it, depending on the use case.\nIf someone sent there assets in fault, the withrawing can be use to return them back. If the pool received assets for example for having its algo stake online and recieved rewards it is prefered to distribute them to the current LP holders.\n\n\nThis method is used to distribute amount a and amount b of asset a and asset b to addressExecutiveFee account.\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "amountA",
            "type": "uint64",
            "desc": "Amount of asset A to be deposited to the liquidity. In asset a decimals"
          },
          {
            "name": "amountB",
            "type": "uint64",
            "desc": "Amount of asset B to be deposited to the liquidity. In asset b decimals"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "sendOnlineKeyRegistration",
        "desc": "addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "votePk",
            "type": "byte[]"
          },
          {
            "name": "selectionPk",
            "type": "byte[]"
          },
          {
            "name": "stateProofPk",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          },
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "calculateDistributedLiquidity",
        "desc": "addressExecutiveFee can perfom key unregistration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "readonly": true,
        "args": [
          {
            "name": "assetLp",
            "type": "uint64"
          },
          {
            "name": "currentDeposit",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "calculateLiquidityFlatPrice",
        "readonly": true,
        "args": [
          {
            "name": "x",
            "type": "uint256"
          },
          {
            "name": "y",
            "type": "uint256"
          },
          {
            "name": "price",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "calculateLiquidityD",
        "desc": "Calculates the liquidity  from the x - Asset A position and y - Asset B position\nThis method calculates discriminant - first part of the calculation.\nIt is divided so that the readonly method does not need to charge fees",
        "readonly": true,
        "args": [
          {
            "name": "x",
            "type": "uint256",
            "desc": "Asset A position balanced on the curve"
          },
          {
            "name": "y",
            "type": "uint256",
            "desc": "Asset B position balanced on the curve"
          },
          {
            "name": "priceMin",
            "type": "uint256",
            "desc": "Minimum price variable in base scale decimals (pa)"
          },
          {
            "name": "priceMax",
            "type": "uint256",
            "desc": "Maximum price variable in base scale decimals (pb)"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMin) in base scale decimals Variable pas"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMax) in base scale decimals Variable pbs"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user."
        }
      },
      {
        "name": "calculateLiquidityWithD",
        "desc": "Calculates the liquidity  from the x - Asset A position and y - Asset B position",
        "readonly": true,
        "args": [
          {
            "name": "x",
            "type": "uint256",
            "desc": "Asset A position balanced on the curve"
          },
          {
            "name": "y",
            "type": "uint256",
            "desc": "Asset B position balanced on the curve"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMin) in base scale decimals Variable pas"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMax) in base scale decimals Variable pbs"
          },
          {
            "name": "dSqrt",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user."
        }
      },
      {
        "name": "calculatePrice",
        "desc": "Get the current price when asset a has x",
        "readonly": true,
        "args": [
          {
            "name": "assetAQuantity",
            "type": "uint256",
            "desc": "x"
          },
          {
            "name": "assetBQuantity",
            "type": "uint256",
            "desc": "y"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMin)"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(priceMax)"
          },
          {
            "name": "liquidity",
            "type": "uint256",
            "desc": "Current pool liquidity - L variable"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "the price with specified quantity with the price range set in the contract"
        }
      },
      {
        "name": "calculateAssetBWithdrawOnAssetADeposit",
        "desc": "Calculates how much asset B will be taken from the smart contract on asset A deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(Min price). Variable pMinS, in base scale"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable pMaxS, in base scale"
          },
          {
            "name": "liquidity",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetAWithdrawOnAssetBDeposit",
        "desc": "Calculates how much asset A will be taken from the smart contract on asset B deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          },
          {
            "name": "priceMinSqrt",
            "type": "uint256",
            "desc": "sqrt(Min price). Variable pMinS, in base scale"
          },
          {
            "name": "priceMaxSqrt",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable pMaxS, in base scale"
          },
          {
            "name": "liquidity",
            "type": "uint256",
            "desc": "sqrt(Max price). Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetAWithdrawOnLpDeposit",
        "desc": "Calculates how much asset A will be taken from the smart contract on LP asset deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "LP Asset amount in Base decimal representation.."
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "liquidity",
            "type": "uint256",
            "desc": "Current liquidity. Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetBDepositOnAssetADeposit",
        "desc": "Calculates how much asset B should be deposited when user deposit asset a and b.\n\n\nOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user",
        "readonly": true,
        "args": [
          {
            "name": "inAmountA",
            "type": "uint256",
            "desc": "Asset A amount in Base decimal representation"
          },
          {
            "name": "inAmountB",
            "type": "uint256",
            "desc": "Asset B amount in Base decimal representation"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
        }
      },
      {
        "name": "calculateAssetADepositOnAssetBDeposit",
        "desc": "Calculates how much asset A should be deposited when user deposit asset a and b\n\n\nOn deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user",
        "readonly": true,
        "args": [
          {
            "name": "inAmountA",
            "type": "uint256",
            "desc": "Asset A amount in Base decimal representation"
          },
          {
            "name": "inAmountB",
            "type": "uint256",
            "desc": "Asset B amount in Base decimal representation"
          },
          {
            "name": "assetABalance",
            "type": "uint256",
            "desc": "Asset A balance. Variable ab, in base scale"
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable bb, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset A to be deposited. The result is in Base decimals (9)"
        }
      },
      {
        "name": "status",
        "readonly": true,
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "assetA",
            "type": "uint64"
          },
          {
            "name": "assetB",
            "type": "uint64"
          },
          {
            "name": "assetLp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
        }
      }
    ]
  }
}