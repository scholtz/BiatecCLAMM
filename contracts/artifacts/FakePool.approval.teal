#pragma version 10
intcblock 1 6

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 1 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// bootstrapStep2(uint64,uint64,uint64,uint64)void
*abi_route_bootstrapStep2:
	// appBiatecPoolProvider: uint64
	txna ApplicationArgs 4
	btoi

	// verificationClass: uint64
	txna ApplicationArgs 3
	btoi

	// assetB: uint64
	txna ApplicationArgs 2
	btoi

	// assetA: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrapStep2(uint64,uint64,uint64,uint64)void
	callsub bootstrapStep2
	intc 0 // 1
	return

// bootstrapStep2(assetA: AssetID, assetB: AssetID, verificationClass: uint64, appBiatecPoolProvider: AppID): void
//
// When we know the app id of this pool, we can register it properly at the pool provider
bootstrapStep2:
	proto 4 0

	// contracts\FakePool.algo.ts:8
	// sendMethodCall<[AppID, AssetID, AssetID, uint64], void>({
	//       name: 'registerPool',
	//       methodArgs: [globals.currentApplicationID, assetA, assetB, verificationClass],
	//       fee: 0,
	//       applicationID: appBiatecPoolProvider,
	//     })
	itxn_begin
	intc 1 //  appl
	itxn_field TypeEnum
	pushbytes 0xcbcbbe37 // method "registerPool(uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts\FakePool.algo.ts:10
	// methodArgs: [globals.currentApplicationID, assetA, assetB, verificationClass]
	global CurrentApplicationID
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // assetA: AssetID
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // assetB: AssetID
	itob
	itxn_field ApplicationArgs
	frame_dig -3 // verificationClass: uint64
	itob
	itxn_field ApplicationArgs

	// contracts\FakePool.algo.ts:11
	// fee: 0
	pushint 0
	itxn_field Fee

	// contracts\FakePool.algo.ts:12
	// applicationID: appBiatecPoolProvider
	frame_dig -4 // appBiatecPoolProvider: AppID
	itxn_field ApplicationID

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa07a0f6a // method "bootstrapStep2(uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrapStep2

	// this contract does not implement the given ABI method for call NoOp
	err