{
  "hints": {
    "bootstrap(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication(uint64,byte[])void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "setNativeTokenName(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "loadCLAMMContractData(uint64,uint64,uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "noop(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerPool()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawExcessAssets(uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "period1": {
          "type": "uint64",
          "key": "p1"
        },
        "period2": {
          "type": "uint64",
          "key": "p2"
        },
        "period3": {
          "type": "uint64",
          "key": "p3"
        },
        "period4": {
          "type": "uint64",
          "key": "p4"
        },
        "nativeTokenName": {
          "type": "bytes",
          "key": "nt"
        },
        "recentPools1": {
          "type": "uint64",
          "key": "rp1"
        },
        "recentPools2": {
          "type": "uint64",
          "key": "rp2"
        },
        "recentPools3": {
          "type": "uint64",
          "key": "rp3"
        },
        "recentPools4": {
          "type": "uint64",
          "key": "rp4"
        },
        "recentPools5": {
          "type": "uint64",
          "key": "rp5"
        },
        "recentPools6": {
          "type": "uint64",
          "key": "rp6"
        },
        "recentPools7": {
          "type": "uint64",
          "key": "rp7"
        },
        "recentPools8": {
          "type": "uint64",
          "key": "rp8"
        },
        "recentPools9": {
          "type": "uint64",
          "key": "rp9"
        },
        "recentPools10": {
          "type": "uint64",
          "key": "rp10"
        },
        "recentPoolsIndex": {
          "type": "uint64",
          "key": "rpi"
        },
        "appBiatecConfigProvider": {
          "type": "uint64",
          "key": "B"
        },
        "version": {
          "type": "bytes",
          "key": "scver"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 16
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecPoolProvider",
    "desc": "",
    "methods": [
      {
        "name": "bootstrap",
        "desc": "Biatec deploys single pool provider smart contract",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec amm provider"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getCurrentStatus",
        "desc": "Returns current status",
        "readonly": true,
        "args": [
          {
            "name": "appPoolId",
            "type": "uint64",
            "desc": "Pool id to retrieve the stats"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
          "desc": "Pool info statistics"
        }
      },
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "addressUdpater from global biatec configuration is allowed to update application",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "newVersion",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setNativeTokenName",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "nativeTokenName",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "loadCLAMMContractData",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "approvalProgramSize",
            "type": "uint64"
          },
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "noop",
        "desc": "No op tx to increase the app call and box size limits",
        "args": [
          {
            "name": "i",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deployPool",
        "desc": "Anybody can call this method to bootstrap new clamm pool",
        "args": [
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A ID must be lower then Asset B ID"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec amm provider"
          },
          {
            "name": "appBiatecPoolProvider",
            "type": "uint64",
            "desc": "Pool provider"
          },
          {
            "name": "txSeed",
            "type": "pay",
            "desc": "Seed transaction so that smart contract can opt in to the assets"
          },
          {
            "name": "fee",
            "type": "uint64",
            "desc": "Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%"
          },
          {
            "name": "priceMin",
            "type": "uint64",
            "desc": "Min price range. At this point all assets are in asset A."
          },
          {
            "name": "priceMax",
            "type": "uint64",
            "desc": "Max price range. At this point all assets are in asset B."
          },
          {
            "name": "currentPrice",
            "type": "uint64",
            "desc": "Deployer can specify the current price for easier deployemnt."
          },
          {
            "name": "verificationClass",
            "type": "uint64",
            "desc": "Minimum verification level from the biatec identity. Level 0 means no kyc."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "LP token ID"
        }
      },
      {
        "name": "registerPool",
        "desc": "This method is called by constructor of the luquidity pool",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerTrade",
        "desc": "This metod registers the trade and calculates and store the trade statistics",
        "args": [
          {
            "name": "appPoolId",
            "type": "uint64",
            "desc": "Liquidity pool smart contract"
          },
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "priceFrom",
            "type": "uint64",
            "desc": "The original price"
          },
          {
            "name": "priceTo",
            "type": "uint64",
            "desc": "The new price"
          },
          {
            "name": "amountA",
            "type": "uint64",
            "desc": "Asset A amount spent or received"
          },
          {
            "name": "amountB",
            "type": "uint64",
            "desc": "Asset B amount spent or received"
          },
          {
            "name": "feeAmountA",
            "type": "uint64",
            "desc": "Fees paid in asset A if any"
          },
          {
            "name": "feeAmountB",
            "type": "uint64",
            "desc": "Fees paid in asset B if any"
          },
          {
            "name": "s",
            "type": "uint64",
            "desc": "Scale multiplier"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "tradeEvent",
            "args": [
              {
                "name": "appPoolId",
                "type": "uint64"
              },
              {
                "name": "assetA",
                "type": "uint64"
              },
              {
                "name": "assetB",
                "type": "uint64"
              },
              {
                "name": "priceFrom",
                "type": "uint64"
              },
              {
                "name": "priceTo",
                "type": "uint64"
              },
              {
                "name": "amountA",
                "type": "uint64"
              },
              {
                "name": "amountB",
                "type": "uint64"
              },
              {
                "name": "feeAmountA",
                "type": "uint64"
              },
              {
                "name": "feeAmountB",
                "type": "uint64"
              },
              {
                "name": "s",
                "type": "uint64"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "sendOnlineKeyRegistration",
        "desc": "addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64"
          },
          {
            "name": "votePK",
            "type": "byte[]"
          },
          {
            "name": "selectionPK",
            "type": "byte[]"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          },
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdrawExcessAssets",
        "desc": "If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
        "args": [
          {
            "name": "appBiatecConfigProvider",
            "type": "uint64",
            "desc": "Biatec config app. Only addressExecutiveFee is allowed to execute this method."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw. If native token, then zero"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount of the asset to be withdrawn"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getPrice",
        "desc": "Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.",
        "readonly": true,
        "args": [
          {
            "name": "assetA",
            "type": "uint64",
            "desc": "Asset A must be less than Asset B"
          },
          {
            "name": "assetB",
            "type": "uint64",
            "desc": "Asset B"
          },
          {
            "name": "appPoolId",
            "type": "uint64",
            "desc": "Liquidity pool app id. If zero, then aggregated price info is returned."
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
          "desc": "AppPoolInfo with the price info for the asset pair"
        }
      },
      {
        "name": "calculateAssetBWithdrawOnLpDeposit",
        "desc": "Calculates how much asset B will be taken from the smart contract on LP asset deposit",
        "readonly": true,
        "args": [
          {
            "name": "inAmount",
            "type": "uint256",
            "desc": "LP Asset amount in Base decimal representation.."
          },
          {
            "name": "assetBBalance",
            "type": "uint256",
            "desc": "Asset B balance. Variable ab, in base scale"
          },
          {
            "name": "liquidity",
            "type": "uint256",
            "desc": "Current liquidity. Variable L, in base scale"
          }
        ],
        "returns": {
          "type": "uint256",
          "desc": "Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)"
        }
      }
    ],
    "events": [
      {
        "name": "tradeEvent",
        "args": [
          {
            "name": "appPoolId",
            "type": "uint64"
          },
          {
            "name": "assetA",
            "type": "uint64"
          },
          {
            "name": "assetB",
            "type": "uint64"
          },
          {
            "name": "priceFrom",
            "type": "uint64"
          },
          {
            "name": "priceTo",
            "type": "uint64"
          },
          {
            "name": "amountA",
            "type": "uint64"
          },
          {
            "name": "amountB",
            "type": "uint64"
          },
          {
            "name": "feeAmountA",
            "type": "uint64"
          },
          {
            "name": "feeAmountB",
            "type": "uint64"
          },
          {
            "name": "s",
            "type": "uint64"
          }
        ],
        "desc": ""
      }
    ]
  }
}