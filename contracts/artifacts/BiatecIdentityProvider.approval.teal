#pragma version 10
intcblock 0 1 32 2 256 552 688 17 19
bytecblock 0x 0x0000000000000000 0x00 0x69 0x42 0x73 0x30303030303030302d303030302d303030302d303030302d303030303030303030303030 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0x000000000000000000000000000000000000000000000000000000003b9aca00 0x0000000077359400 0x000000003b9aca00 0x7363766572 0x151f7c75 0x6566 0x0098 0x0000 0x65

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\BiatecIdentityProvider.algo.ts:171
	// this.version.value = version
	bytec 11 //  "scver"
	pushbytes "BIATEC-IDENT-01-02-01"
	app_global_put
	retsub

// bootstrap(uint64,address,address,address)void
*abi_route_bootstrap:
	// engagementSetter: address
	txna ApplicationArgs 4
	dup
	len
	intc 2 // 32
	==

	// argument 0 (engagementSetter) for bootstrap must be a address
	assert

	// verificationSetter: address
	txna ApplicationArgs 3
	dup
	len
	intc 2 // 32
	==

	// argument 1 (verificationSetter) for bootstrap must be a address
	assert

	// governor: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 2 (governor) for bootstrap must be a address
	assert

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64,address,address,address)void
	callsub bootstrap
	intc 1 // 1
	return

// bootstrap(appBiatecConfigProvider: AppID, governor: Address, verificationSetter: Address, engagementSetter: Address): void
//
// Biatec deploys single identity provider smart contract
// @param appBiatecConfigProvider Biatec amm provider
bootstrap:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\BiatecIdentityProvider.algo.ts:184
	// assert(this.txn.sender === this.app.creator, 'Only creator of the app can set it up')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only creator of the app can set it up
	assert

	// contracts\BiatecIdentityProvider.algo.ts:185
	// this.appBiatecConfigProvider.value = appBiatecConfigProvider
	bytec 4 //  "B"
	frame_dig -1 // appBiatecConfigProvider: AppID
	app_global_put

	// contracts\BiatecIdentityProvider.algo.ts:186
	// this.governor.value = governor
	pushbytes 0x67 // "g"
	frame_dig -2 // governor: Address
	app_global_put

	// contracts\BiatecIdentityProvider.algo.ts:187
	// this.verificationSetter.value = verificationSetter
	pushbytes 0x76 // "v"
	frame_dig -3 // verificationSetter: Address
	app_global_put

	// contracts\BiatecIdentityProvider.algo.ts:188
	// this.engagementSetter.value = engagementSetter
	bytec 16 //  "e"
	frame_dig -4 // engagementSetter: Address
	app_global_put

	// contracts\BiatecIdentityProvider.algo.ts:190
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 5 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 0 // paused: uint64

	// contracts\BiatecIdentityProvider.algo.ts:191
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 0 // paused: uint64
	intc 0 // 0
	==

	// ERR_PAUSED
	assert
	retsub

// updateApplication(uint64,byte[])void
*abi_route_updateApplication:
	// newVersion: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateApplication(uint64,byte[])void
	callsub updateApplication
	intc 1 // 1
	return

// updateApplication(appBiatecConfigProvider: AppID, newVersion: bytes): void
//
// addressUdpater from global biatec configuration is allowed to update application
updateApplication:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\BiatecIdentityProvider.algo.ts:198
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 4 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecIdentityProvider.algo.ts:199
	// addressUdpater = appBiatecConfigProvider.globalState('u') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	pushbytes 0x75 // "u"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('u')
	assert
	frame_bury 0 // addressUdpater: address

	// contracts\BiatecIdentityProvider.algo.ts:200
	// assert(this.txn.sender === addressUdpater, 'Only addressUdpater setup in the config can update application')
	txn Sender
	frame_dig 0 // addressUdpater: address
	==

	// Only addressUdpater setup in the config can update application
	assert

	// contracts\BiatecIdentityProvider.algo.ts:201
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 5 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecIdentityProvider.algo.ts:202
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 0 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecIdentityProvider.algo.ts:203
	// this.version.value = newVersion
	bytec 11 //  "scver"
	frame_dig -2 // newVersion: bytes
	app_global_put
	retsub

// selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void
*abi_route_selfRegistration:
	// info: (uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)
	txna ApplicationArgs 2

	// user: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (user) for selfRegistration must be a address
	assert

	// execute selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void
	callsub selfRegistration
	intc 1 // 1
	return

// selfRegistration(user: Address, info: IdentityInfo): void
selfRegistration:
	proto 2 0

	// contracts\BiatecIdentityProvider.algo.ts:207
	// assert(!this.identities(user).exists, 'Self registration cannot be executed if address is already registered')
	bytec 3 //  "i"
	frame_dig -1 // user: Address
	concat
	box_len
	swap
	pop
	!

	// Self registration cannot be executed if address is already registered
	assert

	// contracts\BiatecIdentityProvider.algo.ts:210
	// assert(info.verificationStatus === 1, 'Verification status must be empty')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	intc 1 // 1
	==

	// Verification status must be empty
	assert

	// contracts\BiatecIdentityProvider.algo.ts:212
	// assert(info.verificationClass === 0, 'verificationClass must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	intc 0 // 0
	==

	// verificationClass must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:215
	// assert(
	//       info.personUUID === '00000000-0000-0000-0000-000000000000',
	//       'personUUID must equal to 00000000-0000-0000-0000-000000000000'
	//     )
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	intc 7 // 17
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0
	bytec 6 //  "00000000-0000-0000-0000-000000000000"
	==

	// personUUID must equal to 00000000-0000-0000-0000-000000000000
	assert

	// contracts\BiatecIdentityProvider.algo.ts:220
	// assert(
	//       info.legalEntityUUID === '00000000-0000-0000-0000-000000000000',
	//       'legalEntityUUID must equal to 00000000-0000-0000-0000-000000000000'
	//     )
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	intc 8 // 19
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0
	bytec 6 //  "00000000-0000-0000-0000-000000000000"
	==

	// legalEntityUUID must equal to 00000000-0000-0000-0000-000000000000
	assert

	// contracts\BiatecIdentityProvider.algo.ts:225
	// assert(info.biatecEngagementPoints === 0, 'biatecEngagementPoints must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 21 8
	btoi
	intc 0 // 0
	==

	// biatecEngagementPoints must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:227
	// assert(info.biatecEngagementRank === 0, 'biatecEngagementRank must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 29 8
	btoi
	intc 0 // 0
	==

	// biatecEngagementRank must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:229
	// assert(info.avmEngagementPoints === 0, 'avmEngagementPoints must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 37 8
	btoi
	intc 0 // 0
	==

	// avmEngagementPoints must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:231
	// assert(info.avmEngagementRank === 0, 'avmEngagementRank must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 45 8
	btoi
	intc 0 // 0
	==

	// avmEngagementRank must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:233
	// assert(info.tradingEngagementPoints === 0, 'tradingEngagementPoints must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 53 8
	btoi
	intc 0 // 0
	==

	// tradingEngagementPoints must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:235
	// assert(info.tradingEngagementRank === 0, 'tradingEngagementRank must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 61 8
	btoi
	intc 0 // 0
	==

	// tradingEngagementRank must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:237
	// assert(info.isLocked === false, 'isLocked must equal to false')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	intc 5 // 552
	getbit
	intc 0 // 0
	==

	// isLocked must equal to false
	assert

	// contracts\BiatecIdentityProvider.algo.ts:239
	// assert(info.kycExpiration === 0, 'kycExpiration must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 70 8
	btoi
	intc 0 // 0
	==

	// kycExpiration must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:241
	// assert(info.investorForExpiration === 0, 'investorForExpiration must equal to 0')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	extract 78 8
	btoi
	intc 0 // 0
	==

	// investorForExpiration must equal to 0
	assert

	// contracts\BiatecIdentityProvider.algo.ts:243
	// assert(info.isProfessionalInvestor === false, 'isProfessionalInvestor must equal to false')
	frame_dig -2 // info: IdentityInfo
	store 255 // full array
	load 255 // full array
	intc 6 // 688
	getbit
	intc 0 // 0
	==

	// isProfessionalInvestor must equal to false
	assert

	// contracts\BiatecIdentityProvider.algo.ts:245
	// this.identities(user).value = info
	bytec 3 //  "i"
	frame_dig -1 // user: Address
	concat
	dup
	box_del
	pop
	frame_dig -2 // info: IdentityInfo
	box_put
	retsub

// setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void
*abi_route_setInfo:
	// info: (uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)
	txna ApplicationArgs 2

	// user: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (user) for setInfo must be a address
	assert

	// execute setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void
	callsub setInfo
	intc 1 // 1
	return

// setInfo(user: Address, info: IdentityInfo): void
setInfo:
	proto 2 0

	// contracts\BiatecIdentityProvider.algo.ts:249
	// assert(this.txn.sender === this.engagementSetter.value)
	txn Sender
	bytec 16 //  "e"
	app_global_get
	==
	assert

	// contracts\BiatecIdentityProvider.algo.ts:250
	// this.identities(user).value = info
	bytec 3 //  "i"
	frame_dig -1 // user: Address
	concat
	dup
	box_del
	pop
	frame_dig -2 // info: IdentityInfo
	box_put
	retsub

// sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_sendOnlineKeyRegistration:
	// voteKeyDilution: uint64
	txna ApplicationArgs 7
	btoi

	// voteLast: uint64
	txna ApplicationArgs 6
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 5
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub sendOnlineKeyRegistration
	intc 1 // 1
	return

// sendOnlineKeyRegistration(appBiatecConfigProvider: AppID, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// addressExecutiveFee can perfom key registration for this LP pool
//
// Only addressExecutiveFee is allowed to execute this method.
sendOnlineKeyRegistration:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\BiatecIdentityProvider.algo.ts:267
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 4 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecIdentityProvider.algo.ts:268
	// addressExecutiveFee = appBiatecConfigProvider.globalState('ef') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "ef"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('ef')
	assert
	frame_bury 0 // addressExecutiveFee: address

	// contracts\BiatecIdentityProvider.algo.ts:269
	// assert(
	//       this.txn.sender === addressExecutiveFee,
	//       'Only fee executor setup in the config can take the collected fees'
	//     )
	txn Sender
	frame_dig 0 // addressExecutiveFee: address
	==

	// Only fee executor setup in the config can take the collected fees
	assert

	// contracts\BiatecIdentityProvider.algo.ts:273
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 5 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecIdentityProvider.algo.ts:274
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 0 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecIdentityProvider.algo.ts:275
	// sendOnlineKeyRegistration({
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteKeyDilution: voteKeyDilution,
	//       voteLast: voteLast,
	//       votePK: votePK,
	//       fee: 0,
	//     })
	itxn_begin
	intc 3 //  keyreg
	itxn_field TypeEnum

	// contracts\BiatecIdentityProvider.algo.ts:276
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts\BiatecIdentityProvider.algo.ts:277
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts\BiatecIdentityProvider.algo.ts:278
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\BiatecIdentityProvider.algo.ts:279
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\BiatecIdentityProvider.algo.ts:280
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts\BiatecIdentityProvider.algo.ts:281
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts\BiatecIdentityProvider.algo.ts:282
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
*abi_route_getUser:
	// The ABI return prefix
	bytec 12 // 0x151f7c75

	// v: uint8
	txna ApplicationArgs 2
	dup
	len
	intc 1 // 1
	==

	// argument 0 (v) for getUser must be a uint8
	assert
	btoi

	// user: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (user) for getUser must be a address
	assert

	// execute getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
	callsub getUser
	concat
	log
	intc 1 // 1
	return

// getUser(user: Address, v: uint8): UserInfoV1
//
// Returns user information - fee multiplier, verification class, engagement class ..
//
// @param user Get info for specific user address
// @param v Version of the data structure to return
getUser:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts\BiatecIdentityProvider.algo.ts:294
	// assert(v === 1, "Currently supported version of the data structure is '1'")
	frame_dig -2 // v: uint8
	intc 1 // 1
	==

	// Currently supported version of the data structure is '1'
	assert

	// *if0_condition
	// contracts\BiatecIdentityProvider.algo.ts:295
	// !this.identities(user).exists
	bytec 3 //  "i"
	frame_dig -1 // user: Address
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts\BiatecIdentityProvider.algo.ts:296
	// retNoIdentity: UserInfoV1 = {
	//         version: v,
	//         base: SCALE as uint256,
	//         feeMultiplier: (2 * SCALE) as uint256,
	//         isLocked: false,
	//         verificationClass: 0,
	//         verificationStatus: 0,
	//         biatecEngagementPoints: 0,
	//         biatecEngagementRank: 0,
	//         avmEngagementPoints: 0,
	//         avmEngagementRank: 0,
	//         tradingEngagementPoints: 0,
	//         tradingEngagementRank: 0,
	//         kycExpiration: 0,
	//         investorForExpiration: 0,
	//         isProfessionalInvestor: false,
	//         isCompany: false,
	//         personUUID: '',
	//         legalEntityUUID: '',
	//       }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 14 //  initial head offset
	frame_dig -2 // v: uint8
	itob
	extract 7 1
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 2 // 0x00
	intc 0 // 0
	dup
	setbit
	callsub *process_static_tuple_element
	bytec 15 // 0x0000
	callsub *process_dynamic_tuple_element
	bytec 15 // 0x0000
	callsub *process_dynamic_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 9 // 0x0000000077359400
	dup
	bitlen
	intc 4 // 256
	<=

	// (2 * SCALE) as uint256 overflowed 256 bits
	assert
	bytec 7 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 2 // 32
	-
	swap
	substring3
	callsub *process_static_tuple_element
	bytec 8 // 0x000000000000000000000000000000000000000000000000000000003b9aca00
	callsub *process_static_tuple_element
	bytec 2 // 0x00
	intc 0 // 0
	dup
	setbit
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 1 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 2 // 0x00
	intc 0 // 0
	dup
	setbit
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // retNoIdentity: UserInfoV1

	// contracts\BiatecIdentityProvider.algo.ts:316
	// return retNoIdentity;
	frame_dig 0 // retNoIdentity: UserInfoV1
	b *getUser*return

*if0_end:
	// contracts\BiatecIdentityProvider.algo.ts:318
	// identity = this.identities(user).value
	bytec 3 //  "i"
	frame_dig -1 // user: Address
	concat
	frame_bury 1 // storage key//identity

	// contracts\BiatecIdentityProvider.algo.ts:320
	// ret: UserInfoV1 = {
	//       version: v,
	//       base: SCALE as uint256,
	//       feeMultiplier: (1 * SCALE) as uint256,
	//       isLocked: identity.isLocked,
	//       verificationClass: identity.verificationClass,
	//       verificationStatus: identity.verificationStatus,
	//       biatecEngagementPoints: identity.biatecEngagementPoints,
	//       biatecEngagementRank: identity.biatecEngagementRank,
	//       avmEngagementPoints: identity.avmEngagementPoints,
	//       avmEngagementRank: identity.avmEngagementRank,
	//       tradingEngagementPoints: identity.tradingEngagementPoints,
	//       tradingEngagementRank: identity.tradingEngagementRank,
	//       kycExpiration: identity.kycExpiration,
	//       investorForExpiration: identity.investorForExpiration,
	//       isProfessionalInvestor: identity.isProfessionalInvestor,
	//       isCompany: identity.isCompany,
	//       personUUID: identity.personUUID,
	//       legalEntityUUID: identity.legalEntityUUID,
	//     }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 14 //  initial head offset
	frame_dig -2 // v: uint8
	itob
	extract 7 1
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	itob
	callsub *process_static_tuple_element
	bytec 2 // 0x00
	intc 0 // 0
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 128
	getbit
	setbit
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	intc 7 // 17
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	intc 8 // 19
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 21 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 29 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 37 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 45 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 53 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 61 8
	btoi
	itob
	callsub *process_static_tuple_element
	bytec 10 // 0x000000003b9aca00
	dup
	bitlen
	intc 4 // 256
	<=

	// (1 * SCALE) as uint256 overflowed 256 bits
	assert
	bytec 7 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 2 // 32
	-
	swap
	substring3
	callsub *process_static_tuple_element
	bytec 8 // 0x000000000000000000000000000000000000000000000000000000003b9aca00
	callsub *process_static_tuple_element
	bytec 2 // 0x00
	intc 0 // 0
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 552
	getbit
	setbit
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 70 8
	btoi
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	extract 78 8
	btoi
	itob
	callsub *process_static_tuple_element
	bytec 2 // 0x00
	intc 0 // 0
	frame_dig 1 // storage key//identity
	box_get

	// box value does not exist: this.identities(user).value
	assert
	store 255 // full array
	load 255 // full array
	intc 6 // 688
	getbit
	setbit
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 2 // ret: UserInfoV1

	// contracts\BiatecIdentityProvider.algo.ts:340
	// return ret;
	frame_dig 2 // ret: UserInfoV1

*getUser*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// withdrawExcessAssets(uint64,uint64,uint64)uint64
*abi_route_withdrawExcessAssets:
	// The ABI return prefix
	bytec 12 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdrawExcessAssets(uint64,uint64,uint64)uint64
	callsub withdrawExcessAssets
	itob
	concat
	log
	intc 1 // 1
	return

// withdrawExcessAssets(appBiatecConfigProvider: AppID, asset: AssetID, amount: uint64): uint64
//
// If someone deposits excess assets to this smart contract biatec can use them.
//
// Only addressExecutiveFee is allowed to execute this method.
//
// @param appBiatecConfigProvider Biatec config app. Only addressExecutiveFee is allowed to execute this method.
// @param asset Asset to withdraw. If native token, then zero
// @param amount Amount of the asset to be withdrawn
withdrawExcessAssets:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\BiatecIdentityProvider.algo.ts:353
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 4 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecIdentityProvider.algo.ts:354
	// addressExecutiveFee = appBiatecConfigProvider.globalState('ef') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "ef"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('ef')
	assert
	frame_bury 0 // addressExecutiveFee: address

	// contracts\BiatecIdentityProvider.algo.ts:355
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 5 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecIdentityProvider.algo.ts:356
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 0 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecIdentityProvider.algo.ts:357
	// assert(
	//       this.txn.sender === addressExecutiveFee,
	//       'Only fee executor setup in the config can take the collected fees'
	//     )
	txn Sender
	frame_dig 0 // addressExecutiveFee: address
	==

	// Only fee executor setup in the config can take the collected fees
	assert

	// contracts\BiatecIdentityProvider.algo.ts:362
	// this.doAxfer(this.txn.sender, asset, amount)
	frame_dig -3 // amount: uint64
	frame_dig -2 // asset: AssetID
	txn Sender
	callsub doAxfer

	// contracts\BiatecIdentityProvider.algo.ts:364
	// return amount;
	frame_dig -3 // amount: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// doAxfer(receiver: Address, asset: AssetID, amount: uint64): void
//
// Executes xfer of pay payment methods to specified receiver from smart contract aggregated account with specified asset and amount in tokens decimals
// @param receiver Receiver
// @param asset Asset. Zero for algo
// @param amount Amount to transfer
doAxfer:
	proto 3 0

	// *if1_condition
	// contracts\BiatecIdentityProvider.algo.ts:374
	// asset.id === 0
	frame_dig -2 // asset: AssetID
	intc 0 // 0
	==
	bz *if1_else

	// *if1_consequent
	// contracts\BiatecIdentityProvider.algo.ts:375
	// sendPayment({
	//         receiver: receiver,
	//         amount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts\BiatecIdentityProvider.algo.ts:376
	// receiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field Receiver

	// contracts\BiatecIdentityProvider.algo.ts:377
	// amount: amount
	frame_dig -3 // amount: uint64
	itxn_field Amount

	// contracts\BiatecIdentityProvider.algo.ts:378
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts\BiatecIdentityProvider.algo.ts:381
	// sendAssetTransfer({
	//         assetReceiver: receiver,
	//         xferAsset: asset,
	//         assetAmount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts\BiatecIdentityProvider.algo.ts:382
	// assetReceiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field AssetReceiver

	// contracts\BiatecIdentityProvider.algo.ts:383
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\BiatecIdentityProvider.algo.ts:384
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// contracts\BiatecIdentityProvider.algo.ts:385
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe3bf5c1f // method "bootstrap(uint64,address,address,address)void"
	pushbytes 0xe8c8eed9 // method "selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void"
	pushbytes 0xd583a759 // method "setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void"
	pushbytes 0x83925c17 // method "sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void"
	pushbytes 0x6b16e863 // method "getUser(address,uint8)(uint8,uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)"
	pushbytes 0xcba2e95d // method "withdrawExcessAssets(uint64,uint64,uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_selfRegistration *abi_route_setInfo *abi_route_sendOnlineKeyRegistration *abi_route_getUser *abi_route_withdrawExcessAssets

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x5fc885a0 // method "updateApplication(uint64,byte[])void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub