{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "selfRegistration(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setInfo(address,(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "verificationSetter": {
          "type": "bytes",
          "key": "v"
        },
        "engagementSetter": {
          "type": "bytes",
          "key": "e"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BiatecIdentityProvider",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initial setup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "selfRegistration",
        "args": [
          {
            "name": "user",
            "type": "address"
          },
          {
            "name": "info",
            "type": "(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setInfo",
        "args": [
          {
            "name": "user",
            "type": "address"
          },
          {
            "name": "info",
            "type": "(uint64,uint64,bool,string,string,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint64,uint64,bool)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getUser",
        "desc": "Returns user information - fee multiplier, verification class, engagement class ..",
        "readonly": true,
        "args": [
          {
            "name": "user",
            "type": "address",
            "desc": "Get info for specific user address"
          },
          {
            "name": "v",
            "type": "uint8",
            "desc": "Version of the data structure to return"
          }
        ],
        "returns": {
          "type": "(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)"
        }
      }
    ]
  }
}