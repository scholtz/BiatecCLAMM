#pragma version 10

// This TEAL was generated by TEALScript v0.88.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\BiatecClammPool.algo.ts:208
	// log(version)
	byte "BIATEC-CLAMM-01-01-01"
	log

	// contracts\BiatecClammPool.algo.ts:209
	// this.scale.value = SCALE
	byte 0x7363616c65 // "scale"
	int 1000000000
	app_global_put

	// contracts\BiatecClammPool.algo.ts:210
	// this.fee.value = <uint64>0
	byte 0x66 // "f"
	int 0
	app_global_put

	// contracts\BiatecClammPool.algo.ts:211
	// this.Liqudity.value = <uint256>0
	byte 0x4c // "L"
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	app_global_put

	// contracts\BiatecClammPool.algo.ts:212
	// this.LiqudityBiatecFromFees.value = <uint256>0
	byte 0x4c62 // "Lb"
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	app_global_put

	// contracts\BiatecClammPool.algo.ts:213
	// this.LiqudityUsersFromFees.value = <uint256>0
	byte 0x4c75 // "Lu"
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	app_global_put

	// contracts\BiatecClammPool.algo.ts:214
	// this.priceMax.value = 0
	byte 0x704d6178 // "pMax"
	int 0
	app_global_put
	retsub

// getCurrentPrice()uint64
*abi_route_getCurrentPrice:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getCurrentPrice()uint64
	callsub getCurrentPrice
	itob
	concat
	log
	int 1
	return

// getCurrentPrice(): uint64
getCurrentPrice:
	proto 0 1

	// contracts\BiatecClammPool.algo.ts:219
	// return this.ratio.value;
	byte 0x72 // "r"
	app_global_get
	retsub

// getPriceDivider()uint64
*abi_route_getPriceDivider:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getPriceDivider()uint64
	callsub getPriceDivider
	itob
	concat
	log
	int 1
	return

// getPriceDivider(): uint64
getPriceDivider:
	proto 0 1

	// contracts\BiatecClammPool.algo.ts:224
	// return this.scale.value;
	byte 0x7363616c65 // "scale"
	app_global_get
	retsub

// getLPTokenId()uint64
*abi_route_getLPTokenId:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getLPTokenId()uint64
	callsub getLPTokenId
	itob
	concat
	log
	int 1
	return

// getLPTokenId(): uint64
getLPTokenId:
	proto 0 1

	// contracts\BiatecClammPool.algo.ts:229
	// return this.assetLP.value;
	byte 0x6c70 // "lp"
	app_global_get
	retsub

// bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64
*abi_route_bootstrap:
	// The ABI return prefix
	byte 0x151f7c75

	// verificationClass: uint8
	txna ApplicationArgs 9
	dup
	len
	int 1
	==
	assert
	btoi

	// currentPrice: uint64
	txna ApplicationArgs 8
	btoi

	// priceMax: uint64
	txna ApplicationArgs 7
	btoi

	// priceMin: uint64
	txna ApplicationArgs 6
	btoi

	// fee: uint64
	txna ApplicationArgs 5
	btoi

	// txSeed: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// appBiatecPoolProvider: uint64
	txna ApplicationArgs 4
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 3
	btoi

	// assetB: uint64
	txna ApplicationArgs 2
	btoi

	// assetA: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64
	callsub bootstrap
	itob
	concat
	log
	int 1
	return

// bootstrap(assetA: AssetID, assetB: AssetID, appBiatecConfigProvider: AppID, appBiatecPoolProvider: AppID, txSeed: PayTxn, fee: uint64, priceMin: uint64, priceMax: uint64, currentPrice: uint64, verificationClass: uint8): uint64
//
// Anybody can deploy the clamm smart contract
// @param assetA Asset A ID must be lower then Asset B ID
// @param assetB Asset B
// @param appBiatecConfigProvider Biatec amm provider
// @param appBiatecPoolProvider Pool provider
// @param txSeed Seed transaction so that smart contract can opt in to the assets
// @param fee Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%
// @param priceMin Min price range. At this point all assets are in asset A.
// @param priceMax Max price range. At this point all assets are in asset B.
// @param currentPrice Deployer can specify the current price for easier deployemnt.
// @param verificationClass Minimum verification level from the biatec identity. Level 0 means no kyc.
// @returns LP token ID
bootstrap:
	proto 10 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecClammPool.algo.ts:258
	// verifyPayTxn(txSeed, { receiver: this.app.address, amount: { greaterThanEqualTo: 300_000 } })
	// verify receiver
	frame_dig -5 // txSeed: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -5 // txSeed: PayTxn
	gtxns Amount
	int 300_000
	>=
	assert

	// contracts\BiatecClammPool.algo.ts:259
	// assert(this.priceMax.value === 0, 'It is not possible to call bootrap twice')
	byte 0x704d6178 // "pMax"
	app_global_get
	int 0
	==

	// It is not possible to call bootrap twice
	assert

	// contracts\BiatecClammPool.algo.ts:260
	// assert(this.txn.sender === this.app.creator, 'Only creator of the app can set it up')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only creator of the app can set it up
	assert

	// contracts\BiatecClammPool.algo.ts:261
	// assert(priceMax > 0, 'You must set price')
	frame_dig -8 // priceMax: uint64
	int 0
	>

	// You must set price
	assert

	// contracts\BiatecClammPool.algo.ts:262
	// assert(assetA < assetB)
	frame_dig -1 // assetA: AssetID
	frame_dig -2 // assetB: AssetID
	<
	assert

	// contracts\BiatecClammPool.algo.ts:263
	// assert(fee <= SCALE / 10)
	frame_dig -6 // fee: uint64
	int 100000000
	<=
	assert

	// contracts\BiatecClammPool.algo.ts:264
	// assert(verificationClass <= 4)
	frame_dig -10 // verificationClass: uint8
	int 4
	<=
	assert

	// contracts\BiatecClammPool.algo.ts:265
	// assert(!this.ratio.exists)
	txna Applications 0
	byte 0x72 // "r"
	app_global_get_ex
	swap
	pop
	!
	assert

	// *if0_condition
	// contracts\BiatecClammPool.algo.ts:266
	// assetA.id > 0
	frame_dig -1 // assetA: AssetID
	int 0
	>
	bz *if0_end

	// *if0_consequent
	// contracts\BiatecClammPool.algo.ts:267
	// assert(assetA.decimals <= SCALE_DECIMALS)
	frame_dig -1 // assetA: AssetID
	asset_params_get AssetDecimals
	pop
	int 9
	<=
	assert

*if0_end:
	// contracts\BiatecClammPool.algo.ts:269
	// assert(assetB.decimals <= SCALE_DECIMALS)
	frame_dig -2 // assetB: AssetID
	asset_params_get AssetDecimals
	pop
	int 9
	<=
	assert

	// contracts\BiatecClammPool.algo.ts:270
	// s = SCALE as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00
	frame_bury 0 // s: uint256

	// contracts\BiatecClammPool.algo.ts:272
	// assert(this.fee.value <= 0, 'You can bootstrap contract only once')
	byte 0x66 // "f"
	app_global_get
	int 0
	<=

	// You can bootstrap contract only once
	assert

	// contracts\BiatecClammPool.algo.ts:274
	// this.appBiatecConfigProvider.value = appBiatecConfigProvider
	byte 0x42 // "B"
	frame_dig -3 // appBiatecConfigProvider: AppID
	app_global_put

	// contracts\BiatecClammPool.algo.ts:275
	// this.appBiatecPoolProvider.value = appBiatecPoolProvider
	byte 0x7070 // "pp"
	frame_dig -4 // appBiatecPoolProvider: AppID
	app_global_put

	// contracts\BiatecClammPool.algo.ts:277
	// this.priceMin.value = priceMin
	byte 0x704d696e // "pMin"
	frame_dig -7 // priceMin: uint64
	app_global_put

	// contracts\BiatecClammPool.algo.ts:278
	// this.priceMax.value = priceMax
	byte 0x704d6178 // "pMax"
	frame_dig -8 // priceMax: uint64
	app_global_put

	// contracts\BiatecClammPool.algo.ts:279
	// this.priceMinSqrt.value = sqrt((priceMin as uint256) * s)
	byte 0x704d696e53 // "pMinS"
	frame_dig -7 // priceMin: uint64
	itob
	frame_dig 0 // s: uint256
	b*
	bsqrt
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:280
	// this.priceMaxSqrt.value = sqrt((priceMax as uint256) * s)
	byte 0x704d617853 // "pMaxS"
	frame_dig -8 // priceMax: uint64
	itob
	frame_dig 0 // s: uint256
	b*
	bsqrt
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:281
	// this.assetABalance.value = <uint256>0
	byte 0x6162 // "ab"
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	app_global_put

	// contracts\BiatecClammPool.algo.ts:282
	// this.assetBBalance.value = <uint256>0
	byte 0x6262 // "bb"
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	app_global_put

	// contracts\BiatecClammPool.algo.ts:283
	// this.ratio.value = currentPrice
	byte 0x72 // "r"
	frame_dig -9 // currentPrice: uint64
	app_global_put

	// contracts\BiatecClammPool.algo.ts:285
	// this.assetA.value = assetA.id
	byte 0x61 // "a"
	frame_dig -1 // assetA: AssetID
	app_global_put

	// contracts\BiatecClammPool.algo.ts:286
	// this.assetB.value = assetB.id
	byte 0x62 // "b"
	frame_dig -2 // assetB: AssetID
	app_global_put

	// contracts\BiatecClammPool.algo.ts:287
	// this.assetLP.value = this.doCreatePoolToken(assetA, assetB).id
	byte 0x6c70 // "lp"
	frame_dig -2 // assetB: AssetID
	frame_dig -1 // assetA: AssetID
	callsub doCreatePoolToken
	app_global_put

	// contracts\BiatecClammPool.algo.ts:288
	// this.fee.value = fee
	byte 0x66 // "f"
	frame_dig -6 // fee: uint64
	app_global_put

	// contracts\BiatecClammPool.algo.ts:289
	// this.doOptIn(assetA)
	frame_dig -1 // assetA: AssetID
	callsub doOptIn

	// contracts\BiatecClammPool.algo.ts:290
	// this.doOptIn(assetB)
	frame_dig -2 // assetB: AssetID
	callsub doOptIn

	// contracts\BiatecClammPool.algo.ts:292
	// return this.assetLP.value;
	byte 0x6c70 // "lp"
	app_global_get

	// set the subroutine return value
	frame_bury 0
	retsub

// doAxfer(receiver: Address, asset: AssetID, amount: uint64): void
doAxfer:
	proto 3 0

	// *if1_condition
	// contracts\BiatecClammPool.algo.ts:296
	// asset.id === 0
	frame_dig -2 // asset: AssetID
	int 0
	==
	bz *if1_else

	// *if1_consequent
	// contracts\BiatecClammPool.algo.ts:297
	// sendPayment({
	//         receiver: receiver,
	//         amount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts\BiatecClammPool.algo.ts:298
	// receiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field Receiver

	// contracts\BiatecClammPool.algo.ts:299
	// amount: amount
	frame_dig -3 // amount: uint64
	itxn_field Amount

	// contracts\BiatecClammPool.algo.ts:300
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts\BiatecClammPool.algo.ts:303
	// sendAssetTransfer({
	//         assetReceiver: receiver,
	//         xferAsset: asset,
	//         assetAmount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\BiatecClammPool.algo.ts:304
	// assetReceiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field AssetReceiver

	// contracts\BiatecClammPool.algo.ts:305
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\BiatecClammPool.algo.ts:306
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// contracts\BiatecClammPool.algo.ts:307
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

// doOptIn(asset: AssetID): void
doOptIn:
	proto 1 0

	// *if2_condition
	// contracts\BiatecClammPool.algo.ts:313
	// asset.id > 0
	frame_dig -1 // asset: AssetID
	int 0
	>
	bz *if2_end

	// *if2_consequent
	// contracts\BiatecClammPool.algo.ts:315
	// this.doAxfer(this.app.address, asset, 0)
	int 0
	frame_dig -1 // asset: AssetID
	global CurrentApplicationAddress
	callsub doAxfer

*if2_end:
	retsub

// doCreatePoolToken(assetA: AssetID, assetB: AssetID): AssetID
doCreatePoolToken:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts\BiatecClammPool.algo.ts:323
	// nameAssetA = 'ALGO'
	byte 0x414c474f // "ALGO"
	frame_bury 0 // nameAssetA: byte[]

	// *if3_condition
	// contracts\BiatecClammPool.algo.ts:324
	// assetA.id > 0
	frame_dig -1 // assetA: AssetID
	int 0
	>
	bz *if3_end

	// *if3_consequent
	// contracts\BiatecClammPool.algo.ts:325
	// nameAssetA = assetA.unitName
	frame_dig -1 // assetA: AssetID
	asset_params_get AssetUnitName
	pop
	frame_bury 0 // nameAssetA: byte[]

*if3_end:
	// contracts\BiatecClammPool.algo.ts:328
	// name = 'B-' + nameAssetA + '-' + assetB.unitName
	byte 0x422d // "B-"
	frame_dig 0 // nameAssetA: byte[]
	concat
	byte 0x2d // "-"
	concat
	frame_dig -2 // assetB: AssetID
	asset_params_get AssetUnitName
	pop
	concat
	frame_bury 1 // name: byte[]

	// contracts\BiatecClammPool.algo.ts:330
	// return sendAssetCreation({
	//       configAssetName: name,
	//       configAssetUnitName: 'BLP',
	//       configAssetTotal: TOTAL_SUPPLY,
	//       configAssetDecimals: LP_TOKEN_DECIMALS,
	//       configAssetManager: this.app.address,
	//       configAssetReserve: this.app.address,
	//     });
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts\BiatecClammPool.algo.ts:331
	// configAssetName: name
	frame_dig 1 // name: byte[]
	itxn_field ConfigAssetName

	// contracts\BiatecClammPool.algo.ts:332
	// configAssetUnitName: 'BLP'
	byte 0x424c50 // "BLP"
	itxn_field ConfigAssetUnitName

	// contracts\BiatecClammPool.algo.ts:333
	// configAssetTotal: TOTAL_SUPPLY
	int 10000000000000000
	itxn_field ConfigAssetTotal

	// contracts\BiatecClammPool.algo.ts:334
	// configAssetDecimals: LP_TOKEN_DECIMALS
	int 6
	itxn_field ConfigAssetDecimals

	// contracts\BiatecClammPool.algo.ts:335
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts\BiatecClammPool.algo.ts:336
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64
*abi_route_addLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// assetB: uint64
	txna ApplicationArgs 5
	btoi

	// assetA: uint64
	txna ApplicationArgs 4
	btoi

	// assetLP: uint64
	txna ApplicationArgs 3
	btoi

	// txAssetBDeposit: txn
	txn GroupIndex
	int 1
	-

	// txAssetADeposit: txn
	txn GroupIndex
	int 2
	-

	// appBiatecIdentityProvider: uint64
	txna ApplicationArgs 2
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64
	callsub addLiquidity
	itob
	concat
	log
	int 1
	return

// addLiquidity(appBiatecConfigProvider: AppID, appBiatecIdentityProvider: AppID, txAssetADeposit: Txn, txAssetBDeposit: Txn, assetLP: AssetID, assetA: AssetID, assetB: AssetID): uint64
//
// This method adds Asset A and Asset B to the Automated Market Maker Concentrated Liqudidity Pool and send to the liqudidty provider the liqudity token
// @param txAssetADeposit Transfer of asset A to the LP pool
// @param txAssetBDeposit Transfer of asset B to the LP pool
// @param assetLP Liquidity pool asset
// @param assetA Asset A
// @param assetB Asset B
// @returns LP Token quantity distributed
addLiquidity:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 23

	// contracts\BiatecClammPool.algo.ts:360
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecClammPool.algo.ts:361
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// well formed mint
	// contracts\BiatecClammPool.algo.ts:363
	// assert(
	//       appBiatecConfigProvider === this.appBiatecConfigProvider.value,
	//       'appBiatecConfigProvider must match to the global variable app id'
	//     )
	frame_dig -1 // appBiatecConfigProvider: AppID
	byte 0x42 // "B"
	app_global_get
	==

	// appBiatecConfigProvider must match to the global variable app id
	assert

	// contracts\BiatecClammPool.algo.ts:368
	// assert(assetA.id === this.assetA.value, 'assetA must match to the global variable value')
	frame_dig -6 // assetA: AssetID
	byte 0x61 // "a"
	app_global_get
	==

	// assetA must match to the global variable value
	assert

	// contracts\BiatecClammPool.algo.ts:369
	// assert(assetB.id === this.assetB.value, 'assetB must match to the global variable value')
	frame_dig -7 // assetB: AssetID
	byte 0x62 // "b"
	app_global_get
	==

	// assetB must match to the global variable value
	assert

	// contracts\BiatecClammPool.algo.ts:370
	// assert(assetLP.id === this.assetLP.value, 'assetLP must match to the global variable value')
	frame_dig -5 // assetLP: AssetID
	byte 0x6c70 // "lp"
	app_global_get
	==

	// assetLP must match to the global variable value
	assert

	// contracts\BiatecClammPool.algo.ts:371
	// identityFromConfig = appBiatecConfigProvider.globalState('i')
	frame_dig -1 // appBiatecConfigProvider: AppID
	byte 0x69 // "i"
	app_global_get_ex
	assert
	frame_bury 0 // identityFromConfig: any

	// contracts\BiatecClammPool.algo.ts:372
	// assert(
	//       appBiatecIdentityProvider === identityFromConfig,
	//       'appBiatecIdentityProvider must match to the config in appBiatecConfigProvider'
	//     )
	frame_dig -2 // appBiatecIdentityProvider: AppID
	frame_dig 0 // identityFromConfig: any
	==

	// appBiatecIdentityProvider must match to the config in appBiatecConfigProvider
	assert

	// contracts\BiatecClammPool.algo.ts:377
	// user = sendMethodCall<[Address, uint8], UserInfoV1>({
	//       name: 'getUser',
	//       methodArgs: [this.txn.sender, <uint8>1],
	//       fee: 0,
	//       applicationID: appBiatecIdentityProvider,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)"
	itxn_field ApplicationArgs

	// contracts\BiatecClammPool.algo.ts:379
	// methodArgs: [this.txn.sender, <uint8>1]
	txn Sender
	itxn_field ApplicationArgs
	byte 0x01
	itxn_field ApplicationArgs

	// contracts\BiatecClammPool.algo.ts:380
	// fee: 0
	int 0
	itxn_field Fee

	// contracts\BiatecClammPool.algo.ts:381
	// applicationID: appBiatecIdentityProvider
	frame_dig -2 // appBiatecIdentityProvider: AppID
	itxn_field ApplicationID

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)

	// contracts\BiatecClammPool.algo.ts:383
	// assert(!user.isLocked, 'User must not be locked')
	frame_dig 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
	store 255 // full array
	load 255 // full array
	int 1032
	getbit
	!

	// User must not be locked
	assert

	// contracts\BiatecClammPool.algo.ts:384
	// assert(
	//       user.verificationClass >= this.verificationClass.value, // if(user.verificationClass >= this.verificationClass.value) then ok
	//       'User cannot interact with this smart contract as his verification class is lower then required here'
	//     )
	frame_dig 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
	store 255 // full array
	load 255 // full array
	extract 9 8
	btoi
	byte 0x63 // "c"
	app_global_get
	>=

	// User cannot interact with this smart contract as his verification class is lower then required here
	assert

	// contracts\BiatecClammPool.algo.ts:389
	// assetADecimals = 6
	int 6
	frame_bury 2 // assetADecimals: uint64

	// *if4_condition
	// contracts\BiatecClammPool.algo.ts:390
	// assetA.id > 0
	frame_dig -6 // assetA: AssetID
	int 0
	>
	bz *if4_end

	// *if4_consequent
	// contracts\BiatecClammPool.algo.ts:390
	// assetADecimals = assetA.decimals
	frame_dig -6 // assetA: AssetID
	asset_params_get AssetDecimals
	pop
	frame_bury 2 // assetADecimals: uint64

*if4_end:
	// contracts\BiatecClammPool.algo.ts:392
	// assetADelicmalScale2Scale = (10 ** (SCALE_DECIMALS - assetADecimals)) as uint256
	int 10
	int 9
	frame_dig 2 // assetADecimals: uint64
	-
	exp
	itob
	frame_bury 3 // assetADelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:394
	// assetBDelicmalScale2Scale = (10 ** (SCALE_DECIMALS - assetB.decimals)) as uint256
	int 10
	int 9
	frame_dig -7 // assetB: AssetID
	asset_params_get AssetDecimals
	pop
	-
	exp
	itob
	frame_bury 4 // assetBDelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:396
	// assetLPDelicmalScale2Scale = (10 ** (SCALE_DECIMALS - LP_TOKEN_DECIMALS)) as uint256
	int 10
	int 3
	exp
	itob
	frame_bury 5 // assetLPDelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:398
	// aDepositInBaseScale = (txAssetADeposit.assetAmount as uint256) * assetADelicmalScale2Scale
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	itob
	frame_dig 3 // assetADelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 6 // aDepositInBaseScale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:399
	// bDepositInBaseScale = (txAssetBDeposit.assetAmount as uint256) * assetBDelicmalScale2Scale
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	itob
	frame_dig 4 // assetBDelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 7 // bDepositInBaseScale: unsafe uint256

	// *if5_condition
	// contracts\BiatecClammPool.algo.ts:401
	// assetA.id > 0
	frame_dig -6 // assetA: AssetID
	int 0
	>
	bz *if5_else

	// *if5_consequent
	// contracts\BiatecClammPool.algo.ts:402
	// assert(txAssetADeposit.typeEnum === TransactionType.AssetTransfer)
	frame_dig -3 // txAssetADeposit: Txn
	gtxns TypeEnum
	int axfer
	==
	assert
	b *if5_end

*if5_else:
	// contracts\BiatecClammPool.algo.ts:404
	// assert(txAssetADeposit.typeEnum === TransactionType.Payment)
	frame_dig -3 // txAssetADeposit: Txn
	gtxns TypeEnum
	int pay
	==
	assert

*if5_end:
	// *if6_condition
	// contracts\BiatecClammPool.algo.ts:407
	// txAssetADeposit.typeEnum === TransactionType.AssetTransfer
	frame_dig -3 // txAssetADeposit: Txn
	gtxns TypeEnum
	int axfer
	==
	bz *if6_elseif1_condition

	// *if6_consequent
	// contracts\BiatecClammPool.algo.ts:408
	// xfer = txAssetADeposit as AssetTransferTxn
	frame_dig -3 // txAssetADeposit: Txn
	dup
	gtxns TypeEnum
	int axfer
	==
	assert
	frame_bury 8 // xfer: axfer

	// contracts\BiatecClammPool.algo.ts:409
	// verifyAssetTransferTxn(xfer, {
	//         assetReceiver: this.app.address,
	//         xferAsset: assetA,
	//         assetAmount: { greaterThanEqualTo: 0 },
	//       })
	// verify axfer
	frame_dig 8 // xfer: axfer
	gtxns TypeEnum
	int axfer
	==
	assert

	// verify assetReceiver
	frame_dig 8 // xfer: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify xferAsset
	frame_dig 8 // xfer: axfer
	gtxns XferAsset
	frame_dig -6 // assetA: AssetID
	==
	assert

	// verify assetAmount
	frame_dig 8 // xfer: axfer
	gtxns AssetAmount
	int 0
	>=
	assert
	b *if6_end

*if6_elseif1_condition:
	// contracts\BiatecClammPool.algo.ts:414
	// txAssetADeposit.typeEnum === TransactionType.Payment
	frame_dig -3 // txAssetADeposit: Txn
	gtxns TypeEnum
	int pay
	==
	bz *if6_else

	// *if6_elseif1_consequent
	// contracts\BiatecClammPool.algo.ts:415
	// payTx = txAssetADeposit as PayTxn
	frame_dig -3 // txAssetADeposit: Txn
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	frame_bury 9 // payTx: pay

	// contracts\BiatecClammPool.algo.ts:416
	// verifyPayTxn(payTx, {
	//         receiver: this.app.address,
	//         amount: { greaterThanEqualTo: 0 },
	//       })
	// verify pay
	frame_dig 9 // payTx: pay
	gtxns TypeEnum
	int pay
	==
	assert

	// verify receiver
	frame_dig 9 // payTx: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig 9 // payTx: pay
	gtxns Amount
	int 0
	>=
	assert
	b *if6_end

*if6_else:
	// contracts\BiatecClammPool.algo.ts:421
	// assert(false, 'Unsupported tx type of the asset A')
	int 0

	// Unsupported tx type of the asset A
	assert

*if6_end:
	// *if7_condition
	// contracts\BiatecClammPool.algo.ts:424
	// txAssetBDeposit.typeEnum === TransactionType.AssetTransfer
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns TypeEnum
	int axfer
	==
	bz *if7_elseif1_condition

	// *if7_consequent
	// contracts\BiatecClammPool.algo.ts:425
	// xfer = txAssetBDeposit as AssetTransferTxn
	frame_dig -4 // txAssetBDeposit: Txn
	dup
	gtxns TypeEnum
	int axfer
	==
	assert
	frame_bury 10 // xfer: axfer

	// contracts\BiatecClammPool.algo.ts:426
	// verifyAssetTransferTxn(xfer, {
	//         assetReceiver: this.app.address,
	//         xferAsset: assetB,
	//         assetAmount: { greaterThanEqualTo: 0 },
	//       })
	// verify axfer
	frame_dig 10 // xfer: axfer
	gtxns TypeEnum
	int axfer
	==
	assert

	// verify assetReceiver
	frame_dig 10 // xfer: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify xferAsset
	frame_dig 10 // xfer: axfer
	gtxns XferAsset
	frame_dig -7 // assetB: AssetID
	==
	assert

	// verify assetAmount
	frame_dig 10 // xfer: axfer
	gtxns AssetAmount
	int 0
	>=
	assert
	b *if7_end

*if7_elseif1_condition:
	// contracts\BiatecClammPool.algo.ts:431
	// txAssetBDeposit.typeEnum === TransactionType.Payment
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns TypeEnum
	int pay
	==
	bz *if7_else

	// *if7_elseif1_consequent
	// contracts\BiatecClammPool.algo.ts:432
	// payTx = txAssetBDeposit as PayTxn
	frame_dig -4 // txAssetBDeposit: Txn
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	frame_bury 11 // payTx: pay

	// contracts\BiatecClammPool.algo.ts:433
	// verifyPayTxn(payTx, {
	//         receiver: this.app.address,
	//         amount: { greaterThanEqualTo: 0 },
	//       })
	// verify pay
	frame_dig 11 // payTx: pay
	gtxns TypeEnum
	int pay
	==
	assert

	// verify receiver
	frame_dig 11 // payTx: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig 11 // payTx: pay
	gtxns Amount
	int 0
	>=
	assert
	b *if7_end

*if7_else:
	// contracts\BiatecClammPool.algo.ts:438
	// assert(false, 'Unsupported tx type of the asset B')
	int 0

	// Unsupported tx type of the asset B
	assert

*if7_end:
	// *if8_condition
	// contracts\BiatecClammPool.algo.ts:441
	// this.assetABalance.value === <uint256>0 && this.assetBBalance.value === <uint256>0
	byte 0x6162 // "ab"
	app_global_get
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b==
	dup
	bz *skip_and0
	byte 0x6262 // "bb"
	app_global_get
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b==
	&&

*skip_and0:
	bz *if8_end

	// *if8_consequent
	// contracts\BiatecClammPool.algo.ts:446
	// return this.processAddLiqudity(aDepositInBaseScale, bDepositInBaseScale, assetLPDelicmalScale2Scale, assetLP);
	frame_dig -5 // assetLP: AssetID
	frame_dig 5 // assetLPDelicmalScale2Scale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 7 // bDepositInBaseScale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 6 // aDepositInBaseScale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub processAddLiqudity

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 11
	retsub

*if8_end:
	// contracts\BiatecClammPool.algo.ts:453
	// a = this.calculateAssetADepositOnAssetBDeposit(
	//       aDepositInBaseScale,
	//       bDepositInBaseScale,
	//       this.assetABalance.value,
	//       this.assetBBalance.value
	//     )
	byte 0x6262 // "bb"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	frame_dig 7 // bDepositInBaseScale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 6 // aDepositInBaseScale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub calculateAssetADepositOnAssetBDeposit
	frame_bury 12 // a: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:460
	// b = this.calculateAssetBDepositOnAssetADeposit(
	//       aDepositInBaseScale,
	//       bDepositInBaseScale,
	//       this.assetABalance.value,
	//       this.assetBBalance.value
	//     )
	byte 0x6262 // "bb"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	frame_dig 7 // bDepositInBaseScale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 6 // aDepositInBaseScale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub calculateAssetBDepositOnAssetADeposit
	frame_bury 13 // b: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:466
	// expectedADepositB64 = (a / assetADelicmalScale2Scale) as uint64
	frame_dig 12 // a: unsafe uint256
	frame_dig 3 // assetADelicmalScale2Scale: unsafe uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 14 // expectedADepositB64: uint64

	// contracts\BiatecClammPool.algo.ts:467
	// expectedBDepositB64 = (b / assetBDelicmalScale2Scale) as uint64
	frame_dig 13 // b: unsafe uint256
	frame_dig 4 // assetBDelicmalScale2Scale: unsafe uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 15 // expectedBDepositB64: uint64

	// *if9_condition
	// contracts\BiatecClammPool.algo.ts:469
	// expectedADepositB64 > txAssetADeposit.assetAmount
	frame_dig 14 // expectedADepositB64: uint64
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	>
	bz *if9_end

	// *if9_consequent
	// *if10_condition
	// contracts\BiatecClammPool.algo.ts:476
	// expectedBDepositB64 > txAssetBDeposit.assetAmount
	frame_dig 15 // expectedBDepositB64: uint64
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	>
	bz *if10_end

	// *if10_consequent
	// contracts\BiatecClammPool.algo.ts:477
	// assert(false, 'Dominant is asset B')
	int 0

	// Dominant is asset B
	assert

*if10_end:
	// *if11_condition
	// contracts\BiatecClammPool.algo.ts:479
	// txAssetBDeposit.assetAmount - expectedBDepositB64 > 0
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	frame_dig 15 // expectedBDepositB64: uint64
	-
	int 0
	>
	bz *if11_end

	// *if11_consequent
	// contracts\BiatecClammPool.algo.ts:481
	// this.doAxfer(this.txn.sender, assetB, txAssetBDeposit.assetAmount - expectedBDepositB64)
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	frame_dig 15 // expectedBDepositB64: uint64
	-
	frame_dig -7 // assetB: AssetID
	txn Sender
	callsub doAxfer

*if11_end:
	// contracts\BiatecClammPool.algo.ts:483
	// realAssetADeposit = aDepositInBaseScale
	frame_dig 6 // aDepositInBaseScale: unsafe uint256
	frame_bury 16 // realAssetADeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:484
	// realAssetBDeposit =
	//         ((txAssetBDeposit.assetAmount - expectedBDepositB64) as uint256) * assetBDelicmalScale2Scale
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	frame_dig 15 // expectedBDepositB64: uint64
	-
	itob
	frame_dig 4 // assetBDelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 17 // realAssetBDeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:486
	// return this.processAddLiqudity(realAssetADeposit, realAssetBDeposit, assetLPDelicmalScale2Scale, assetLP);
	frame_dig -5 // assetLP: AssetID
	frame_dig 5 // assetLPDelicmalScale2Scale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 17 // realAssetBDeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 16 // realAssetADeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub processAddLiqudity

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 17
	retsub

*if9_end:
	// *if12_condition
	// contracts\BiatecClammPool.algo.ts:489
	// expectedBDepositB64 > txAssetBDeposit.assetAmount
	frame_dig 15 // expectedBDepositB64: uint64
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	>
	bz *if12_end

	// *if12_consequent
	// *if13_condition
	// contracts\BiatecClammPool.algo.ts:496
	// expectedADepositB64 > txAssetADeposit.assetAmount
	frame_dig 14 // expectedADepositB64: uint64
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	>
	bz *if13_end

	// *if13_consequent
	// contracts\BiatecClammPool.algo.ts:497
	// assert(false, 'Dominant is asset A')
	int 0

	// Dominant is asset A
	assert

*if13_end:
	// *if14_condition
	// contracts\BiatecClammPool.algo.ts:499
	// txAssetADeposit.assetAmount - expectedADepositB64 > 0
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	frame_dig 14 // expectedADepositB64: uint64
	-
	int 0
	>
	bz *if14_end

	// *if14_consequent
	// contracts\BiatecClammPool.algo.ts:501
	// this.doAxfer(this.txn.sender, assetB, txAssetADeposit.assetAmount - expectedADepositB64)
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	frame_dig 14 // expectedADepositB64: uint64
	-
	frame_dig -7 // assetB: AssetID
	txn Sender
	callsub doAxfer

*if14_end:
	// contracts\BiatecClammPool.algo.ts:503
	// realAssetADeposit =
	//         ((txAssetADeposit.assetAmount - expectedADepositB64) as uint256) * assetADelicmalScale2Scale
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	frame_dig 14 // expectedADepositB64: uint64
	-
	itob
	frame_dig 3 // assetADelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 18 // realAssetADeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:505
	// realAssetBDeposit = bDepositInBaseScale
	frame_dig 7 // bDepositInBaseScale: unsafe uint256
	frame_bury 19 // realAssetBDeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:506
	// return this.processAddLiqudity(realAssetADeposit, realAssetBDeposit, assetLPDelicmalScale2Scale, assetLP);
	frame_dig -5 // assetLP: AssetID
	frame_dig 5 // assetLPDelicmalScale2Scale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 19 // realAssetBDeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 18 // realAssetADeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub processAddLiqudity

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 19
	retsub

*if12_end:
	// *if15_condition
	// contracts\BiatecClammPool.algo.ts:508
	// expectedADepositB64 === txAssetADeposit.assetAmount && expectedBDepositB64 === txAssetBDeposit.assetAmount
	frame_dig 14 // expectedADepositB64: uint64
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	==
	dup
	bz *skip_and1
	frame_dig 15 // expectedBDepositB64: uint64
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	==
	&&

*skip_and1:
	bz *if15_end

	// *if15_consequent
	// contracts\BiatecClammPool.algo.ts:509
	// realAssetADeposit = aDepositInBaseScale
	frame_dig 6 // aDepositInBaseScale: unsafe uint256
	frame_bury 20 // realAssetADeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:510
	// realAssetBDeposit = bDepositInBaseScale
	frame_dig 7 // bDepositInBaseScale: unsafe uint256
	frame_bury 21 // realAssetBDeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:511
	// return this.processAddLiqudity(realAssetADeposit, realAssetBDeposit, assetLPDelicmalScale2Scale, assetLP);
	frame_dig -5 // assetLP: AssetID
	frame_dig 5 // assetLPDelicmalScale2Scale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 21 // realAssetBDeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 20 // realAssetADeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub processAddLiqudity

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 21
	retsub

*if15_end:
	// *if16_condition
	// contracts\BiatecClammPool.algo.ts:514
	// expectedADepositB64 === txAssetADeposit.assetAmount && expectedBDepositB64 === txAssetBDeposit.assetAmount
	frame_dig 14 // expectedADepositB64: uint64
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	==
	dup
	bz *skip_and2
	frame_dig 15 // expectedBDepositB64: uint64
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	==
	&&

*skip_and2:
	bz *if16_end

	// *if16_consequent
	// contracts\BiatecClammPool.algo.ts:515
	// realAssetADeposit = aDepositInBaseScale
	frame_dig 6 // aDepositInBaseScale: unsafe uint256
	frame_bury 22 // realAssetADeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:516
	// realAssetBDeposit = bDepositInBaseScale
	frame_dig 7 // bDepositInBaseScale: unsafe uint256
	frame_bury 23 // realAssetBDeposit: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:517
	// return this.processAddLiqudity(realAssetADeposit, realAssetBDeposit, assetLPDelicmalScale2Scale, assetLP);
	frame_dig -5 // assetLP: AssetID
	frame_dig 5 // assetLPDelicmalScale2Scale: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 23 // realAssetBDeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 22 // realAssetADeposit: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub processAddLiqudity

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 23
	retsub

*if16_end:
	// *if17_condition
	// contracts\BiatecClammPool.algo.ts:520
	// expectedADepositB64 === 0 && expectedBDepositB64 === 0
	frame_dig 14 // expectedADepositB64: uint64
	int 0
	==
	dup
	bz *skip_and3
	frame_dig 15 // expectedBDepositB64: uint64
	int 0
	==
	&&

*skip_and3:
	bz *if17_end

	// *if17_consequent
	// *if18_condition
	// contracts\BiatecClammPool.algo.ts:522
	// txAssetADeposit.assetAmount > 0
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	int 0
	>
	bz *if18_end

	// *if18_consequent
	// contracts\BiatecClammPool.algo.ts:523
	// this.doAxfer(this.txn.sender, assetA, txAssetADeposit.assetAmount)
	frame_dig -3 // txAssetADeposit: Txn
	gtxns AssetAmount
	frame_dig -6 // assetA: AssetID
	txn Sender
	callsub doAxfer

*if18_end:
	// *if19_condition
	// contracts\BiatecClammPool.algo.ts:525
	// txAssetBDeposit.assetAmount > 0
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	int 0
	>
	bz *if19_end

	// *if19_consequent
	// contracts\BiatecClammPool.algo.ts:526
	// this.doAxfer(this.txn.sender, assetB, txAssetBDeposit.assetAmount)
	frame_dig -4 // txAssetBDeposit: Txn
	gtxns AssetAmount
	frame_dig -7 // assetB: AssetID
	txn Sender
	callsub doAxfer

*if19_end:
	// contracts\BiatecClammPool.algo.ts:528
	// return 0;
	int 0

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 23
	retsub

*if17_end:
	// contracts\BiatecClammPool.algo.ts:530
	// assert(false, 'failed to calculate exact liqudidity')
	int 0

	// failed to calculate exact liqudidity
	assert

	// contracts\BiatecClammPool.algo.ts:531
	// return expectedBDepositB64;
	frame_dig 15 // expectedBDepositB64: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 23
	retsub

// processAddLiqudity(realAssetADeposit: uint256, realAssetBDeposit: uint256, assetLPDelicmalScale2Scale: uint256, assetLP: AssetID): uint64
processAddLiqudity:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// contracts\BiatecClammPool.algo.ts:541
	// this.assetABalance.value = this.assetABalance.value + realAssetADeposit
	byte 0x6162 // "ab"
	dup
	app_global_get
	frame_dig -1 // realAssetADeposit: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:542
	// this.assetBBalance.value = this.assetBBalance.value + realAssetBDeposit
	byte 0x6262 // "bb"
	dup
	app_global_get
	frame_dig -2 // realAssetBDeposit: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:545
	// x = this.assetABalance.value
	byte 0x6162 // "ab"
	app_global_get
	frame_bury 0 // x: uint256

	// contracts\BiatecClammPool.algo.ts:546
	// y = this.assetBBalance.value
	byte 0x6262 // "bb"
	app_global_get
	frame_bury 1 // y: uint256

	// contracts\BiatecClammPool.algo.ts:547
	// priceMin = this.priceMin.value as uint256
	byte 0x704d696e // "pMin"
	app_global_get
	itob
	frame_bury 2 // priceMin: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:548
	// priceMax = this.priceMax.value as uint256
	byte 0x704d6178 // "pMax"
	app_global_get
	itob
	frame_bury 3 // priceMax: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:549
	// priceMinSqrt = this.priceMinSqrt.value
	byte 0x704d696e53 // "pMinS"
	app_global_get
	frame_bury 4 // priceMinSqrt: uint256

	// contracts\BiatecClammPool.algo.ts:550
	// priceMaxSqrt = this.priceMaxSqrt.value
	byte 0x704d617853 // "pMaxS"
	app_global_get
	frame_bury 5 // priceMaxSqrt: uint256

	// contracts\BiatecClammPool.algo.ts:551
	// newLiqudity = this.calculateLiquidity(x, y, priceMin, priceMax, priceMinSqrt, priceMaxSqrt)
	frame_dig 5 // priceMaxSqrt: uint256
	frame_dig 4 // priceMinSqrt: uint256
	frame_dig 3 // priceMax: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 2 // priceMin: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 1 // y: uint256
	frame_dig 0 // x: uint256
	callsub calculateLiquidity
	frame_bury 6 // newLiqudity: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:554
	// lpTokensToSend = ((newLiqudity - this.Liqudity.value) / assetLPDelicmalScale2Scale) as uint64
	frame_dig 6 // newLiqudity: unsafe uint256
	byte 0x4c // "L"
	app_global_get
	b-
	frame_dig -3 // assetLPDelicmalScale2Scale: uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 7 // lpTokensToSend: uint64

	// contracts\BiatecClammPool.algo.ts:556
	// this.Liqudity.value = newLiqudity
	byte 0x4c // "L"
	frame_dig 6 // newLiqudity: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:558
	// this.doAxfer(this.txn.sender, assetLP, lpTokensToSend)
	frame_dig 7 // lpTokensToSend: uint64
	frame_dig -4 // assetLP: AssetID
	txn Sender
	callsub doAxfer

	// contracts\BiatecClammPool.algo.ts:559
	// return lpTokensToSend;
	frame_dig 7 // lpTokensToSend: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// removeLiquidity(axfer,uint64,uint64,uint64)uint256
*abi_route_removeLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// assetB: uint64
	txna ApplicationArgs 3
	btoi

	// assetA: uint64
	txna ApplicationArgs 2
	btoi

	// assetLP: uint64
	txna ApplicationArgs 1
	btoi

	// txLPXfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute removeLiquidity(axfer,uint64,uint64,uint64)uint256
	callsub removeLiquidity
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// removeLiquidity(txLPXfer: AssetTransferTxn, assetLP: AssetID, assetA: AssetID, assetB: AssetID): uint256
//
// This method retrieves from the liquidity provider LP token and returns Asset A and Asset B from the Automated Market Maker Concentrated Liqudidity Pool
// @param txLPXfer Transfer of the LP token
// @param assetLP LP pool asset
// @param assetA Asset A
// @param assetB Asset B
// @returns LP position reduced
removeLiquidity:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 17

	// well formed mint
	// contracts\BiatecClammPool.algo.ts:572
	// assert(assetA.id === this.assetA.value)
	frame_dig -3 // assetA: AssetID
	byte 0x61 // "a"
	app_global_get
	==
	assert

	// contracts\BiatecClammPool.algo.ts:573
	// assert(assetB.id === this.assetB.value)
	frame_dig -4 // assetB: AssetID
	byte 0x62 // "b"
	app_global_get
	==
	assert

	// contracts\BiatecClammPool.algo.ts:574
	// assert(assetLP.id === this.assetLP.value)
	frame_dig -2 // assetLP: AssetID
	byte 0x6c70 // "lp"
	app_global_get
	==
	assert

	// contracts\BiatecClammPool.algo.ts:576
	// verifyAssetTransferTxn(txLPXfer, {
	//       assetReceiver: this.app.address,
	//       xferAsset: assetLP,
	//       assetAmount: { greaterThanEqualTo: 0 },
	//     })
	// verify assetReceiver
	frame_dig -1 // txLPXfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify xferAsset
	frame_dig -1 // txLPXfer: AssetTransferTxn
	gtxns XferAsset
	frame_dig -2 // assetLP: AssetID
	==
	assert

	// verify assetAmount
	frame_dig -1 // txLPXfer: AssetTransferTxn
	gtxns AssetAmount
	int 0
	>=
	assert

	// contracts\BiatecClammPool.algo.ts:583
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecClammPool.algo.ts:585
	// assetADecimals = 6
	int 6
	frame_bury 0 // assetADecimals: uint64

	// *if20_condition
	// contracts\BiatecClammPool.algo.ts:586
	// assetA.id > 0
	frame_dig -3 // assetA: AssetID
	int 0
	>
	bz *if20_end

	// *if20_consequent
	// contracts\BiatecClammPool.algo.ts:586
	// assetADecimals = assetA.decimals
	frame_dig -3 // assetA: AssetID
	asset_params_get AssetDecimals
	pop
	frame_bury 0 // assetADecimals: uint64

*if20_end:
	// contracts\BiatecClammPool.algo.ts:588
	// assetADelicmalScale2Scale = (10 ** (SCALE_DECIMALS - assetADecimals)) as uint256
	int 10
	int 9
	frame_dig 0 // assetADecimals: uint64
	-
	exp
	itob
	frame_bury 1 // assetADelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:590
	// assetBDelicmalScale2Scale = (10 ** (SCALE_DECIMALS - assetB.decimals)) as uint256
	int 10
	int 9
	frame_dig -4 // assetB: AssetID
	asset_params_get AssetDecimals
	pop
	-
	exp
	itob
	frame_bury 2 // assetBDelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:592
	// assetLPDelicmalScale2Scale = (10 ** (SCALE_DECIMALS - LP_TOKEN_DECIMALS)) as uint256
	int 10
	int 3
	exp
	itob
	frame_bury 3 // assetLPDelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:594
	// s = SCALE as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00
	frame_bury 4 // s: uint256

	// contracts\BiatecClammPool.algo.ts:596
	// lpDelta = txLPXfer.assetAmount as uint256
	frame_dig -1 // txLPXfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	frame_bury 5 // lpDelta: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:597
	// lpDeltaBase = lpDelta * assetLPDelicmalScale2Scale
	frame_dig 5 // lpDelta: unsafe uint256
	frame_dig 3 // assetLPDelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 6 // lpDeltaBase: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:598
	// lpDeltaWithFees = lpDeltaBase
	frame_dig 6 // lpDeltaBase: unsafe uint256
	frame_bury 7 // lpDeltaWithFees: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:599
	// lpWithOthers = this.calculateDistributedLiquidity(assetLP, lpDelta)
	frame_dig 5 // lpDelta: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -2 // assetLP: AssetID
	callsub calculateDistributedLiquidity
	frame_bury 8 // lpWithOthers: unsafe uint256

	// *if21_condition
	// contracts\BiatecClammPool.algo.ts:600
	// lpWithOthers > <uint256>0
	frame_dig 8 // lpWithOthers: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz *if21_end

	// *if21_consequent
	// contracts\BiatecClammPool.algo.ts:602
	// myPortion = (lpDeltaBase * s) / lpWithOthers
	frame_dig 6 // lpDeltaBase: unsafe uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00 // s: uint256
	b*
	frame_dig 8 // lpWithOthers: unsafe uint256
	b/
	frame_bury 9 // myPortion: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:603
	// myPortionOfFeesCollected = (this.LiqudityUsersFromFees.value * myPortion) / s
	byte 0x4c75 // "Lu"
	app_global_get
	frame_dig 9 // myPortion: unsafe uint256
	b*
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00 // s: uint256
	b/
	frame_bury 10 // myPortionOfFeesCollected: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:604
	// lpDeltaWithFees = lpDeltaBase + myPortionOfFeesCollected
	frame_dig 6 // lpDeltaBase: unsafe uint256
	frame_dig 10 // myPortionOfFeesCollected: unsafe uint256
	b+
	frame_bury 7 // lpDeltaWithFees: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:605
	// this.LiqudityUsersFromFees.value = this.LiqudityUsersFromFees.value - myPortionOfFeesCollected
	byte 0x4c75 // "Lu"
	dup
	app_global_get
	frame_dig 10 // myPortionOfFeesCollected: unsafe uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

*if21_end:
	// contracts\BiatecClammPool.algo.ts:607
	// aToSend = this.calculateAssetAWithdrawOnLpDeposit(
	//       lpDeltaWithFees,
	//       this.assetABalance.value,
	//       this.Liqudity.value
	//     )
	byte 0x4c // "L"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	frame_dig 7 // lpDeltaWithFees: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub calculateAssetAWithdrawOnLpDeposit
	frame_bury 11 // aToSend: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:612
	// aToSend64 = (aToSend / assetADelicmalScale2Scale) as uint64
	frame_dig 11 // aToSend: unsafe uint256
	frame_dig 1 // assetADelicmalScale2Scale: unsafe uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 12 // aToSend64: uint64

	// *if22_condition
	// contracts\BiatecClammPool.algo.ts:613
	// aToSend64 > 0
	frame_dig 12 // aToSend64: uint64
	int 0
	>
	bz *if22_end

	// *if22_consequent
	// contracts\BiatecClammPool.algo.ts:614
	// this.doAxfer(this.txn.sender, assetA, aToSend64)
	frame_dig 12 // aToSend64: uint64
	frame_dig -3 // assetA: AssetID
	txn Sender
	callsub doAxfer

*if22_end:
	// contracts\BiatecClammPool.algo.ts:616
	// bToSend = this.calculateAssetAWithdrawOnLpDeposit(
	//       lpDeltaWithFees,
	//       this.assetBBalance.value,
	//       this.Liqudity.value
	//     )
	byte 0x4c // "L"
	app_global_get
	byte 0x6262 // "bb"
	app_global_get
	frame_dig 7 // lpDeltaWithFees: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub calculateAssetAWithdrawOnLpDeposit
	frame_bury 13 // bToSend: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:621
	// bToSend64 = (bToSend / assetBDelicmalScale2Scale) as uint64
	frame_dig 13 // bToSend: unsafe uint256
	frame_dig 2 // assetBDelicmalScale2Scale: unsafe uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 14 // bToSend64: uint64

	// *if23_condition
	// contracts\BiatecClammPool.algo.ts:622
	// bToSend64 > 0
	frame_dig 14 // bToSend64: uint64
	int 0
	>
	bz *if23_end

	// *if23_consequent
	// contracts\BiatecClammPool.algo.ts:623
	// this.doAxfer(this.txn.sender, assetB, bToSend64)
	frame_dig 14 // bToSend64: uint64
	frame_dig -4 // assetB: AssetID
	txn Sender
	callsub doAxfer

*if23_end:
	// contracts\BiatecClammPool.algo.ts:626
	// newAssetA = this.assetABalance.value - aToSend
	byte 0x6162 // "ab"
	app_global_get
	frame_dig 11 // aToSend: unsafe uint256
	b-
	frame_bury 15 // newAssetA: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:627
	// newAssetB = this.assetBBalance.value - bToSend
	byte 0x6262 // "bb"
	app_global_get
	frame_dig 13 // bToSend: unsafe uint256
	b-
	frame_bury 16 // newAssetB: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:628
	// this.assetABalance.value = newAssetA
	byte 0x6162 // "ab"
	frame_dig 15 // newAssetA: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:629
	// this.assetBBalance.value = newAssetB
	byte 0x6262 // "bb"
	frame_dig 16 // newAssetB: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:633
	// lAfter = this.calculateLiquidity(
	//       this.assetABalance.value,
	//       this.assetBBalance.value,
	//       this.priceMin.value as uint256, // priceMin: uint256,
	//       this.priceMax.value as uint256, // priceMax: uint256,
	//       this.priceMinSqrt.value, // priceMinSqrt: uint256,
	//       this.priceMaxSqrt.value // priceMaxSqrt: uint256,
	//     )
	byte 0x704d617853 // "pMaxS"
	app_global_get
	byte 0x704d696e53 // "pMinS"
	app_global_get
	byte 0x704d6178 // "pMax"
	app_global_get
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x704d696e // "pMin"
	app_global_get
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x6262 // "bb"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	callsub calculateLiquidity
	frame_bury 17 // lAfter: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:641
	// this.Liqudity.value = lAfter
	byte 0x4c // "L"
	frame_dig 17 // lAfter: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:642
	// return lpDeltaWithFees / assetLPDelicmalScale2Scale;
	frame_dig 7 // lpDeltaWithFees: unsafe uint256
	frame_dig 3 // assetLPDelicmalScale2Scale: unsafe uint256
	b/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 17
	retsub

// swap(uint64,uint64,txn,uint64,uint64,uint64)uint256
*abi_route_swap:
	// The ABI return prefix
	byte 0x151f7c75

	// minimumToReceive: uint64
	txna ApplicationArgs 5
	btoi

	// assetB: uint64
	txna ApplicationArgs 4
	btoi

	// assetA: uint64
	txna ApplicationArgs 3
	btoi

	// txSwap: txn
	txn GroupIndex
	int 1
	-

	// appBiatecIdentityProvider: uint64
	txna ApplicationArgs 2
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute swap(uint64,uint64,txn,uint64,uint64,uint64)uint256
	callsub swap
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// swap(appBiatecConfigProvider: AppID, appBiatecIdentityProvider: AppID, txSwap: Txn, assetA: AssetID, assetB: AssetID, minimumToReceive: uint64): uint256
//
// Swap Asset A to Asset B or Asset B to Asst A
// @param txSwap Transfer of the token to be deposited to the pool. To the owner the other asset will be sent.
// @param assetA Asset A
// @param assetB Asset B
// @param minimumToReceive If number greater then zero, the check is performed for the output of the other asset
swap:
	proto 6 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 25

	// contracts\BiatecClammPool.algo.ts:660
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// well formed swap
	// contracts\BiatecClammPool.algo.ts:663
	// assert(assetA.id === this.assetA.value)
	frame_dig -4 // assetA: AssetID
	byte 0x61 // "a"
	app_global_get
	==
	assert

	// contracts\BiatecClammPool.algo.ts:664
	// assert(assetB.id === this.assetB.value)
	frame_dig -5 // assetB: AssetID
	byte 0x62 // "b"
	app_global_get
	==
	assert

	// *if24_condition
	// contracts\BiatecClammPool.algo.ts:666
	// txSwap.typeEnum === TransactionType.Payment
	frame_dig -3 // txSwap: Txn
	gtxns TypeEnum
	int pay
	==
	bz *if24_else

	// *if24_consequent
	// contracts\BiatecClammPool.algo.ts:667
	// assert(assetA.id === 0)
	frame_dig -4 // assetA: AssetID
	int 0
	==
	assert

	// contracts\BiatecClammPool.algo.ts:669
	// verifyPayTxn(txSwap, {
	//         amount: { greaterThan: 0 },
	//         receiver: this.app.address,
	//         sender: this.txn.sender,
	//       })
	// verify pay
	frame_dig -3 // txSwap: Txn
	gtxns TypeEnum
	int pay
	==
	assert

	// verify amount
	frame_dig -3 // txSwap: Txn
	gtxns Amount
	int 0
	>
	assert

	// verify receiver
	frame_dig -3 // txSwap: Txn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -3 // txSwap: Txn
	gtxns Sender
	txn Sender
	==
	assert
	b *if24_end

*if24_else:
	// contracts\BiatecClammPool.algo.ts:675
	// assert(txSwap.typeEnum === TransactionType.AssetTransfer)
	frame_dig -3 // txSwap: Txn
	gtxns TypeEnum
	int axfer
	==
	assert

	// contracts\BiatecClammPool.algo.ts:677
	// verifyAssetTransferTxn(txSwap, {
	//         assetAmount: { greaterThan: 0 },
	//         assetReceiver: this.app.address,
	//         sender: this.txn.sender,
	//         xferAsset: { includedIn: [assetA, assetB] },
	//       })
	// verify axfer
	frame_dig -3 // txSwap: Txn
	gtxns TypeEnum
	int axfer
	==
	assert

	// verify assetAmount
	frame_dig -3 // txSwap: Txn
	gtxns AssetAmount
	int 0
	>
	assert

	// verify assetReceiver
	frame_dig -3 // txSwap: Txn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -3 // txSwap: Txn
	gtxns Sender
	txn Sender
	==
	assert

	// verify xferAsset
	frame_dig -3 // txSwap: Txn
	gtxns XferAsset
	frame_dig -4 // assetA: AssetID
	==
	frame_dig -3 // txSwap: Txn
	gtxns XferAsset
	frame_dig -5 // assetB: AssetID
	==
	||
	assert

*if24_end:
	// contracts\BiatecClammPool.algo.ts:685
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	byte 0x42 // "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecClammPool.algo.ts:686
	// identityFromConfig = appBiatecConfigProvider.globalState('i')
	frame_dig -1 // appBiatecConfigProvider: AppID
	byte 0x69 // "i"
	app_global_get_ex
	assert
	frame_bury 0 // identityFromConfig: any

	// contracts\BiatecClammPool.algo.ts:687
	// assert(
	//       appBiatecIdentityProvider === identityFromConfig,
	//       'appBiatecIdentityProvider must match to the config in appBiatecConfigProvider'
	//     )
	frame_dig -2 // appBiatecIdentityProvider: AppID
	frame_dig 0 // identityFromConfig: any
	==

	// appBiatecIdentityProvider must match to the config in appBiatecConfigProvider
	assert

	// contracts\BiatecClammPool.algo.ts:692
	// user = sendMethodCall<[Address, uint8], UserInfoV1>({
	//       name: 'getUser',
	//       methodArgs: [this.txn.sender, <uint8>1],
	//       fee: 0,
	//       applicationID: appBiatecIdentityProvider,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "getUser(address,uint8)(uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)"
	itxn_field ApplicationArgs

	// contracts\BiatecClammPool.algo.ts:694
	// methodArgs: [this.txn.sender, <uint8>1]
	txn Sender
	itxn_field ApplicationArgs
	byte 0x01
	itxn_field ApplicationArgs

	// contracts\BiatecClammPool.algo.ts:695
	// fee: 0
	int 0
	itxn_field Fee

	// contracts\BiatecClammPool.algo.ts:696
	// applicationID: appBiatecIdentityProvider
	frame_dig -2 // appBiatecIdentityProvider: AppID
	itxn_field ApplicationID

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)

	// contracts\BiatecClammPool.algo.ts:698
	// assert(!user.isLocked, 'User must not be locked')
	frame_dig 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
	store 255 // full array
	load 255 // full array
	int 1032
	getbit
	!

	// User must not be locked
	assert

	// contracts\BiatecClammPool.algo.ts:699
	// assert(
	//       user.verificationClass >= this.verificationClass.value, // if(user.verificationClass >= this.verificationClass.value) then ok
	//       'User cannot interact with this smart contract as his verification class is lower then required here'
	//     )
	frame_dig 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
	store 255 // full array
	load 255 // full array
	extract 9 8
	btoi
	byte 0x63 // "c"
	app_global_get
	>=

	// User cannot interact with this smart contract as his verification class is lower then required here
	assert

	// contracts\BiatecClammPool.algo.ts:704
	// assetADecimals = 6
	int 6
	frame_bury 2 // assetADecimals: uint64

	// *if25_condition
	// contracts\BiatecClammPool.algo.ts:705
	// assetA.id > 0
	frame_dig -4 // assetA: AssetID
	int 0
	>
	bz *if25_end

	// *if25_consequent
	// contracts\BiatecClammPool.algo.ts:705
	// assetADecimals = assetA.decimals
	frame_dig -4 // assetA: AssetID
	asset_params_get AssetDecimals
	pop
	frame_bury 2 // assetADecimals: uint64

*if25_end:
	// contracts\BiatecClammPool.algo.ts:707
	// assetADelicmalScale2Scale = (10 ** (SCALE_DECIMALS - assetADecimals)) as uint256
	int 10
	int 9
	frame_dig 2 // assetADecimals: uint64
	-
	exp
	itob
	frame_bury 3 // assetADelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:709
	// assetBDelicmalScale2Scale = (10 ** (SCALE_DECIMALS - assetB.decimals)) as uint256
	int 10
	int 9
	frame_dig -5 // assetB: AssetID
	asset_params_get AssetDecimals
	pop
	-
	exp
	itob
	frame_bury 4 // assetBDelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:711
	// s = SCALE as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00
	frame_bury 5 // s: uint256

	// contracts\BiatecClammPool.algo.ts:712
	// feesMultiplier = (s - ((this.fee.value as uint256) * user.feeMultiplier) / user.base) as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00 // s: uint256
	byte 0x66 // "f"
	app_global_get
	itob
	frame_dig 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
	store 255 // full array
	load 255 // full array
	extract 65 32
	b*
	frame_dig 1 // user: (uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint256,uint256,bool,uint64,uint64,bool)
	store 255 // full array
	load 255 // full array
	extract 97 32
	b/
	b-
	frame_bury 6 // feesMultiplier: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:713
	// ret: uint64 = 0
	int 0
	frame_bury 7 // ret: uint64

	// contracts\BiatecClammPool.algo.ts:714
	// isAssetA = false
	int 0
	frame_bury 8 // isAssetA: bool

	// *if26_condition
	// contracts\BiatecClammPool.algo.ts:715
	// txSwap.typeEnum === TransactionType.Payment
	frame_dig -3 // txSwap: Txn
	gtxns TypeEnum
	int pay
	==
	bz *if26_else

	// *if26_consequent
	// contracts\BiatecClammPool.algo.ts:716
	// isAssetA = true
	int 1
	frame_bury 8 // isAssetA: bool
	b *if26_end

*if26_else:
	// contracts\BiatecClammPool.algo.ts:718
	// isAssetA = txSwap.xferAsset === assetA
	frame_dig -3 // txSwap: Txn
	gtxns XferAsset
	frame_dig -4 // assetA: AssetID
	==
	frame_bury 8 // isAssetA: bool

*if26_end:
	// *if27_condition
	// contracts\BiatecClammPool.algo.ts:721
	// isAssetA
	frame_dig 8 // isAssetA: bool
	bz *if27_end

	// *if27_consequent
	// contracts\BiatecClammPool.algo.ts:722
	// assetInAssetDecimals = <uint256>0
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_bury 9 // assetInAssetDecimals: unsafe uint256

	// *if28_condition
	// contracts\BiatecClammPool.algo.ts:723
	// txSwap.typeEnum === TransactionType.Payment
	frame_dig -3 // txSwap: Txn
	gtxns TypeEnum
	int pay
	==
	bz *if28_else

	// *if28_consequent
	// contracts\BiatecClammPool.algo.ts:724
	// assetInAssetDecimals = txSwap.amount as uint256
	frame_dig -3 // txSwap: Txn
	gtxns Amount
	itob
	frame_bury 9 // assetInAssetDecimals: unsafe uint256
	b *if28_end

*if28_else:
	// contracts\BiatecClammPool.algo.ts:726
	// assetInAssetDecimals = txSwap.assetAmount as uint256
	frame_dig -3 // txSwap: Txn
	gtxns AssetAmount
	itob
	frame_bury 9 // assetInAssetDecimals: unsafe uint256

*if28_end:
	// contracts\BiatecClammPool.algo.ts:728
	// inAsset = (assetInAssetDecimals * assetADelicmalScale2Scale) as uint256
	frame_dig 9 // assetInAssetDecimals: unsafe uint256
	frame_dig 3 // assetADelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 10 // inAsset: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:729
	// inAssetAfterFee = (inAsset * feesMultiplier) / s
	frame_dig 10 // inAsset: unsafe uint256
	frame_dig 6 // feesMultiplier: unsafe uint256
	b*
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00 // s: uint256
	b/
	frame_bury 11 // inAssetAfterFee: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:731
	// toSwap = this.calculateAssetBWithdrawOnAssetADeposit(
	//         inAssetAfterFee,
	//         this.assetABalance.value,
	//         this.assetBBalance.value,
	//         this.priceMinSqrt.value,
	//         this.priceMaxSqrt.value,
	//         this.Liqudity.value
	//       )
	byte 0x4c // "L"
	app_global_get
	byte 0x704d617853 // "pMaxS"
	app_global_get
	byte 0x704d696e53 // "pMinS"
	app_global_get
	byte 0x6262 // "bb"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	frame_dig 11 // inAssetAfterFee: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub calculateAssetBWithdrawOnAssetADeposit
	frame_bury 12 // toSwap: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:740
	// toSwapBDecimals = (toSwap / assetBDelicmalScale2Scale) as uint64
	frame_dig 12 // toSwap: unsafe uint256
	frame_dig 4 // assetBDelicmalScale2Scale: unsafe uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 13 // toSwapBDecimals: uint64

	// contracts\BiatecClammPool.algo.ts:741
	// ret = toSwapBDecimals
	frame_dig 13 // toSwapBDecimals: uint64
	frame_bury 7 // ret: uint64

	// *if29_condition
	// contracts\BiatecClammPool.algo.ts:742
	// minimumToReceive > 0
	frame_dig -6 // minimumToReceive: uint64
	int 0
	>
	bz *if29_end

	// *if29_consequent
	// contracts\BiatecClammPool.algo.ts:744
	// assert(minimumToReceive >= toSwapBDecimals)
	frame_dig -6 // minimumToReceive: uint64
	frame_dig 13 // toSwapBDecimals: uint64
	>=
	assert

*if29_end:
	// contracts\BiatecClammPool.algo.ts:747
	// this.doAxfer(this.txn.sender, assetB, toSwapBDecimals)
	frame_dig 13 // toSwapBDecimals: uint64
	frame_dig -5 // assetB: AssetID
	txn Sender
	callsub doAxfer

	// contracts\BiatecClammPool.algo.ts:749
	// this.assetABalance.value = this.assetABalance.value + inAsset
	byte 0x6162 // "ab"
	dup
	app_global_get
	frame_dig 10 // inAsset: unsafe uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:750
	// this.assetBBalance.value = this.assetBBalance.value - toSwap
	byte 0x6262 // "bb"
	dup
	app_global_get
	frame_dig 12 // toSwap: unsafe uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

*if27_end:
	// *if30_condition
	// contracts\BiatecClammPool.algo.ts:753
	// !isAssetA
	frame_dig 8 // isAssetA: bool
	!
	bz *if30_end

	// *if30_consequent
	// contracts\BiatecClammPool.algo.ts:754
	// assetInAssetDecimals = txSwap.assetAmount as uint256
	frame_dig -3 // txSwap: Txn
	gtxns AssetAmount
	itob
	frame_bury 14 // assetInAssetDecimals: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:755
	// inAsset = (assetInAssetDecimals * assetBDelicmalScale2Scale) as uint256
	frame_dig 14 // assetInAssetDecimals: unsafe uint256
	frame_dig 4 // assetBDelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 15 // inAsset: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:756
	// inAssetAfterFee = (inAsset * feesMultiplier) / s
	frame_dig 15 // inAsset: unsafe uint256
	frame_dig 6 // feesMultiplier: unsafe uint256
	b*
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00 // s: uint256
	b/
	frame_bury 16 // inAssetAfterFee: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:757
	// toSwap = this.calculateAssetAWithdrawOnAssetBDeposit(
	//         inAssetAfterFee,
	//         this.assetABalance.value,
	//         this.assetBBalance.value,
	//         this.priceMinSqrt.value,
	//         this.priceMaxSqrt.value,
	//         this.Liqudity.value
	//       )
	byte 0x4c // "L"
	app_global_get
	byte 0x704d617853 // "pMaxS"
	app_global_get
	byte 0x704d696e53 // "pMinS"
	app_global_get
	byte 0x6262 // "bb"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	frame_dig 16 // inAssetAfterFee: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub calculateAssetAWithdrawOnAssetBDeposit
	frame_bury 17 // toSwap: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:766
	// toSwapADecimals = (toSwap / assetADelicmalScale2Scale) as uint64
	frame_dig 17 // toSwap: unsafe uint256
	frame_dig 3 // assetADelicmalScale2Scale: unsafe uint256
	b/
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	frame_bury 18 // toSwapADecimals: uint64

	// contracts\BiatecClammPool.algo.ts:767
	// ret = toSwapADecimals
	frame_dig 18 // toSwapADecimals: uint64
	frame_bury 7 // ret: uint64

	// *if31_condition
	// contracts\BiatecClammPool.algo.ts:768
	// minimumToReceive > 0
	frame_dig -6 // minimumToReceive: uint64
	int 0
	>
	bz *if31_end

	// *if31_consequent
	// contracts\BiatecClammPool.algo.ts:770
	// assert(minimumToReceive >= toSwapADecimals)
	frame_dig -6 // minimumToReceive: uint64
	frame_dig 18 // toSwapADecimals: uint64
	>=
	assert

*if31_end:
	// contracts\BiatecClammPool.algo.ts:773
	// this.doAxfer(this.txn.sender, assetA, toSwapADecimals)
	frame_dig 18 // toSwapADecimals: uint64
	frame_dig -4 // assetA: AssetID
	txn Sender
	callsub doAxfer

	// contracts\BiatecClammPool.algo.ts:775
	// this.assetBBalance.value = this.assetBBalance.value + inAsset
	byte 0x6262 // "bb"
	dup
	app_global_get
	frame_dig 15 // inAsset: unsafe uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:776
	// this.assetABalance.value = this.assetABalance.value - toSwap
	byte 0x6162 // "ab"
	dup
	app_global_get
	frame_dig 17 // toSwap: unsafe uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

*if30_end:
	// contracts\BiatecClammPool.algo.ts:779
	// newL = this.calculateLiquidity(
	//       this.assetABalance.value,
	//       this.assetBBalance.value,
	//       this.priceMin.value as uint256, // priceMin: uint256,
	//       this.priceMax.value as uint256, // priceMax: uint256,
	//       this.priceMinSqrt.value, // priceMinSqrt: uint256,
	//       this.priceMaxSqrt.value // priceMaxSqrt: uint256,
	//     )
	byte 0x704d617853 // "pMaxS"
	app_global_get
	byte 0x704d696e53 // "pMinS"
	app_global_get
	byte 0x704d6178 // "pMax"
	app_global_get
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x704d696e // "pMin"
	app_global_get
	itob
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x6262 // "bb"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	callsub calculateLiquidity
	frame_bury 19 // newL: unsafe uint256

	// *if32_condition
	// contracts\BiatecClammPool.algo.ts:788
	// newL !== this.Liqudity.value
	frame_dig 19 // newL: unsafe uint256
	byte 0x4c // "L"
	app_global_get
	b!=
	bz *if32_end

	// *if32_consequent
	// contracts\BiatecClammPool.algo.ts:791
	// diff = (newL - this.Liqudity.value) as uint256
	frame_dig 19 // newL: unsafe uint256
	byte 0x4c // "L"
	app_global_get
	b-
	frame_bury 20 // diff: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:792
	// this.Liqudity.value = newL
	byte 0x4c // "L"
	frame_dig 19 // newL: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:794
	// biatecFee = this.appBiatecConfigProvider.value.globalState('f') as uint256
	byte 0x42 // "B"
	app_global_get
	byte 0x66 // "f"
	app_global_get_ex
	assert
	frame_bury 21 // biatecFee: uint256

	// *if33_condition
	// contracts\BiatecClammPool.algo.ts:795
	// biatecFee === <uint256>0
	frame_dig 21 // biatecFee: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b==
	bz *if33_else

	// *if33_consequent
	// contracts\BiatecClammPool.algo.ts:796
	// usersLiquidityFromFeeIncrement = diff
	frame_dig 20 // diff: unsafe uint256
	frame_bury 22 // usersLiquidityFromFeeIncrement: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:797
	// this.LiqudityUsersFromFees.value = this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement
	byte 0x4c75 // "Lu"
	dup
	app_global_get
	frame_dig 22 // usersLiquidityFromFeeIncrement: unsafe uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put
	b *if33_end

*if33_else:
	// contracts\BiatecClammPool.algo.ts:799
	// usersLiquidityFromFeeIncrement = (diff * (s - biatecFee)) / s
	frame_dig 20 // diff: unsafe uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00 // s: uint256
	frame_dig 21 // biatecFee: uint256
	b-
	b*
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00 // s: uint256
	b/
	frame_bury 23 // usersLiquidityFromFeeIncrement: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:800
	// biatecLiquidityFromFeeIncrement = diff - usersLiquidityFromFeeIncrement
	frame_dig 20 // diff: unsafe uint256
	frame_dig 23 // usersLiquidityFromFeeIncrement: unsafe uint256
	b-
	frame_bury 24 // biatecLiquidityFromFeeIncrement: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:801
	// this.LiqudityUsersFromFees.value = this.LiqudityUsersFromFees.value + usersLiquidityFromFeeIncrement
	byte 0x4c75 // "Lu"
	dup
	app_global_get
	frame_dig 23 // usersLiquidityFromFeeIncrement: unsafe uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

	// contracts\BiatecClammPool.algo.ts:802
	// this.LiqudityBiatecFromFees.value = this.LiqudityBiatecFromFees.value + biatecLiquidityFromFeeIncrement
	byte 0x4c62 // "Lb"
	dup
	app_global_get
	frame_dig 24 // biatecLiquidityFromFeeIncrement: unsafe uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put

*if33_end:

*if32_end:
	// contracts\BiatecClammPool.algo.ts:805
	// newPrice = this.calculatePrice(
	//       this.assetABalance.value, // assetAQuantity: uint256,
	//       this.assetBBalance.value, // assetBQuantity: uint256,
	//       this.priceMinSqrt.value, // priceMinSqrt: uint256,
	//       this.priceMaxSqrt.value, // priceMaxSqrt: uint256,
	//       this.Liqudity.value // liquidity: uint256
	//     )
	byte 0x4c // "L"
	app_global_get
	byte 0x704d617853 // "pMaxS"
	app_global_get
	byte 0x704d696e53 // "pMinS"
	app_global_get
	byte 0x6262 // "bb"
	app_global_get
	byte 0x6162 // "ab"
	app_global_get
	callsub calculatePrice
	frame_bury 25 // newPrice: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:812
	// this.ratio.value = newPrice as uint64
	byte 0x72 // "r"
	frame_dig 25 // newPrice: unsafe uint256
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	app_global_put

	// contracts\BiatecClammPool.algo.ts:813
	// return ret as uint256;
	frame_dig 7 // ret: uint64
	itob

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 25
	retsub

// calculateDistributedLiquidity(uint64,uint256)uint256
*abi_route_calculateDistributedLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// currentDeposit: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// assetLP: uint64
	txna ApplicationArgs 1
	btoi

	// execute calculateDistributedLiquidity(uint64,uint256)uint256
	callsub calculateDistributedLiquidity
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateDistributedLiquidity(assetLP: AssetID, currentDeposit: uint256): uint256
//
// Calculates the number of LP tokens issued to users
calculateDistributedLiquidity:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts\BiatecClammPool.algo.ts:821
	// current = (this.app.address.assetBalance(assetLP) as uint256) - currentDeposit
	global CurrentApplicationAddress
	frame_dig -1 // assetLP: AssetID
	asset_holding_get AssetBalance
	pop
	itob
	frame_dig -2 // currentDeposit: uint256
	b-
	frame_bury 0 // current: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:822
	// minted = TOTAL_SUPPLY as uint256
	byte 0x000000000000000000000000000000000000000000000000002386f26fc10000
	frame_bury 1 // minted: uint256

	// contracts\BiatecClammPool.algo.ts:823
	// distributedLPTokens = minted - current
	byte 0x000000000000000000000000000000000000000000000000002386f26fc10000 // minted: uint256
	frame_dig 0 // current: unsafe uint256
	b-
	frame_bury 2 // distributedLPTokens: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:825
	// assetLPDelicmalScale2Scale = (10 ** (SCALE_DECIMALS - LP_TOKEN_DECIMALS)) as uint256
	int 10
	int 3
	exp
	itob
	frame_bury 3 // assetLPDelicmalScale2Scale: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:826
	// ret = distributedLPTokens * assetLPDelicmalScale2Scale
	frame_dig 2 // distributedLPTokens: unsafe uint256
	frame_dig 3 // assetLPDelicmalScale2Scale: unsafe uint256
	b*
	frame_bury 4 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:827
	// return ret;
	frame_dig 4 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// calculateLiquidity(uint256,uint256,uint256,uint256,uint256,uint256)uint256
*abi_route_calculateLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// priceMaxSqrt: uint256
	txna ApplicationArgs 6
	dup
	len
	int 32
	==
	assert

	// priceMinSqrt: uint256
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// priceMax: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// priceMin: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// y: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// x: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculateLiquidity(uint256,uint256,uint256,uint256,uint256,uint256)uint256
	callsub calculateLiquidity
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateLiquidity(x: uint256, y: uint256, priceMin: uint256, priceMax: uint256, priceMinSqrt: uint256, priceMaxSqrt: uint256): uint256
//
// Calculates the liquidity  from the x - Asset A position and y - Asset B position
//
// @param x Asset A position balanced on the curve
// @param y Asset B position balanced on the curve
// @param priceMin Minimum price variable in base scale decimals (pa)
// @param priceMax Maximum price variable in base scale decimals (pb)
// @param priceMinSqrt sqrt(priceMin) in base scale decimals Variable pas
// @param priceMaxSqrt sqrt(priceMax) in base scale decimals Variable pbs
// @returns Liquidity is constant in swapping each direction. On deposit the diff between the liquidity is number of LP tokens received by user.
calculateLiquidity:
	proto 6 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 19

	// contracts\BiatecClammPool.algo.ts:850
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecClammPool.algo.ts:878
	// s = SCALE as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00
	frame_bury 0 // s: uint256

	// contracts\BiatecClammPool.algo.ts:880
	// D1 = (((x * x) / s) * priceMin) / s
	frame_dig -1 // x: uint256
	frame_dig -1 // x: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig -3 // priceMin: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 1 // D1: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:882
	// D2 = (y * y) / priceMax
	frame_dig -2 // y: uint256
	frame_dig -2 // y: uint256
	b*
	frame_dig -4 // priceMax: uint256
	b/
	frame_bury 2 // D2: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:884
	// D3 = (((<uint256>2 * x * y) / s) * priceMinSqrt) / s / priceMaxSqrt
	byte 0x0000000000000000000000000000000000000000000000000000000000000002
	frame_dig -1 // x: uint256
	b*
	frame_dig -2 // y: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig -5 // priceMinSqrt: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig -6 // priceMaxSqrt: uint256
	b/
	frame_bury 3 // D3: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:887
	// D4 = (<uint256>4 * x * y) / s
	byte 0x0000000000000000000000000000000000000000000000000000000000000004
	frame_dig -1 // x: uint256
	b*
	frame_dig -2 // y: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 4 // D4: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:889
	// D5 = (((<uint256>4 * x * y) / s) * priceMinSqrt) / s / priceMaxSqrt
	byte 0x0000000000000000000000000000000000000000000000000000000000000004
	frame_dig -1 // x: uint256
	b*
	frame_dig -2 // y: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig -5 // priceMinSqrt: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig -6 // priceMaxSqrt: uint256
	b/
	frame_bury 5 // D5: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:890
	// D = D1 + D2 + D3 + D4 - D5
	frame_dig 1 // D1: unsafe uint256
	frame_dig 2 // D2: unsafe uint256
	b+
	frame_dig 3 // D3: unsafe uint256
	b+
	frame_dig 4 // D4: unsafe uint256
	b+
	frame_dig 5 // D5: unsafe uint256
	b-
	frame_bury 6 // D: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:894
	// L1 = (x * priceMinSqrt) / s
	frame_dig -1 // x: uint256
	frame_dig -5 // priceMinSqrt: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 7 // L1: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:897
	// L2 = (y * s) / priceMaxSqrt
	frame_dig -2 // y: uint256
	frame_dig 0 // s: uint256
	b*
	frame_dig -6 // priceMaxSqrt: uint256
	b/
	frame_bury 8 // L2: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:899
	// L3_0 = <uint256>2
	byte 0x0000000000000000000000000000000000000000000000000000000000000002
	frame_bury 9 // L3_0: uint256

	// contracts\BiatecClammPool.algo.ts:900
	// L3_1 = L3_0 * priceMinSqrt
	byte 0x0000000000000000000000000000000000000000000000000000000000000002 // L3_0: uint256
	frame_dig -5 // priceMinSqrt: uint256
	b*
	frame_bury 10 // L3_1: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:902
	// L3_2 = L3_1 * s
	frame_dig 10 // L3_1: unsafe uint256
	frame_dig 0 // s: uint256
	b*
	frame_bury 11 // L3_2: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:903
	// L3 = L3_2 / priceMaxSqrt
	frame_dig 11 // L3_2: unsafe uint256
	frame_dig -6 // priceMaxSqrt: uint256
	b/
	frame_bury 12 // L3: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:906
	// D_SQRT = sqrt(s * D)
	frame_dig 0 // s: uint256
	frame_dig 6 // D: unsafe uint256
	b*
	bsqrt
	frame_bury 13 // D_SQRT: unsafe uint256

	// *if34_condition
	// contracts\BiatecClammPool.algo.ts:908
	// <uint256>2 * s > L3
	byte 0x0000000000000000000000000000000000000000000000000000000000000002
	frame_dig 0 // s: uint256
	b*
	frame_dig 12 // L3: unsafe uint256
	b>
	bz *if34_end

	// *if34_consequent
	// contracts\BiatecClammPool.algo.ts:909
	// nom = L1 + L2 + D_SQRT
	frame_dig 7 // L1: unsafe uint256
	frame_dig 8 // L2: unsafe uint256
	b+
	frame_dig 13 // D_SQRT: unsafe uint256
	b+
	frame_bury 14 // nom: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:910
	// den = <uint256>2 * s - L3
	byte 0x0000000000000000000000000000000000000000000000000000000000000002
	frame_dig 0 // s: uint256
	b*
	frame_dig 12 // L3: unsafe uint256
	b-
	frame_bury 15 // den: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:911
	// ret = (s * nom) / den
	frame_dig 0 // s: uint256
	frame_dig 14 // nom: unsafe uint256
	b*
	frame_dig 15 // den: unsafe uint256
	b/
	frame_bury 16 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:912
	// return ret;
	frame_dig 16 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 16
	retsub

*if34_end:
	// contracts\BiatecClammPool.algo.ts:914
	// nom = L1 + L2 - D_SQRT
	frame_dig 7 // L1: unsafe uint256
	frame_dig 8 // L2: unsafe uint256
	b+
	frame_dig 13 // D_SQRT: unsafe uint256
	b-
	frame_bury 17 // nom: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:915
	// den = L3 - <uint256>2 * s
	frame_dig 12 // L3: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000002
	frame_dig 0 // s: uint256
	b*
	b-
	frame_bury 18 // den: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:916
	// ret = (s * nom) / den
	frame_dig 0 // s: uint256
	frame_dig 17 // nom: unsafe uint256
	b*
	frame_dig 18 // den: unsafe uint256
	b/
	frame_bury 19 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:917
	// return ret;
	frame_dig 19 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 19
	retsub

// calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256
*abi_route_calculatePrice:
	// The ABI return prefix
	byte 0x151f7c75

	// liquidity: uint256
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// priceMaxSqrt: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// priceMinSqrt: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// assetBQuantity: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// assetAQuantity: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256
	callsub calculatePrice
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculatePrice(assetAQuantity: uint256, assetBQuantity: uint256, priceMinSqrt: uint256, priceMaxSqrt: uint256, liquidity: uint256): uint256
//
// Get the current price when asset a has x
// @param assetAQuantity x
// @param assetBQuantity y
// @param priceMinSqrt sqrt(priceMin)
// @param priceMaxSqrt sqrt(priceMax)
// @param liquidity Current pool liquidity - L variable
// @returns the price with specified quantity with the price range set in the contract
calculatePrice:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// contracts\BiatecClammPool.algo.ts:941
	// s = SCALE as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00
	frame_bury 0 // s: uint256

	// contracts\BiatecClammPool.algo.ts:942
	// a = priceMinSqrt
	frame_dig -3 // priceMinSqrt: uint256
	frame_bury 1 // a: uint256

	// contracts\BiatecClammPool.algo.ts:943
	// b = priceMaxSqrt
	frame_dig -4 // priceMaxSqrt: uint256
	frame_bury 2 // b: uint256

	// contracts\BiatecClammPool.algo.ts:944
	// P1 = (liquidity * a) / s
	frame_dig -5 // liquidity: uint256
	frame_dig 1 // a: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 3 // P1: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:945
	// P2 = (liquidity * s) / b
	frame_dig -5 // liquidity: uint256
	frame_dig 0 // s: uint256
	b*
	frame_dig 2 // b: uint256
	b/
	frame_bury 4 // P2: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:946
	// Nom = assetBQuantity + P1
	frame_dig -2 // assetBQuantity: uint256
	frame_dig 3 // P1: unsafe uint256
	b+
	frame_bury 5 // Nom: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:947
	// Denom = assetAQuantity + P2
	frame_dig -1 // assetAQuantity: uint256
	frame_dig 4 // P2: unsafe uint256
	b+
	frame_bury 6 // Denom: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:948
	// ret = (Nom * s) / Denom
	frame_dig 5 // Nom: unsafe uint256
	frame_dig 0 // s: uint256
	b*
	frame_dig 6 // Denom: unsafe uint256
	b/
	frame_bury 7 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:949
	// return ret;
	frame_dig 7 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256
*abi_route_calculateAssetBWithdrawOnAssetADeposit:
	// The ABI return prefix
	byte 0x151f7c75

	// liqudity: uint256
	txna ApplicationArgs 6
	dup
	len
	int 32
	==
	assert

	// priceMaxSqrt: uint256
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// priceMinSqrt: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// assetBBalance: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// assetABalance: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// inAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256
	callsub calculateAssetBWithdrawOnAssetADeposit
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateAssetBWithdrawOnAssetADeposit(inAmount: uint256, assetABalance: uint256, assetBBalance: uint256, priceMinSqrt: uint256, priceMaxSqrt: uint256, liqudity: uint256): uint256
//
// Calculates how much asset B will be taken from the smart contract on asset A deposit
// @param inAmount Asset A amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
// @param assetABalance Asset A balance. Variable ab, in base scale
// @param assetBBalance Asset B balance. Variable bb, in base scale
// @param priceMinSqrt sqrt(Min price). Variable pMinS, in base scale
// @param priceMaxSqrt sqrt(Max price). Variable pMaxS, in base scale
// @param liqudity sqrt(Max price). Variable L, in base scale
// @returns Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
calculateAssetBWithdrawOnAssetADeposit:
	proto 6 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 12

	// contracts\BiatecClammPool.algo.ts:987
	// s = SCALE as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00
	frame_bury 0 // s: uint256

	// contracts\BiatecClammPool.algo.ts:988
	// x = assetABalance
	frame_dig -2 // assetABalance: uint256
	frame_bury 1 // x: uint256

	// contracts\BiatecClammPool.algo.ts:989
	// y = assetBBalance
	frame_dig -3 // assetBBalance: uint256
	frame_bury 2 // y: uint256

	// contracts\BiatecClammPool.algo.ts:990
	// a = priceMinSqrt
	frame_dig -4 // priceMinSqrt: uint256
	frame_bury 3 // a: uint256

	// contracts\BiatecClammPool.algo.ts:991
	// b = priceMaxSqrt
	frame_dig -5 // priceMaxSqrt: uint256
	frame_bury 4 // b: uint256

	// contracts\BiatecClammPool.algo.ts:992
	// L = liqudity
	frame_dig -6 // liqudity: uint256
	frame_bury 5 // L: uint256

	// contracts\BiatecClammPool.algo.ts:994
	// P1 = (((((a /* 10D */ * b) /* 10D */ / s) * inAmount) /* AD */ / s) * L) /* 10D */ / s
	frame_dig 3 // a: uint256
	frame_dig 4 // b: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig 5 // L: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 6 // P1: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:996
	// P2 = (((b /* 10D */ * inAmount) /* AD */ / s) * y) /* BD */ / s
	frame_dig 4 // b: uint256
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig 2 // y: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 7 // P2: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:998
	// P3 = (b /* 10D */ * inAmount) /* AD */ / s
	frame_dig 4 // b: uint256
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 8 // P3: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1000
	// P4 = (b /* 10D */ * x) /* 10D */ / s
	frame_dig 4 // b: uint256
	frame_dig 1 // x: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 9 // P4: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1002
	// P12 = P1 + P2
	frame_dig 6 // P1: unsafe uint256
	frame_dig 7 // P2: unsafe uint256
	b+
	frame_bury 10 // P12: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1004
	// P345 = P3 + P4 + L
	frame_dig 8 // P3: unsafe uint256
	frame_dig 9 // P4: unsafe uint256
	b+
	frame_dig 5 // L: uint256
	b+
	frame_bury 11 // P345: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1006
	// ret = (P12 * s) / P345
	frame_dig 10 // P12: unsafe uint256
	frame_dig 0 // s: uint256
	b*
	frame_dig 11 // P345: unsafe uint256
	b/
	frame_bury 12 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1007
	// return ret;
	frame_dig 12 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 12
	retsub

// calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256
*abi_route_calculateAssetAWithdrawOnAssetBDeposit:
	// The ABI return prefix
	byte 0x151f7c75

	// liqudity: uint256
	txna ApplicationArgs 6
	dup
	len
	int 32
	==
	assert

	// priceMaxSqrt: uint256
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// priceMinSqrt: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// assetBBalance: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// assetABalance: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// inAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256
	callsub calculateAssetAWithdrawOnAssetBDeposit
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateAssetAWithdrawOnAssetBDeposit(inAmount: uint256, assetABalance: uint256, assetBBalance: uint256, priceMinSqrt: uint256, priceMaxSqrt: uint256, liqudity: uint256): uint256
//
// Calculates how much asset A will be taken from the smart contract on asset B deposit
// @param inAmount Asset B amount in Base decimal representation.. If asset has 6 decimals, 1 is represented as 1000000000
// @param assetABalance Asset A balance. Variable ab, in base scale
// @param assetBBalance Asset B balance. Variable bb, in base scale
// @param priceMinSqrt sqrt(Min price). Variable pMinS, in base scale
// @param priceMaxSqrt sqrt(Max price). Variable pMaxS, in base scale
// @param liqudity sqrt(Max price). Variable L, in base scale
//
// @returns Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
calculateAssetAWithdrawOnAssetBDeposit:
	proto 6 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 13

	// contracts\BiatecClammPool.algo.ts:1042
	// s = SCALE as uint256
	byte 0x000000000000000000000000000000000000000000000000000000003b9aca00
	frame_bury 0 // s: uint256

	// contracts\BiatecClammPool.algo.ts:1043
	// x = assetABalance
	frame_dig -2 // assetABalance: uint256
	frame_bury 1 // x: uint256

	// contracts\BiatecClammPool.algo.ts:1044
	// y = assetBBalance
	frame_dig -3 // assetBBalance: uint256
	frame_bury 2 // y: uint256

	// contracts\BiatecClammPool.algo.ts:1045
	// a = priceMinSqrt
	frame_dig -4 // priceMinSqrt: uint256
	frame_bury 3 // a: uint256

	// contracts\BiatecClammPool.algo.ts:1046
	// b = priceMaxSqrt
	frame_dig -5 // priceMaxSqrt: uint256
	frame_bury 4 // b: uint256

	// contracts\BiatecClammPool.algo.ts:1047
	// L = liqudity
	frame_dig -6 // liqudity: uint256
	frame_bury 5 // L: uint256

	// contracts\BiatecClammPool.algo.ts:1050
	// P1 = (inAmount * L) / s
	frame_dig -1 // inAmount: uint256
	frame_dig 5 // L: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 6 // P1: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1052
	// P2 = (((b * inAmount) / s) * x) / s
	frame_dig 4 // b: uint256
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig 1 // x: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 7 // P2: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1054
	// nom = P1 + P2
	frame_dig 6 // P1: unsafe uint256
	frame_dig 7 // P2: unsafe uint256
	b+
	frame_bury 8 // nom: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1056
	// P3 = (((a * b) / s) * L) / s
	frame_dig 3 // a: uint256
	frame_dig 4 // b: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_dig 5 // L: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 9 // P3: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1058
	// P4 = (b * inAmount) / s
	frame_dig 4 // b: uint256
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 10 // P4: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1060
	// P5 = (b * y) / s
	frame_dig 4 // b: uint256
	frame_dig 2 // y: uint256
	b*
	frame_dig 0 // s: uint256
	b/
	frame_bury 11 // P5: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1062
	// denom = P3 + P4 + P5
	frame_dig 9 // P3: unsafe uint256
	frame_dig 10 // P4: unsafe uint256
	b+
	frame_dig 11 // P5: unsafe uint256
	b+
	frame_bury 12 // denom: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1064
	// ret = (nom * s) / denom
	frame_dig 8 // nom: unsafe uint256
	frame_dig 0 // s: uint256
	b*
	frame_dig 12 // denom: unsafe uint256
	b/
	frame_bury 13 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1065
	// return ret;
	frame_dig 13 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 13
	retsub

// calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256
*abi_route_calculateAssetAWithdrawOnLpDeposit:
	// The ABI return prefix
	byte 0x151f7c75

	// liqudity: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// assetABalance: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// inAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256
	callsub calculateAssetAWithdrawOnLpDeposit
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateAssetAWithdrawOnLpDeposit(inAmount: uint256, assetABalance: uint256, liqudity: uint256): uint256
//
// Calculates how much asset A will be taken from the smart contract on LP asset deposit
// @param inAmount LP Asset amount in Base decimal representation..
// @param assetABalance Asset A balance. Variable ab, in base scale
// @param liqudity Current liqudity. Variable L, in base scale
//
// @returns Amount of asset A to be given to the caller before fees. The result is in Base decimals (9)
calculateAssetAWithdrawOnLpDeposit:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecClammPool.algo.ts:1081
	// ret = (assetABalance * inAmount) / liqudity
	frame_dig -2 // assetABalance: uint256
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig -3 // liqudity: uint256
	b/
	frame_bury 0 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1082
	// return ret;
	frame_dig 0 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0
	retsub

// calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256
*abi_route_calculateAssetBWithdrawOnLpDeposit:
	// The ABI return prefix
	byte 0x151f7c75

	// liqudity: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// assetBBalance: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// inAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256
	callsub calculateAssetBWithdrawOnLpDeposit
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateAssetBWithdrawOnLpDeposit(inAmount: uint256, assetBBalance: uint256, liqudity: uint256): uint256
//
// Calculates how much asset B will be taken from the smart contract on LP asset deposit
// @param inAmount LP Asset amount in Base decimal representation..
// @param assetBBalance Asset B balance. Variable ab, in base scale
// @param liqudity Current liqudity. Variable L, in base scale
//
// @returns Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
calculateAssetBWithdrawOnLpDeposit:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecClammPool.algo.ts:1098
	// ret = (assetBBalance * inAmount) / liqudity
	frame_dig -2 // assetBBalance: uint256
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig -3 // liqudity: uint256
	b/
	frame_bury 0 // ret: unsafe uint256

	// contracts\BiatecClammPool.algo.ts:1099
	// return ret;
	frame_dig 0 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0
	retsub

// calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256
*abi_route_calculateAssetBDepositOnAssetADeposit:
	// The ABI return prefix
	byte 0x151f7c75

	// assetBBalance: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// assetABalance: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// inAmountB: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// inAmountA: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256
	callsub calculateAssetBDepositOnAssetADeposit
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateAssetBDepositOnAssetADeposit(inAmountA: uint256, inAmountB: uint256, assetABalance: uint256, assetBBalance: uint256): uint256
//
// Calculates how much asset B should be deposited when user deposit asset a and b.
//
// On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
//
// @param inAmountA Asset A amount in Base decimal representation
// @param inAmountB Asset B amount in Base decimal representation
// @param assetABalance Asset A balance. Variable ab, in base scale
// @param assetBBalance Asset B balance. Variable bb, in base scale
//
// @returns Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
calculateAssetBDepositOnAssetADeposit:
	proto 4 1

	// *if35_condition
	// contracts\BiatecClammPool.algo.ts:1121
	// assetABalance > <uint256>0
	frame_dig -3 // assetABalance: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz *if35_end

	// *if35_consequent
	// contracts\BiatecClammPool.algo.ts:1122
	// return (inAmountA * assetBBalance) / assetABalance;
	frame_dig -1 // inAmountA: uint256
	frame_dig -4 // assetBBalance: uint256
	b*
	frame_dig -3 // assetABalance: uint256
	b/
	retsub

*if35_end:
	// contracts\BiatecClammPool.algo.ts:1125
	// return inAmountB;
	frame_dig -2 // inAmountB: uint256
	retsub

// calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256
*abi_route_calculateAssetADepositOnAssetBDeposit:
	// The ABI return prefix
	byte 0x151f7c75

	// assetBBalance: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// assetABalance: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// inAmountB: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// inAmountA: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256
	callsub calculateAssetADepositOnAssetBDeposit
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// calculateAssetADepositOnAssetBDeposit(inAmountA: uint256, inAmountB: uint256, assetABalance: uint256, assetBBalance: uint256): uint256
//
// Calculates how much asset A should be deposited when user deposit asset a and b
//
// On deposit min(calculateAssetBDepositOnAssetADeposit, calculateAssetADepositOnAssetBDeposit) should be considered for the real deposit and rest should be swapped or returned back to user
//
// @param inAmountA Asset A amount in Base decimal representation
// @param inAmountB Asset B amount in Base decimal representation
// @param assetABalance Asset A balance. Variable ab, in base scale
// @param assetBBalance Asset B balance. Variable bb, in base scale
//
// @returns Amount of asset A to be deposited. The result is in Base decimals (9)
calculateAssetADepositOnAssetBDeposit:
	proto 4 1

	// *if36_condition
	// contracts\BiatecClammPool.algo.ts:1147
	// assetBBalance > <uint256>0
	frame_dig -4 // assetBBalance: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz *if36_end

	// *if36_consequent
	// contracts\BiatecClammPool.algo.ts:1148
	// return (inAmountB * assetABalance) / assetBBalance;
	frame_dig -2 // inAmountB: uint256
	frame_dig -3 // assetABalance: uint256
	b*
	frame_dig -4 // assetBBalance: uint256
	b/
	retsub

*if36_end:
	// contracts\BiatecClammPool.algo.ts:1151
	// return inAmountA;
	frame_dig -1 // inAmountA: uint256
	retsub

// status(uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
*abi_route_status:
	// The ABI return prefix
	byte 0x151f7c75

	// assetLP: uint64
	txna ApplicationArgs 2
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute status(uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	callsub status
	concat
	log
	int 1
	return

// status(appBiatecConfigProvider: AppID, assetLP: AssetID): AmmStatus
status:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\BiatecClammPool.algo.ts:1156
	// assert(
	//       appBiatecConfigProvider === this.appBiatecConfigProvider.value,
	//       'appBiatecConfigProvider must match to the global variable app id'
	//     )
	frame_dig -1 // appBiatecConfigProvider: AppID
	byte 0x42 // "B"
	app_global_get
	==

	// appBiatecConfigProvider must match to the global variable app id
	assert

	// contracts\BiatecClammPool.algo.ts:1160
	// assert(this.assetLP.value === assetLP.id, 'LP asset does not match')
	byte 0x6c70 // "lp"
	app_global_get
	frame_dig -2 // assetLP: AssetID
	==

	// LP asset does not match
	assert

	// contracts\BiatecClammPool.algo.ts:1161
	// biatecFee = this.appBiatecConfigProvider.value.globalState('f') as uint256
	byte 0x42 // "B"
	app_global_get
	byte 0x66 // "f"
	app_global_get_ex
	assert
	frame_bury 0 // biatecFee: uint256

	// contracts\BiatecClammPool.algo.ts:1163
	// return {
	//       assetA: this.assetA.value,
	//       assetB: this.assetB.value,
	//       poolToken: this.assetLP.value,
	//       assetABalance: this.assetABalance.value as uint64,
	//       assetBBalance: this.assetBBalance.value as uint64,
	//       fee: this.fee.value,
	//       biatecFee: biatecFee as uint64,
	//       currentLiqudity: this.Liqudity.value as uint64,
	//       liqudityBiatecFromFees: this.LiqudityBiatecFromFees.value as uint64,
	//       liqudityUsersFromFees: this.LiqudityUsersFromFees.value as uint64,
	//       price: this.ratio.value as uint64,
	//       priceMaxSqrt: this.priceMaxSqrt.value as uint64,
	//       priceMinSqrt: this.priceMinSqrt.value as uint64,
	//       releasedLiqudity: this.calculateDistributedLiquidity(assetLP, <uint256>0) as uint64,
	//       scale: SCALE,
	//       verificationClass: this.verificationClass.value,
	//     };
	byte 0x000000003b9aca00
	byte 0x6162 // "ab"
	app_global_get
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x6262 // "bb"
	app_global_get
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x704d696e53 // "pMinS"
	app_global_get
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x704d617853 // "pMaxS"
	app_global_get
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x4c // "L"
	app_global_get
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_dig -2 // assetLP: AssetID
	callsub calculateDistributedLiquidity
	dup
	bitlen
	int 64
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 8
	-
	swap
	substring3
	btoi
	itob
	concat
	byte 0x4c75 // "Lu"
	app_global_get
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x4c62 // "Lb"
	app_global_get
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x61 // "a"
	app_global_get
	itob
	concat
	byte 0x62 // "b"
	app_global_get
	itob
	concat
	byte 0x6c70 // "lp"
	app_global_get
	itob
	concat
	byte 0x72 // "r"
	app_global_get
	itob
	concat
	byte 0x66 // "f"
	app_global_get
	itob
	concat
	frame_dig 0 // biatecFee: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itob
	concat
	byte 0x63 // "c"
	app_global_get
	itob
	concat

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "getCurrentPrice()uint64"
	method "getPriceDivider()uint64"
	method "getLPTokenId()uint64"
	method "bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint8)uint64"
	method "addLiquidity(uint64,uint64,txn,txn,uint64,uint64,uint64)uint64"
	method "removeLiquidity(axfer,uint64,uint64,uint64)uint256"
	method "swap(uint64,uint64,txn,uint64,uint64,uint64)uint256"
	method "calculateDistributedLiquidity(uint64,uint256)uint256"
	method "calculateLiquidity(uint256,uint256,uint256,uint256,uint256,uint256)uint256"
	method "calculatePrice(uint256,uint256,uint256,uint256,uint256)uint256"
	method "calculateAssetBWithdrawOnAssetADeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256"
	method "calculateAssetAWithdrawOnAssetBDeposit(uint256,uint256,uint256,uint256,uint256,uint256)uint256"
	method "calculateAssetAWithdrawOnLpDeposit(uint256,uint256,uint256)uint256"
	method "calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256"
	method "calculateAssetBDepositOnAssetADeposit(uint256,uint256,uint256,uint256)uint256"
	method "calculateAssetADepositOnAssetBDeposit(uint256,uint256,uint256,uint256)uint256"
	method "status(uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
	txna ApplicationArgs 0
	match *abi_route_getCurrentPrice *abi_route_getPriceDivider *abi_route_getLPTokenId *abi_route_bootstrap *abi_route_addLiquidity *abi_route_removeLiquidity *abi_route_swap *abi_route_calculateDistributedLiquidity *abi_route_calculateLiquidity *abi_route_calculatePrice *abi_route_calculateAssetBWithdrawOnAssetADeposit *abi_route_calculateAssetAWithdrawOnAssetBDeposit *abi_route_calculateAssetAWithdrawOnLpDeposit *abi_route_calculateAssetBWithdrawOnLpDeposit *abi_route_calculateAssetBDepositOnAssetADeposit *abi_route_calculateAssetADepositOnAssetBDeposit *abi_route_status
	err