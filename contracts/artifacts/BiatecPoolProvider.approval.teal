#pragma version 10
intcblock 8 0 64 368 1 264 296 392 400 504 608 56 88 160 192 256 272 280 360 376 384 464 472 480 488 568 576 584 592 48 72 152 168 176 288 6 80 184 5 496 600 2 304 312 320 328 336 344 408 416 424 432 440 448 512 520 528 536 544 552 616 624 632 640 648 656 16 32 96 104 112 120 128 136 200 208 216 224 232 240
bytecblock 0x0000000000000000 0x73 0x70 0x 0xFFFFFFFFFFFFFFFF 0x0a8101 0x7031 0x7032 0x7033 0x7034 0x7035 0x7036 0x61 0x42 0x76657272 0x766572 0x151f7c75 0x6566

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 35 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// bootstrap(uint64)void
*abi_route_bootstrap:
	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64)void
	callsub bootstrap
	intc 4 // 1
	return

// bootstrap(appBiatecConfigProvider: AppID): void
//
// Biatec deploys single pool provider smart contract
// @param appBiatecConfigProvider Biatec amm provider
bootstrap:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\BiatecPoolProvider.algo.ts:163
	// assert(this.txn.sender === this.app.creator, 'Only creator of the app can set it up')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only creator of the app can set it up
	assert

	// contracts\BiatecPoolProvider.algo.ts:164
	// this.appBiatecConfigProvider.value = appBiatecConfigProvider
	bytec 13 //  "B"
	frame_dig -1 // appBiatecConfigProvider: AppID
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:165
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 1 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 0 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:166
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 0 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert
	retsub

// getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
*abi_route_getCurrentStatus:
	// The ABI return prefix
	bytec 16 // 0x151f7c75

	// appPoolId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	callsub getCurrentStatus
	concat
	log
	intc 4 // 1
	return

// getCurrentStatus(appPoolId: AppID): AppPoolInfo
//
// Returns current status
//
// @param appPoolId Pool id to retrieve the stats
// @returns Pool info statistics
getCurrentStatus:
	proto 1 1

	// contracts\BiatecPoolProvider.algo.ts:177
	// return this.pools(appPoolId.id).value;
	bytec 2 //  "p"
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	box_get

	// box value does not exist: this.pools(appPoolId.id).value
	assert
	retsub

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 4 // 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\BiatecPoolProvider.algo.ts:184
	// log(version)
	pushbytes "BIATEC-PP-01-02-01"
	log

	// contracts\BiatecPoolProvider.algo.ts:185
	// this.period1.value = 60
	bytec 6 //  "p1"
	pushint 60
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:186
	// this.period2.value = 3600
	bytec 7 //  "p2"
	pushint 3600
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:187
	// this.period3.value = 3600 * 24
	bytec 8 //  "p3"
	pushint 86400
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:188
	// this.period4.value = 3600 * 24 * 7
	bytec 9 //  "p4"
	pushint 604800
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:189
	// this.period5.value = 3600 * 24 * 30
	bytec 10 //  "p5"
	pushint 2592000
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:190
	// this.period6.value = 3600 * 24 * 365
	bytec 11 //  "p6"
	pushint 31536000
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:191
	// this.defaultVerified.value = 0
	bytec 15 //  "ver"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:192
	// this.verifyRequirement.value = 0
	bytec 14 //  "verr"
	intc 1 // 0
	app_global_put
	retsub

// updateApplication(uint64,byte[])void
*abi_route_updateApplication:
	// newVersion: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateApplication(uint64,byte[])void
	callsub updateApplication
	intc 4 // 1
	return

// updateApplication(appBiatecConfigProvider: AppID, newVersion: bytes): void
//
// addressUdpater from global biatec configuration is allowed to update application
updateApplication:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dup

	// contracts\BiatecPoolProvider.algo.ts:199
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecPoolProvider.algo.ts:200
	// addressUdpater = appBiatecConfigProvider.globalState('u') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	pushbytes 0x75 // "u"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('u')
	assert
	frame_bury 0 // addressUdpater: address

	// contracts\BiatecPoolProvider.algo.ts:201
	// assert(this.txn.sender === addressUdpater, 'Only addressUdpater setup in the config can update application')
	txn Sender
	frame_dig 0 // addressUdpater: address
	==

	// Only addressUdpater setup in the config can update application
	assert

	// contracts\BiatecPoolProvider.algo.ts:202
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 1 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:203
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecPoolProvider.algo.ts:204
	// this.version.value = newVersion
	pushbytes 0x7363766572 // "scver"
	frame_dig -2 // newVersion: bytes
	app_global_put
	retsub

// registerPool(uint64,uint64,uint64,uint8)void
*abi_route_registerPool:
	// verificationClass: uint8
	txna ApplicationArgs 4
	dup
	len
	intc 4 // 1
	==

	// argument 0 (verificationClass) for registerPool must be a uint8
	assert
	btoi

	// assetB: uint64
	txna ApplicationArgs 3
	btoi

	// assetA: uint64
	txna ApplicationArgs 2
	btoi

	// appPoolId: uint64
	txna ApplicationArgs 1
	btoi

	// execute registerPool(uint64,uint64,uint64,uint8)void
	callsub registerPool
	intc 4 // 1
	return

// registerPool(appPoolId: AppID, assetA: AssetID, assetB: AssetID, verificationClass: uint8): void
//
// This method is called by constructor of the luquidity pool
//
// @param appPoolId Luquidity pool id
// @param assetA Asset A
// @param assetB Asset B
// @param verificationClass Verification class
registerPool:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 3

	// contracts\BiatecPoolProvider.algo.ts:216
	// assert(!this.pools(appPoolId.id).exists)
	bytec 2 //  "p"
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts\BiatecPoolProvider.algo.ts:217
	// assert(globals.callerApplicationID === appPoolId)
	global CallerApplicationID
	frame_dig -1 // appPoolId: AppID
	==
	assert

	// *if0_condition
	// contracts\BiatecPoolProvider.algo.ts:218
	// this.assets(assetA.id).exists
	bytec 12 //  "a"
	frame_dig -2 // assetA: AssetID
	itob
	concat
	box_len
	swap
	pop
	bz *if0_else

	// *if0_consequent
	// contracts\BiatecPoolProvider.algo.ts:219
	// this.assets(assetA.id).value.push(appPoolId)
	bytec 12 //  "a"
	frame_dig -2 // assetA: AssetID
	itob
	concat
	box_get

	// box value does not exist: this.assets(assetA.id).value
	assert
	extract 2 0
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	bytec 12 //  "a"
	frame_dig -2 // assetA: AssetID
	itob
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 0 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	b *if0_end

*if0_else:
	// contracts\BiatecPoolProvider.algo.ts:221
	// newWhitelist: AppID[] = [appPoolId]
	frame_dig -1 // appPoolId: AppID
	itob
	frame_bury 0 // newWhitelist: AppID[]

	// contracts\BiatecPoolProvider.algo.ts:222
	// this.assets(assetA.id).value = newWhitelist
	bytec 12 //  "a"
	frame_dig -2 // assetA: AssetID
	itob
	concat
	dup
	box_del
	pop
	frame_dig 0 // newWhitelist: AppID[]
	dup
	len
	intc 0 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*if0_end:
	// *if1_condition
	// contracts\BiatecPoolProvider.algo.ts:225
	// this.assets(assetB.id).exists
	bytec 12 //  "a"
	frame_dig -3 // assetB: AssetID
	itob
	concat
	box_len
	swap
	pop
	bz *if1_else

	// *if1_consequent
	// contracts\BiatecPoolProvider.algo.ts:226
	// this.assets(assetB.id).value.push(appPoolId)
	bytec 12 //  "a"
	frame_dig -3 // assetB: AssetID
	itob
	concat
	box_get

	// box value does not exist: this.assets(assetB.id).value
	assert
	extract 2 0
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	bytec 12 //  "a"
	frame_dig -3 // assetB: AssetID
	itob
	concat
	dup
	box_del
	pop
	swap
	dup
	len
	intc 0 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	b *if1_end

*if1_else:
	// contracts\BiatecPoolProvider.algo.ts:228
	// newWhitelist: AppID[] = [appPoolId]
	frame_dig -1 // appPoolId: AppID
	itob
	frame_bury 1 // newWhitelist: AppID[]

	// contracts\BiatecPoolProvider.algo.ts:229
	// this.assets(assetB.id).value = newWhitelist
	bytec 12 //  "a"
	frame_dig -3 // assetB: AssetID
	itob
	concat
	dup
	box_del
	pop
	frame_dig 1 // newWhitelist: AppID[]
	dup
	len
	intc 0 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*if1_end:
	// contracts\BiatecPoolProvider.algo.ts:231
	// data: AppPoolInfo = {
	//       assetA: assetA.id,
	//       assetB: assetB.id,
	//       isVerified: this.defaultVerified.value,
	//       verificationClass: verificationClass as uint64,
	//
	//       latestPrice: 0,
	//
	//       period1Duration: this.period1.value,
	//
	//       period1NowFeeA: <uint64>0,
	//       period1NowFeeB: <uint64>0,
	//       period1NowTime: 0,
	//       period1NowVolumeA: <uint64>0,
	//       period1NowVolumeB: <uint64>0,
	//       period1NowVWAP: <uint64>0,
	//       period1PrevFeeA: <uint64>0,
	//       period1PrevFeeB: <uint64>0,
	//       period1PrevTime: 0,
	//       period1PrevVolumeA: <uint64>0,
	//       period1PrevVolumeB: <uint64>0,
	//       period1PrevVWAP: <uint64>0,
	//
	//       period2Duration: this.period2.value,
	//
	//       period2NowFeeA: <uint64>0,
	//       period2NowFeeB: <uint64>0,
	//       period2NowTime: 0,
	//       period2NowVolumeA: <uint64>0,
	//       period2NowVolumeB: <uint64>0,
	//       period2NowVWAP: <uint64>0,
	//       period2PrevFeeA: <uint64>0,
	//       period2PrevFeeB: <uint64>0,
	//       period2PrevTime: 0,
	//       period2PrevVolumeA: <uint64>0,
	//       period2PrevVolumeB: <uint64>0,
	//       period2PrevVWAP: <uint64>0,
	//
	//       period3Duration: this.period3.value,
	//
	//       period3NowFeeA: <uint64>0,
	//       period3NowFeeB: <uint64>0,
	//       period3NowTime: 0,
	//       period3NowVolumeA: <uint64>0,
	//       period3NowVolumeB: <uint64>0,
	//       period3NowVWAP: <uint64>0,
	//       period3PrevFeeA: <uint64>0,
	//       period3PrevFeeB: <uint64>0,
	//       period3PrevTime: 0,
	//       period3PrevVolumeA: <uint64>0,
	//       period3PrevVolumeB: <uint64>0,
	//       period3PrevVWAP: <uint64>0,
	//
	//       period4Duration: this.period4.value,
	//
	//       period4NowFeeA: <uint64>0,
	//       period4NowFeeB: <uint64>0,
	//       period4NowTime: 0,
	//       period4NowVolumeA: <uint64>0,
	//       period4NowVolumeB: <uint64>0,
	//       period4NowVWAP: <uint64>0,
	//       period4PrevFeeA: <uint64>0,
	//       period4PrevFeeB: <uint64>0,
	//       period4PrevTime: 0,
	//       period4PrevVolumeA: <uint64>0,
	//       period4PrevVolumeB: <uint64>0,
	//       period4PrevVWAP: <uint64>0,
	//
	//       period5Duration: this.period5.value,
	//
	//       period5NowFeeA: <uint64>0,
	//       period5NowFeeB: <uint64>0,
	//       period5NowTime: 0,
	//       period5NowVolumeA: <uint64>0,
	//       period5NowVolumeB: <uint64>0,
	//       period5NowVWAP: <uint64>0,
	//       period5PrevFeeA: <uint64>0,
	//       period5PrevFeeB: <uint64>0,
	//       period5PrevTime: 0,
	//       period5PrevVolumeA: <uint64>0,
	//       period5PrevVolumeB: <uint64>0,
	//       period5PrevVWAP: <uint64>0,
	//
	//       period6Duration: this.period6.value,
	//
	//       period6NowFeeA: <uint64>0,
	//       period6NowFeeB: <uint64>0,
	//       period6NowTime: 0,
	//       period6NowVolumeA: <uint64>0,
	//       period6NowVolumeB: <uint64>0,
	//       period6NowVWAP: <uint64>0,
	//       period6PrevFeeA: <uint64>0,
	//       period6PrevFeeB: <uint64>0,
	//       period6PrevTime: 0,
	//       period6PrevVolumeA: <uint64>0,
	//       period6PrevVolumeB: <uint64>0,
	//       period6PrevVWAP: <uint64>0,
	//     }
	bytec 15 //  "ver"
	app_global_get
	itob
	frame_dig -2 // assetA: AssetID
	itob
	concat
	frame_dig -3 // assetB: AssetID
	itob
	concat
	frame_dig -4 // verificationClass: uint8
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 6 //  "p1"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 7 //  "p2"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 8 //  "p3"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 9 //  "p4"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 10 //  "p5"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 11 //  "p6"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	frame_bury 2 // data: AppPoolInfo

	// contracts\BiatecPoolProvider.algo.ts:329
	// this.pools(appPoolId.id).value = data
	bytec 2 //  "p"
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	frame_dig 2 // data: AppPoolInfo
	box_put

	// contracts\BiatecPoolProvider.algo.ts:330
	// aggregatedIndex: AssetsCombined = {
	//       assetA: assetA.id,
	//       assetB: assetB.id,
	//     }
	frame_dig -2 // assetA: AssetID
	itob
	frame_dig -3 // assetB: AssetID
	itob
	concat
	frame_bury 3 // aggregatedIndex: AssetsCombined

	// *if2_condition
	// contracts\BiatecPoolProvider.algo.ts:334
	// !this.poolsAggregated(aggregatedIndex).exists
	bytec 1 //  "s"
	frame_dig 3 // aggregatedIndex: AssetsCombined
	concat
	box_len
	swap
	pop
	!
	bz *if2_end

	// *if2_consequent
	// contracts\BiatecPoolProvider.algo.ts:335
	// this.poolsAggregated(aggregatedIndex).value = data
	bytec 1 //  "s"
	frame_dig 3 // aggregatedIndex: AssetsCombined
	concat
	frame_dig 2 // data: AppPoolInfo
	box_put

*if2_end:
	retsub

// updatePriceBoxInfo(appPoolId: AppID, assetA: AssetID, assetB: AssetID, priceFrom: uint64, priceTo: uint64, amountA: uint64, amountB: uint64, feeAmountA: uint64, feeAmountB: uint64): AppPoolInfo
updatePriceBoxInfo:
	proto 9 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 29

	// contracts\BiatecPoolProvider.algo.ts:350
	// info = this.pools(appPoolId.id).value
	bytec 2 //  "p"
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	frame_bury 0 // storage key//info

	// contracts\BiatecPoolProvider.algo.ts:351
	// assert(assetA.id === info.assetA)
	frame_dig -2 // assetA: AssetID
	intc 0 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:352
	// assert(assetB.id === info.assetB)
	frame_dig -3 // assetB: AssetID
	intc 66 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:353
	// assert(amountA > 0 && amountB > 0)
	frame_dig -6 // amountA: uint64
	intc 1 // 0
	>
	dup
	bz *skip_and0
	frame_dig -7 // amountB: uint64
	intc 1 // 0
	>
	&&

*skip_and0:
	assert

	// contracts\BiatecPoolProvider.algo.ts:355
	// netAmountA = amountA - feeAmountA
	frame_dig -6 // amountA: uint64
	frame_dig -8 // feeAmountA: uint64
	-
	frame_bury 1 // netAmountA: uint64

	// contracts\BiatecPoolProvider.algo.ts:356
	// netAmountB = amountB - feeAmountB
	frame_dig -7 // amountB: uint64
	frame_dig -9 // feeAmountB: uint64
	-
	frame_bury 2 // netAmountB: uint64

	// contracts\BiatecPoolProvider.algo.ts:358
	// price = (priceFrom + priceTo) / <uint64>2
	frame_dig -4 // priceFrom: uint64
	frame_dig -5 // priceTo: uint64
	+
	intc 41 // 2
	/
	frame_bury 3 // price: uint64

	// contracts\BiatecPoolProvider.algo.ts:359
	// priceUint256 = price as uint256
	frame_dig 3 // price: uint64
	itob
	frame_bury 4 // priceUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:360
	// amountBUint256 = netAmountB as uint256
	frame_dig 2 // netAmountB: uint64
	itob
	frame_bury 5 // amountBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:361
	// info.latestPrice = price
	intc 67 //  headOffset
	frame_dig 3 // price: uint64
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:362
	// period1IterFromNowObj = info.period1NowTime / this.period1.value
	intc 12 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:362
	// this.period1.value
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 6 // period1IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:363
	// period1IterFromCurrTime = globals.latestTimestamp / this.period1.value
	global LatestTimestamp
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 7 // period1IterFromCurrTime: uint64

	// *if3_condition
	// contracts\BiatecPoolProvider.algo.ts:366
	// period1IterFromNowObj !== period1IterFromCurrTime
	frame_dig 6 // period1IterFromNowObj: uint64
	frame_dig 7 // period1IterFromCurrTime: uint64
	!=
	bz *if3_end

	// *if3_consequent
	// contracts\BiatecPoolProvider.algo.ts:368
	// info.period1PrevFeeA = info.period1NowFeeA
	intc 70 //  headOffset
	intc 2 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:369
	// info.period1NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 2 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:370
	// info.period1PrevFeeB = info.period1NowFeeB
	intc 71 //  headOffset
	intc 30 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:371
	// info.period1NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 30 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:372
	// info.period1PrevVWAP = info.period1NowVWAP
	intc 72 //  headOffset
	intc 36 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:373
	// info.period1PrevVolumeA = info.period1NowVolumeA
	intc 68 //  headOffset
	intc 29 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:374
	// info.period1NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 29 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:375
	// info.period1PrevVolumeB = info.period1NowVolumeB
	intc 69 //  headOffset
	intc 11 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:376
	// info.period1NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 11 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:377
	// info.period1PrevTime = info.period1NowTime
	intc 73 //  headOffset
	intc 12 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if4_condition
	// contracts\BiatecPoolProvider.algo.ts:378
	// info.period1NowTime === 0
	intc 12 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if4_else

	// *if4_consequent
	// contracts\BiatecPoolProvider.algo.ts:379
	// info.period1NowTime = globals.latestTimestamp
	intc 12 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if4_end

*if4_else:
	// contracts\BiatecPoolProvider.algo.ts:381
	// info.period1NowTime = period1IterFromCurrTime * this.period1.value
	intc 12 //  headOffset
	frame_dig 7 // period1IterFromCurrTime: uint64
	bytec 6 //  "p1"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if4_end:

*if3_end:
	// contracts\BiatecPoolProvider.algo.ts:385
	// info.period1NowFeeA = info.period1NowFeeA + feeAmountA
	intc 2 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:386
	// info.period1NowFeeB = info.period1NowFeeB + feeAmountB
	intc 30 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:387
	// period1NowVolumeBUint256 = info.period1NowVolumeB as uint256
	intc 11 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 8 // period1NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:388
	// period1NowVWAPUint256 = info.period1NowVWAP as uint256
	intc 36 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 9 // period1NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:389
	// info.period1NowVWAP = ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period1NowVolumeBUint256 + amountBUint256)) as uint64
	intc 36 //  headOffset
	frame_dig 8 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 9 // period1NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 8 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period1NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:391
	// info.period1NowVolumeA = info.period1NowVolumeA + netAmountA
	intc 29 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:392
	// info.period1NowVolumeB = info.period1NowVolumeB + netAmountB
	intc 11 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:395
	// period2IterFromNowObj = info.period2NowTime / this.period2.value
	intc 14 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:395
	// this.period2.value
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 10 // period2IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:396
	// period2IterFromCurrTime = globals.latestTimestamp / this.period2.value
	global LatestTimestamp
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 11 // period2IterFromCurrTime: uint64

	// *if5_condition
	// contracts\BiatecPoolProvider.algo.ts:399
	// period2IterFromNowObj !== period2IterFromCurrTime
	frame_dig 10 // period2IterFromNowObj: uint64
	frame_dig 11 // period2IterFromCurrTime: uint64
	!=
	bz *if5_end

	// *if5_consequent
	// contracts\BiatecPoolProvider.algo.ts:401
	// info.period2PrevFeeA = info.period2NowFeeA
	intc 76 //  headOffset
	intc 32 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:402
	// info.period2NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 32 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:403
	// info.period2PrevFeeB = info.period2NowFeeB
	intc 77 //  headOffset
	intc 33 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:404
	// info.period2NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 33 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:405
	// info.period2PrevVWAP = info.period2NowVWAP
	intc 78 //  headOffset
	intc 37 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:406
	// info.period2PrevVolumeA = info.period2NowVolumeA
	intc 74 //  headOffset
	intc 31 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:407
	// info.period2NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 31 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:408
	// info.period2PrevVolumeB = info.period2NowVolumeB
	intc 75 //  headOffset
	intc 13 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:409
	// info.period2NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 13 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:410
	// info.period2PrevTime = info.period2NowTime
	intc 79 //  headOffset
	intc 14 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if6_condition
	// contracts\BiatecPoolProvider.algo.ts:411
	// info.period2NowTime === 0
	intc 14 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if6_else

	// *if6_consequent
	// contracts\BiatecPoolProvider.algo.ts:412
	// info.period2NowTime = globals.latestTimestamp
	intc 14 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if6_end

*if6_else:
	// contracts\BiatecPoolProvider.algo.ts:414
	// info.period2NowTime = period2IterFromCurrTime * this.period2.value
	intc 14 //  headOffset
	frame_dig 11 // period2IterFromCurrTime: uint64
	bytec 7 //  "p2"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if6_end:

*if5_end:
	// contracts\BiatecPoolProvider.algo.ts:418
	// info.period2NowFeeA = info.period2NowFeeA + feeAmountA
	intc 32 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:419
	// info.period2NowFeeB = info.period2NowFeeB + feeAmountB
	intc 33 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:420
	// period2NowVolumeBUint256 = info.period2NowVolumeB as uint256
	intc 13 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 12 // period2NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:421
	// period2NowVWAPUint256 = info.period2NowVWAP as uint256
	intc 37 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 13 // period2NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:422
	// info.period2NowVWAP = ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period2NowVolumeBUint256 + amountBUint256)) as uint64
	intc 37 //  headOffset
	frame_dig 12 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 13 // period2NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 12 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period2NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:424
	// info.period2NowVolumeA = info.period2NowVolumeA + netAmountA
	intc 31 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:425
	// info.period2NowVolumeB = info.period2NowVolumeB + netAmountB
	intc 13 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:428
	// period3IterFromNowObj = info.period3NowTime / this.period3.value
	intc 6 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:428
	// this.period3.value
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 14 // period3IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:429
	// period3IterFromCurrTime = globals.latestTimestamp / this.period3.value
	global LatestTimestamp
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 15 // period3IterFromCurrTime: uint64

	// *if7_condition
	// contracts\BiatecPoolProvider.algo.ts:432
	// period3IterFromNowObj !== period3IterFromCurrTime
	frame_dig 14 // period3IterFromNowObj: uint64
	frame_dig 15 // period3IterFromCurrTime: uint64
	!=
	bz *if7_end

	// *if7_consequent
	// contracts\BiatecPoolProvider.algo.ts:434
	// info.period3PrevFeeA = info.period3NowFeeA
	intc 44 //  headOffset
	intc 16 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:435
	// info.period3NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 16 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:436
	// info.period3PrevFeeB = info.period3NowFeeB
	intc 45 //  headOffset
	intc 17 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:437
	// info.period3NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 17 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:438
	// info.period3PrevVWAP = info.period3NowVWAP
	intc 46 //  headOffset
	intc 34 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:439
	// info.period3PrevVolumeA = info.period3NowVolumeA
	intc 42 //  headOffset
	intc 15 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:440
	// info.period3NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 15 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:441
	// info.period3PrevVolumeB = info.period3NowVolumeB
	intc 43 //  headOffset
	intc 5 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:442
	// info.period3NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 5 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:443
	// info.period3PrevTime = info.period3NowTime
	intc 47 //  headOffset
	intc 6 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if8_condition
	// contracts\BiatecPoolProvider.algo.ts:444
	// info.period3NowTime === 0
	intc 6 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if8_else

	// *if8_consequent
	// contracts\BiatecPoolProvider.algo.ts:445
	// info.period3NowTime = globals.latestTimestamp
	intc 6 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if8_end

*if8_else:
	// contracts\BiatecPoolProvider.algo.ts:447
	// info.period3NowTime = period3IterFromCurrTime * this.period3.value
	intc 6 //  headOffset
	frame_dig 15 // period3IterFromCurrTime: uint64
	bytec 8 //  "p3"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if8_end:

*if7_end:
	// contracts\BiatecPoolProvider.algo.ts:451
	// info.period3NowFeeA = info.period3NowFeeA + feeAmountA
	intc 16 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:452
	// info.period3NowFeeB = info.period3NowFeeB + feeAmountB
	intc 17 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:453
	// period3NowVolumeBUint256 = info.period3NowVolumeB as uint256
	intc 5 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 16 // period3NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:454
	// period3NowVWAPUint256 = info.period3NowVWAP as uint256
	intc 34 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 17 // period3NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:455
	// info.period3NowVWAP = ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period3NowVolumeBUint256 + amountBUint256)) as uint64
	intc 34 //  headOffset
	frame_dig 16 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 17 // period3NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 16 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period3NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:457
	// info.period3NowVolumeA = info.period3NowVolumeA + netAmountA
	intc 15 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:458
	// info.period3NowVolumeB = info.period3NowVolumeB + netAmountB
	intc 5 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:460
	// period4IterFromNowObj = info.period4NowTime / this.period4.value
	intc 8 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:460
	// this.period4.value
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 18 // period4IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:461
	// period4IterFromCurrTime = globals.latestTimestamp / this.period4.value
	global LatestTimestamp
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 19 // period4IterFromCurrTime: uint64

	// *if9_condition
	// contracts\BiatecPoolProvider.algo.ts:464
	// period4IterFromNowObj !== period4IterFromCurrTime
	frame_dig 18 // period4IterFromNowObj: uint64
	frame_dig 19 // period4IterFromCurrTime: uint64
	!=
	bz *if9_end

	// *if9_consequent
	// contracts\BiatecPoolProvider.algo.ts:466
	// info.period4PrevFeeA = info.period4NowFeeA
	intc 50 //  headOffset
	intc 19 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:467
	// info.period4NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 19 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:468
	// info.period4PrevFeeB = info.period4NowFeeB
	intc 51 //  headOffset
	intc 20 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:469
	// info.period4NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 20 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:470
	// info.period4PrevVWAP = info.period4NowVWAP
	intc 52 //  headOffset
	intc 7 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:471
	// info.period4PrevVolumeA = info.period4NowVolumeA
	intc 48 //  headOffset
	intc 18 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:472
	// info.period4NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 18 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:473
	// info.period4PrevVolumeB = info.period4NowVolumeB
	intc 49 //  headOffset
	intc 3 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:474
	// info.period4NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 3 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:475
	// info.period4PrevTime = info.period4NowTime
	intc 53 //  headOffset
	intc 8 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if10_condition
	// contracts\BiatecPoolProvider.algo.ts:476
	// info.period4NowTime === 0
	intc 8 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if10_else

	// *if10_consequent
	// contracts\BiatecPoolProvider.algo.ts:477
	// info.period4NowTime = globals.latestTimestamp
	intc 8 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if10_end

*if10_else:
	// contracts\BiatecPoolProvider.algo.ts:479
	// info.period4NowTime = period4IterFromCurrTime * this.period4.value
	intc 8 //  headOffset
	frame_dig 19 // period4IterFromCurrTime: uint64
	bytec 9 //  "p4"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if10_end:

*if9_end:
	// contracts\BiatecPoolProvider.algo.ts:483
	// info.period4NowFeeA = info.period4NowFeeA + feeAmountA
	intc 19 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:484
	// info.period4NowFeeB = info.period4NowFeeB + feeAmountB
	intc 20 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:485
	// period4NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 3 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 20 // period4NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:486
	// period4NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 7 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 21 // period4NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:487
	// info.period4NowVWAP = ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period4NowVolumeBUint256 + amountBUint256)) as uint64
	intc 7 //  headOffset
	frame_dig 20 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 21 // period4NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 20 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period4NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:489
	// info.period4NowVolumeA = info.period4NowVolumeA + netAmountA
	intc 18 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:490
	// info.period4NowVolumeB = info.period4NowVolumeB + netAmountB
	intc 3 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:492
	// period5IterFromNowObj = info.period5NowTime / this.period5.value
	intc 9 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:492
	// this.period5.value
	bytec 10 //  "p5"
	app_global_get
	/
	frame_bury 22 // period5IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:493
	// period5IterFromCurrTime = globals.latestTimestamp / this.period5.value
	global LatestTimestamp
	bytec 10 //  "p5"
	app_global_get
	/
	frame_bury 23 // period5IterFromCurrTime: uint64

	// *if11_condition
	// contracts\BiatecPoolProvider.algo.ts:496
	// period5IterFromNowObj !== period5IterFromCurrTime
	frame_dig 22 // period5IterFromNowObj: uint64
	frame_dig 23 // period5IterFromCurrTime: uint64
	!=
	bz *if11_end

	// *if11_consequent
	// contracts\BiatecPoolProvider.algo.ts:498
	// info.period5PrevFeeA = info.period5NowFeeA
	intc 56 //  headOffset
	intc 23 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:499
	// info.period5NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 23 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:500
	// info.period5PrevFeeB = info.period5NowFeeB
	intc 57 //  headOffset
	intc 24 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:501
	// info.period5NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 24 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:502
	// info.period5PrevVWAP = info.period5NowVWAP
	intc 58 //  headOffset
	intc 39 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:503
	// info.period5PrevVolumeA = info.period5NowVolumeA
	intc 54 //  headOffset
	intc 21 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:504
	// info.period5NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 21 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:505
	// info.period5PrevVolumeB = info.period5NowVolumeB
	intc 55 //  headOffset
	intc 22 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:506
	// info.period5NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 22 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:507
	// info.period5PrevTime = info.period5NowTime
	intc 59 //  headOffset
	intc 9 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if12_condition
	// contracts\BiatecPoolProvider.algo.ts:508
	// info.period5NowTime === 0
	intc 9 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if12_else

	// *if12_consequent
	// contracts\BiatecPoolProvider.algo.ts:509
	// info.period5NowTime = globals.latestTimestamp
	intc 9 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if12_end

*if12_else:
	// contracts\BiatecPoolProvider.algo.ts:511
	// info.period5NowTime = period5IterFromCurrTime * this.period5.value
	intc 9 //  headOffset
	frame_dig 23 // period5IterFromCurrTime: uint64
	bytec 10 //  "p5"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if12_end:

*if11_end:
	// contracts\BiatecPoolProvider.algo.ts:515
	// info.period5NowFeeA = info.period5NowFeeA + feeAmountA
	intc 23 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:516
	// info.period5NowFeeB = info.period5NowFeeB + feeAmountB
	intc 24 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:517
	// period5NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 3 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 24 // period5NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:518
	// period5NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 7 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 25 // period5NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:519
	// info.period5NowVWAP = ((period5NowVolumeBUint256 * period5NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period5NowVolumeBUint256 + amountBUint256)) as uint64
	intc 39 //  headOffset
	frame_dig 24 // period5NowVolumeBUint256: unsafe uint256
	frame_dig 25 // period5NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 24 // period5NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period5NowVolumeBUint256 * period5NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period5NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:521
	// info.period5NowVolumeA = info.period5NowVolumeA + netAmountA
	intc 21 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:522
	// info.period5NowVolumeB = info.period5NowVolumeB + netAmountB
	intc 22 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:525
	// period6IterFromNowObj = info.period6NowTime / this.period6.value
	intc 10 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:525
	// this.period6.value
	bytec 11 //  "p6"
	app_global_get
	/
	frame_bury 26 // period6IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:526
	// period6IterFromCurrTime = globals.latestTimestamp / this.period6.value
	global LatestTimestamp
	bytec 11 //  "p6"
	app_global_get
	/
	frame_bury 27 // period6IterFromCurrTime: uint64

	// *if13_condition
	// contracts\BiatecPoolProvider.algo.ts:528
	// period6IterFromNowObj !== period6IterFromCurrTime
	frame_dig 26 // period6IterFromNowObj: uint64
	frame_dig 27 // period6IterFromCurrTime: uint64
	!=
	bz *if13_end

	// *if13_consequent
	// contracts\BiatecPoolProvider.algo.ts:530
	// info.period6PrevFeeA = info.period6NowFeeA
	intc 62 //  headOffset
	intc 27 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:531
	// info.period6NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 27 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:532
	// info.period6PrevFeeB = info.period6NowFeeB
	intc 63 //  headOffset
	intc 28 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:533
	// info.period6NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 28 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:534
	// info.period6PrevVWAP = info.period6NowVWAP
	intc 64 //  headOffset
	intc 40 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:535
	// info.period6PrevVolumeA = info.period6NowVolumeA
	intc 60 //  headOffset
	intc 25 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:536
	// info.period6NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 25 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:537
	// info.period6PrevVolumeB = info.period6NowVolumeB
	intc 61 //  headOffset
	intc 26 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:538
	// info.period6NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 26 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:539
	// info.period6PrevTime = info.period6NowTime
	intc 65 //  headOffset
	intc 10 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if14_condition
	// contracts\BiatecPoolProvider.algo.ts:540
	// info.period6NowTime === 0
	intc 10 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if14_else

	// *if14_consequent
	// contracts\BiatecPoolProvider.algo.ts:541
	// info.period6NowTime = globals.latestTimestamp
	intc 10 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if14_end

*if14_else:
	// contracts\BiatecPoolProvider.algo.ts:543
	// info.period6NowTime = period6IterFromCurrTime * this.period6.value
	intc 10 //  headOffset
	frame_dig 27 // period6IterFromCurrTime: uint64
	bytec 11 //  "p6"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if14_end:

*if13_end:
	// contracts\BiatecPoolProvider.algo.ts:547
	// info.period6NowFeeA = info.period6NowFeeA + feeAmountA
	intc 27 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:548
	// info.period6NowFeeB = info.period6NowFeeB + feeAmountB
	intc 28 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:549
	// period6NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 3 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 28 // period6NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:550
	// period6NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 7 //  headOffset
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 29 // period6NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:551
	// info.period6NowVWAP = ((period6NowVolumeBUint256 * period6NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period6NowVolumeBUint256 + amountBUint256)) as uint64
	intc 40 //  headOffset
	frame_dig 28 // period6NowVolumeBUint256: unsafe uint256
	frame_dig 29 // period6NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 28 // period6NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period6NowVolumeBUint256 * period6NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period6NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:553
	// info.period6NowVolumeA = info.period6NowVolumeA + netAmountA
	intc 25 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:554
	// info.period6NowVolumeB = info.period6NowVolumeB + netAmountB
	intc 26 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:350
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:555
	// return info;
	frame_dig 0 // storage key//info
	box_get

	// box value does not exist: this.pools(appPoolId.id).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 29
	retsub

// updatePriceBoxAggregated(assetA: AssetID, assetB: AssetID, priceFrom: uint64, priceTo: uint64, amountA: uint64, amountB: uint64, feeAmountA: uint64, feeAmountB: uint64): AppPoolInfo
updatePriceBoxAggregated:
	proto 8 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 30

	// contracts\BiatecPoolProvider.algo.ts:568
	// aggregatedIndex: AssetsCombined = { assetA: assetA.id, assetB: assetB.id }
	frame_dig -1 // assetA: AssetID
	itob
	frame_dig -2 // assetB: AssetID
	itob
	concat
	frame_bury 0 // aggregatedIndex: AssetsCombined

	// contracts\BiatecPoolProvider.algo.ts:569
	// info = this.poolsAggregated(aggregatedIndex).value
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	frame_bury 1 // storage key//info

	// contracts\BiatecPoolProvider.algo.ts:570
	// assert(assetA.id === info.assetA)
	frame_dig -1 // assetA: AssetID
	intc 0 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:571
	// assert(assetB.id === info.assetB)
	frame_dig -2 // assetB: AssetID
	intc 66 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:572
	// assert(amountA > 0 && amountB > 0)
	frame_dig -5 // amountA: uint64
	intc 1 // 0
	>
	dup
	bz *skip_and1
	frame_dig -6 // amountB: uint64
	intc 1 // 0
	>
	&&

*skip_and1:
	assert

	// contracts\BiatecPoolProvider.algo.ts:574
	// netAmountA = amountA - feeAmountA
	frame_dig -5 // amountA: uint64
	frame_dig -7 // feeAmountA: uint64
	-
	frame_bury 2 // netAmountA: uint64

	// contracts\BiatecPoolProvider.algo.ts:575
	// netAmountB = amountB - feeAmountB
	frame_dig -6 // amountB: uint64
	frame_dig -8 // feeAmountB: uint64
	-
	frame_bury 3 // netAmountB: uint64

	// contracts\BiatecPoolProvider.algo.ts:577
	// price = (priceFrom + priceTo) / <uint64>2
	frame_dig -3 // priceFrom: uint64
	frame_dig -4 // priceTo: uint64
	+
	intc 41 // 2
	/
	frame_bury 4 // price: uint64

	// contracts\BiatecPoolProvider.algo.ts:578
	// priceUint256 = price as uint256
	frame_dig 4 // price: uint64
	itob
	frame_bury 5 // priceUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:579
	// amountBUint256 = netAmountB as uint256
	frame_dig 3 // netAmountB: uint64
	itob
	frame_bury 6 // amountBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:580
	// info.latestPrice = price
	intc 67 //  headOffset
	frame_dig 4 // price: uint64
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:581
	// period1IterFromNowObj = info.period1NowTime / this.period1.value
	intc 12 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 7 // period1IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:582
	// period1IterFromCurrTime = globals.latestTimestamp / this.period1.value
	global LatestTimestamp
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 8 // period1IterFromCurrTime: uint64

	// *if15_condition
	// contracts\BiatecPoolProvider.algo.ts:585
	// period1IterFromNowObj !== period1IterFromCurrTime
	frame_dig 7 // period1IterFromNowObj: uint64
	frame_dig 8 // period1IterFromCurrTime: uint64
	!=
	bz *if15_end

	// *if15_consequent
	// contracts\BiatecPoolProvider.algo.ts:587
	// info.period1PrevFeeA = info.period1NowFeeA
	intc 70 //  headOffset
	intc 2 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:588
	// info.period1NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 2 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:589
	// info.period1PrevFeeB = info.period1NowFeeB
	intc 71 //  headOffset
	intc 30 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:590
	// info.period1NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 30 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:591
	// info.period1PrevVWAP = info.period1NowVWAP
	intc 72 //  headOffset
	intc 36 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:592
	// info.period1PrevVolumeA = info.period1NowVolumeA
	intc 68 //  headOffset
	intc 29 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:593
	// info.period1NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 29 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:594
	// info.period1PrevVolumeB = info.period1NowVolumeB
	intc 69 //  headOffset
	intc 11 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:595
	// info.period1NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 11 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:596
	// info.period1PrevTime = info.period1NowTime
	intc 73 //  headOffset
	intc 12 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if16_condition
	// contracts\BiatecPoolProvider.algo.ts:597
	// info.period1NowTime === 0
	intc 12 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if16_else

	// *if16_consequent
	// contracts\BiatecPoolProvider.algo.ts:598
	// info.period1NowTime = globals.latestTimestamp
	intc 12 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if16_end

*if16_else:
	// contracts\BiatecPoolProvider.algo.ts:600
	// info.period1NowTime = period1IterFromCurrTime * this.period1.value
	intc 12 //  headOffset
	frame_dig 8 // period1IterFromCurrTime: uint64
	bytec 6 //  "p1"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if16_end:

*if15_end:
	// contracts\BiatecPoolProvider.algo.ts:604
	// info.period1NowFeeA = info.period1NowFeeA + feeAmountA
	intc 2 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:605
	// info.period1NowFeeB = info.period1NowFeeB + feeAmountB
	intc 30 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:606
	// period1NowVolumeBUint256 = info.period1NowVolumeB as uint256
	intc 11 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 9 // period1NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:607
	// period1NowVWAPUint256 = info.period1NowVWAP as uint256
	intc 36 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 10 // period1NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:608
	// info.period1NowVWAP = ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period1NowVolumeBUint256 + amountBUint256)) as uint64
	intc 36 //  headOffset
	frame_dig 9 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 10 // period1NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 9 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period1NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:610
	// info.period1NowVolumeA = info.period1NowVolumeA + netAmountA
	intc 29 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:611
	// info.period1NowVolumeB = info.period1NowVolumeB + netAmountB
	intc 11 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:614
	// period2IterFromNowObj = info.period2NowTime / this.period2.value
	intc 14 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 11 // period2IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:615
	// period2IterFromCurrTime = globals.latestTimestamp / this.period2.value
	global LatestTimestamp
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 12 // period2IterFromCurrTime: uint64

	// *if17_condition
	// contracts\BiatecPoolProvider.algo.ts:618
	// period2IterFromNowObj !== period2IterFromCurrTime
	frame_dig 11 // period2IterFromNowObj: uint64
	frame_dig 12 // period2IterFromCurrTime: uint64
	!=
	bz *if17_end

	// *if17_consequent
	// contracts\BiatecPoolProvider.algo.ts:620
	// info.period2PrevFeeA = info.period2NowFeeA
	intc 76 //  headOffset
	intc 32 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:621
	// info.period2NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 32 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:622
	// info.period2PrevFeeB = info.period2NowFeeB
	intc 77 //  headOffset
	intc 33 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:623
	// info.period2NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 33 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:624
	// info.period2PrevVWAP = info.period2NowVWAP
	intc 78 //  headOffset
	intc 37 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:625
	// info.period2PrevVolumeA = info.period2NowVolumeA
	intc 74 //  headOffset
	intc 31 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:626
	// info.period2NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 31 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:627
	// info.period2PrevVolumeB = info.period2NowVolumeB
	intc 75 //  headOffset
	intc 13 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:628
	// info.period2NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 13 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:629
	// info.period2PrevTime = info.period2NowTime
	intc 79 //  headOffset
	intc 14 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if18_condition
	// contracts\BiatecPoolProvider.algo.ts:630
	// info.period2NowTime === 0
	intc 14 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if18_else

	// *if18_consequent
	// contracts\BiatecPoolProvider.algo.ts:631
	// info.period2NowTime = globals.latestTimestamp
	intc 14 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if18_end

*if18_else:
	// contracts\BiatecPoolProvider.algo.ts:633
	// info.period2NowTime = period2IterFromCurrTime * this.period2.value
	intc 14 //  headOffset
	frame_dig 12 // period2IterFromCurrTime: uint64
	bytec 7 //  "p2"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if18_end:

*if17_end:
	// contracts\BiatecPoolProvider.algo.ts:637
	// info.period2NowFeeA = info.period2NowFeeA + feeAmountA
	intc 32 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:638
	// info.period2NowFeeB = info.period2NowFeeB + feeAmountB
	intc 33 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:639
	// period2NowVolumeBUint256 = info.period2NowVolumeB as uint256
	intc 13 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 13 // period2NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:640
	// period2NowVWAPUint256 = info.period2NowVWAP as uint256
	intc 37 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 14 // period2NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:641
	// info.period2NowVWAP = ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period2NowVolumeBUint256 + amountBUint256)) as uint64
	intc 37 //  headOffset
	frame_dig 13 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 14 // period2NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 13 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period2NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:643
	// info.period2NowVolumeA = info.period2NowVolumeA + netAmountA
	intc 31 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:644
	// info.period2NowVolumeB = info.period2NowVolumeB + netAmountB
	intc 13 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:647
	// period3IterFromNowObj = info.period3NowTime / this.period3.value
	intc 6 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 15 // period3IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:648
	// period3IterFromCurrTime = globals.latestTimestamp / this.period3.value
	global LatestTimestamp
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 16 // period3IterFromCurrTime: uint64

	// *if19_condition
	// contracts\BiatecPoolProvider.algo.ts:651
	// period3IterFromNowObj !== period3IterFromCurrTime
	frame_dig 15 // period3IterFromNowObj: uint64
	frame_dig 16 // period3IterFromCurrTime: uint64
	!=
	bz *if19_end

	// *if19_consequent
	// contracts\BiatecPoolProvider.algo.ts:653
	// info.period3PrevFeeA = info.period3NowFeeA
	intc 44 //  headOffset
	intc 16 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:654
	// info.period3NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 16 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:655
	// info.period3PrevFeeB = info.period3NowFeeB
	intc 45 //  headOffset
	intc 17 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:656
	// info.period3NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 17 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:657
	// info.period3PrevVWAP = info.period3NowVWAP
	intc 46 //  headOffset
	intc 34 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:658
	// info.period3PrevVolumeA = info.period3NowVolumeA
	intc 42 //  headOffset
	intc 15 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:659
	// info.period3NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 15 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:660
	// info.period3PrevVolumeB = info.period3NowVolumeB
	intc 43 //  headOffset
	intc 5 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:661
	// info.period3NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 5 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:662
	// info.period3PrevTime = info.period3NowTime
	intc 47 //  headOffset
	intc 6 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if20_condition
	// contracts\BiatecPoolProvider.algo.ts:663
	// info.period3NowTime === 0
	intc 6 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if20_else

	// *if20_consequent
	// contracts\BiatecPoolProvider.algo.ts:664
	// info.period3NowTime = globals.latestTimestamp
	intc 6 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if20_end

*if20_else:
	// contracts\BiatecPoolProvider.algo.ts:666
	// info.period3NowTime = period3IterFromCurrTime * this.period3.value
	intc 6 //  headOffset
	frame_dig 16 // period3IterFromCurrTime: uint64
	bytec 8 //  "p3"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if20_end:

*if19_end:
	// contracts\BiatecPoolProvider.algo.ts:670
	// info.period3NowFeeA = info.period3NowFeeA + feeAmountA
	intc 16 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:671
	// info.period3NowFeeB = info.period3NowFeeB + feeAmountB
	intc 17 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:672
	// period3NowVolumeBUint256 = info.period3NowVolumeB as uint256
	intc 5 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 17 // period3NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:673
	// period3NowVWAPUint256 = info.period3NowVWAP as uint256
	intc 34 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 18 // period3NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:674
	// info.period3NowVWAP = ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period3NowVolumeBUint256 + amountBUint256)) as uint64
	intc 34 //  headOffset
	frame_dig 17 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 18 // period3NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 17 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period3NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:676
	// info.period3NowVolumeA = info.period3NowVolumeA + netAmountA
	intc 15 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:677
	// info.period3NowVolumeB = info.period3NowVolumeB + netAmountB
	intc 5 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:679
	// period4IterFromNowObj = info.period4NowTime / this.period4.value
	intc 8 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 19 // period4IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:680
	// period4IterFromCurrTime = globals.latestTimestamp / this.period4.value
	global LatestTimestamp
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 20 // period4IterFromCurrTime: uint64

	// *if21_condition
	// contracts\BiatecPoolProvider.algo.ts:683
	// period4IterFromNowObj !== period4IterFromCurrTime
	frame_dig 19 // period4IterFromNowObj: uint64
	frame_dig 20 // period4IterFromCurrTime: uint64
	!=
	bz *if21_end

	// *if21_consequent
	// contracts\BiatecPoolProvider.algo.ts:685
	// info.period4PrevFeeA = info.period4NowFeeA
	intc 50 //  headOffset
	intc 19 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:686
	// info.period4NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 19 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:687
	// info.period4PrevFeeB = info.period4NowFeeB
	intc 51 //  headOffset
	intc 20 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:688
	// info.period4NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 20 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:689
	// info.period4PrevVWAP = info.period4NowVWAP
	intc 52 //  headOffset
	intc 7 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:690
	// info.period4PrevVolumeA = info.period4NowVolumeA
	intc 48 //  headOffset
	intc 18 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:691
	// info.period4NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 18 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:692
	// info.period4PrevVolumeB = info.period4NowVolumeB
	intc 49 //  headOffset
	intc 3 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:693
	// info.period4NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 3 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:694
	// info.period4PrevTime = info.period4NowTime
	intc 53 //  headOffset
	intc 8 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if22_condition
	// contracts\BiatecPoolProvider.algo.ts:695
	// info.period4NowTime === 0
	intc 8 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if22_else

	// *if22_consequent
	// contracts\BiatecPoolProvider.algo.ts:696
	// info.period4NowTime = globals.latestTimestamp
	intc 8 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if22_end

*if22_else:
	// contracts\BiatecPoolProvider.algo.ts:698
	// info.period4NowTime = period4IterFromCurrTime * this.period4.value
	intc 8 //  headOffset
	frame_dig 20 // period4IterFromCurrTime: uint64
	bytec 9 //  "p4"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if22_end:

*if21_end:
	// contracts\BiatecPoolProvider.algo.ts:702
	// info.period4NowFeeA = info.period4NowFeeA + feeAmountA
	intc 19 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:703
	// info.period4NowFeeB = info.period4NowFeeB + feeAmountB
	intc 20 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:704
	// period4NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 3 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 21 // period4NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:705
	// period4NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 7 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 22 // period4NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:706
	// info.period4NowVWAP = ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period4NowVolumeBUint256 + amountBUint256)) as uint64
	intc 7 //  headOffset
	frame_dig 21 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 22 // period4NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 21 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period4NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:708
	// info.period4NowVolumeA = info.period4NowVolumeA + netAmountA
	intc 18 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:709
	// info.period4NowVolumeB = info.period4NowVolumeB + netAmountB
	intc 3 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:711
	// period5IterFromNowObj = info.period5NowTime / this.period5.value
	intc 9 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 10 //  "p5"
	app_global_get
	/
	frame_bury 23 // period5IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:712
	// period5IterFromCurrTime = globals.latestTimestamp / this.period5.value
	global LatestTimestamp
	bytec 10 //  "p5"
	app_global_get
	/
	frame_bury 24 // period5IterFromCurrTime: uint64

	// *if23_condition
	// contracts\BiatecPoolProvider.algo.ts:715
	// period5IterFromNowObj !== period5IterFromCurrTime
	frame_dig 23 // period5IterFromNowObj: uint64
	frame_dig 24 // period5IterFromCurrTime: uint64
	!=
	bz *if23_end

	// *if23_consequent
	// contracts\BiatecPoolProvider.algo.ts:717
	// info.period5PrevFeeA = info.period5NowFeeA
	intc 56 //  headOffset
	intc 23 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:718
	// info.period5NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 23 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:719
	// info.period5PrevFeeB = info.period5NowFeeB
	intc 57 //  headOffset
	intc 24 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:720
	// info.period5NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 24 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:721
	// info.period5PrevVWAP = info.period5NowVWAP
	intc 58 //  headOffset
	intc 39 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:722
	// info.period5PrevVolumeA = info.period5NowVolumeA
	intc 54 //  headOffset
	intc 21 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:723
	// info.period5NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 21 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:724
	// info.period5PrevVolumeB = info.period5NowVolumeB
	intc 55 //  headOffset
	intc 22 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:725
	// info.period5NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 22 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:726
	// info.period5PrevTime = info.period5NowTime
	intc 59 //  headOffset
	intc 9 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if24_condition
	// contracts\BiatecPoolProvider.algo.ts:727
	// info.period5NowTime === 0
	intc 9 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if24_else

	// *if24_consequent
	// contracts\BiatecPoolProvider.algo.ts:728
	// info.period5NowTime = globals.latestTimestamp
	intc 9 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if24_end

*if24_else:
	// contracts\BiatecPoolProvider.algo.ts:730
	// info.period5NowTime = period5IterFromCurrTime * this.period5.value
	intc 9 //  headOffset
	frame_dig 24 // period5IterFromCurrTime: uint64
	bytec 10 //  "p5"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if24_end:

*if23_end:
	// contracts\BiatecPoolProvider.algo.ts:734
	// info.period5NowFeeA = info.period5NowFeeA + feeAmountA
	intc 23 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:735
	// info.period5NowFeeB = info.period5NowFeeB + feeAmountB
	intc 24 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:736
	// period5NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 3 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 25 // period5NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:737
	// period5NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 7 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 26 // period5NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:738
	// info.period5NowVWAP = ((period5NowVolumeBUint256 * period5NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period5NowVolumeBUint256 + amountBUint256)) as uint64
	intc 39 //  headOffset
	frame_dig 25 // period5NowVolumeBUint256: unsafe uint256
	frame_dig 26 // period5NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 25 // period5NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period5NowVolumeBUint256 * period5NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period5NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:740
	// info.period5NowVolumeA = info.period5NowVolumeA + netAmountA
	intc 21 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:741
	// info.period5NowVolumeB = info.period5NowVolumeB + netAmountB
	intc 22 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:744
	// period6IterFromNowObj = info.period6NowTime / this.period6.value
	intc 10 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 11 //  "p6"
	app_global_get
	/
	frame_bury 27 // period6IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:745
	// period6IterFromCurrTime = globals.latestTimestamp / this.period6.value
	global LatestTimestamp
	bytec 11 //  "p6"
	app_global_get
	/
	frame_bury 28 // period6IterFromCurrTime: uint64

	// *if25_condition
	// contracts\BiatecPoolProvider.algo.ts:747
	// period6IterFromNowObj !== period6IterFromCurrTime
	frame_dig 27 // period6IterFromNowObj: uint64
	frame_dig 28 // period6IterFromCurrTime: uint64
	!=
	bz *if25_end

	// *if25_consequent
	// contracts\BiatecPoolProvider.algo.ts:749
	// info.period6PrevFeeA = info.period6NowFeeA
	intc 62 //  headOffset
	intc 27 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:750
	// info.period6NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 27 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:751
	// info.period6PrevFeeB = info.period6NowFeeB
	intc 63 //  headOffset
	intc 28 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:752
	// info.period6NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 28 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:753
	// info.period6PrevVWAP = info.period6NowVWAP
	intc 64 //  headOffset
	intc 40 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:754
	// info.period6PrevVolumeA = info.period6NowVolumeA
	intc 60 //  headOffset
	intc 25 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:755
	// info.period6NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 25 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:756
	// info.period6PrevVolumeB = info.period6NowVolumeB
	intc 61 //  headOffset
	intc 26 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:757
	// info.period6NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 26 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:758
	// info.period6PrevTime = info.period6NowTime
	intc 65 //  headOffset
	intc 10 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if26_condition
	// contracts\BiatecPoolProvider.algo.ts:759
	// info.period6NowTime === 0
	intc 10 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if26_else

	// *if26_consequent
	// contracts\BiatecPoolProvider.algo.ts:760
	// info.period6NowTime = globals.latestTimestamp
	intc 10 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if26_end

*if26_else:
	// contracts\BiatecPoolProvider.algo.ts:762
	// info.period6NowTime = period6IterFromCurrTime * this.period6.value
	intc 10 //  headOffset
	frame_dig 28 // period6IterFromCurrTime: uint64
	bytec 11 //  "p6"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if26_end:

*if25_end:
	// contracts\BiatecPoolProvider.algo.ts:766
	// info.period6NowFeeA = info.period6NowFeeA + feeAmountA
	intc 27 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:767
	// info.period6NowFeeB = info.period6NowFeeB + feeAmountB
	intc 28 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:768
	// period6NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 3 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 29 // period6NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:769
	// period6NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 7 //  headOffset
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 30 // period6NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:770
	// info.period6NowVWAP = ((period6NowVolumeBUint256 * period6NowVWAPUint256 + amountBUint256 * priceUint256) /
	//       (period6NowVolumeBUint256 + amountBUint256)) as uint64
	intc 40 //  headOffset
	frame_dig 29 // period6NowVolumeBUint256: unsafe uint256
	frame_dig 30 // period6NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 29 // period6NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 2 // 64
	<=

	// ((period6NowVolumeBUint256 * period6NowVWAPUint256 + amountBUint256 * priceUint256) /\n      (period6NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 4 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:772
	// info.period6NowVolumeA = info.period6NowVolumeA + netAmountA
	intc 25 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:773
	// info.period6NowVolumeB = info.period6NowVolumeB + netAmountB
	intc 26 //  headOffset
	dup
	intc 0 // 8
	bytec 1 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:774
	// return info;
	frame_dig 1 // storage key//info
	box_get

	// box value does not exist: this.poolsAggregated(aggregatedIndex).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 30
	retsub

// registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void
*abi_route_registerTrade:
	// s: uint64
	txna ApplicationArgs 10
	btoi

	// feeAmountB: uint64
	txna ApplicationArgs 9
	btoi

	// feeAmountA: uint64
	txna ApplicationArgs 8
	btoi

	// amountB: uint64
	txna ApplicationArgs 7
	btoi

	// amountA: uint64
	txna ApplicationArgs 6
	btoi

	// priceTo: uint64
	txna ApplicationArgs 5
	btoi

	// priceFrom: uint64
	txna ApplicationArgs 4
	btoi

	// assetB: uint64
	txna ApplicationArgs 3
	btoi

	// assetA: uint64
	txna ApplicationArgs 2
	btoi

	// appPoolId: uint64
	txna ApplicationArgs 1
	btoi

	// execute registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void
	callsub registerTrade
	intc 4 // 1
	return

// registerTrade(appPoolId: AppID, assetA: AssetID, assetB: AssetID, priceFrom: uint64, priceTo: uint64, amountA: uint64, amountB: uint64, feeAmountA: uint64, feeAmountB: uint64, s: uint64): void
//
// This metod registers the trade and calculates and store the trade statistics
//
// @param appPoolId Liqudity pool smart contract
// @param assetA Asset A
// @param assetB Asset B
// @param priceFrom The original price
// @param priceTo The new price
// @param amountA Asset A amount spent or received
// @param amountB Asset B amount spent or received
// @param feeAmountA Fees paid in asset A if any
// @param feeAmountB Fees paid in asset B if any
// @param s Scale multiplier
registerTrade:
	proto 10 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\BiatecPoolProvider.algo.ts:803
	// increaseOpcodeBudget()
	itxn_begin
	intc 35 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 38 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:804
	// increaseOpcodeBudget()
	itxn_begin
	intc 35 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 38 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:805
	// increaseOpcodeBudget()
	itxn_begin
	intc 35 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 38 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:806
	// increaseOpcodeBudget()
	itxn_begin
	intc 35 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 38 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:807
	// increaseOpcodeBudget()
	itxn_begin
	intc 35 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 38 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:808
	// assert(appPoolId === globals.callerApplicationID)
	frame_dig -1 // appPoolId: AppID
	global CallerApplicationID
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:809
	// assert(s === SCALE)
	frame_dig -10 // s: uint64
	pushint 1000000000
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:811
	// this.updatePriceBoxInfo(appPoolId, assetA, assetB, priceFrom, priceTo, amountA, amountB, feeAmountA, feeAmountB)
	frame_dig -9 // feeAmountB: uint64
	frame_dig -8 // feeAmountA: uint64
	frame_dig -7 // amountB: uint64
	frame_dig -6 // amountA: uint64
	frame_dig -5 // priceTo: uint64
	frame_dig -4 // priceFrom: uint64
	frame_dig -3 // assetB: AssetID
	frame_dig -2 // assetA: AssetID
	frame_dig -1 // appPoolId: AppID
	callsub updatePriceBoxInfo

	// contracts\BiatecPoolProvider.algo.ts:812
	// info = this.pools(appPoolId.id).value
	bytec 2 //  "p"
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	frame_bury 0 // storage key//info

	// *if27_condition
	// contracts\BiatecPoolProvider.algo.ts:814
	// info.isVerified >= this.verifyRequirement.value
	intc 1 // 0
	intc 0 // 8
	bytec 2 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:812
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:814
	// this.verifyRequirement.value
	bytec 14 //  "verr"
	app_global_get
	>=
	bz *if27_end

	// *if27_consequent
	// contracts\BiatecPoolProvider.algo.ts:816
	// this.updatePriceBoxAggregated(assetA, assetB, priceFrom, priceTo, amountA, amountB, feeAmountA, feeAmountB)
	frame_dig -9 // feeAmountB: uint64
	frame_dig -8 // feeAmountA: uint64
	frame_dig -7 // amountB: uint64
	frame_dig -6 // amountA: uint64
	frame_dig -5 // priceTo: uint64
	frame_dig -4 // priceFrom: uint64
	frame_dig -3 // assetB: AssetID
	frame_dig -2 // assetA: AssetID
	callsub updatePriceBoxAggregated

*if27_end:
	retsub

// setGlobalVerifiedValues(uint64,uint64)void
*abi_route_setGlobalVerifiedValues:
	// requirement: uint64
	txna ApplicationArgs 2
	btoi

	// defaultVerified: uint64
	txna ApplicationArgs 1
	btoi

	// execute setGlobalVerifiedValues(uint64,uint64)void
	callsub setGlobalVerifiedValues
	intc 4 // 1
	return

// setGlobalVerifiedValues(defaultVerified: uint64, requirement: uint64): void
setGlobalVerifiedValues:
	proto 2 0

	// contracts\BiatecPoolProvider.algo.ts:821
	// assert(this.txn.sender === this.governor.value, 'Only governor can run setup verification status')
	txn Sender
	pushbytes 0x67 // "g"
	app_global_get
	==

	// Only governor can run setup verification status
	assert

	// contracts\BiatecPoolProvider.algo.ts:822
	// this.verifyRequirement.value = requirement
	bytec 14 //  "verr"
	frame_dig -2 // requirement: uint64
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:823
	// this.defaultVerified.value = defaultVerified
	bytec 15 //  "ver"
	frame_dig -1 // defaultVerified: uint64
	app_global_put
	retsub

// sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_sendOnlineKeyRegistration:
	// voteKeyDilution: uint64
	txna ApplicationArgs 7
	btoi

	// voteLast: uint64
	txna ApplicationArgs 6
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 5
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub sendOnlineKeyRegistration
	intc 4 // 1
	return

// sendOnlineKeyRegistration(appBiatecConfigProvider: AppID, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// addressExecutiveFee can perfom key registration for this LP pool
//
// Only addressExecutiveFee is allowed to execute this method.
sendOnlineKeyRegistration:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dup

	// contracts\BiatecPoolProvider.algo.ts:840
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecPoolProvider.algo.ts:841
	// addressExecutiveFee = appBiatecConfigProvider.globalState('ef') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 17 //  "ef"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('ef')
	assert
	frame_bury 0 // addressExecutiveFee: address

	// contracts\BiatecPoolProvider.algo.ts:842
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 1 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:843
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecPoolProvider.algo.ts:844
	// assert(
	//       this.txn.sender === addressExecutiveFee,
	//       'Only fee executor setup in the config can take the collected fees'
	//     )
	txn Sender
	frame_dig 0 // addressExecutiveFee: address
	==

	// Only fee executor setup in the config can take the collected fees
	assert

	// contracts\BiatecPoolProvider.algo.ts:848
	// sendOnlineKeyRegistration({
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteKeyDilution: voteKeyDilution,
	//       voteLast: voteLast,
	//       votePK: votePK,
	//       fee: 0,
	//     })
	itxn_begin
	intc 41 //  keyreg
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:849
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts\BiatecPoolProvider.algo.ts:850
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts\BiatecPoolProvider.algo.ts:851
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\BiatecPoolProvider.algo.ts:852
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\BiatecPoolProvider.algo.ts:853
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts\BiatecPoolProvider.algo.ts:854
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts\BiatecPoolProvider.algo.ts:855
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// withdrawExcessAssets(uint64,uint64,uint64)uint64
*abi_route_withdrawExcessAssets:
	// The ABI return prefix
	bytec 16 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdrawExcessAssets(uint64,uint64,uint64)uint64
	callsub withdrawExcessAssets
	itob
	concat
	log
	intc 4 // 1
	return

// withdrawExcessAssets(appBiatecConfigProvider: AppID, asset: AssetID, amount: uint64): uint64
//
// If someone deposits excess assets to this smart contract biatec can use them.
//
// Only addressExecutiveFee is allowed to execute this method.
//
// @param appBiatecConfigProvider Biatec config app. Only addressExecutiveFee is allowed to execute this method.
// @param asset Asset to withdraw. If native token, then zero
// @param amount Amount of the asset to be withdrawn
withdrawExcessAssets:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dup

	// contracts\BiatecPoolProvider.algo.ts:869
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecPoolProvider.algo.ts:870
	// addressExecutiveFee = appBiatecConfigProvider.globalState('ef') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 17 //  "ef"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('ef')
	assert
	frame_bury 0 // addressExecutiveFee: address

	// contracts\BiatecPoolProvider.algo.ts:871
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 1 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:872
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecPoolProvider.algo.ts:873
	// assert(
	//       this.txn.sender === addressExecutiveFee,
	//       'Only fee executor setup in the config can take the collected fees'
	//     )
	txn Sender
	frame_dig 0 // addressExecutiveFee: address
	==

	// Only fee executor setup in the config can take the collected fees
	assert

	// contracts\BiatecPoolProvider.algo.ts:878
	// this.doAxfer(this.txn.sender, asset, amount)
	frame_dig -3 // amount: uint64
	frame_dig -2 // asset: AssetID
	txn Sender
	callsub doAxfer

	// contracts\BiatecPoolProvider.algo.ts:880
	// return amount;
	frame_dig -3 // amount: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// doAxfer(receiver: Address, asset: AssetID, amount: uint64): void
//
// Executes xfer of pay payment methods to specified receiver from smart contract aggregated account with specified asset and amount in tokens decimals
// @param receiver Receiver
// @param asset Asset. Zero for algo
// @param amount Amount to transfer
doAxfer:
	proto 3 0

	// *if28_condition
	// contracts\BiatecPoolProvider.algo.ts:890
	// asset.id === 0
	frame_dig -2 // asset: AssetID
	intc 1 // 0
	==
	bz *if28_else

	// *if28_consequent
	// contracts\BiatecPoolProvider.algo.ts:891
	// sendPayment({
	//         receiver: receiver,
	//         amount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	intc 4 //  pay
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:892
	// receiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field Receiver

	// contracts\BiatecPoolProvider.algo.ts:893
	// amount: amount
	frame_dig -3 // amount: uint64
	itxn_field Amount

	// contracts\BiatecPoolProvider.algo.ts:894
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if28_end

*if28_else:
	// contracts\BiatecPoolProvider.algo.ts:897
	// sendAssetTransfer({
	//         assetReceiver: receiver,
	//         xferAsset: asset,
	//         assetAmount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:898
	// assetReceiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field AssetReceiver

	// contracts\BiatecPoolProvider.algo.ts:899
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\BiatecPoolProvider.algo.ts:900
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// contracts\BiatecPoolProvider.algo.ts:901
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if28_end:
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa0cadf8a // method "bootstrap(uint64)void"
	pushbytes 0xddaaabce // method "getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
	pushbytes 0xd14ca904 // method "registerPool(uint64,uint64,uint64,uint8)void"
	pushbytes 0xe13e4f5a // method "registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void"
	pushbytes 0x65d0d458 // method "setGlobalVerifiedValues(uint64,uint64)void"
	pushbytes 0x83925c17 // method "sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64)void"
	pushbytes 0xcba2e95d // method "withdrawExcessAssets(uint64,uint64,uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_getCurrentStatus *abi_route_registerPool *abi_route_registerTrade *abi_route_setGlobalVerifiedValues *abi_route_sendOnlineKeyRegistration *abi_route_withdrawExcessAssets

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x5fc885a0 // method "updateApplication(uint64,byte[])void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err