#pragma version 10
intcblock 8 0 1 64 256 288 360 392 48 80 152 184 264 272 352 368 376 4096 40 56 144 160 168 248 280 384 6 72 176 8192 2 32 4 5 10 24 296 304 312 320 328 336 400 408 416 424 432 440 12288 3 88 96 104 112 120 128 192 200 208 216 224 232
bytecblock 0x0000000000000000 0x 0x73 0x70 0x727031 0xFFFFFFFFFFFFFFFF 0x7031 0x7032 0x7033 0x7034 0x6361706231 0x727069 0x151f7c75 0x42 "BIATEC-PP-01-05-03" 0x6361706232 0x0a8101 0x6361706233 0x727032 0x7363766572 0x72703130 0xb8447b36 0x727033 0x727034 0x727035 0x727036 0x727037 0x727038 0x727039 0x7063 0x6566 0x75

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 26 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// bootstrap(uint64)void
*abi_route_bootstrap:
	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64)void
	callsub bootstrap
	intc 2 // 1
	return

// bootstrap(appBiatecConfigProvider: AppID): void
//
// Biatec deploys single pool provider smart contract
// @param appBiatecConfigProvider Biatec amm provider
bootstrap:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts\BiatecPoolProvider.algo.ts:226
	// assert(this.txn.sender === this.app.creator, 'Only creator of the app can set it up')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only creator of the app can set it up
	assert

	// contracts\BiatecPoolProvider.algo.ts:227
	// this.appBiatecConfigProvider.value = appBiatecConfigProvider
	bytec 13 //  "B"
	frame_dig -1 // appBiatecConfigProvider: AppID
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:228
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 2 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 0 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:229
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 0 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert
	retsub

// getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
*abi_route_getCurrentStatus:
	// The ABI return prefix
	bytec 12 // 0x151f7c75

	// appPoolId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	callsub getCurrentStatus
	concat
	log
	intc 2 // 1
	return

// getCurrentStatus(appPoolId: AppID): AppPoolInfo
//
// Returns current status
//
// @param appPoolId Pool id to retrieve the stats
// @returns Pool info statistics
getCurrentStatus:
	proto 1 1

	// contracts\BiatecPoolProvider.algo.ts:240
	// return this.pools(appPoolId.id).value;
	bytec 3 //  "p"
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	box_get

	// box value does not exist: this.pools(appPoolId.id).value
	assert
	retsub

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 2 // 1
	return

// createApplication(): void
//
// Initial setup
createApplication:
	proto 0 0

	// contracts\BiatecPoolProvider.algo.ts:247
	// log(version)
	bytec 14 // "BIATEC-PP-01-05-03"
	log

	// contracts\BiatecPoolProvider.algo.ts:248
	// this.period1.value = 60
	bytec 6 //  "p1"
	pushint 60
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:250
	// this.period2.value = 3600 * 24
	bytec 7 //  "p2"
	pushint 86400
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:251
	// this.period3.value = 3600 * 24 * 7
	bytec 8 //  "p3"
	pushint 604800
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:253
	// this.period4.value = 3600 * 24 * 365
	bytec 9 //  "p4"
	pushint 31536000
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:254
	// this.recentPoolsIndex.value = 1
	bytec 11 //  "rpi"
	intc 2 // 1
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:255
	// this.recentPools1.value = 0
	bytec 4 //  "rp1"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:256
	// this.recentPools2.value = 0
	bytec 18 //  "rp2"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:257
	// this.recentPools3.value = 0
	bytec 22 //  "rp3"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:258
	// this.recentPools4.value = 0
	bytec 23 //  "rp4"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:259
	// this.recentPools5.value = 0
	bytec 24 //  "rp5"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:260
	// this.recentPools6.value = 0
	bytec 25 //  "rp6"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:261
	// this.recentPools7.value = 0
	bytec 26 //  "rp7"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:262
	// this.recentPools8.value = 0
	bytec 27 //  "rp8"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:263
	// this.recentPools9.value = 0
	bytec 28 //  "rp9"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:264
	// this.recentPools10.value = 0
	bytec 20 //  "rp10"
	intc 1 // 0
	app_global_put

	// contracts\BiatecPoolProvider.algo.ts:265
	// this.version.value = version
	bytec 19 //  "scver"
	bytec 14 // "BIATEC-PP-01-05-03"
	app_global_put
	retsub

// updateApplication(uint64,byte[])void
*abi_route_updateApplication:
	// newVersion: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateApplication(uint64,byte[])void
	callsub updateApplication
	intc 2 // 1
	return

// updateApplication(appBiatecConfigProvider: AppID, newVersion: bytes): void
//
// addressUdpater from global biatec configuration is allowed to update application
updateApplication:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts\BiatecPoolProvider.algo.ts:272
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecPoolProvider.algo.ts:273
	// addressUdpater = appBiatecConfigProvider.globalState('u') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 31 //  "u"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('u')
	assert
	frame_bury 0 // addressUdpater: address

	// contracts\BiatecPoolProvider.algo.ts:274
	// assert(this.txn.sender === addressUdpater, 'Only addressUdpater setup in the config can update application')
	txn Sender
	frame_dig 0 // addressUdpater: address
	==

	// Only addressUdpater setup in the config can update application
	assert

	// contracts\BiatecPoolProvider.algo.ts:275
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 2 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:276
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecPoolProvider.algo.ts:277
	// log(version)
	bytec 14 // "BIATEC-PP-01-05-03"
	log

	// contracts\BiatecPoolProvider.algo.ts:278
	// log(newVersion)
	frame_dig -2 // newVersion: bytes
	log

	// contracts\BiatecPoolProvider.algo.ts:279
	// this.version.value = version
	bytec 19 //  "scver"
	bytec 14 // "BIATEC-PP-01-05-03"
	app_global_put
	retsub

// loadCLAMMContractData(uint64,uint64,uint64,byte[])void
*abi_route_loadCLAMMContractData:
	// data: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 3
	btoi

	// approvalProgramSize: uint64
	txna ApplicationArgs 2
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute loadCLAMMContractData(uint64,uint64,uint64,byte[])void
	callsub loadCLAMMContractData
	intc 2 // 1
	return

// loadCLAMMContractData(appBiatecConfigProvider: AppID, approvalProgramSize: uint64, offset: uint64, data: bytes): void
loadCLAMMContractData:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts\BiatecPoolProvider.algo.ts:283
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecPoolProvider.algo.ts:284
	// addressUdpater = appBiatecConfigProvider.globalState('u') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 31 //  "u"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('u')
	assert
	frame_bury 0 // addressUdpater: address

	// contracts\BiatecPoolProvider.algo.ts:285
	// assert(this.txn.sender === addressUdpater, 'Only addressUdpater setup in the config can update the AMM application')
	txn Sender
	frame_dig 0 // addressUdpater: address
	==

	// Only addressUdpater setup in the config can update the AMM application
	assert

	// *if0_condition
	// contracts\BiatecPoolProvider.algo.ts:286
	// this.clammApprovalProgram1.exists && offset == 0
	bytec 10 //  "capb1"
	box_len
	swap
	pop
	dup
	bz *skip_and0
	frame_dig -3 // offset: uint64
	intc 1 // 0
	==
	&&

*skip_and0:
	bz *if0_end

	// *if0_consequent
	// contracts\BiatecPoolProvider.algo.ts:287
	// this.clammApprovalProgram1.delete()
	bytec 10 //  "capb1"
	box_del

	// contracts\BiatecPoolProvider.algo.ts:288
	// this.clammApprovalProgram2.delete()
	bytec 15 //  "capb2"
	box_del

	// contracts\BiatecPoolProvider.algo.ts:289
	// this.clammApprovalProgram3.delete()
	bytec 17 //  "capb3"
	box_del

*if0_end:
	// *if1_condition
	// contracts\BiatecPoolProvider.algo.ts:292
	// !this.clammApprovalProgram1.exists
	bytec 10 //  "capb1"
	box_len
	swap
	pop
	!
	bz *if1_end

	// *if1_consequent
	// contracts\BiatecPoolProvider.algo.ts:293
	// this.clammApprovalProgram1.create(approvalProgramSize < 4096 ? approvalProgramSize : 4096)
	bytec 10 //  "capb1"
	frame_dig -2 // approvalProgramSize: uint64
	intc 17 // 4096
	<
	bz *ternary0_false
	frame_dig -2 // approvalProgramSize: uint64
	b *ternary0_end

*ternary0_false:
	intc 17 // 4096

*ternary0_end:
	box_create
	pop

	// contracts\BiatecPoolProvider.algo.ts:294
	// this.clammApprovalProgram2.create(approvalProgramSize < 4096 ? 0 : approvalProgramSize < 8192 ? approvalProgramSize - 4096 : 4096)
	bytec 15 //  "capb2"
	frame_dig -2 // approvalProgramSize: uint64
	intc 17 // 4096
	<
	bz *ternary1_false
	intc 1 // 0
	b *ternary1_end

*ternary1_false:
	frame_dig -2 // approvalProgramSize: uint64
	intc 29 // 8192
	<
	bz *ternary2_false
	frame_dig -2 // approvalProgramSize: uint64
	intc 17 // 4096
	-
	b *ternary2_end

*ternary2_false:
	intc 17 // 4096

*ternary2_end:

*ternary1_end:
	box_create
	pop

	// contracts\BiatecPoolProvider.algo.ts:295
	// this.clammApprovalProgram3.create(approvalProgramSize < 8192 ? 0 : approvalProgramSize < 12288 ? approvalProgramSize - 8192 : 4096)
	bytec 17 //  "capb3"
	frame_dig -2 // approvalProgramSize: uint64
	intc 29 // 8192
	<
	bz *ternary3_false
	intc 1 // 0
	b *ternary3_end

*ternary3_false:
	frame_dig -2 // approvalProgramSize: uint64
	intc 48 // 12288
	<
	bz *ternary4_false
	frame_dig -2 // approvalProgramSize: uint64
	intc 29 // 8192
	-
	b *ternary4_end

*ternary4_false:
	intc 17 // 4096

*ternary4_end:

*ternary3_end:
	box_create
	pop

*if1_end:
	// *if2_condition
	// contracts\BiatecPoolProvider.algo.ts:298
	// offset < 4096
	frame_dig -3 // offset: uint64
	intc 17 // 4096
	<
	bz *if2_elseif1_condition

	// *if2_consequent
	// contracts\BiatecPoolProvider.algo.ts:299
	// this.clammApprovalProgram1.replace(offset, data)
	bytec 10 //  "capb1"
	frame_dig -3 // offset: uint64
	frame_dig -4 // data: bytes
	box_replace
	b *if2_end

*if2_elseif1_condition:
	// contracts\BiatecPoolProvider.algo.ts:300
	// offset < 8192
	frame_dig -3 // offset: uint64
	intc 29 // 8192
	<
	bz *if2_elseif2_condition

	// *if2_elseif1_consequent
	// contracts\BiatecPoolProvider.algo.ts:301
	// this.clammApprovalProgram2.replace(offset - 4096, data)
	bytec 15 //  "capb2"
	frame_dig -3 // offset: uint64
	intc 17 // 4096
	-
	frame_dig -4 // data: bytes
	box_replace
	b *if2_end

*if2_elseif2_condition:
	// contracts\BiatecPoolProvider.algo.ts:302
	// offset < 12288
	frame_dig -3 // offset: uint64
	intc 48 // 12288
	<
	bz *if2_end

	// *if2_elseif2_consequent
	// contracts\BiatecPoolProvider.algo.ts:303
	// this.clammApprovalProgram3.replace(offset - 8192, data)
	bytec 17 //  "capb3"
	frame_dig -3 // offset: uint64
	intc 29 // 8192
	-
	frame_dig -4 // data: bytes
	box_replace

*if2_end:
	retsub

// noop(uint64)void
*abi_route_noop:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute noop(uint64)void
	callsub noop
	intc 2 // 1
	return

// noop(i: uint64): void
//
// No op tx to increase the app call and box size limits
noop:
	proto 1 0
	retsub

// deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,byte[])uint64
*abi_route_deployPool:
	// The ABI return prefix
	bytec 12 // 0x151f7c75

	// nativeTokenName: byte[]
	txna ApplicationArgs 10
	extract 2 0

	// verificationClass: uint64
	txna ApplicationArgs 9
	btoi

	// currentPrice: uint64
	txna ApplicationArgs 8
	btoi

	// priceMax: uint64
	txna ApplicationArgs 7
	btoi

	// priceMin: uint64
	txna ApplicationArgs 6
	btoi

	// fee: uint64
	txna ApplicationArgs 5
	btoi

	// txSeed: pay
	txn GroupIndex
	intc 2 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  pay
	==

	// argument 6 (txSeed) for deployPool must be a pay transaction
	assert

	// appBiatecPoolProvider: uint64
	txna ApplicationArgs 4
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 3
	btoi

	// assetB: uint64
	txna ApplicationArgs 2
	btoi

	// assetA: uint64
	txna ApplicationArgs 1
	btoi

	// execute deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,byte[])uint64
	callsub deployPool
	itob
	concat
	log
	intc 2 // 1
	return

// deployPool(assetA: AssetID, assetB: AssetID, appBiatecConfigProvider: AppID, appBiatecPoolProvider: AppID, txSeed: PayTxn, fee: uint64, priceMin: uint64, priceMax: uint64, currentPrice: uint64, verificationClass: uint64, nativeTokenName: bytes): uint64
//
// Anybody can call this method to bootstrap new clamm pool
//
// @param assetA Asset A ID must be lower then Asset B ID
// @param assetB Asset B
// @param appBiatecConfigProvider Biatec amm provider
// @param appBiatecPoolProvider Pool provider
// @param txSeed Seed transaction so that smart contract can opt in to the assets
// @param fee Fee in base level (9 decimals). value 1_000_000_000 = 1 = 100%. 10_000_000 = 1%. 1_000_000 = 0.1%
// @param priceMin Min price range. At this point all assets are in asset A.
// @param priceMax Max price range. At this point all assets are in asset B.
// @param currentPrice Deployer can specify the current price for easier deployemnt.
// @param verificationClass Minimum verification level from the biatec identity. Level 0 means no kyc.
// @returns LP token ID
deployPool:
	proto 11 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts\BiatecPoolProvider.algo.ts:343
	// verifyPayTxn(txSeed, { receiver: this.app.address, amount: { greaterThanEqualTo: 5_000_000 } })
	// verify receiver
	frame_dig -5 // txSeed: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"txSeed","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -5 // txSeed: PayTxn
	gtxns Amount
	pushint 5_000_000
	>=

	// transaction verification failed: {"txn":"txSeed","field":"amount","condition":"greaterThanEqualTo","expected":">=5_000_000"}
	assert

	// contracts\BiatecPoolProvider.algo.ts:344
	// assert(verificationClass <= 4)
	frame_dig -10 // verificationClass: uint64
	intc 32 // 4
	<=
	assert

	// contracts\BiatecPoolProvider.algo.ts:347
	// this.pendingGroup.addAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: [
	//         this.clammApprovalProgram1.value,
	//         this.clammApprovalProgram2.value,
	//         // this.clammApprovalProgram3.value,
	//         // this.clammApprovalProgram4.value,
	//       ],
	//       clearStateProgram: BiatecClammPool.clearProgram(),
	//       globalNumUint: BiatecClammPool.schema.global.numUint,
	//       globalNumByteSlice: BiatecClammPool.schema.global.numByteSlice,
	//       extraProgramPages: 3,
	//       applicationArgs: [
	//         // no args
	//         method('createApplication()void'),
	//       ],
	//       isFirstTxn: true,
	//     })
	itxn_begin
	intc 26 //  appl
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:348
	// onCompletion: OnCompletion.NoOp
	intc 1 //  NoOp
	itxn_field OnCompletion

	// contracts\BiatecPoolProvider.algo.ts:349
	// approvalProgram: [
	//         this.clammApprovalProgram1.value,
	//         this.clammApprovalProgram2.value,
	//         // this.clammApprovalProgram3.value,
	//         // this.clammApprovalProgram4.value,
	//       ]
	bytec 10 //  "capb1"
	box_get

	// box value does not exist: this.clammApprovalProgram1.value
	assert
	itxn_field ApprovalProgramPages
	bytec 15 //  "capb2"
	box_get

	// box value does not exist: this.clammApprovalProgram2.value
	assert
	itxn_field ApprovalProgramPages

	// contracts\BiatecPoolProvider.algo.ts:355
	// clearStateProgram: BiatecClammPool.clearProgram()
	pushbytes 0x0a
	itxn_field ClearStateProgram

	// contracts\BiatecPoolProvider.algo.ts:356
	// globalNumUint: BiatecClammPool.schema.global.numUint
	intc 34 // 10
	itxn_field GlobalNumUint

	// contracts\BiatecPoolProvider.algo.ts:357
	// globalNumByteSlice: BiatecClammPool.schema.global.numByteSlice
	pushint 11
	itxn_field GlobalNumByteSlice

	// contracts\BiatecPoolProvider.algo.ts:358
	// extraProgramPages: 3
	intc 49 // 3
	itxn_field ExtraProgramPages

	// contracts\BiatecPoolProvider.algo.ts:359
	// applicationArgs: [
	//         // no args
	//         method('createApplication()void'),
	//       ]
	bytec 21 //  method "createApplication()void"
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// contracts\BiatecPoolProvider.algo.ts:366
	// this.pendingGroup.submit()
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:367
	// appId = this.itxn.createdApplicationID.id
	itxn CreatedApplicationID
	frame_bury 0 // appId: uint64

	// contracts\BiatecPoolProvider.algo.ts:368
	// this.pendingGroup.addPayment({
	//       receiver: AppID.fromUint64(appId).address,
	//       amount: 400_000,
	//       fee: 0,
	//       isFirstTxn: true,
	//     })
	itxn_begin
	intc 2 //  pay
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:369
	// receiver: AppID.fromUint64(appId).address
	frame_dig 0 // appId: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// contracts\BiatecPoolProvider.algo.ts:370
	// amount: 400_000
	pushint 400_000
	itxn_field Amount

	// contracts\BiatecPoolProvider.algo.ts:371
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\BiatecPoolProvider.algo.ts:375
	// this.pendingGroup.addAppCall({
	//       applicationID: AppID.fromUint64(appId),
	//       applicationArgs: [
	//         // assetA, assetB, appBiatecConfigProvider, appBiatecPoolProvider, txSeed, fee, priceMin, priceMax, currentPrice, verificationClass, nativeTokenName
	//         method('bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,byte[])uint64'),
	//         itob(assetA.id),
	//         itob(assetB.id),
	//         itob(appBiatecConfigProvider.id),
	//         itob(appBiatecPoolProvider.id),
	//         itob(fee as uint64),
	//         itob(priceMin as uint64),
	//         itob(priceMax as uint64),
	//         itob(currentPrice as uint64),
	//         itob(verificationClass as uint64),
	//         nativeTokenName,
	//       ],
	//       assets: [assetA, assetB],
	//       applications: [appBiatecConfigProvider, appBiatecPoolProvider],
	//       fee: 0,
	//     })
	itxn_next
	intc 26 //  appl
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:376
	// applicationID: AppID.fromUint64(appId)
	frame_dig 0 // appId: uint64
	itxn_field ApplicationID

	// contracts\BiatecPoolProvider.algo.ts:377
	// applicationArgs: [
	//         // assetA, assetB, appBiatecConfigProvider, appBiatecPoolProvider, txSeed, fee, priceMin, priceMax, currentPrice, verificationClass, nativeTokenName
	//         method('bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,byte[])uint64'),
	//         itob(assetA.id),
	//         itob(assetB.id),
	//         itob(appBiatecConfigProvider.id),
	//         itob(appBiatecPoolProvider.id),
	//         itob(fee as uint64),
	//         itob(priceMin as uint64),
	//         itob(priceMax as uint64),
	//         itob(currentPrice as uint64),
	//         itob(verificationClass as uint64),
	//         nativeTokenName,
	//       ]
	pushbytes 0x15f1c484 // method "bootstrap(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,byte[])uint64"
	itxn_field ApplicationArgs
	frame_dig -1 // assetA: AssetID
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // assetB: AssetID
	itob
	itxn_field ApplicationArgs
	frame_dig -3 // appBiatecConfigProvider: AppID
	itob
	itxn_field ApplicationArgs
	frame_dig -4 // appBiatecPoolProvider: AppID
	itob
	itxn_field ApplicationArgs
	frame_dig -6 // fee: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -7 // priceMin: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -8 // priceMax: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -9 // currentPrice: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -10 // verificationClass: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -11 // nativeTokenName: bytes
	itxn_field ApplicationArgs

	// contracts\BiatecPoolProvider.algo.ts:391
	// assets: [assetA, assetB]
	frame_dig -1 // assetA: AssetID
	itxn_field Assets
	frame_dig -2 // assetB: AssetID
	itxn_field Assets

	// contracts\BiatecPoolProvider.algo.ts:392
	// applications: [appBiatecConfigProvider, appBiatecPoolProvider]
	frame_dig -3 // appBiatecConfigProvider: AppID
	itxn_field Applications
	frame_dig -4 // appBiatecPoolProvider: AppID
	itxn_field Applications

	// contracts\BiatecPoolProvider.algo.ts:393
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// contracts\BiatecPoolProvider.algo.ts:395
	// this.pendingGroup.submit()
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:398
	// this.recentPoolsIndex.value = this.recentPoolsIndex.value + 1
	bytec 11 //  "rpi"
	dup
	app_global_get
	intc 2 // 1
	+
	app_global_put

	// *if3_condition
	// contracts\BiatecPoolProvider.algo.ts:399
	// this.recentPoolsIndex.value > 10
	bytec 11 //  "rpi"
	app_global_get
	intc 34 // 10
	>
	bz *if3_end

	// *if3_consequent
	// contracts\BiatecPoolProvider.algo.ts:399
	// this.recentPoolsIndex.value = 1
	bytec 11 //  "rpi"
	intc 2 // 1
	app_global_put

*if3_end:
	// contracts\BiatecPoolProvider.algo.ts:400
	// storeTo = this.recentPoolsIndex.value
	bytec 11 //  "rpi"
	app_global_get
	frame_bury 1 // storeTo: uint64

	// *if4_condition
	// contracts\BiatecPoolProvider.algo.ts:401
	// storeTo == 1
	frame_dig 1 // storeTo: uint64
	intc 2 // 1
	==
	bz *if4_elseif1_condition

	// *if4_consequent
	// contracts\BiatecPoolProvider.algo.ts:402
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif1_condition:
	// contracts\BiatecPoolProvider.algo.ts:403
	// storeTo == 2
	frame_dig 1 // storeTo: uint64
	intc 30 // 2
	==
	bz *if4_elseif2_condition

	// *if4_elseif1_consequent
	// contracts\BiatecPoolProvider.algo.ts:404
	// this.recentPools2.value = appId
	bytec 18 //  "rp2"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif2_condition:
	// contracts\BiatecPoolProvider.algo.ts:405
	// storeTo == 3
	frame_dig 1 // storeTo: uint64
	intc 49 // 3
	==
	bz *if4_elseif3_condition

	// *if4_elseif2_consequent
	// contracts\BiatecPoolProvider.algo.ts:406
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif3_condition:
	// contracts\BiatecPoolProvider.algo.ts:407
	// storeTo == 4
	frame_dig 1 // storeTo: uint64
	intc 32 // 4
	==
	bz *if4_elseif4_condition

	// *if4_elseif3_consequent
	// contracts\BiatecPoolProvider.algo.ts:408
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif4_condition:
	// contracts\BiatecPoolProvider.algo.ts:409
	// storeTo == 5
	frame_dig 1 // storeTo: uint64
	intc 33 // 5
	==
	bz *if4_elseif5_condition

	// *if4_elseif4_consequent
	// contracts\BiatecPoolProvider.algo.ts:410
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif5_condition:
	// contracts\BiatecPoolProvider.algo.ts:411
	// storeTo == 6
	frame_dig 1 // storeTo: uint64
	intc 26 // 6
	==
	bz *if4_elseif6_condition

	// *if4_elseif5_consequent
	// contracts\BiatecPoolProvider.algo.ts:412
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif6_condition:
	// contracts\BiatecPoolProvider.algo.ts:413
	// storeTo == 7
	frame_dig 1 // storeTo: uint64
	pushint 7
	==
	bz *if4_elseif7_condition

	// *if4_elseif6_consequent
	// contracts\BiatecPoolProvider.algo.ts:414
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif7_condition:
	// contracts\BiatecPoolProvider.algo.ts:415
	// storeTo == 8
	frame_dig 1 // storeTo: uint64
	intc 0 // 8
	==
	bz *if4_elseif8_condition

	// *if4_elseif7_consequent
	// contracts\BiatecPoolProvider.algo.ts:416
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif8_condition:
	// contracts\BiatecPoolProvider.algo.ts:417
	// storeTo == 9
	frame_dig 1 // storeTo: uint64
	pushint 9
	==
	bz *if4_elseif9_condition

	// *if4_elseif8_consequent
	// contracts\BiatecPoolProvider.algo.ts:418
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put
	b *if4_end

*if4_elseif9_condition:
	// contracts\BiatecPoolProvider.algo.ts:419
	// storeTo == 10
	frame_dig 1 // storeTo: uint64
	intc 34 // 10
	==
	bz *if4_end

	// *if4_elseif9_consequent
	// contracts\BiatecPoolProvider.algo.ts:420
	// this.recentPools1.value = appId
	bytec 4 //  "rp1"
	frame_dig 0 // appId: uint64
	app_global_put

*if4_end:
	// contracts\BiatecPoolProvider.algo.ts:422
	// return appId;
	frame_dig 0 // appId: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// registerPool()void
*abi_route_registerPool:
	// execute registerPool()void
	callsub registerPool
	intc 2 // 1
	return

// registerPool(): void
//
// This method is called by constructor of the luquidity pool
registerPool:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 14

	// contracts\BiatecPoolProvider.algo.ts:429
	// appClammPool = globals.callerApplicationID as AppID
	global CallerApplicationID
	frame_bury 0 // appClammPool: uint64

	// contracts\BiatecPoolProvider.algo.ts:430
	// assetA = AssetID.fromUint64(appClammPool.globalState('a') as uint64)
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x61 // "a"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('a')
	assert
	frame_bury 1 // assetA: uint64

	// contracts\BiatecPoolProvider.algo.ts:431
	// assetB = AssetID.fromUint64(appClammPool.globalState('b') as uint64)
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x62 // "b"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('b')
	assert
	frame_bury 2 // assetB: uint64

	// contracts\BiatecPoolProvider.algo.ts:432
	// verificationClass = appClammPool.globalState('c') as uint64
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x63 // "c"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('c')
	assert
	frame_bury 3 // verificationClass: uint64

	// contracts\BiatecPoolProvider.algo.ts:433
	// pMin = appClammPool.globalState('pMin') as uint64
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x704d696e // "pMin"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('pMin')
	assert
	frame_bury 4 // pMin: uint64

	// contracts\BiatecPoolProvider.algo.ts:434
	// pMax = appClammPool.globalState('pMax') as uint64
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x704d6178 // "pMax"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('pMax')
	assert
	frame_bury 5 // pMax: uint64

	// contracts\BiatecPoolProvider.algo.ts:435
	// fee = appClammPool.globalState('f') as uint64
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x66 // "f"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('f')
	assert
	frame_bury 6 // fee: uint64

	// contracts\BiatecPoolProvider.algo.ts:436
	// lpToken = appClammPool.globalState('lp') as uint64
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x6c70 // "lp"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('lp')
	assert
	frame_bury 7 // lpToken: uint64

	// contracts\BiatecPoolProvider.algo.ts:437
	// ammPoolPrice = appClammPool.globalState('price') as uint64
	frame_dig 0 // appClammPool: uint64
	pushbytes 0x7072696365 // "price"
	app_global_get_ex

	// global state value does not exist: appClammPool.globalState('price')
	assert
	frame_bury 8 // ammPoolPrice: uint64

	// contracts\BiatecPoolProvider.algo.ts:438
	// assert(!this.pools(appClammPool.id).exists)
	bytec 3 //  "p"
	frame_dig 0 // appClammPool: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts\BiatecPoolProvider.algo.ts:439
	// config: PoolConfig = {
	//       assetA: assetA.id,
	//       assetB: assetB.id,
	//       min: pMin,
	//       max: pMax,
	//       fee: fee,
	//       verificationClass: verificationClass,
	//     }
	frame_dig 1 // assetA: uint64
	itob
	frame_dig 2 // assetB: uint64
	itob
	concat
	frame_dig 4 // pMin: uint64
	itob
	concat
	frame_dig 5 // pMax: uint64
	itob
	concat
	frame_dig 6 // fee: uint64
	itob
	concat
	frame_dig 3 // verificationClass: uint64
	itob
	concat
	frame_bury 9 // config: PoolConfig

	// contracts\BiatecPoolProvider.algo.ts:447
	// assert(!this.poolsByConfig(config).exists, 'Pool with the same configuration is already registered')
	bytec 29 //  "pc"
	frame_dig 9 // config: PoolConfig
	concat
	box_len
	swap
	pop
	!

	// Pool with the same configuration is already registered
	assert

	// contracts\BiatecPoolProvider.algo.ts:448
	// this.poolsByConfig(config).value = appClammPool.id
	bytec 29 //  "pc"
	frame_dig 9 // config: PoolConfig
	concat
	frame_dig 0 // appClammPool: uint64
	itob
	box_put

	// contracts\BiatecPoolProvider.algo.ts:450
	// fullConfig: FullConfig = {
	//       appId: appClammPool.id,
	//       assetA: assetA.id,
	//       assetB: assetB.id,
	//       lpTokenId: lpToken,
	//       min: pMin,
	//       max: pMax,
	//       fee: fee,
	//       verificationClass: verificationClass as uint8,
	//     }
	frame_dig 0 // appClammPool: uint64
	itob
	frame_dig 1 // assetA: uint64
	itob
	concat
	frame_dig 2 // assetB: uint64
	itob
	concat
	frame_dig 4 // pMin: uint64
	itob
	concat
	frame_dig 5 // pMax: uint64
	itob
	concat
	frame_dig 6 // fee: uint64
	itob
	concat
	frame_dig 7 // lpToken: uint64
	itob
	concat
	frame_dig 3 // verificationClass: uint64
	itob
	dup
	bitlen
	intc 0 // 8
	<=

	// verificationClass as uint8 overflowed 8 bits
	assert
	extract 7 1
	concat
	frame_bury 10 // fullConfig: FullConfig

	// contracts\BiatecPoolProvider.algo.ts:460
	// this.fullConfigs(fullConfig).value = appClammPool.id
	pushbytes 0x6663 // "fc"
	frame_dig 10 // fullConfig: FullConfig
	concat
	frame_dig 0 // appClammPool: uint64
	itob
	box_put

	// contracts\BiatecPoolProvider.algo.ts:462
	// appPoolUintId = appClammPool.id
	frame_dig 0 // appClammPool: uint64
	frame_bury 11 // appPoolUintId: uint64

	// *if5_condition
	// contracts\BiatecPoolProvider.algo.ts:464
	// appPoolUintId != this.recentPools1.value &&
	//       appPoolUintId != this.recentPools2.value &&
	//       appPoolUintId != this.recentPools3.value &&
	//       appPoolUintId != this.recentPools4.value &&
	//       appPoolUintId != this.recentPools5.value &&
	//       appPoolUintId != this.recentPools6.value &&
	//       appPoolUintId != this.recentPools7.value &&
	//       appPoolUintId != this.recentPools8.value &&
	//       appPoolUintId != this.recentPools9.value &&
	//       appPoolUintId != this.recentPools10.value
	frame_dig 11 // appPoolUintId: uint64
	bytec 4 //  "rp1"
	app_global_get
	!=
	dup
	bz *skip_and1
	frame_dig 11 // appPoolUintId: uint64
	bytec 18 //  "rp2"
	app_global_get
	!=
	&&

*skip_and1:
	dup
	bz *skip_and2
	frame_dig 11 // appPoolUintId: uint64
	bytec 22 //  "rp3"
	app_global_get
	!=
	&&

*skip_and2:
	dup
	bz *skip_and3
	frame_dig 11 // appPoolUintId: uint64
	bytec 23 //  "rp4"
	app_global_get
	!=
	&&

*skip_and3:
	dup
	bz *skip_and4
	frame_dig 11 // appPoolUintId: uint64
	bytec 24 //  "rp5"
	app_global_get
	!=
	&&

*skip_and4:
	dup
	bz *skip_and5
	frame_dig 11 // appPoolUintId: uint64
	bytec 25 //  "rp6"
	app_global_get
	!=
	&&

*skip_and5:
	dup
	bz *skip_and6
	frame_dig 11 // appPoolUintId: uint64
	bytec 26 //  "rp7"
	app_global_get
	!=
	&&

*skip_and6:
	dup
	bz *skip_and7
	frame_dig 11 // appPoolUintId: uint64
	bytec 27 //  "rp8"
	app_global_get
	!=
	&&

*skip_and7:
	dup
	bz *skip_and8
	frame_dig 11 // appPoolUintId: uint64
	bytec 28 //  "rp9"
	app_global_get
	!=
	&&

*skip_and8:
	dup
	bz *skip_and9
	frame_dig 11 // appPoolUintId: uint64
	bytec 20 //  "rp10"
	app_global_get
	!=
	&&

*skip_and9:
	bz *if5_end

	// *if5_consequent
	// contracts\BiatecPoolProvider.algo.ts:475
	// assert(false, 'App not in recently created apps')
	intc 1 // 0

	// App not in recently created apps
	assert

*if5_end:
	// contracts\BiatecPoolProvider.algo.ts:477
	// aggregatedIndex: AssetsCombined = {
	//       assetA: assetA.id,
	//       assetB: assetB.id,
	//     }
	frame_dig 1 // assetA: uint64
	itob
	frame_dig 2 // assetB: uint64
	itob
	concat
	frame_bury 12 // aggregatedIndex: AssetsCombined

	// contracts\BiatecPoolProvider.algo.ts:481
	// latestPrice: uint64 = 0
	intc 1 // 0
	frame_bury 13 // latestPrice: uint64

	// *if6_condition
	// contracts\BiatecPoolProvider.algo.ts:482
	// this.poolsAggregated(aggregatedIndex).exists
	bytec 2 //  "s"
	frame_dig 12 // aggregatedIndex: AssetsCombined
	concat
	box_len
	swap
	pop
	bz *if6_else

	// *if6_consequent
	// contracts\BiatecPoolProvider.algo.ts:483
	// latestPrice = this.poolsAggregated(aggregatedIndex).value.latestPrice
	intc 35 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 12 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_bury 13 // latestPrice: uint64
	b *if6_end

*if6_else:
	// contracts\BiatecPoolProvider.algo.ts:485
	// latestPrice = ammPoolPrice
	frame_dig 8 // ammPoolPrice: uint64
	frame_bury 13 // latestPrice: uint64

*if6_end:
	// contracts\BiatecPoolProvider.algo.ts:487
	// data: AppPoolInfo = {
	//       assetA: assetA.id,
	//       assetB: assetB.id,
	//       verificationClass: verificationClass as uint64,
	//
	//       latestPrice: latestPrice,
	//
	//       period1Duration: this.period1.value,
	//
	//       period1NowFeeA: <uint64>0,
	//       period1NowFeeB: <uint64>0,
	//       period1NowTime: 0,
	//       period1NowVolumeA: <uint64>0,
	//       period1NowVolumeB: <uint64>0,
	//       period1NowVWAP: <uint64>0,
	//       period1PrevFeeA: <uint64>0,
	//       period1PrevFeeB: <uint64>0,
	//       period1PrevTime: 0,
	//       period1PrevVolumeA: <uint64>0,
	//       period1PrevVolumeB: <uint64>0,
	//       period1PrevVWAP: <uint64>0,
	//
	//       period2Duration: this.period2.value,
	//
	//       period2NowFeeA: <uint64>0,
	//       period2NowFeeB: <uint64>0,
	//       period2NowTime: 0,
	//       period2NowVolumeA: <uint64>0,
	//       period2NowVolumeB: <uint64>0,
	//       period2NowVWAP: <uint64>0,
	//       period2PrevFeeA: <uint64>0,
	//       period2PrevFeeB: <uint64>0,
	//       period2PrevTime: 0,
	//       period2PrevVolumeA: <uint64>0,
	//       period2PrevVolumeB: <uint64>0,
	//       period2PrevVWAP: <uint64>0,
	//
	//       period3Duration: this.period3.value,
	//
	//       period3NowFeeA: <uint64>0,
	//       period3NowFeeB: <uint64>0,
	//       period3NowTime: 0,
	//       period3NowVolumeA: <uint64>0,
	//       period3NowVolumeB: <uint64>0,
	//       period3NowVWAP: <uint64>0,
	//       period3PrevFeeA: <uint64>0,
	//       period3PrevFeeB: <uint64>0,
	//       period3PrevTime: 0,
	//       period3PrevVolumeA: <uint64>0,
	//       period3PrevVolumeB: <uint64>0,
	//       period3PrevVWAP: <uint64>0,
	//
	//       period4Duration: this.period4.value,
	//
	//       period4NowFeeA: <uint64>0,
	//       period4NowFeeB: <uint64>0,
	//       period4NowTime: 0,
	//       period4NowVolumeA: <uint64>0,
	//       period4NowVolumeB: <uint64>0,
	//       period4NowVWAP: <uint64>0,
	//       period4PrevFeeA: <uint64>0,
	//       period4PrevFeeB: <uint64>0,
	//       period4PrevTime: 0,
	//       period4PrevVolumeA: <uint64>0,
	//       period4PrevVolumeB: <uint64>0,
	//       period4PrevVWAP: <uint64>0,
	//
	//       // period5Duration: this.period5.value,
	//
	//       // period5NowFeeA: <uint64>0,
	//       // period5NowFeeB: <uint64>0,
	//       // period5NowTime: 0,
	//       // period5NowVolumeA: <uint64>0,
	//       // period5NowVolumeB: <uint64>0,
	//       // period5NowVWAP: <uint64>0,
	//       // period5PrevFeeA: <uint64>0,
	//       // period5PrevFeeB: <uint64>0,
	//       // period5PrevTime: 0,
	//       // period5PrevVolumeA: <uint64>0,
	//       // period5PrevVolumeB: <uint64>0,
	//       // period5PrevVWAP: <uint64>0,
	//
	//       // period6Duration: this.period6.value,
	//
	//       // period6NowFeeA: <uint64>0,
	//       // period6NowFeeB: <uint64>0,
	//       // period6NowTime: 0,
	//       // period6NowVolumeA: <uint64>0,
	//       // period6NowVolumeB: <uint64>0,
	//       // period6NowVWAP: <uint64>0,
	//       // period6PrevFeeA: <uint64>0,
	//       // period6PrevFeeB: <uint64>0,
	//       // period6PrevTime: 0,
	//       // period6PrevVolumeA: <uint64>0,
	//       // period6PrevVolumeB: <uint64>0,
	//       // period6PrevVWAP: <uint64>0,
	//     }
	frame_dig 1 // assetA: uint64
	itob
	frame_dig 2 // assetB: uint64
	itob
	concat
	frame_dig 3 // verificationClass: uint64
	itob
	concat
	frame_dig 13 // latestPrice: uint64
	itob
	concat
	bytec 6 //  "p1"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 7 //  "p2"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 8 //  "p3"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 9 //  "p4"
	app_global_get
	itob
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	bytec 0 // 0x0000000000000000
	concat
	frame_bury 14 // data: AppPoolInfo

	// contracts\BiatecPoolProvider.algo.ts:584
	// this.pools(appClammPool.id).value = data
	bytec 3 //  "p"
	frame_dig 0 // appClammPool: uint64
	itob
	concat
	frame_dig 14 // data: AppPoolInfo
	box_put

	// *if7_condition
	// contracts\BiatecPoolProvider.algo.ts:586
	// !this.poolsAggregated(aggregatedIndex).exists
	bytec 2 //  "s"
	frame_dig 12 // aggregatedIndex: AssetsCombined
	concat
	box_len
	swap
	pop
	!
	bz *if7_end

	// *if7_consequent
	// contracts\BiatecPoolProvider.algo.ts:587
	// this.poolsAggregated(aggregatedIndex).value = data
	bytec 2 //  "s"
	frame_dig 12 // aggregatedIndex: AssetsCombined
	concat
	frame_dig 14 // data: AppPoolInfo
	box_put

*if7_end:
	retsub

// updatePriceBoxInfo(appPoolId: AppID, assetA: AssetID, assetB: AssetID, priceFrom: uint64, priceTo: uint64, amountA: uint64, amountB: uint64, feeAmountA: uint64, feeAmountB: uint64): AppPoolInfo
updatePriceBoxInfo:
	proto 9 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 21

	// contracts\BiatecPoolProvider.algo.ts:602
	// info = this.pools(appPoolId.id).value
	bytec 3 //  "p"
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	frame_bury 0 // storage key//info

	// contracts\BiatecPoolProvider.algo.ts:603
	// assert(assetA.id === info.assetA)
	frame_dig -2 // assetA: AssetID
	intc 1 // 0
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:604
	// assert(assetB.id === info.assetB)
	frame_dig -3 // assetB: AssetID
	intc 0 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:605
	// assert(amountA > 0 && amountB > 0)
	frame_dig -6 // amountA: uint64
	intc 1 // 0
	>
	dup
	bz *skip_and10
	frame_dig -7 // amountB: uint64
	intc 1 // 0
	>
	&&

*skip_and10:
	assert

	// contracts\BiatecPoolProvider.algo.ts:607
	// netAmountA = amountA - feeAmountA
	frame_dig -6 // amountA: uint64
	frame_dig -8 // feeAmountA: uint64
	-
	frame_bury 1 // netAmountA: uint64

	// contracts\BiatecPoolProvider.algo.ts:608
	// netAmountB = amountB - feeAmountB
	frame_dig -7 // amountB: uint64
	frame_dig -9 // feeAmountB: uint64
	-
	frame_bury 2 // netAmountB: uint64

	// contracts\BiatecPoolProvider.algo.ts:610
	// price = (priceFrom + priceTo) / <uint64>2
	frame_dig -4 // priceFrom: uint64
	frame_dig -5 // priceTo: uint64
	+
	intc 30 // 2
	/
	frame_bury 3 // price: uint64

	// contracts\BiatecPoolProvider.algo.ts:611
	// priceUint256 = price as uint256
	frame_dig 3 // price: uint64
	itob
	frame_bury 4 // priceUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:612
	// amountBUint256 = netAmountB as uint256
	frame_dig 2 // netAmountB: uint64
	itob
	frame_bury 5 // amountBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:613
	// info.latestPrice = price
	intc 35 //  headOffset
	frame_dig 3 // price: uint64
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:614
	// period1IterFromNowObj = info.period1NowTime / this.period1.value
	intc 9 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:614
	// this.period1.value
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 6 // period1IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:615
	// period1IterFromCurrTime = globals.latestTimestamp / this.period1.value
	global LatestTimestamp
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 7 // period1IterFromCurrTime: uint64

	// *if8_condition
	// contracts\BiatecPoolProvider.algo.ts:618
	// period1IterFromNowObj !== period1IterFromCurrTime
	frame_dig 6 // period1IterFromNowObj: uint64
	frame_dig 7 // period1IterFromCurrTime: uint64
	!=
	bz *if8_end

	// *if8_consequent
	// contracts\BiatecPoolProvider.algo.ts:620
	// info.period1PrevFeeA = info.period1NowFeeA
	intc 52 //  headOffset
	intc 19 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:621
	// info.period1NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 19 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:622
	// info.period1PrevFeeB = info.period1NowFeeB
	intc 53 //  headOffset
	intc 3 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:623
	// info.period1NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 3 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:624
	// info.period1PrevVWAP = info.period1NowVWAP
	intc 54 //  headOffset
	intc 27 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:625
	// info.period1PrevVolumeA = info.period1NowVolumeA
	intc 50 //  headOffset
	intc 18 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:626
	// info.period1NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 18 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:627
	// info.period1PrevVolumeB = info.period1NowVolumeB
	intc 51 //  headOffset
	intc 8 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:628
	// info.period1NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 8 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:629
	// info.period1PrevTime = info.period1NowTime
	intc 55 //  headOffset
	intc 9 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if9_condition
	// contracts\BiatecPoolProvider.algo.ts:630
	// info.period1NowTime === 0
	intc 9 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if9_else

	// *if9_consequent
	// contracts\BiatecPoolProvider.algo.ts:631
	// info.period1NowTime = globals.latestTimestamp
	intc 9 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if9_end

*if9_else:
	// contracts\BiatecPoolProvider.algo.ts:633
	// info.period1NowTime = period1IterFromCurrTime * this.period1.value
	intc 9 //  headOffset
	frame_dig 7 // period1IterFromCurrTime: uint64
	bytec 6 //  "p1"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if9_end:

*if8_end:
	// contracts\BiatecPoolProvider.algo.ts:637
	// info.period1NowFeeA = info.period1NowFeeA + feeAmountA
	intc 19 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:638
	// info.period1NowFeeB = info.period1NowFeeB + feeAmountB
	intc 3 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:639
	// period1NowVolumeBUint256 = info.period1NowVolumeB as uint256
	intc 8 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 8 // period1NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:640
	// period1NowVWAPUint256 = info.period1NowVWAP as uint256
	intc 27 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 9 // period1NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:641
	// info.period1NowVWAP = ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) / (period1NowVolumeBUint256 + amountBUint256)) as uint64
	intc 27 //  headOffset
	frame_dig 8 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 9 // period1NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 8 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) / (period1NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:642
	// info.period1NowVolumeA = info.period1NowVolumeA + netAmountA
	intc 18 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:643
	// info.period1NowVolumeB = info.period1NowVolumeB + netAmountB
	intc 8 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:646
	// period2IterFromNowObj = info.period2NowTime / this.period2.value
	intc 11 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:646
	// this.period2.value
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 10 // period2IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:647
	// period2IterFromCurrTime = globals.latestTimestamp / this.period2.value
	global LatestTimestamp
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 11 // period2IterFromCurrTime: uint64

	// *if10_condition
	// contracts\BiatecPoolProvider.algo.ts:650
	// period2IterFromNowObj !== period2IterFromCurrTime
	frame_dig 10 // period2IterFromNowObj: uint64
	frame_dig 11 // period2IterFromCurrTime: uint64
	!=
	bz *if10_end

	// *if10_consequent
	// contracts\BiatecPoolProvider.algo.ts:652
	// info.period2PrevFeeA = info.period2NowFeeA
	intc 58 //  headOffset
	intc 21 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:653
	// info.period2NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 21 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:654
	// info.period2PrevFeeB = info.period2NowFeeB
	intc 59 //  headOffset
	intc 22 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:655
	// info.period2NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 22 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:656
	// info.period2PrevVWAP = info.period2NowVWAP
	intc 60 //  headOffset
	intc 28 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:657
	// info.period2PrevVolumeA = info.period2NowVolumeA
	intc 56 //  headOffset
	intc 20 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:658
	// info.period2NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 20 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:659
	// info.period2PrevVolumeB = info.period2NowVolumeB
	intc 57 //  headOffset
	intc 10 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:660
	// info.period2NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 10 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:661
	// info.period2PrevTime = info.period2NowTime
	intc 61 //  headOffset
	intc 11 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if11_condition
	// contracts\BiatecPoolProvider.algo.ts:662
	// info.period2NowTime === 0
	intc 11 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if11_else

	// *if11_consequent
	// contracts\BiatecPoolProvider.algo.ts:663
	// info.period2NowTime = globals.latestTimestamp
	intc 11 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if11_end

*if11_else:
	// contracts\BiatecPoolProvider.algo.ts:665
	// info.period2NowTime = period2IterFromCurrTime * this.period2.value
	intc 11 //  headOffset
	frame_dig 11 // period2IterFromCurrTime: uint64
	bytec 7 //  "p2"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if11_end:

*if10_end:
	// contracts\BiatecPoolProvider.algo.ts:669
	// info.period2NowFeeA = info.period2NowFeeA + feeAmountA
	intc 21 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:670
	// info.period2NowFeeB = info.period2NowFeeB + feeAmountB
	intc 22 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:671
	// period2NowVolumeBUint256 = info.period2NowVolumeB as uint256
	intc 10 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 12 // period2NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:672
	// period2NowVWAPUint256 = info.period2NowVWAP as uint256
	intc 28 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 13 // period2NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:673
	// info.period2NowVWAP = ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) / (period2NowVolumeBUint256 + amountBUint256)) as uint64
	intc 28 //  headOffset
	frame_dig 12 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 13 // period2NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 12 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) / (period2NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:674
	// info.period2NowVolumeA = info.period2NowVolumeA + netAmountA
	intc 20 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:675
	// info.period2NowVolumeB = info.period2NowVolumeB + netAmountB
	intc 10 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:678
	// period3IterFromNowObj = info.period3NowTime / this.period3.value
	intc 5 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:678
	// this.period3.value
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 14 // period3IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:679
	// period3IterFromCurrTime = globals.latestTimestamp / this.period3.value
	global LatestTimestamp
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 15 // period3IterFromCurrTime: uint64

	// *if12_condition
	// contracts\BiatecPoolProvider.algo.ts:682
	// period3IterFromNowObj !== period3IterFromCurrTime
	frame_dig 14 // period3IterFromNowObj: uint64
	frame_dig 15 // period3IterFromCurrTime: uint64
	!=
	bz *if12_end

	// *if12_consequent
	// contracts\BiatecPoolProvider.algo.ts:684
	// info.period3PrevFeeA = info.period3NowFeeA
	intc 38 //  headOffset
	intc 12 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:685
	// info.period3NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 12 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:686
	// info.period3PrevFeeB = info.period3NowFeeB
	intc 39 //  headOffset
	intc 13 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:687
	// info.period3NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 13 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:688
	// info.period3PrevVWAP = info.period3NowVWAP
	intc 40 //  headOffset
	intc 24 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:689
	// info.period3PrevVolumeA = info.period3NowVolumeA
	intc 36 //  headOffset
	intc 23 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:690
	// info.period3NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 23 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:691
	// info.period3PrevVolumeB = info.period3NowVolumeB
	intc 37 //  headOffset
	intc 4 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:692
	// info.period3NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 4 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:693
	// info.period3PrevTime = info.period3NowTime
	intc 41 //  headOffset
	intc 5 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if13_condition
	// contracts\BiatecPoolProvider.algo.ts:694
	// info.period3NowTime === 0
	intc 5 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if13_else

	// *if13_consequent
	// contracts\BiatecPoolProvider.algo.ts:695
	// info.period3NowTime = globals.latestTimestamp
	intc 5 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if13_end

*if13_else:
	// contracts\BiatecPoolProvider.algo.ts:697
	// info.period3NowTime = period3IterFromCurrTime * this.period3.value
	intc 5 //  headOffset
	frame_dig 15 // period3IterFromCurrTime: uint64
	bytec 8 //  "p3"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if13_end:

*if12_end:
	// contracts\BiatecPoolProvider.algo.ts:701
	// info.period3NowFeeA = info.period3NowFeeA + feeAmountA
	intc 12 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:702
	// info.period3NowFeeB = info.period3NowFeeB + feeAmountB
	intc 13 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:703
	// period3NowVolumeBUint256 = info.period3NowVolumeB as uint256
	intc 4 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 16 // period3NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:704
	// period3NowVWAPUint256 = info.period3NowVWAP as uint256
	intc 24 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 17 // period3NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:705
	// info.period3NowVWAP = ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) / (period3NowVolumeBUint256 + amountBUint256)) as uint64
	intc 24 //  headOffset
	frame_dig 16 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 17 // period3NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 16 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) / (period3NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:706
	// info.period3NowVolumeA = info.period3NowVolumeA + netAmountA
	intc 23 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:707
	// info.period3NowVolumeB = info.period3NowVolumeB + netAmountB
	intc 4 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:709
	// period4IterFromNowObj = info.period4NowTime / this.period4.value
	intc 7 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi

	// contracts\BiatecPoolProvider.algo.ts:709
	// this.period4.value
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 18 // period4IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:710
	// period4IterFromCurrTime = globals.latestTimestamp / this.period4.value
	global LatestTimestamp
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 19 // period4IterFromCurrTime: uint64

	// *if14_condition
	// contracts\BiatecPoolProvider.algo.ts:713
	// period4IterFromNowObj !== period4IterFromCurrTime
	frame_dig 18 // period4IterFromNowObj: uint64
	frame_dig 19 // period4IterFromCurrTime: uint64
	!=
	bz *if14_end

	// *if14_consequent
	// contracts\BiatecPoolProvider.algo.ts:715
	// info.period4PrevFeeA = info.period4NowFeeA
	intc 44 //  headOffset
	intc 15 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:716
	// info.period4NowFeeA = 0
	frame_dig 0 // storage key//info
	intc 15 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:717
	// info.period4PrevFeeB = info.period4NowFeeB
	intc 45 //  headOffset
	intc 16 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:718
	// info.period4NowFeeB = 0
	frame_dig 0 // storage key//info
	intc 16 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:719
	// info.period4PrevVWAP = info.period4NowVWAP
	intc 46 //  headOffset
	intc 25 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:720
	// info.period4PrevVolumeA = info.period4NowVolumeA
	intc 42 //  headOffset
	intc 14 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:721
	// info.period4NowVolumeA = 0
	frame_dig 0 // storage key//info
	intc 14 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:722
	// info.period4PrevVolumeB = info.period4NowVolumeB
	intc 43 //  headOffset
	intc 6 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:723
	// info.period4NowVolumeB = 0
	frame_dig 0 // storage key//info
	intc 6 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:724
	// info.period4PrevTime = info.period4NowTime
	intc 47 //  headOffset
	intc 7 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// *if15_condition
	// contracts\BiatecPoolProvider.algo.ts:725
	// info.period4NowTime === 0
	intc 7 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if15_else

	// *if15_consequent
	// contracts\BiatecPoolProvider.algo.ts:726
	// info.period4NowTime = globals.latestTimestamp
	intc 7 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace
	b *if15_end

*if15_else:
	// contracts\BiatecPoolProvider.algo.ts:728
	// info.period4NowTime = period4IterFromCurrTime * this.period4.value
	intc 7 //  headOffset
	frame_dig 19 // period4IterFromCurrTime: uint64
	bytec 9 //  "p4"
	app_global_get
	*
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

*if15_end:

*if14_end:
	// contracts\BiatecPoolProvider.algo.ts:732
	// info.period4NowFeeA = info.period4NowFeeA + feeAmountA
	intc 15 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:733
	// info.period4NowFeeB = info.period4NowFeeB + feeAmountB
	intc 16 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -9 // feeAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:734
	// period4NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 6 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 20 // period4NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:735
	// period4NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 25 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 21 // period4NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:736
	// info.period4NowVWAP = ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) / (period4NowVolumeBUint256 + amountBUint256)) as uint64
	intc 25 //  headOffset
	frame_dig 20 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 21 // period4NowVWAPUint256: unsafe uint256
	b*
	frame_dig 5 // amountBUint256: unsafe uint256
	frame_dig 4 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 20 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 5 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) / (period4NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:737
	// info.period4NowVolumeA = info.period4NowVolumeA + netAmountA
	intc 14 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // netAmountA: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:738
	// info.period4NowVolumeB = info.period4NowVolumeB + netAmountB
	intc 6 //  headOffset
	dup
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:602
	// appPoolId.id
	frame_dig -1 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountB: uint64
	+
	itob
	frame_dig 0 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:803
	// return info;
	frame_dig 0 // storage key//info
	box_get

	// box value does not exist: this.pools(appPoolId.id).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 21
	retsub

// updatePriceBoxAggregated(assetA: AssetID, assetB: AssetID, priceFrom: uint64, priceTo: uint64, amountA: uint64, amountB: uint64, feeAmountA: uint64, feeAmountB: uint64): AppPoolInfo
updatePriceBoxAggregated:
	proto 8 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 22

	// contracts\BiatecPoolProvider.algo.ts:807
	// aggregatedIndex: AssetsCombined = { assetA: assetA.id, assetB: assetB.id }
	frame_dig -1 // assetA: AssetID
	itob
	frame_dig -2 // assetB: AssetID
	itob
	concat
	frame_bury 0 // aggregatedIndex: AssetsCombined

	// contracts\BiatecPoolProvider.algo.ts:808
	// info = this.poolsAggregated(aggregatedIndex).value
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	frame_bury 1 // storage key//info

	// contracts\BiatecPoolProvider.algo.ts:809
	// assert(assetA.id === info.assetA)
	frame_dig -1 // assetA: AssetID
	intc 1 // 0
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:810
	// assert(assetB.id === info.assetB)
	frame_dig -2 // assetB: AssetID
	intc 0 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:811
	// assert(amountA > 0 && amountB > 0)
	frame_dig -5 // amountA: uint64
	intc 1 // 0
	>
	dup
	bz *skip_and11
	frame_dig -6 // amountB: uint64
	intc 1 // 0
	>
	&&

*skip_and11:
	assert

	// contracts\BiatecPoolProvider.algo.ts:813
	// netAmountA = amountA - feeAmountA
	frame_dig -5 // amountA: uint64
	frame_dig -7 // feeAmountA: uint64
	-
	frame_bury 2 // netAmountA: uint64

	// contracts\BiatecPoolProvider.algo.ts:814
	// netAmountB = amountB - feeAmountB
	frame_dig -6 // amountB: uint64
	frame_dig -8 // feeAmountB: uint64
	-
	frame_bury 3 // netAmountB: uint64

	// contracts\BiatecPoolProvider.algo.ts:816
	// price = (priceFrom + priceTo) / <uint64>2
	frame_dig -3 // priceFrom: uint64
	frame_dig -4 // priceTo: uint64
	+
	intc 30 // 2
	/
	frame_bury 4 // price: uint64

	// contracts\BiatecPoolProvider.algo.ts:817
	// priceUint256 = price as uint256
	frame_dig 4 // price: uint64
	itob
	frame_bury 5 // priceUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:818
	// amountBUint256 = netAmountB as uint256
	frame_dig 3 // netAmountB: uint64
	itob
	frame_bury 6 // amountBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:819
	// info.latestPrice = price
	intc 35 //  headOffset
	frame_dig 4 // price: uint64
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:820
	// period1IterFromNowObj = info.period1NowTime / this.period1.value
	intc 9 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 7 // period1IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:821
	// period1IterFromCurrTime = globals.latestTimestamp / this.period1.value
	global LatestTimestamp
	bytec 6 //  "p1"
	app_global_get
	/
	frame_bury 8 // period1IterFromCurrTime: uint64

	// *if16_condition
	// contracts\BiatecPoolProvider.algo.ts:824
	// period1IterFromNowObj !== period1IterFromCurrTime
	frame_dig 7 // period1IterFromNowObj: uint64
	frame_dig 8 // period1IterFromCurrTime: uint64
	!=
	bz *if16_end

	// *if16_consequent
	// contracts\BiatecPoolProvider.algo.ts:826
	// info.period1PrevFeeA = info.period1NowFeeA
	intc 52 //  headOffset
	intc 19 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:827
	// info.period1NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 19 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:828
	// info.period1PrevFeeB = info.period1NowFeeB
	intc 53 //  headOffset
	intc 3 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:829
	// info.period1NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 3 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:830
	// info.period1PrevVWAP = info.period1NowVWAP
	intc 54 //  headOffset
	intc 27 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:831
	// info.period1PrevVolumeA = info.period1NowVolumeA
	intc 50 //  headOffset
	intc 18 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:832
	// info.period1NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 18 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:833
	// info.period1PrevVolumeB = info.period1NowVolumeB
	intc 51 //  headOffset
	intc 8 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:834
	// info.period1NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 8 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:835
	// info.period1PrevTime = info.period1NowTime
	intc 55 //  headOffset
	intc 9 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if17_condition
	// contracts\BiatecPoolProvider.algo.ts:836
	// info.period1NowTime === 0
	intc 9 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if17_else

	// *if17_consequent
	// contracts\BiatecPoolProvider.algo.ts:837
	// info.period1NowTime = globals.latestTimestamp
	intc 9 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if17_end

*if17_else:
	// contracts\BiatecPoolProvider.algo.ts:839
	// info.period1NowTime = period1IterFromCurrTime * this.period1.value
	intc 9 //  headOffset
	frame_dig 8 // period1IterFromCurrTime: uint64
	bytec 6 //  "p1"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if17_end:

*if16_end:
	// contracts\BiatecPoolProvider.algo.ts:843
	// info.period1NowFeeA = info.period1NowFeeA + feeAmountA
	intc 19 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:844
	// info.period1NowFeeB = info.period1NowFeeB + feeAmountB
	intc 3 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:845
	// period1NowVolumeBUint256 = info.period1NowVolumeB as uint256
	intc 8 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 9 // period1NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:846
	// period1NowVWAPUint256 = info.period1NowVWAP as uint256
	intc 27 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 10 // period1NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:847
	// info.period1NowVWAP = ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) / (period1NowVolumeBUint256 + amountBUint256)) as uint64
	intc 27 //  headOffset
	frame_dig 9 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 10 // period1NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 9 // period1NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period1NowVolumeBUint256 * period1NowVWAPUint256 + amountBUint256 * priceUint256) / (period1NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:848
	// info.period1NowVolumeA = info.period1NowVolumeA + netAmountA
	intc 18 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:849
	// info.period1NowVolumeB = info.period1NowVolumeB + netAmountB
	intc 8 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:852
	// period2IterFromNowObj = info.period2NowTime / this.period2.value
	intc 11 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 11 // period2IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:853
	// period2IterFromCurrTime = globals.latestTimestamp / this.period2.value
	global LatestTimestamp
	bytec 7 //  "p2"
	app_global_get
	/
	frame_bury 12 // period2IterFromCurrTime: uint64

	// *if18_condition
	// contracts\BiatecPoolProvider.algo.ts:856
	// period2IterFromNowObj !== period2IterFromCurrTime
	frame_dig 11 // period2IterFromNowObj: uint64
	frame_dig 12 // period2IterFromCurrTime: uint64
	!=
	bz *if18_end

	// *if18_consequent
	// contracts\BiatecPoolProvider.algo.ts:858
	// info.period2PrevFeeA = info.period2NowFeeA
	intc 58 //  headOffset
	intc 21 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:859
	// info.period2NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 21 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:860
	// info.period2PrevFeeB = info.period2NowFeeB
	intc 59 //  headOffset
	intc 22 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:861
	// info.period2NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 22 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:862
	// info.period2PrevVWAP = info.period2NowVWAP
	intc 60 //  headOffset
	intc 28 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:863
	// info.period2PrevVolumeA = info.period2NowVolumeA
	intc 56 //  headOffset
	intc 20 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:864
	// info.period2NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 20 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:865
	// info.period2PrevVolumeB = info.period2NowVolumeB
	intc 57 //  headOffset
	intc 10 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:866
	// info.period2NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 10 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:867
	// info.period2PrevTime = info.period2NowTime
	intc 61 //  headOffset
	intc 11 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if19_condition
	// contracts\BiatecPoolProvider.algo.ts:868
	// info.period2NowTime === 0
	intc 11 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if19_else

	// *if19_consequent
	// contracts\BiatecPoolProvider.algo.ts:869
	// info.period2NowTime = globals.latestTimestamp
	intc 11 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if19_end

*if19_else:
	// contracts\BiatecPoolProvider.algo.ts:871
	// info.period2NowTime = period2IterFromCurrTime * this.period2.value
	intc 11 //  headOffset
	frame_dig 12 // period2IterFromCurrTime: uint64
	bytec 7 //  "p2"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if19_end:

*if18_end:
	// contracts\BiatecPoolProvider.algo.ts:875
	// info.period2NowFeeA = info.period2NowFeeA + feeAmountA
	intc 21 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:876
	// info.period2NowFeeB = info.period2NowFeeB + feeAmountB
	intc 22 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:877
	// period2NowVolumeBUint256 = info.period2NowVolumeB as uint256
	intc 10 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 13 // period2NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:878
	// period2NowVWAPUint256 = info.period2NowVWAP as uint256
	intc 28 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 14 // period2NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:879
	// info.period2NowVWAP = ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) / (period2NowVolumeBUint256 + amountBUint256)) as uint64
	intc 28 //  headOffset
	frame_dig 13 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 14 // period2NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 13 // period2NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period2NowVolumeBUint256 * period2NowVWAPUint256 + amountBUint256 * priceUint256) / (period2NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:880
	// info.period2NowVolumeA = info.period2NowVolumeA + netAmountA
	intc 20 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:881
	// info.period2NowVolumeB = info.period2NowVolumeB + netAmountB
	intc 10 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:884
	// period3IterFromNowObj = info.period3NowTime / this.period3.value
	intc 5 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 15 // period3IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:885
	// period3IterFromCurrTime = globals.latestTimestamp / this.period3.value
	global LatestTimestamp
	bytec 8 //  "p3"
	app_global_get
	/
	frame_bury 16 // period3IterFromCurrTime: uint64

	// *if20_condition
	// contracts\BiatecPoolProvider.algo.ts:888
	// period3IterFromNowObj !== period3IterFromCurrTime
	frame_dig 15 // period3IterFromNowObj: uint64
	frame_dig 16 // period3IterFromCurrTime: uint64
	!=
	bz *if20_end

	// *if20_consequent
	// contracts\BiatecPoolProvider.algo.ts:890
	// info.period3PrevFeeA = info.period3NowFeeA
	intc 38 //  headOffset
	intc 12 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:891
	// info.period3NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 12 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:892
	// info.period3PrevFeeB = info.period3NowFeeB
	intc 39 //  headOffset
	intc 13 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:893
	// info.period3NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 13 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:894
	// info.period3PrevVWAP = info.period3NowVWAP
	intc 40 //  headOffset
	intc 24 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:895
	// info.period3PrevVolumeA = info.period3NowVolumeA
	intc 36 //  headOffset
	intc 23 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:896
	// info.period3NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 23 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:897
	// info.period3PrevVolumeB = info.period3NowVolumeB
	intc 37 //  headOffset
	intc 4 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:898
	// info.period3NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 4 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:899
	// info.period3PrevTime = info.period3NowTime
	intc 41 //  headOffset
	intc 5 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if21_condition
	// contracts\BiatecPoolProvider.algo.ts:900
	// info.period3NowTime === 0
	intc 5 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if21_else

	// *if21_consequent
	// contracts\BiatecPoolProvider.algo.ts:901
	// info.period3NowTime = globals.latestTimestamp
	intc 5 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if21_end

*if21_else:
	// contracts\BiatecPoolProvider.algo.ts:903
	// info.period3NowTime = period3IterFromCurrTime * this.period3.value
	intc 5 //  headOffset
	frame_dig 16 // period3IterFromCurrTime: uint64
	bytec 8 //  "p3"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if21_end:

*if20_end:
	// contracts\BiatecPoolProvider.algo.ts:907
	// info.period3NowFeeA = info.period3NowFeeA + feeAmountA
	intc 12 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:908
	// info.period3NowFeeB = info.period3NowFeeB + feeAmountB
	intc 13 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:909
	// period3NowVolumeBUint256 = info.period3NowVolumeB as uint256
	intc 4 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 17 // period3NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:910
	// period3NowVWAPUint256 = info.period3NowVWAP as uint256
	intc 24 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 18 // period3NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:911
	// info.period3NowVWAP = ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) / (period3NowVolumeBUint256 + amountBUint256)) as uint64
	intc 24 //  headOffset
	frame_dig 17 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 18 // period3NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 17 // period3NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period3NowVolumeBUint256 * period3NowVWAPUint256 + amountBUint256 * priceUint256) / (period3NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:912
	// info.period3NowVolumeA = info.period3NowVolumeA + netAmountA
	intc 23 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:913
	// info.period3NowVolumeB = info.period3NowVolumeB + netAmountB
	intc 4 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:915
	// period4IterFromNowObj = info.period4NowTime / this.period4.value
	intc 7 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 19 // period4IterFromNowObj: uint64

	// contracts\BiatecPoolProvider.algo.ts:916
	// period4IterFromCurrTime = globals.latestTimestamp / this.period4.value
	global LatestTimestamp
	bytec 9 //  "p4"
	app_global_get
	/
	frame_bury 20 // period4IterFromCurrTime: uint64

	// *if22_condition
	// contracts\BiatecPoolProvider.algo.ts:919
	// period4IterFromNowObj !== period4IterFromCurrTime
	frame_dig 19 // period4IterFromNowObj: uint64
	frame_dig 20 // period4IterFromCurrTime: uint64
	!=
	bz *if22_end

	// *if22_consequent
	// contracts\BiatecPoolProvider.algo.ts:921
	// info.period4PrevFeeA = info.period4NowFeeA
	intc 44 //  headOffset
	intc 15 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:922
	// info.period4NowFeeA = 0
	frame_dig 1 // storage key//info
	intc 15 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:923
	// info.period4PrevFeeB = info.period4NowFeeB
	intc 45 //  headOffset
	intc 16 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:924
	// info.period4NowFeeB = 0
	frame_dig 1 // storage key//info
	intc 16 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:925
	// info.period4PrevVWAP = info.period4NowVWAP
	intc 46 //  headOffset
	intc 25 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:926
	// info.period4PrevVolumeA = info.period4NowVolumeA
	intc 42 //  headOffset
	intc 14 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:927
	// info.period4NowVolumeA = 0
	frame_dig 1 // storage key//info
	intc 14 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:928
	// info.period4PrevVolumeB = info.period4NowVolumeB
	intc 43 //  headOffset
	intc 6 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:929
	// info.period4NowVolumeB = 0
	frame_dig 1 // storage key//info
	intc 6 //  headOffset
	bytec 0 // 0x0000000000000000
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:930
	// info.period4PrevTime = info.period4NowTime
	intc 47 //  headOffset
	intc 7 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// *if23_condition
	// contracts\BiatecPoolProvider.algo.ts:931
	// info.period4NowTime === 0
	intc 7 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 0
	==
	bz *if23_else

	// *if23_consequent
	// contracts\BiatecPoolProvider.algo.ts:932
	// info.period4NowTime = globals.latestTimestamp
	intc 7 //  headOffset
	global LatestTimestamp
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace
	b *if23_end

*if23_else:
	// contracts\BiatecPoolProvider.algo.ts:934
	// info.period4NowTime = period4IterFromCurrTime * this.period4.value
	intc 7 //  headOffset
	frame_dig 20 // period4IterFromCurrTime: uint64
	bytec 9 //  "p4"
	app_global_get
	*
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

*if23_end:

*if22_end:
	// contracts\BiatecPoolProvider.algo.ts:938
	// info.period4NowFeeA = info.period4NowFeeA + feeAmountA
	intc 15 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -7 // feeAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:939
	// info.period4NowFeeB = info.period4NowFeeB + feeAmountB
	intc 16 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig -8 // feeAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:940
	// period4NowVolumeBUint256 = info.period4NowVolumeB as uint256
	intc 6 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 21 // period4NowVolumeBUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:941
	// period4NowVWAPUint256 = info.period4NowVWAP as uint256
	intc 25 //  headOffset
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_bury 22 // period4NowVWAPUint256: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:942
	// info.period4NowVWAP = ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) / (period4NowVolumeBUint256 + amountBUint256)) as uint64
	intc 25 //  headOffset
	frame_dig 21 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 22 // period4NowVWAPUint256: unsafe uint256
	b*
	frame_dig 6 // amountBUint256: unsafe uint256
	frame_dig 5 // priceUint256: unsafe uint256
	b*
	b+
	frame_dig 21 // period4NowVolumeBUint256: unsafe uint256
	frame_dig 6 // amountBUint256: unsafe uint256
	b+
	b/
	dup
	bitlen
	intc 3 // 64
	<=

	// ((period4NowVolumeBUint256 * period4NowVWAPUint256 + amountBUint256 * priceUint256) / (period4NowVolumeBUint256 + amountBUint256)) as uint64 overflowed 64 bits
	assert
	bytec 5 // 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 8
	-
	swap
	substring3
	btoi
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:943
	// info.period4NowVolumeA = info.period4NowVolumeA + netAmountA
	intc 14 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 2 // netAmountA: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:944
	// info.period4NowVolumeB = info.period4NowVolumeB + netAmountB
	intc 6 //  headOffset
	dup
	intc 0 // 8
	bytec 2 //  "s"
	frame_dig 0 // aggregatedIndex: AssetsCombined
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // netAmountB: uint64
	+
	itob
	frame_dig 1 // storage key//info
	cover 2
	box_replace

	// contracts\BiatecPoolProvider.algo.ts:1009
	// return info;
	frame_dig 1 // storage key//info
	box_get

	// box value does not exist: this.poolsAggregated(aggregatedIndex).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 22
	retsub

// registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void
*abi_route_registerTrade:
	// s: uint64
	txna ApplicationArgs 10
	btoi

	// feeAmountB: uint64
	txna ApplicationArgs 9
	btoi

	// feeAmountA: uint64
	txna ApplicationArgs 8
	btoi

	// amountB: uint64
	txna ApplicationArgs 7
	btoi

	// amountA: uint64
	txna ApplicationArgs 6
	btoi

	// priceTo: uint64
	txna ApplicationArgs 5
	btoi

	// priceFrom: uint64
	txna ApplicationArgs 4
	btoi

	// assetB: uint64
	txna ApplicationArgs 3
	btoi

	// assetA: uint64
	txna ApplicationArgs 2
	btoi

	// appPoolId: uint64
	txna ApplicationArgs 1
	btoi

	// execute registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void
	callsub registerTrade
	intc 2 // 1
	return

// registerTrade(appPoolId: AppID, assetA: AssetID, assetB: AssetID, priceFrom: uint64, priceTo: uint64, amountA: uint64, amountB: uint64, feeAmountA: uint64, feeAmountB: uint64, s: uint64): void
//
// This metod registers the trade and calculates and store the trade statistics
//
// @param appPoolId Liquidity pool smart contract
// @param assetA Asset A
// @param assetB Asset B
// @param priceFrom The original price
// @param priceTo The new price
// @param amountA Asset A amount spent or received
// @param amountB Asset B amount spent or received
// @param feeAmountA Fees paid in asset A if any
// @param feeAmountB Fees paid in asset B if any
// @param s Scale multiplier
registerTrade:
	proto 10 0

	// contracts\BiatecPoolProvider.algo.ts:1030
	// increaseOpcodeBudget()
	itxn_begin
	intc 26 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 16 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 33 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:1031
	// increaseOpcodeBudget()
	itxn_begin
	intc 26 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 16 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 33 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// contracts\BiatecPoolProvider.algo.ts:1032
	// assert(appPoolId === globals.callerApplicationID)
	frame_dig -1 // appPoolId: AppID
	global CallerApplicationID
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:1033
	// assert(s === SCALE)
	frame_dig -10 // s: uint64
	pushint 1000000000
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:1035
	// this.tradeEvent.log({
	//       appPoolId: appPoolId,
	//       assetA: assetA,
	//       assetB: assetB,
	//       priceFrom: priceFrom,
	//       priceTo: priceTo,
	//       amountA: amountA,
	//       amountB: amountB,
	//       feeAmountA: feeAmountA,
	//       feeAmountB: feeAmountB,
	//       s: s,
	//     })
	pushbytes 0xfc97ea3c // tradeEvent(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	frame_dig -1 // appPoolId: AppID
	itob
	frame_dig -2 // assetA: AssetID
	itob
	concat
	frame_dig -3 // assetB: AssetID
	itob
	concat
	frame_dig -4 // priceFrom: uint64
	itob
	concat
	frame_dig -5 // priceTo: uint64
	itob
	concat
	frame_dig -6 // amountA: uint64
	itob
	concat
	frame_dig -7 // amountB: uint64
	itob
	concat
	frame_dig -8 // feeAmountA: uint64
	itob
	concat
	frame_dig -9 // feeAmountB: uint64
	itob
	concat
	frame_dig -10 // s: uint64
	itob
	concat
	concat
	log

	// contracts\BiatecPoolProvider.algo.ts:1048
	// this.updatePriceBoxInfo(appPoolId, assetA, assetB, priceFrom, priceTo, amountA, amountB, feeAmountA, feeAmountB)
	frame_dig -9 // feeAmountB: uint64
	frame_dig -8 // feeAmountA: uint64
	frame_dig -7 // amountB: uint64
	frame_dig -6 // amountA: uint64
	frame_dig -5 // priceTo: uint64
	frame_dig -4 // priceFrom: uint64
	frame_dig -3 // assetB: AssetID
	frame_dig -2 // assetA: AssetID
	frame_dig -1 // appPoolId: AppID
	callsub updatePriceBoxInfo

	// contracts\BiatecPoolProvider.algo.ts:1049
	// this.updatePriceBoxAggregated(assetA, assetB, priceFrom, priceTo, amountA, amountB, feeAmountA, feeAmountB)
	frame_dig -9 // feeAmountB: uint64
	frame_dig -8 // feeAmountA: uint64
	frame_dig -7 // amountB: uint64
	frame_dig -6 // amountA: uint64
	frame_dig -5 // priceTo: uint64
	frame_dig -4 // priceFrom: uint64
	frame_dig -3 // assetB: AssetID
	frame_dig -2 // assetA: AssetID
	callsub updatePriceBoxAggregated
	retsub

// sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void
*abi_route_sendOnlineKeyRegistration:
	// fee: uint64
	txna ApplicationArgs 8
	btoi

	// voteKeyDilution: uint64
	txna ApplicationArgs 7
	btoi

	// voteLast: uint64
	txna ApplicationArgs 6
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 5
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void
	callsub sendOnlineKeyRegistration
	intc 2 // 1
	return

// sendOnlineKeyRegistration(appBiatecConfigProvider: AppID, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64, fee: uint64): void
//
// addressExecutiveFee can perfom key registration for this LP pool
//
// Only addressExecutiveFee is allowed to execute this method.
sendOnlineKeyRegistration:
	proto 8 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts\BiatecPoolProvider.algo.ts:1058
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecPoolProvider.algo.ts:1059
	// addressExecutiveFee = appBiatecConfigProvider.globalState('ef') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 30 //  "ef"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('ef')
	assert
	frame_bury 0 // addressExecutiveFee: address

	// contracts\BiatecPoolProvider.algo.ts:1060
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 2 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:1061
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecPoolProvider.algo.ts:1062
	// assert(this.txn.sender === addressExecutiveFee, 'Only fee executor setup in the config can take the collected fees')
	txn Sender
	frame_dig 0 // addressExecutiveFee: address
	==

	// Only fee executor setup in the config can take the collected fees
	assert

	// contracts\BiatecPoolProvider.algo.ts:1063
	// sendOnlineKeyRegistration({
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteKeyDilution: voteKeyDilution,
	//       voteLast: voteLast,
	//       votePK: votePK,
	//       fee: fee,
	//     })
	itxn_begin
	intc 30 //  keyreg
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:1064
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts\BiatecPoolProvider.algo.ts:1065
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts\BiatecPoolProvider.algo.ts:1066
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts\BiatecPoolProvider.algo.ts:1067
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts\BiatecPoolProvider.algo.ts:1068
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts\BiatecPoolProvider.algo.ts:1069
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts\BiatecPoolProvider.algo.ts:1070
	// fee: fee
	frame_dig -8 // fee: uint64
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// withdrawExcessAssets(uint64,uint64,uint64)uint64
*abi_route_withdrawExcessAssets:
	// The ABI return prefix
	bytec 12 // 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// appBiatecConfigProvider: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdrawExcessAssets(uint64,uint64,uint64)uint64
	callsub withdrawExcessAssets
	itob
	concat
	log
	intc 2 // 1
	return

// withdrawExcessAssets(appBiatecConfigProvider: AppID, asset: AssetID, amount: uint64): uint64
//
// If someone deposits excess assets to this smart contract biatec can use them.
//
// Only addressExecutiveFee is allowed to execute this method.
//
// @param appBiatecConfigProvider Biatec config app. Only addressExecutiveFee is allowed to execute this method.
// @param asset Asset to withdraw. If native token, then zero
// @param amount Amount of the asset to be withdrawn
withdrawExcessAssets:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts\BiatecPoolProvider.algo.ts:1084
	// assert(appBiatecConfigProvider === this.appBiatecConfigProvider.value, 'Configuration app does not match')
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 13 //  "B"
	app_global_get
	==

	// Configuration app does not match
	assert

	// contracts\BiatecPoolProvider.algo.ts:1085
	// addressExecutiveFee = appBiatecConfigProvider.globalState('ef') as Address
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 30 //  "ef"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('ef')
	assert
	frame_bury 0 // addressExecutiveFee: address

	// contracts\BiatecPoolProvider.algo.ts:1086
	// paused = appBiatecConfigProvider.globalState('s') as uint64
	frame_dig -1 // appBiatecConfigProvider: AppID
	bytec 2 //  "s"
	app_global_get_ex

	// global state value does not exist: appBiatecConfigProvider.globalState('s')
	assert
	frame_bury 1 // paused: uint64

	// contracts\BiatecPoolProvider.algo.ts:1087
	// assert(paused === 0, 'ERR_PAUSED')
	frame_dig 1 // paused: uint64
	intc 1 // 0
	==

	// ERR_PAUSED
	assert

	// contracts\BiatecPoolProvider.algo.ts:1088
	// assert(this.txn.sender === addressExecutiveFee, 'Only fee executor setup in the config can take the collected fees')
	txn Sender
	frame_dig 0 // addressExecutiveFee: address
	==

	// Only fee executor setup in the config can take the collected fees
	assert

	// contracts\BiatecPoolProvider.algo.ts:1090
	// this.doAxfer(this.txn.sender, asset, amount)
	frame_dig -3 // amount: uint64
	frame_dig -2 // asset: AssetID
	txn Sender
	callsub doAxfer

	// contracts\BiatecPoolProvider.algo.ts:1092
	// return amount;
	frame_dig -3 // amount: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// doAxfer(receiver: Address, asset: AssetID, amount: uint64): void
//
// Executes xfer of pay payment methods to specified receiver from smart contract aggregated account with specified asset and amount in tokens decimals
// @param receiver Receiver
// @param asset Asset. Zero for algo
// @param amount Amount to transfer
doAxfer:
	proto 3 0

	// *if24_condition
	// contracts\BiatecPoolProvider.algo.ts:1102
	// asset.id === 0
	frame_dig -2 // asset: AssetID
	intc 1 // 0
	==
	bz *if24_else

	// *if24_consequent
	// contracts\BiatecPoolProvider.algo.ts:1103
	// sendPayment({
	//         receiver: receiver,
	//         amount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	intc 2 //  pay
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:1104
	// receiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field Receiver

	// contracts\BiatecPoolProvider.algo.ts:1105
	// amount: amount
	frame_dig -3 // amount: uint64
	itxn_field Amount

	// contracts\BiatecPoolProvider.algo.ts:1106
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if24_end

*if24_else:
	// contracts\BiatecPoolProvider.algo.ts:1109
	// sendAssetTransfer({
	//         assetReceiver: receiver,
	//         xferAsset: asset,
	//         assetAmount: amount,
	//         fee: 0,
	//       })
	itxn_begin
	intc 32 //  axfer
	itxn_field TypeEnum

	// contracts\BiatecPoolProvider.algo.ts:1110
	// assetReceiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field AssetReceiver

	// contracts\BiatecPoolProvider.algo.ts:1111
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\BiatecPoolProvider.algo.ts:1112
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// contracts\BiatecPoolProvider.algo.ts:1113
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if24_end:
	retsub

// getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
*abi_route_getPrice:
	// The ABI return prefix
	bytec 12 // 0x151f7c75

	// appPoolId: uint64
	txna ApplicationArgs 3
	btoi

	// assetB: uint64
	txna ApplicationArgs 2
	btoi

	// assetA: uint64
	txna ApplicationArgs 1
	btoi

	// execute getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	callsub getPrice
	concat
	log
	intc 2 // 1
	return

// getPrice(assetA: AssetID, assetB: AssetID, appPoolId: AppID): AppPoolInfo
//
// Retuns the full price info for the asset pair. If app pool is defined, then it returns the pool info.
// @param assetA Asset A must be less than Asset B
// @param assetB Asset B
// @param appPoolId Liquidity pool app id. If zero, then aggregated price info is returned.
// @returns AppPoolInfo with the price info for the asset pair
getPrice:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// *if25_condition
	// contracts\BiatecPoolProvider.algo.ts:1127
	// appPoolId.id > 0
	frame_dig -3 // appPoolId: AppID
	intc 1 // 0
	>
	bz *if25_end

	// *if25_consequent
	// contracts\BiatecPoolProvider.algo.ts:1129
	// info = this.pools(appPoolId.id).value
	bytec 3 //  "p"
	frame_dig -3 // appPoolId: AppID
	itob
	concat
	frame_bury 0 // storage key//info

	// contracts\BiatecPoolProvider.algo.ts:1130
	// assert(assetA.id === info.assetA)
	frame_dig -1 // assetA: AssetID
	intc 1 // 0
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:1129
	// appPoolId.id
	frame_dig -3 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:1131
	// assert(assetB.id === info.assetB)
	frame_dig -2 // assetB: AssetID
	intc 0 //  headOffset
	intc 0 // 8
	bytec 3 //  "p"

	// contracts\BiatecPoolProvider.algo.ts:1129
	// appPoolId.id
	frame_dig -3 // appPoolId: AppID
	itob
	concat
	cover 2
	box_extract
	btoi
	==
	assert

	// contracts\BiatecPoolProvider.algo.ts:1132
	// return info;
	frame_dig 0 // storage key//info
	box_get

	// box value does not exist: this.pools(appPoolId.id).value
	assert
	b *getPrice*return

*if25_end:
	// contracts\BiatecPoolProvider.algo.ts:1135
	// aggregatedIndex: AssetsCombined = {
	//       assetA: assetA.id,
	//       assetB: assetB.id,
	//     }
	frame_dig -1 // assetA: AssetID
	itob
	frame_dig -2 // assetB: AssetID
	itob
	concat
	frame_bury 1 // aggregatedIndex: AssetsCombined

	// contracts\BiatecPoolProvider.algo.ts:1139
	// assert(this.poolsAggregated(aggregatedIndex).exists, 'The asset pair is not registered')
	bytec 2 //  "s"
	frame_dig 1 // aggregatedIndex: AssetsCombined
	concat
	box_len
	swap
	pop

	// The asset pair is not registered
	assert

	// contracts\BiatecPoolProvider.algo.ts:1140
	// return this.poolsAggregated(aggregatedIndex).value;
	bytec 2 //  "s"
	frame_dig 1 // aggregatedIndex: AssetsCombined
	concat
	box_get

	// box value does not exist: this.poolsAggregated(aggregatedIndex).value
	assert

*getPrice*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256
*abi_route_calculateAssetBWithdrawOnLpDeposit:
	// The ABI return prefix
	bytec 12 // 0x151f7c75

	// liquidity: uint256
	txna ApplicationArgs 3
	dup
	len
	intc 31 // 32
	==

	// argument 0 (liquidity) for calculateAssetBWithdrawOnLpDeposit must be a uint256
	assert

	// assetBBalance: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 31 // 32
	==

	// argument 1 (assetBBalance) for calculateAssetBWithdrawOnLpDeposit must be a uint256
	assert

	// inAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 31 // 32
	==

	// argument 2 (inAmount) for calculateAssetBWithdrawOnLpDeposit must be a uint256
	assert

	// execute calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256
	callsub calculateAssetBWithdrawOnLpDeposit
	dup
	bitlen
	intc 4 // 256
	<=

	// calculateAssetBWithdrawOnLpDeposit return value overflowed 256 bits
	assert
	pushbytes 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 31 // 32
	-
	swap
	substring3
	concat
	log
	intc 2 // 1
	return

// calculateAssetBWithdrawOnLpDeposit(inAmount: uint256, assetBBalance: uint256, liquidity: uint256): uint256
//
// Calculates how much asset B will be taken from the smart contract on LP asset deposit
// @param inAmount LP Asset amount in Base decimal representation..
// @param assetBBalance Asset B balance. Variable ab, in base scale
// @param liquidity Current liquidity. Variable L, in base scale
//
// @returns Amount of asset B to be given to the caller before fees. The result is in Base decimals (9)
calculateAssetBWithdrawOnLpDeposit:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts\BiatecPoolProvider.algo.ts:1156
	// ret = (assetBBalance * inAmount) / liquidity
	frame_dig -2 // assetBBalance: uint256
	frame_dig -1 // inAmount: uint256
	b*
	frame_dig -3 // liquidity: uint256
	b/
	frame_bury 0 // ret: unsafe uint256

	// contracts\BiatecPoolProvider.algo.ts:1157
	// return ret;
	frame_dig 0 // ret: unsafe uint256

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	bytec 21 //  method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa0cadf8a // method "bootstrap(uint64)void"
	pushbytes 0x355746bb // method "getCurrentStatus(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
	pushbytes 0xc4b981d7 // method "loadCLAMMContractData(uint64,uint64,uint64,byte[])void"
	pushbytes 0x1b8ca919 // method "noop(uint64)void"
	pushbytes 0x86bd7af0 // method "deployPool(uint64,uint64,uint64,uint64,pay,uint64,uint64,uint64,uint64,uint64,byte[])uint64"
	pushbytes 0x40540ee6 // method "registerPool()void"
	pushbytes 0xe13e4f5a // method "registerTrade(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void"
	pushbytes 0x67914264 // method "sendOnlineKeyRegistration(uint64,byte[],byte[],byte[],uint64,uint64,uint64,uint64)void"
	pushbytes 0xcba2e95d // method "withdrawExcessAssets(uint64,uint64,uint64)uint64"
	pushbytes 0xf2295c0c // method "getPrice(uint64,uint64,uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
	pushbytes 0x05fc238c // method "calculateAssetBWithdrawOnLpDeposit(uint256,uint256,uint256)uint256"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_getCurrentStatus *abi_route_loadCLAMMContractData *abi_route_noop *abi_route_deployPool *abi_route_registerPool *abi_route_registerTrade *abi_route_sendOnlineKeyRegistration *abi_route_withdrawExcessAssets *abi_route_getPrice *abi_route_calculateAssetBWithdrawOnLpDeposit

	// this contract does not implement the given ABI method for call NoOp
	err

*call_UpdateApplication:
	pushbytes 0x5fc885a0 // method "updateApplication(uint64,byte[])void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err