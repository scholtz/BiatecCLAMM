{
  "name": "BiatecConfigProvider",
  "desc": "",
  "methods": [
    {
      "name": "createApplication",
      "desc": "Initial setup",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [
          "NoOp"
        ],
        "call": []
      }
    },
    {
      "name": "updateApplication",
      "desc": "addressUdpater from global biatec configuration is allowed to update application",
      "args": [
        {
          "name": "newVersion",
          "type": "byte[]"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "UpdateApplication"
        ]
      }
    },
    {
      "name": "bootstrap",
      "desc": "Setup the contract",
      "args": [
        {
          "name": "biatecFee",
          "type": "uint256",
          "desc": "Biatec fees"
        },
        {
          "name": "appBiatecIdentityProvider",
          "type": "uint64"
        },
        {
          "name": "appBiatecPoolProvider",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setAddressUdpater",
      "desc": "Top secret account with which it is possible update contracts or identity provider",
      "args": [
        {
          "name": "a",
          "type": "address",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setPaused",
      "desc": "Kill switch. In the extreme case all services (deposit, trading, withdrawal, identity modifications and more) can be suspended.",
      "args": [
        {
          "name": "a",
          "type": "uint64",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setAddressGov",
      "desc": "Execution address with which it is possible to opt in for governance",
      "args": [
        {
          "name": "a",
          "type": "address",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setAddressExecutive",
      "desc": "Execution address with which it is possible to change global biatec fees",
      "args": [
        {
          "name": "a",
          "type": "address",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setAddressExecutiveFee",
      "desc": "Execution fee address is address which can take fees from pools.",
      "args": [
        {
          "name": "a",
          "type": "address",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setBiatecIdentity",
      "desc": "App identity setter",
      "args": [
        {
          "name": "a",
          "type": "uint64",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setBiatecPool",
      "desc": "App identity setter",
      "args": [
        {
          "name": "a",
          "type": "uint64",
          "desc": "Address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "setBiatecFee",
      "desc": "Fees in 9 decimals. 1_000_000_000 = 100%\nFees in 9 decimals. 10_000_000 = 1%\nFees in 9 decimals. 100_000 = 0,01%\n\n\nFees are respectful from the all fees taken to the LP providers. If LPs charge 1% fee, and biatec charges 10% fee, LP will receive 0.09% fee and biatec 0.01% fee",
      "args": [
        {
          "name": "biatecFee",
          "type": "uint256",
          "desc": "Fee"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "sendOnlineKeyRegistration",
      "desc": "addressExecutiveFee can perfom key registration for this LP pool\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
      "args": [
        {
          "name": "votePK",
          "type": "byte[]"
        },
        {
          "name": "selectionPK",
          "type": "byte[]"
        },
        {
          "name": "stateProofPK",
          "type": "byte[]"
        },
        {
          "name": "voteFirst",
          "type": "uint64"
        },
        {
          "name": "voteLast",
          "type": "uint64"
        },
        {
          "name": "voteKeyDilution",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "withdrawExcessAssets",
      "desc": "If someone deposits excess assets to this smart contract biatec can use them.\n\n\nOnly addressExecutiveFee is allowed to execute this method.",
      "args": [
        {
          "name": "asset",
          "type": "uint64",
          "desc": "Asset to withdraw. If native token, then zero"
        },
        {
          "name": "amount",
          "type": "uint64",
          "desc": "Amount of the asset to be withdrawn"
        }
      ],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    }
  ],
  "arcs": [
    4,
    56
  ],
  "structs": {},
  "state": {
    "schema": {
      "global": {
        "bytes": 6,
        "ints": 3
      },
      "local": {
        "bytes": 0,
        "ints": 0
      }
    },
    "keys": {
      "global": {
        "addressUdpater": {
          "key": "dQ==",
          "keyType": "bytes",
          "valueType": "address"
        },
        "addressGov": {
          "key": "Zw==",
          "keyType": "bytes",
          "valueType": "address"
        },
        "addressExecutive": {
          "key": "ZQ==",
          "keyType": "bytes",
          "valueType": "address"
        },
        "addressExecutiveFee": {
          "key": "ZWY=",
          "keyType": "bytes",
          "valueType": "address"
        },
        "appBiatecIdentityProvider": {
          "key": "aQ==",
          "keyType": "bytes",
          "valueType": "uint64"
        },
        "appBiatecPoolProvider": {
          "key": "cA==",
          "keyType": "bytes",
          "valueType": "uint64"
        },
        "suspended": {
          "key": "cw==",
          "keyType": "bytes",
          "valueType": "uint64"
        },
        "biatecFee": {
          "key": "Zg==",
          "keyType": "bytes",
          "valueType": "uint256"
        },
        "version": {
          "key": "c2N2ZXI=",
          "keyType": "bytes",
          "valueType": "byte[]"
        }
      },
      "local": {},
      "box": {}
    },
    "maps": {
      "global": {},
      "local": {},
      "box": {}
    }
  },
  "bareActions": {
    "create": [],
    "call": []
  },
  "sourceInfo": [
    {
      "teal": 1,
      "source": 6,
      "pc": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96
      ]
    },
    {
      "teal": 13,
      "source": 6,
      "pc": [
        97,
        98
      ]
    },
    {
      "teal": 14,
      "source": 6,
      "pc": [
        99
      ]
    },
    {
      "teal": 15,
      "source": 6,
      "pc": [
        100,
        101
      ]
    },
    {
      "teal": 16,
      "source": 6,
      "pc": [
        102
      ]
    },
    {
      "teal": 17,
      "source": 6,
      "pc": [
        103,
        104
      ]
    },
    {
      "teal": 18,
      "source": 6,
      "pc": [
        105
      ]
    },
    {
      "teal": 19,
      "source": 6,
      "pc": [
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131
      ]
    },
    {
      "teal": 23,
      "source": 6,
      "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "pc": [
        132
      ]
    },
    {
      "teal": 28,
      "source": 60,
      "pc": [
        133,
        134,
        135
      ]
    },
    {
      "teal": 29,
      "source": 60,
      "pc": [
        136
      ]
    },
    {
      "teal": 30,
      "source": 60,
      "pc": [
        137
      ]
    },
    {
      "teal": 36,
      "source": 60,
      "pc": [
        138,
        139,
        140
      ]
    },
    {
      "teal": 40,
      "source": 61,
      "pc": [
        141
      ]
    },
    {
      "teal": 41,
      "source": 61,
      "pc": [
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165
      ]
    },
    {
      "teal": 42,
      "source": 61,
      "pc": [
        166
      ]
    },
    {
      "teal": 46,
      "source": 62,
      "pc": [
        167
      ]
    },
    {
      "teal": 47,
      "source": 62,
      "pc": [
        168,
        169
      ]
    },
    {
      "teal": 48,
      "source": 62,
      "pc": [
        170
      ]
    },
    {
      "teal": 52,
      "source": 63,
      "pc": [
        171,
        172
      ]
    },
    {
      "teal": 53,
      "source": 63,
      "pc": [
        173,
        174
      ]
    },
    {
      "teal": 54,
      "source": 63,
      "pc": [
        175
      ]
    },
    {
      "teal": 58,
      "source": 64,
      "pc": [
        176
      ]
    },
    {
      "teal": 59,
      "source": 64,
      "pc": [
        177,
        178
      ]
    },
    {
      "teal": 60,
      "source": 64,
      "pc": [
        179
      ]
    },
    {
      "teal": 64,
      "source": 65,
      "pc": [
        180
      ]
    },
    {
      "teal": 65,
      "source": 65,
      "pc": [
        181,
        182
      ]
    },
    {
      "teal": 66,
      "source": 65,
      "pc": [
        183
      ]
    },
    {
      "teal": 70,
      "source": 66,
      "pc": [
        184,
        185
      ]
    },
    {
      "teal": 71,
      "source": 66,
      "pc": [
        186
      ]
    },
    {
      "teal": 72,
      "source": 66,
      "pc": [
        187
      ]
    },
    {
      "teal": 73,
      "source": 60,
      "pc": [
        188
      ]
    },
    {
      "teal": 78,
      "source": 72,
      "pc": [
        189,
        190,
        191
      ]
    },
    {
      "teal": 79,
      "source": 72,
      "pc": [
        192,
        193,
        194
      ]
    },
    {
      "teal": 82,
      "source": 72,
      "pc": [
        195,
        196,
        197
      ]
    },
    {
      "teal": 83,
      "source": 72,
      "pc": [
        198
      ]
    },
    {
      "teal": 84,
      "source": 72,
      "pc": [
        199
      ]
    },
    {
      "teal": 90,
      "source": 72,
      "pc": [
        200,
        201,
        202
      ]
    },
    {
      "teal": 97,
      "source": 74,
      "pc": [
        203,
        204
      ]
    },
    {
      "teal": 98,
      "source": 74,
      "pc": [
        205
      ]
    },
    {
      "teal": 99,
      "source": 74,
      "pc": [
        206
      ]
    },
    {
      "teal": 100,
      "source": 74,
      "pc": [
        207
      ]
    },
    {
      "teal": 103,
      "source": 73,
      "errorMessage": "Only addressUdpater setup in the config can update application",
      "pc": [
        208
      ]
    },
    {
      "teal": 107,
      "source": 77,
      "pc": [
        209
      ]
    },
    {
      "teal": 108,
      "source": 77,
      "pc": [
        210,
        211
      ]
    },
    {
      "teal": 109,
      "source": 77,
      "pc": [
        212
      ]
    },
    {
      "teal": 110,
      "source": 72,
      "pc": [
        213
      ]
    },
    {
      "teal": 115,
      "source": 84,
      "pc": [
        214,
        215,
        216
      ]
    },
    {
      "teal": 116,
      "source": 84,
      "pc": [
        217
      ]
    },
    {
      "teal": 119,
      "source": 84,
      "pc": [
        218,
        219,
        220
      ]
    },
    {
      "teal": 120,
      "source": 84,
      "pc": [
        221
      ]
    },
    {
      "teal": 123,
      "source": 84,
      "pc": [
        222,
        223,
        224
      ]
    },
    {
      "teal": 124,
      "source": 84,
      "pc": [
        225
      ]
    },
    {
      "teal": 125,
      "source": 84,
      "pc": [
        226
      ]
    },
    {
      "teal": 126,
      "source": 84,
      "pc": [
        227
      ]
    },
    {
      "teal": 127,
      "source": 84,
      "pc": [
        228
      ]
    },
    {
      "teal": 130,
      "source": 84,
      "errorMessage": "argument 2 (biatecFee) for bootstrap must be a uint256",
      "pc": [
        229
      ]
    },
    {
      "teal": 133,
      "source": 84,
      "pc": [
        230,
        231,
        232
      ]
    },
    {
      "teal": 134,
      "source": 84,
      "pc": [
        233
      ]
    },
    {
      "teal": 135,
      "source": 84,
      "pc": [
        234
      ]
    },
    {
      "teal": 142,
      "source": 84,
      "pc": [
        235,
        236,
        237
      ]
    },
    {
      "teal": 146,
      "source": 85,
      "pc": [
        238,
        239
      ]
    },
    {
      "teal": 147,
      "source": 85,
      "pc": [
        240
      ]
    },
    {
      "teal": 148,
      "source": 85,
      "pc": [
        241
      ]
    },
    {
      "teal": 149,
      "source": 85,
      "pc": [
        242
      ]
    },
    {
      "teal": 152,
      "source": 85,
      "errorMessage": "Only updater can call bootstrap method",
      "pc": [
        243
      ]
    },
    {
      "teal": 156,
      "source": 86,
      "pc": [
        244,
        245
      ]
    },
    {
      "teal": 157,
      "source": 86,
      "pc": [
        246,
        247
      ]
    },
    {
      "teal": 158,
      "source": 86,
      "pc": [
        248,
        249
      ]
    },
    {
      "teal": 159,
      "source": 86,
      "pc": [
        250
      ]
    },
    {
      "teal": 160,
      "source": 86,
      "pc": [
        251
      ]
    },
    {
      "teal": 163,
      "source": 86,
      "errorMessage": "Biatec cannot set fees higher then 50% of lp fees",
      "pc": [
        252
      ]
    },
    {
      "teal": 167,
      "source": 87,
      "pc": [
        253,
        254
      ]
    },
    {
      "teal": 168,
      "source": 87,
      "pc": [
        255,
        256
      ]
    },
    {
      "teal": 169,
      "source": 87,
      "pc": [
        257
      ]
    },
    {
      "teal": 173,
      "source": 88,
      "pc": [
        258,
        259
      ]
    },
    {
      "teal": 174,
      "source": 88,
      "pc": [
        260,
        261
      ]
    },
    {
      "teal": 175,
      "source": 88,
      "pc": [
        262
      ]
    },
    {
      "teal": 179,
      "source": 89,
      "pc": [
        263,
        264
      ]
    },
    {
      "teal": 180,
      "source": 89,
      "pc": [
        265,
        266
      ]
    },
    {
      "teal": 181,
      "source": 89,
      "pc": [
        267
      ]
    },
    {
      "teal": 182,
      "source": 84,
      "pc": [
        268
      ]
    },
    {
      "teal": 187,
      "source": 97,
      "pc": [
        269,
        270,
        271
      ]
    },
    {
      "teal": 188,
      "source": 97,
      "pc": [
        272
      ]
    },
    {
      "teal": 189,
      "source": 97,
      "pc": [
        273
      ]
    },
    {
      "teal": 190,
      "source": 97,
      "pc": [
        274
      ]
    },
    {
      "teal": 191,
      "source": 97,
      "pc": [
        275
      ]
    },
    {
      "teal": 194,
      "source": 97,
      "errorMessage": "argument 0 (a) for setAddressUdpater must be a address",
      "pc": [
        276
      ]
    },
    {
      "teal": 197,
      "source": 97,
      "pc": [
        277,
        278,
        279
      ]
    },
    {
      "teal": 198,
      "source": 97,
      "pc": [
        280
      ]
    },
    {
      "teal": 199,
      "source": 97,
      "pc": [
        281
      ]
    },
    {
      "teal": 207,
      "source": 97,
      "pc": [
        282,
        283,
        284
      ]
    },
    {
      "teal": 211,
      "source": 98,
      "pc": [
        285,
        286
      ]
    },
    {
      "teal": 212,
      "source": 98,
      "pc": [
        287
      ]
    },
    {
      "teal": 213,
      "source": 98,
      "pc": [
        288
      ]
    },
    {
      "teal": 214,
      "source": 98,
      "pc": [
        289
      ]
    },
    {
      "teal": 217,
      "source": 98,
      "errorMessage": "Only updater can change updater address",
      "pc": [
        290
      ]
    },
    {
      "teal": 221,
      "source": 99,
      "pc": [
        291
      ]
    },
    {
      "teal": 222,
      "source": 99,
      "pc": [
        292,
        293
      ]
    },
    {
      "teal": 223,
      "source": 99,
      "pc": [
        294
      ]
    },
    {
      "teal": 224,
      "source": 97,
      "pc": [
        295
      ]
    },
    {
      "teal": 229,
      "source": 107,
      "pc": [
        296,
        297,
        298
      ]
    },
    {
      "teal": 230,
      "source": 107,
      "pc": [
        299
      ]
    },
    {
      "teal": 233,
      "source": 107,
      "pc": [
        300,
        301,
        302
      ]
    },
    {
      "teal": 234,
      "source": 107,
      "pc": [
        303
      ]
    },
    {
      "teal": 235,
      "source": 107,
      "pc": [
        304
      ]
    },
    {
      "teal": 243,
      "source": 107,
      "pc": [
        305,
        306,
        307
      ]
    },
    {
      "teal": 247,
      "source": 108,
      "pc": [
        308,
        309
      ]
    },
    {
      "teal": 248,
      "source": 108,
      "pc": [
        310
      ]
    },
    {
      "teal": 249,
      "source": 108,
      "pc": [
        311
      ]
    },
    {
      "teal": 250,
      "source": 108,
      "pc": [
        312
      ]
    },
    {
      "teal": 253,
      "source": 108,
      "errorMessage": "Only updater can pause and unpause the biatec services",
      "pc": [
        313
      ]
    },
    {
      "teal": 257,
      "source": 109,
      "pc": [
        314,
        315
      ]
    },
    {
      "teal": 258,
      "source": 109,
      "pc": [
        316,
        317
      ]
    },
    {
      "teal": 259,
      "source": 109,
      "pc": [
        318
      ]
    },
    {
      "teal": 260,
      "source": 107,
      "pc": [
        319
      ]
    },
    {
      "teal": 265,
      "source": 117,
      "pc": [
        320,
        321,
        322
      ]
    },
    {
      "teal": 266,
      "source": 117,
      "pc": [
        323
      ]
    },
    {
      "teal": 267,
      "source": 117,
      "pc": [
        324
      ]
    },
    {
      "teal": 268,
      "source": 117,
      "pc": [
        325
      ]
    },
    {
      "teal": 269,
      "source": 117,
      "pc": [
        326
      ]
    },
    {
      "teal": 272,
      "source": 117,
      "errorMessage": "argument 0 (a) for setAddressGov must be a address",
      "pc": [
        327
      ]
    },
    {
      "teal": 275,
      "source": 117,
      "pc": [
        328,
        329,
        330
      ]
    },
    {
      "teal": 276,
      "source": 117,
      "pc": [
        331
      ]
    },
    {
      "teal": 277,
      "source": 117,
      "pc": [
        332
      ]
    },
    {
      "teal": 285,
      "source": 117,
      "pc": [
        333,
        334,
        335
      ]
    },
    {
      "teal": 289,
      "source": 118,
      "pc": [
        336,
        337
      ]
    },
    {
      "teal": 290,
      "source": 118,
      "pc": [
        338
      ]
    },
    {
      "teal": 291,
      "source": 118,
      "pc": [
        339
      ]
    },
    {
      "teal": 292,
      "source": 118,
      "pc": [
        340
      ]
    },
    {
      "teal": 295,
      "source": 118,
      "errorMessage": "Only updater can change gov address",
      "pc": [
        341
      ]
    },
    {
      "teal": 299,
      "source": 119,
      "pc": [
        342,
        343
      ]
    },
    {
      "teal": 300,
      "source": 119,
      "pc": [
        344,
        345
      ]
    },
    {
      "teal": 301,
      "source": 119,
      "pc": [
        346
      ]
    },
    {
      "teal": 302,
      "source": 117,
      "pc": [
        347
      ]
    },
    {
      "teal": 307,
      "source": 127,
      "pc": [
        348,
        349,
        350
      ]
    },
    {
      "teal": 308,
      "source": 127,
      "pc": [
        351
      ]
    },
    {
      "teal": 309,
      "source": 127,
      "pc": [
        352
      ]
    },
    {
      "teal": 310,
      "source": 127,
      "pc": [
        353
      ]
    },
    {
      "teal": 311,
      "source": 127,
      "pc": [
        354
      ]
    },
    {
      "teal": 314,
      "source": 127,
      "errorMessage": "argument 0 (a) for setAddressExecutive must be a address",
      "pc": [
        355
      ]
    },
    {
      "teal": 317,
      "source": 127,
      "pc": [
        356,
        357,
        358
      ]
    },
    {
      "teal": 318,
      "source": 127,
      "pc": [
        359
      ]
    },
    {
      "teal": 319,
      "source": 127,
      "pc": [
        360
      ]
    },
    {
      "teal": 327,
      "source": 127,
      "pc": [
        361,
        362,
        363
      ]
    },
    {
      "teal": 331,
      "source": 128,
      "pc": [
        364,
        365
      ]
    },
    {
      "teal": 332,
      "source": 128,
      "pc": [
        366
      ]
    },
    {
      "teal": 333,
      "source": 128,
      "pc": [
        367
      ]
    },
    {
      "teal": 334,
      "source": 128,
      "pc": [
        368
      ]
    },
    {
      "teal": 337,
      "source": 128,
      "errorMessage": "Only updater can change addressExecutive",
      "pc": [
        369
      ]
    },
    {
      "teal": 341,
      "source": 129,
      "pc": [
        370
      ]
    },
    {
      "teal": 342,
      "source": 129,
      "pc": [
        371,
        372
      ]
    },
    {
      "teal": 343,
      "source": 129,
      "pc": [
        373
      ]
    },
    {
      "teal": 344,
      "source": 127,
      "pc": [
        374
      ]
    },
    {
      "teal": 349,
      "source": 137,
      "pc": [
        375,
        376,
        377
      ]
    },
    {
      "teal": 350,
      "source": 137,
      "pc": [
        378
      ]
    },
    {
      "teal": 351,
      "source": 137,
      "pc": [
        379
      ]
    },
    {
      "teal": 352,
      "source": 137,
      "pc": [
        380
      ]
    },
    {
      "teal": 353,
      "source": 137,
      "pc": [
        381
      ]
    },
    {
      "teal": 356,
      "source": 137,
      "errorMessage": "argument 0 (a) for setAddressExecutiveFee must be a address",
      "pc": [
        382
      ]
    },
    {
      "teal": 359,
      "source": 137,
      "pc": [
        383,
        384,
        385
      ]
    },
    {
      "teal": 360,
      "source": 137,
      "pc": [
        386
      ]
    },
    {
      "teal": 361,
      "source": 137,
      "pc": [
        387
      ]
    },
    {
      "teal": 369,
      "source": 137,
      "pc": [
        388,
        389,
        390
      ]
    },
    {
      "teal": 373,
      "source": 138,
      "pc": [
        391,
        392
      ]
    },
    {
      "teal": 374,
      "source": 138,
      "pc": [
        393
      ]
    },
    {
      "teal": 375,
      "source": 138,
      "pc": [
        394
      ]
    },
    {
      "teal": 376,
      "source": 138,
      "pc": [
        395
      ]
    },
    {
      "teal": 379,
      "source": 138,
      "errorMessage": "Only addressExecutive can change fee executor address",
      "pc": [
        396
      ]
    },
    {
      "teal": 383,
      "source": 139,
      "pc": [
        397
      ]
    },
    {
      "teal": 384,
      "source": 139,
      "pc": [
        398,
        399
      ]
    },
    {
      "teal": 385,
      "source": 139,
      "pc": [
        400
      ]
    },
    {
      "teal": 386,
      "source": 137,
      "pc": [
        401
      ]
    },
    {
      "teal": 391,
      "source": 147,
      "pc": [
        402,
        403,
        404
      ]
    },
    {
      "teal": 392,
      "source": 147,
      "pc": [
        405
      ]
    },
    {
      "teal": 395,
      "source": 147,
      "pc": [
        406,
        407,
        408
      ]
    },
    {
      "teal": 396,
      "source": 147,
      "pc": [
        409
      ]
    },
    {
      "teal": 397,
      "source": 147,
      "pc": [
        410
      ]
    },
    {
      "teal": 405,
      "source": 147,
      "pc": [
        411,
        412,
        413
      ]
    },
    {
      "teal": 409,
      "source": 148,
      "pc": [
        414,
        415
      ]
    },
    {
      "teal": 410,
      "source": 148,
      "pc": [
        416
      ]
    },
    {
      "teal": 411,
      "source": 148,
      "pc": [
        417
      ]
    },
    {
      "teal": 412,
      "source": 148,
      "pc": [
        418
      ]
    },
    {
      "teal": 415,
      "source": 148,
      "errorMessage": "Only updater can change appIdentityProvider",
      "pc": [
        419
      ]
    },
    {
      "teal": 419,
      "source": 149,
      "pc": [
        420,
        421
      ]
    },
    {
      "teal": 420,
      "source": 149,
      "pc": [
        422,
        423
      ]
    },
    {
      "teal": 421,
      "source": 149,
      "pc": [
        424
      ]
    },
    {
      "teal": 422,
      "source": 147,
      "pc": [
        425
      ]
    },
    {
      "teal": 427,
      "source": 157,
      "pc": [
        426,
        427,
        428
      ]
    },
    {
      "teal": 428,
      "source": 157,
      "pc": [
        429
      ]
    },
    {
      "teal": 431,
      "source": 157,
      "pc": [
        430,
        431,
        432
      ]
    },
    {
      "teal": 432,
      "source": 157,
      "pc": [
        433
      ]
    },
    {
      "teal": 433,
      "source": 157,
      "pc": [
        434
      ]
    },
    {
      "teal": 441,
      "source": 157,
      "pc": [
        435,
        436,
        437
      ]
    },
    {
      "teal": 445,
      "source": 158,
      "pc": [
        438,
        439
      ]
    },
    {
      "teal": 446,
      "source": 158,
      "pc": [
        440
      ]
    },
    {
      "teal": 447,
      "source": 158,
      "pc": [
        441
      ]
    },
    {
      "teal": 448,
      "source": 158,
      "pc": [
        442
      ]
    },
    {
      "teal": 451,
      "source": 158,
      "errorMessage": "Only updater can change appPoolProvider",
      "pc": [
        443
      ]
    },
    {
      "teal": 455,
      "source": 159,
      "pc": [
        444,
        445
      ]
    },
    {
      "teal": 456,
      "source": 159,
      "pc": [
        446,
        447
      ]
    },
    {
      "teal": 457,
      "source": 159,
      "pc": [
        448
      ]
    },
    {
      "teal": 458,
      "source": 157,
      "pc": [
        449
      ]
    },
    {
      "teal": 463,
      "source": 171,
      "pc": [
        450,
        451,
        452
      ]
    },
    {
      "teal": 464,
      "source": 171,
      "pc": [
        453
      ]
    },
    {
      "teal": 465,
      "source": 171,
      "pc": [
        454
      ]
    },
    {
      "teal": 466,
      "source": 171,
      "pc": [
        455
      ]
    },
    {
      "teal": 467,
      "source": 171,
      "pc": [
        456
      ]
    },
    {
      "teal": 470,
      "source": 171,
      "errorMessage": "argument 0 (biatecFee) for setBiatecFee must be a uint256",
      "pc": [
        457
      ]
    },
    {
      "teal": 473,
      "source": 171,
      "pc": [
        458,
        459,
        460
      ]
    },
    {
      "teal": 474,
      "source": 171,
      "pc": [
        461
      ]
    },
    {
      "teal": 475,
      "source": 171,
      "pc": [
        462
      ]
    },
    {
      "teal": 487,
      "source": 171,
      "pc": [
        463,
        464,
        465
      ]
    },
    {
      "teal": 491,
      "source": 172,
      "pc": [
        466,
        467
      ]
    },
    {
      "teal": 492,
      "source": 172,
      "pc": [
        468
      ]
    },
    {
      "teal": 493,
      "source": 172,
      "pc": [
        469
      ]
    },
    {
      "teal": 494,
      "source": 172,
      "pc": [
        470
      ]
    },
    {
      "teal": 497,
      "source": 172,
      "errorMessage": "Only executive address can change fees",
      "pc": [
        471
      ]
    },
    {
      "teal": 501,
      "source": 173,
      "pc": [
        472,
        473
      ]
    },
    {
      "teal": 502,
      "source": 173,
      "pc": [
        474,
        475
      ]
    },
    {
      "teal": 503,
      "source": 173,
      "pc": [
        476,
        477
      ]
    },
    {
      "teal": 504,
      "source": 173,
      "pc": [
        478
      ]
    },
    {
      "teal": 505,
      "source": 173,
      "pc": [
        479
      ]
    },
    {
      "teal": 508,
      "source": 173,
      "errorMessage": "Biatec cannot set fees higher then 50% of lp fees",
      "pc": [
        480
      ]
    },
    {
      "teal": 512,
      "source": 174,
      "pc": [
        481,
        482
      ]
    },
    {
      "teal": 513,
      "source": 174,
      "pc": [
        483,
        484
      ]
    },
    {
      "teal": 514,
      "source": 174,
      "pc": [
        485
      ]
    },
    {
      "teal": 515,
      "source": 171,
      "pc": [
        486
      ]
    },
    {
      "teal": 520,
      "source": 188,
      "pc": [
        487,
        488,
        489
      ]
    },
    {
      "teal": 521,
      "source": 188,
      "pc": [
        490
      ]
    },
    {
      "teal": 524,
      "source": 187,
      "pc": [
        491,
        492,
        493
      ]
    },
    {
      "teal": 525,
      "source": 187,
      "pc": [
        494
      ]
    },
    {
      "teal": 528,
      "source": 186,
      "pc": [
        495,
        496,
        497
      ]
    },
    {
      "teal": 529,
      "source": 186,
      "pc": [
        498
      ]
    },
    {
      "teal": 532,
      "source": 185,
      "pc": [
        499,
        500,
        501
      ]
    },
    {
      "teal": 533,
      "source": 185,
      "pc": [
        502,
        503,
        504
      ]
    },
    {
      "teal": 536,
      "source": 184,
      "pc": [
        505,
        506,
        507
      ]
    },
    {
      "teal": 537,
      "source": 184,
      "pc": [
        508,
        509,
        510
      ]
    },
    {
      "teal": 540,
      "source": 183,
      "pc": [
        511,
        512,
        513
      ]
    },
    {
      "teal": 541,
      "source": 183,
      "pc": [
        514,
        515,
        516
      ]
    },
    {
      "teal": 544,
      "source": 182,
      "pc": [
        517,
        518,
        519
      ]
    },
    {
      "teal": 545,
      "source": 182,
      "pc": [
        520
      ]
    },
    {
      "teal": 546,
      "source": 182,
      "pc": [
        521
      ]
    },
    {
      "teal": 554,
      "source": 182,
      "pc": [
        522,
        523,
        524
      ]
    },
    {
      "teal": 561,
      "source": 191,
      "pc": [
        525,
        526
      ]
    },
    {
      "teal": 562,
      "source": 191,
      "pc": [
        527
      ]
    },
    {
      "teal": 563,
      "source": 191,
      "pc": [
        528
      ]
    },
    {
      "teal": 564,
      "source": 191,
      "pc": [
        529
      ]
    },
    {
      "teal": 567,
      "source": 190,
      "errorMessage": "Only fee executor setup in the config can take the collected fees",
      "pc": [
        530
      ]
    },
    {
      "teal": 579,
      "source": 194,
      "pc": [
        531
      ]
    },
    {
      "teal": 580,
      "source": 194,
      "pc": [
        532,
        533
      ]
    },
    {
      "teal": 581,
      "source": 194,
      "pc": [
        534,
        535
      ]
    },
    {
      "teal": 585,
      "source": 195,
      "pc": [
        536,
        537
      ]
    },
    {
      "teal": 586,
      "source": 195,
      "pc": [
        538,
        539
      ]
    },
    {
      "teal": 590,
      "source": 196,
      "pc": [
        540,
        541
      ]
    },
    {
      "teal": 591,
      "source": 196,
      "pc": [
        542,
        543
      ]
    },
    {
      "teal": 595,
      "source": 197,
      "pc": [
        544,
        545
      ]
    },
    {
      "teal": 596,
      "source": 197,
      "pc": [
        546,
        547
      ]
    },
    {
      "teal": 600,
      "source": 198,
      "pc": [
        548,
        549
      ]
    },
    {
      "teal": 601,
      "source": 198,
      "pc": [
        550,
        551
      ]
    },
    {
      "teal": 605,
      "source": 199,
      "pc": [
        552,
        553
      ]
    },
    {
      "teal": 606,
      "source": 199,
      "pc": [
        554,
        555
      ]
    },
    {
      "teal": 610,
      "source": 200,
      "pc": [
        556,
        557
      ]
    },
    {
      "teal": 611,
      "source": 200,
      "pc": [
        558,
        559
      ]
    },
    {
      "teal": 615,
      "source": 201,
      "pc": [
        560
      ]
    },
    {
      "teal": 616,
      "source": 201,
      "pc": [
        561,
        562
      ]
    },
    {
      "teal": 619,
      "source": 194,
      "pc": [
        563
      ]
    },
    {
      "teal": 620,
      "source": 182,
      "pc": [
        564
      ]
    },
    {
      "teal": 625,
      "source": 213,
      "pc": [
        565,
        566,
        567,
        568,
        569,
        570
      ]
    },
    {
      "teal": 628,
      "source": 213,
      "pc": [
        571,
        572,
        573
      ]
    },
    {
      "teal": 629,
      "source": 213,
      "pc": [
        574
      ]
    },
    {
      "teal": 632,
      "source": 213,
      "pc": [
        575,
        576,
        577
      ]
    },
    {
      "teal": 633,
      "source": 213,
      "pc": [
        578
      ]
    },
    {
      "teal": 636,
      "source": 213,
      "pc": [
        579,
        580,
        581
      ]
    },
    {
      "teal": 637,
      "source": 213,
      "pc": [
        582
      ]
    },
    {
      "teal": 638,
      "source": 213,
      "pc": [
        583
      ]
    },
    {
      "teal": 639,
      "source": 213,
      "pc": [
        584
      ]
    },
    {
      "teal": 640,
      "source": 213,
      "pc": [
        585
      ]
    },
    {
      "teal": 641,
      "source": 213,
      "pc": [
        586
      ]
    },
    {
      "teal": 652,
      "source": 213,
      "pc": [
        587,
        588,
        589
      ]
    },
    {
      "teal": 659,
      "source": 215,
      "pc": [
        590,
        591
      ]
    },
    {
      "teal": 660,
      "source": 215,
      "pc": [
        592
      ]
    },
    {
      "teal": 661,
      "source": 215,
      "pc": [
        593
      ]
    },
    {
      "teal": 662,
      "source": 215,
      "pc": [
        594
      ]
    },
    {
      "teal": 665,
      "source": 214,
      "errorMessage": "Only fee executor setup in the config can take the collected fees",
      "pc": [
        595
      ]
    },
    {
      "teal": 669,
      "source": 219,
      "pc": [
        596,
        597
      ]
    },
    {
      "teal": 670,
      "source": 219,
      "pc": [
        598,
        599
      ]
    },
    {
      "teal": 671,
      "source": 219,
      "pc": [
        600,
        601
      ]
    },
    {
      "teal": 672,
      "source": 219,
      "pc": [
        602,
        603,
        604
      ]
    },
    {
      "teal": 676,
      "source": 221,
      "pc": [
        605,
        606
      ]
    },
    {
      "teal": 677,
      "source": 213,
      "pc": [
        607
      ]
    },
    {
      "teal": 686,
      "source": 230,
      "pc": [
        608,
        609,
        610
      ]
    },
    {
      "teal": 691,
      "source": 231,
      "pc": [
        611,
        612
      ]
    },
    {
      "teal": 692,
      "source": 231,
      "pc": [
        613
      ]
    },
    {
      "teal": 693,
      "source": 231,
      "pc": [
        614
      ]
    },
    {
      "teal": 694,
      "source": 231,
      "pc": [
        615,
        616,
        617
      ]
    },
    {
      "teal": 703,
      "source": 232,
      "pc": [
        618
      ]
    },
    {
      "teal": 704,
      "source": 232,
      "pc": [
        619
      ]
    },
    {
      "teal": 705,
      "source": 232,
      "pc": [
        620,
        621
      ]
    },
    {
      "teal": 709,
      "source": 233,
      "pc": [
        622,
        623
      ]
    },
    {
      "teal": 710,
      "source": 233,
      "pc": [
        624,
        625
      ]
    },
    {
      "teal": 714,
      "source": 234,
      "pc": [
        626,
        627
      ]
    },
    {
      "teal": 715,
      "source": 234,
      "pc": [
        628,
        629
      ]
    },
    {
      "teal": 719,
      "source": 235,
      "pc": [
        630
      ]
    },
    {
      "teal": 720,
      "source": 235,
      "pc": [
        631,
        632
      ]
    },
    {
      "teal": 723,
      "source": 232,
      "pc": [
        633
      ]
    },
    {
      "teal": 724,
      "source": 231,
      "pc": [
        634,
        635,
        636
      ]
    },
    {
      "teal": 734,
      "source": 238,
      "pc": [
        637
      ]
    },
    {
      "teal": 735,
      "source": 238,
      "pc": [
        638,
        639
      ]
    },
    {
      "teal": 736,
      "source": 238,
      "pc": [
        640,
        641
      ]
    },
    {
      "teal": 740,
      "source": 239,
      "pc": [
        642,
        643
      ]
    },
    {
      "teal": 741,
      "source": 239,
      "pc": [
        644,
        645
      ]
    },
    {
      "teal": 745,
      "source": 240,
      "pc": [
        646,
        647
      ]
    },
    {
      "teal": 746,
      "source": 240,
      "pc": [
        648,
        649
      ]
    },
    {
      "teal": 750,
      "source": 241,
      "pc": [
        650,
        651
      ]
    },
    {
      "teal": 751,
      "source": 241,
      "pc": [
        652,
        653
      ]
    },
    {
      "teal": 755,
      "source": 242,
      "pc": [
        654
      ]
    },
    {
      "teal": 756,
      "source": 242,
      "pc": [
        655,
        656
      ]
    },
    {
      "teal": 759,
      "source": 238,
      "pc": [
        657
      ]
    },
    {
      "teal": 762,
      "source": 230,
      "pc": [
        658
      ]
    },
    {
      "teal": 765,
      "source": 6,
      "pc": [
        659,
        660,
        661,
        662,
        663,
        664
      ]
    },
    {
      "teal": 766,
      "source": 6,
      "pc": [
        665,
        666,
        667
      ]
    },
    {
      "teal": 767,
      "source": 6,
      "pc": [
        668,
        669,
        670,
        671
      ]
    },
    {
      "teal": 770,
      "source": 6,
      "errorMessage": "this contract does not implement the given ABI method for create NoOp",
      "pc": [
        672
      ]
    },
    {
      "teal": 773,
      "source": 6,
      "pc": [
        673,
        674,
        675,
        676,
        677,
        678
      ]
    },
    {
      "teal": 774,
      "source": 6,
      "pc": [
        679,
        680,
        681,
        682,
        683,
        684
      ]
    },
    {
      "teal": 775,
      "source": 6,
      "pc": [
        685,
        686,
        687,
        688,
        689,
        690
      ]
    },
    {
      "teal": 776,
      "source": 6,
      "pc": [
        691,
        692,
        693,
        694,
        695,
        696
      ]
    },
    {
      "teal": 777,
      "source": 6,
      "pc": [
        697,
        698,
        699,
        700,
        701,
        702
      ]
    },
    {
      "teal": 778,
      "source": 6,
      "pc": [
        703,
        704,
        705,
        706,
        707,
        708
      ]
    },
    {
      "teal": 779,
      "source": 6,
      "pc": [
        709,
        710,
        711,
        712,
        713,
        714
      ]
    },
    {
      "teal": 780,
      "source": 6,
      "pc": [
        715,
        716,
        717,
        718,
        719,
        720
      ]
    },
    {
      "teal": 781,
      "source": 6,
      "pc": [
        721,
        722,
        723,
        724,
        725,
        726
      ]
    },
    {
      "teal": 782,
      "source": 6,
      "pc": [
        727,
        728,
        729,
        730,
        731,
        732
      ]
    },
    {
      "teal": 783,
      "source": 6,
      "pc": [
        733,
        734,
        735,
        736,
        737,
        738
      ]
    },
    {
      "teal": 784,
      "source": 6,
      "pc": [
        739,
        740,
        741
      ]
    },
    {
      "teal": 785,
      "source": 6,
      "pc": [
        742,
        743,
        744,
        745,
        746,
        747,
        748,
        749,
        750,
        751,
        752,
        753,
        754,
        755,
        756,
        757,
        758,
        759,
        760,
        761,
        762,
        763,
        764,
        765
      ]
    },
    {
      "teal": 788,
      "source": 6,
      "errorMessage": "this contract does not implement the given ABI method for call NoOp",
      "pc": [
        766
      ]
    },
    {
      "teal": 791,
      "source": 6,
      "pc": [
        767,
        768,
        769,
        770,
        771,
        772
      ]
    },
    {
      "teal": 792,
      "source": 6,
      "pc": [
        773,
        774,
        775
      ]
    },
    {
      "teal": 793,
      "source": 6,
      "pc": [
        776,
        777,
        778,
        779
      ]
    },
    {
      "teal": 796,
      "source": 6,
      "errorMessage": "this contract does not implement the given ABI method for call UpdateApplication",
      "pc": [
        780
      ]
    }
  ],
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "byteCode": {
    "approval": "CiADASAAJgsBdQFlAmVmBXNjdmVyAWcBcyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO5rKACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgFmAWkBcDEYFIEGCzEZCI0MAh0AAAAAAAACewAAAg8AAAAAAAAAAAAAAIgAAiJDigAAK4AWQklBVEVDLUNPTkZJRy0wMS0wMS0wMWcpMQBnJwQxAGcoMQBnKjEAZycFJGeJNhoBVwIAiAACIkOKAQAxAChkEkQri/9niTYaAxc2GgIXNhoBSRUjEkSIAAIiQ4oDADEAKGQSRIv/JwYnB6KmRCcIi/9nJwmL/mcnCov9Z4k2GgFJFSMSRIgAAiJDigEAMQAoZBJEKIv/Z4k2GgEXiAACIkOKAQAxAChkEkQnBYv/Z4k2GgFJFSMSRIgAAiJDigEAMQAoZBJEJwSL/2eJNhoBSRUjEkSIAAIiQ4oBADEAKGQSRCmL/2eJNhoBSRUjEkSIAAIiQ4oBADEAKWQSRCqL/2eJNhoBF4gAAiJDigEAMQAoZBJEJwmL/2eJNhoBF4gAAiJDigEAMQAoZBJEJwqL/2eJNhoBSRUjEkSIAAIiQ4oBADEAKWQSRIv/JwYnB6KmRCcIi/9niTYaBhc2GgUXNhoEFzYaA1cCADYaAlcCADYaAVcCAIgAAiJDigYAMQAqZBJEsYECshCL/rILi/2yP4v8sgyL+rIOi/uyDYv/sgoksgGziYAEFR98dTYaAhc2GgEXiAAFFlCwIkOKAgExACpkEkSL/ov/MQCIAAOL/omKAwCL/iQSQQATsSKyEIv/sgeL/bIIJLIBs0IAFbGBBLIQi/+yFIv+shGL/bISJLIBs4mABLhEezY2GgCOAf3lAIAESVzn7YAEv8IIYIAEDNwQ/IAEa5VfS4AEixh7PYAEUOB9iIAEur4eEYAExYudpIAEyjRKNIAESfOhf4AEhyg3MDYaAI4L/dj+D/4q/kL+Xv55/pT+rP7E/un/NwCABGk2xi82GgCOAf2xAA==",
    "clear": "Cg=="
  },
  "compilerInfo": {
    "compiler": "algod",
    "compilerVersion": {
      "major": 3,
      "minor": 25,
      "patch": 0,
      "commitHash": "9855f57c"
    }
  }
}